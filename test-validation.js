// Node.jsÁí∞Â¢É„Åß„ÅÆPitchPro„É©„Ç§„Éñ„É©„É™Âü∫Êú¨Ê§úË®º
const fs = require('fs');
const path = require('path');

console.log('üß™ PitchPro Validation Test');
console.log('================================');

// 1. „Éï„Ç°„Ç§„É´Â≠òÂú®„ÉÅ„Çß„ÉÉ„ÇØ
const filesToCheck = [
    'dist-umd/pitchpro.umd.js',
    'demos/audio-basic/index.html',
    'demos/audio-basic/script.js',
    'demos/audio-basic/styles.css',
    'demos/advanced-features-test.html',
    'demos/core-features-test.html',
    'demos/utils-features-test.html'
];

console.log('\nüìÅ File Existence Check:');
filesToCheck.forEach(file => {
    const exists = fs.existsSync(file);
    console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${file}`);
});

// 2. UMD„Éï„Ç°„Ç§„É´Âü∫Êú¨„ÉÅ„Çß„ÉÉ„ÇØ
console.log('\nüì¶ UMD Bundle Check:');
try {
    const umdContent = fs.readFileSync('dist-umd/pitchpro.umd.js', 'utf8');
    
    // Âü∫Êú¨ÁöÑ„Å™ÂÜÖÂÆπ„ÉÅ„Çß„ÉÉ„ÇØ
    const checks = [
        { name: 'PitchPro export', pattern: /PitchPro\s*=/ },
        { name: 'AudioManager class', pattern: /class AudioManager/ },
        { name: 'PitchDetector class', pattern: /class PitchDetector/ },
        { name: 'FrequencyUtils class', pattern: /class FrequencyUtils/ },
        { name: 'MusicTheory class', pattern: /class MusicTheory/ }
    ];
    
    checks.forEach(check => {
        const found = check.pattern.test(umdContent);
        console.log(`  ${found ? '‚úÖ' : '‚ùå'} ${check.name}`);
    });
    
    console.log(`  üìä Bundle size: ${(umdContent.length / 1024).toFixed(1)}KB`);
    
} catch (error) {
    console.log(`  ‚ùå UMD file read error: ${error.message}`);
}

// 3. HTML„Éï„Ç°„Ç§„É´„ÅÆÂü∫Êú¨ÊßãÈÄ†„ÉÅ„Çß„ÉÉ„ÇØ  
console.log('\nüåê HTML Structure Check:');
const htmlFiles = [
    'demos/audio-basic/index.html',
    'demos/advanced-features-test.html', 
    'demos/core-features-test.html',
    'demos/utils-features-test.html'
];

htmlFiles.forEach(file => {
    try {
        const content = fs.readFileSync(file, 'utf8');
        
        const hasScript = content.includes('pitchpro.umd.js');
        const hasTitle = content.includes('<title>');
        const hasBody = content.includes('<body>');
        
        console.log(`  ${file}:`);
        console.log(`    ${hasScript ? '‚úÖ' : '‚ùå'} UMD script reference`);
        console.log(`    ${hasTitle ? '‚úÖ' : '‚ùå'} Title tag`);
        console.log(`    ${hasBody ? '‚úÖ' : '‚ùå'} Body tag`);
        
    } catch (error) {
        console.log(`    ‚ùå Read error: ${error.message}`);
    }
});

// 4. „Çπ„ÇØ„É™„Éó„ÉàÂèÇÁÖß„Éë„Çπ„ÉÅ„Çß„ÉÉ„ÇØ
console.log('\nüîó Script Path Validation:');
htmlFiles.forEach(file => {
    try {
        const content = fs.readFileSync(file, 'utf8');
        const scriptMatches = content.match(/src="([^"]*pitchpro[^"]*\.js)"/g);
        
        if (scriptMatches) {
            scriptMatches.forEach(match => {
                const pathMatch = match.match(/src="([^"]*)"/);
                if (pathMatch) {
                    const relativePath = pathMatch[1];
                    const fullPath = path.resolve(path.dirname(file), relativePath);
                    const exists = fs.existsSync(fullPath);
                    console.log(`  ${file}: ${exists ? '‚úÖ' : '‚ùå'} ${relativePath}`);
                }
            });
        }
    } catch (error) {
        console.log(`  ‚ùå ${file}: ${error.message}`);
    }
});

console.log('\nüèÅ Validation Complete');
console.log('\nüí° Next Steps:');
console.log('1. Open demos/quick-test.html in browser to test library loading');
console.log('2. Test demos/audio-basic/index.html with microphone permission');
console.log('3. Verify all interactive features in test pages');