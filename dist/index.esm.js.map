{"version":3,"file":"index.esm.js","sources":["../src/utils/DeviceDetection.ts","../src/utils/errors.ts","../src/core/AudioManager.ts","../node_modules/fft.js/lib/fft.js","../node_modules/pitchy/index.js","../src/utils/performance-optimized.ts","../src/core/PitchDetector.ts","../src/core/NoiseFilter.ts","../src/utils/Logger.ts","../src/core/MicrophoneLifecycleManager.ts","../src/core/ErrorNotificationSystem.ts","../src/core/MicrophoneController.ts","../src/utils/FrequencyUtils.ts","../src/components/AudioDetectionComponent.ts","../src/advanced/HarmonicCorrection.ts","../src/types/index.ts","../src/advanced/VoiceAnalyzer.ts","../src/advanced/CalibrationSystem.ts","../src/utils/MusicTheory.ts","../src/index.ts"],"sourcesContent":["/**\n * DeviceDetection - Cross-platform device detection and optimization\n * \n * Detects device types, capabilities, and provides optimized settings\n * Handles iPadOS 13+ detection issues and provides device-specific configurations\n */\n\nimport type { DeviceSpecs } from '../types';\n\nexport class DeviceDetection {\n  private static cachedSpecs: DeviceSpecs | null = null;\n\n  /**\n   * Detect current device and return optimized specifications\n   */\n  static getDeviceSpecs(): DeviceSpecs {\n    // Return cached result if available\n    if (DeviceDetection.cachedSpecs) {\n      return DeviceDetection.cachedSpecs;\n    }\n\n    // SSR compatibility\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return DeviceDetection.getDefaultSpecs();\n    }\n\n    const userAgent = navigator.userAgent;\n    const deviceSpecs = DeviceDetection.analyzeUserAgent(userAgent);\n    \n    // Cache the result\n    DeviceDetection.cachedSpecs = deviceSpecs;\n    \n    console.log('📱 [DeviceDetection] Device analysis:', {\n      userAgent: userAgent.substring(0, 100) + '...',\n      deviceType: deviceSpecs.deviceType,\n      isIOS: deviceSpecs.isIOS,\n      sensitivity: deviceSpecs.sensitivity,\n      divisor: deviceSpecs.divisor\n    });\n\n    return deviceSpecs;\n  }\n\n  /**\n   * Analyze user agent string and determine device specifications\n   */\n  private static analyzeUserAgent(userAgent: string): DeviceSpecs {\n    // iOS device detection (including iPadOS 13+ workaround)\n    const isIPhone = /iPhone/.test(userAgent);\n    const isIPad = /iPad/.test(userAgent);\n    \n    // iPadOS 13+ reports as \"Macintosh\" but has touch support\n    const isIPadOS = /Macintosh/.test(userAgent) && 'ontouchend' in document;\n    \n    // Additional iOS detection methods\n    const hasIOSNavigator = /iPad|iPhone|iPod/.test(userAgent);\n    const hasIOSPlatform = /iPad|iPhone|iPod/.test((navigator as any).platform || '');\n    \n    // Combined iOS detection\n    const isIOS = isIPhone || isIPad || isIPadOS || hasIOSNavigator || hasIOSPlatform;\n    \n    // More specific device type detection\n    let deviceType: 'iPhone' | 'iPad' | 'PC' = 'PC';\n    \n    if (isIPhone) {\n      deviceType = 'iPhone';\n    } else if (isIPad || isIPadOS) {\n      deviceType = 'iPad';\n    } else if (isIOS) {\n      // Fallback iOS device - could be iPhone or iPad\n      deviceType = DeviceDetection.detectIOSDeviceType();\n    }\n\n    // Get device-specific optimizations\n    const optimizations = DeviceDetection.getDeviceOptimizations(deviceType, isIOS);\n\n    return {\n      deviceType,\n      isIOS,\n      sensitivity: optimizations.sensitivity,\n      noiseGate: optimizations.noiseGate,\n      divisor: optimizations.divisor,\n      gainCompensation: optimizations.gainCompensation,\n      noiseThreshold: optimizations.noiseThreshold,\n      smoothingFactor: optimizations.smoothingFactor\n    };\n  }\n\n  /**\n   * Detect iOS device type when specific detection fails\n   */\n  private static detectIOSDeviceType(): 'iPhone' | 'iPad' {\n    // Use screen size as a heuristic\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const maxDimension = Math.max(screenWidth, screenHeight);\n    const minDimension = Math.min(screenWidth, screenHeight);\n    \n    // iPad generally has larger screens\n    // iPhone 6 Plus and newer have screens around 414x736 or similar\n    // iPad screens are typically 768+ in at least one dimension\n    if (maxDimension >= 768 || (maxDimension >= 700 && minDimension >= 500)) {\n      return 'iPad';\n    }\n    \n    return 'iPhone';\n  }\n\n  /**\n   * Get device-specific optimization parameters\n   */\n  private static getDeviceOptimizations(deviceType: 'iPhone' | 'iPad' | 'PC', _isIOS: boolean) {\n    switch (deviceType) {\n      case 'iPad':\n        return {\n          sensitivity: 5.0,        // 📱 テスト導出最適値: マイク感度 5.0x\n          noiseGate: 0.015,        // 📱 テスト導出最適値: 音量閾値 1.5% (0.015)\n          divisor: 4.0,            // Volume calculation divisor\n          gainCompensation: 1.5,   // Gain compensation for low-frequency cut\n          noiseThreshold: 8.0,     // v1.1.8: Increased noise threshold to prevent ambient noise pickup\n          smoothingFactor: 0.3     // v1.1.8: Increased smoothing to reduce noise fluctuations\n        };\n        \n      case 'iPhone':\n        return {\n          sensitivity: 3.5,        // 📱 テスト導出最適値: マイク感度 3.5x\n          noiseGate: 0.015,        // 📱 テスト導出最適値: 音量閾値 1.5% (0.015)\n          divisor: 4.0,            // Keep original divisor  \n          gainCompensation: 1.5,   // Keep original gain compensation\n          noiseThreshold: 6.0,     // v1.1.8: Increased noise threshold for better noise rejection\n          smoothingFactor: 0.25    // v1.1.8: Increased smoothing to reduce noise spikes\n        };\n        \n      case 'PC':\n      default:\n        return {\n          sensitivity: 1.8,        // 📊 v1.2.9確定値に復元 (SCALING_FACTOR=123.46)\n          noiseGate: 0.035,        // v1.1.8: Increased noise gate for better ambient noise filtering\n          divisor: 6.0,            // Different volume calculation for PC\n          gainCompensation: 1.0,   // No additional gain compensation needed\n          noiseThreshold: 7.0,     // v1.1.8: Increased noise threshold for cleaner detection\n          smoothingFactor: 0.25    // v1.1.8: Increased smoothing for more stable readings\n        };\n    }\n  }\n\n  /**\n   * Get default specifications for SSR or fallback\n   */\n  private static getDefaultSpecs(): DeviceSpecs {\n    return {\n      deviceType: 'PC',\n      isIOS: false,\n      sensitivity: 1.8,        // Updated to match optimized PC value\n      noiseGate: 0.035,        // v1.1.8: Improved default noise gate\n      divisor: 6.0,\n      gainCompensation: 1.0,\n      noiseThreshold: 7.0,     // v1.1.8: Improved default noise threshold\n      smoothingFactor: 0.25    // v1.1.8: Improved default smoothing\n    };\n  }\n\n  /**\n   * Check if device supports Web Audio API\n   */\n  static supportsWebAudio(): boolean {\n    return typeof window !== 'undefined' && \n           (typeof window.AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined');\n  }\n\n  /**\n   * Check if device supports MediaDevices API\n   */\n  static supportsMediaDevices(): boolean {\n    return typeof navigator !== 'undefined' && \n           typeof navigator.mediaDevices !== 'undefined' && \n           typeof navigator.mediaDevices.getUserMedia !== 'undefined';\n  }\n\n  /**\n   * Check if device supports MediaRecorder API\n   */\n  static supportsMediaRecorder(): boolean {\n    return typeof window !== 'undefined' && typeof (window as any).MediaRecorder !== 'undefined';\n  }\n\n  /**\n   * Get comprehensive device capabilities\n   */\n  static getDeviceCapabilities() {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    return {\n      deviceSpecs: specs,\n      webAudioSupport: DeviceDetection.supportsWebAudio(),\n      mediaDevicesSupport: DeviceDetection.supportsMediaDevices(),\n      mediaRecorderSupport: DeviceDetection.supportsMediaRecorder(),\n      touchSupport: 'ontouchend' in document,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Unknown',\n      screenSize: typeof window !== 'undefined' ? {\n        width: window.screen.width,\n        height: window.screen.height,\n        pixelRatio: window.devicePixelRatio\n      } : null,\n      language: typeof navigator !== 'undefined' ? navigator.language : 'Unknown',\n      platform: typeof navigator !== 'undefined' ? (navigator as any).platform || 'Unknown' : 'Unknown'\n    };\n  }\n\n  /**\n   * Check if current device is mobile\n   */\n  static isMobile(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    return specs.isIOS || /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator?.userAgent || '');\n  }\n\n  /**\n   * Check if current device is tablet\n   */\n  static isTablet(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    if (specs.deviceType === 'iPad') return true;\n    \n    // Android tablet detection\n    const userAgent = navigator?.userAgent || '';\n    return /Android/i.test(userAgent) && !/Mobile/i.test(userAgent);\n  }\n\n  /**\n   * Check if current device is desktop\n   */\n  static isDesktop(): boolean {\n    return !DeviceDetection.isMobile() && !DeviceDetection.isTablet();\n  }\n\n  /**\n   * Get recommended audio constraints for current device\n   */\n  static getOptimalAudioConstraints(): MediaStreamConstraints {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    const baseConstraints: MediaStreamConstraints = {\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        autoGainControl: false,\n        sampleRate: 44100,\n        channelCount: 1,\n        sampleSize: 16,\n        // latency: 0.1, // Not supported in MediaTrackConstraints\n        // volume: 1.0, // Not supported in MediaTrackConstraints\n        deviceId: { ideal: 'default' }\n      }\n    };\n\n    // Add iOS-specific optimizations\n    if (specs.isIOS && baseConstraints.audio && typeof baseConstraints.audio === 'object') {\n      (baseConstraints.audio as any) = {\n        ...baseConstraints.audio,\n        // Disable all browser-level processing for iOS\n        googAutoGainControl: false,\n        googNoiseSuppression: false,\n        googEchoCancellation: false,\n        googHighpassFilter: false,\n        googTypingNoiseDetection: false,\n        googBeamforming: false,\n        mozAutoGainControl: false,\n        mozNoiseSuppression: false\n      };\n    }\n\n    return baseConstraints;\n  }\n\n  /**\n   * Clear cached device specifications (for testing)\n   */\n  static clearCache(): void {\n    DeviceDetection.cachedSpecs = null;\n  }\n\n  /**\n   * Get device-specific debugging information\n   */\n  static getDebugInfo() {\n    const capabilities = DeviceDetection.getDeviceCapabilities();\n    \n    return {\n      ...capabilities,\n      detectionMethods: {\n        userAgentIPhone: /iPhone/.test(navigator?.userAgent || ''),\n        userAgentIPad: /iPad/.test(navigator?.userAgent || ''),\n        userAgentMacintosh: /Macintosh/.test(navigator?.userAgent || ''),\n        touchSupport: 'ontouchend' in document,\n        navigatorPlatform: (navigator as any)?.platform || 'Unknown',\n        screenAspectRatio: typeof window !== 'undefined' ? \n          (window.screen.width / window.screen.height).toFixed(2) : 'Unknown'\n      }\n    };\n  }\n}","export enum ErrorCode {\n  AUDIO_CONTEXT_ERROR = 'AUDIO_CONTEXT_ERROR',\n  MICROPHONE_ACCESS_DENIED = 'MICROPHONE_ACCESS_DENIED',\n  PITCH_DETECTION_ERROR = 'PITCH_DETECTION_ERROR',\n  BUFFER_OVERFLOW = 'BUFFER_OVERFLOW',\n  INVALID_SAMPLE_RATE = 'INVALID_SAMPLE_RATE',\n  DEVICE_NOT_SUPPORTED = 'DEVICE_NOT_SUPPORTED',\n  PROCESSING_TIMEOUT = 'PROCESSING_TIMEOUT'\n}\n\nexport class PitchProError extends Error {\n  public readonly code: ErrorCode;\n  public readonly timestamp: Date;\n  public readonly context?: Record<string, any>;\n\n  constructor(\n    message: string,\n    code: ErrorCode,\n    context?: Record<string, any>\n  ) {\n    super(message);\n    this.name = 'PitchProError';\n    this.code = code;\n    this.timestamp = new Date();\n    this.context = context;\n    \n    // Maintain proper stack trace for where our error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, PitchProError);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      timestamp: this.timestamp,\n      context: this.context,\n      stack: this.stack\n    };\n  }\n}\n\nexport class AudioContextError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.AUDIO_CONTEXT_ERROR, context);\n    this.name = 'AudioContextError';\n  }\n}\n\nexport class MicrophoneAccessError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.MICROPHONE_ACCESS_DENIED, context);\n    this.name = 'MicrophoneAccessError';\n  }\n}\n\nexport class MicrophoneHealthError extends PitchProError {\n  constructor(\n    message: string, \n    healthStatus: any, \n    recoveryAttempts: number,\n    context?: Record<string, any>\n  ) {\n    super(\n      message, \n      ErrorCode.MICROPHONE_ACCESS_DENIED, \n      { \n        healthStatus, \n        recoveryAttempts,\n        timestamp: Date.now(),\n        ...context \n      }\n    );\n    this.name = 'MicrophoneHealthError';\n  }\n\n  getHealthStatus() {\n    return this.context?.healthStatus;\n  }\n\n  getRecoveryAttempts() {\n    return this.context?.recoveryAttempts;\n  }\n}\n\nexport class PitchDetectionError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.PITCH_DETECTION_ERROR, context);\n    this.name = 'PitchDetectionError';\n  }\n}\n\nexport function handleError(error: unknown): PitchProError {\n  if (error instanceof PitchProError) {\n    return error;\n  }\n  \n  if (error instanceof Error) {\n    return new PitchProError(\n      error.message,\n      ErrorCode.PITCH_DETECTION_ERROR,\n      { originalError: error.name }\n    );\n  }\n  \n  return new PitchProError(\n    'An unknown error occurred',\n    ErrorCode.PITCH_DETECTION_ERROR,\n    { error: String(error) }\n  );\n}\n\nexport function isRecoverableError(error: PitchProError): boolean {\n  const recoverableErrors = [\n    ErrorCode.BUFFER_OVERFLOW,\n    ErrorCode.PROCESSING_TIMEOUT,\n    ErrorCode.PITCH_DETECTION_ERROR\n  ];\n  \n  return recoverableErrors.includes(error.code);\n}\n\n/**\n * User-friendly error message generator for different error types\n * \n * @description Converts technical error messages into user-friendly Japanese messages\n * with actionable guidance for resolution.\n */\nexport class ErrorMessageBuilder {\n  /**\n   * Generates user-friendly error messages with resolution steps\n   * \n   * @param error - PitchProError instance\n   * @returns Object containing user message and suggested actions\n   */\n  static getUserFriendlyMessage(error: PitchProError): {\n    title: string;\n    message: string;\n    actions: string[];\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    canRetry: boolean;\n  } {\n    switch (error.code) {\n      case ErrorCode.MICROPHONE_ACCESS_DENIED:\n        return {\n          title: 'マイクアクセスが拒否されました',\n          message: 'ピッチ検出を行うには、マイクへのアクセス許可が必要です。',\n          actions: [\n            'ブラウザのアドレスバーにあるマイクアイコンをクリック',\n            '「このサイトでマイクを許可する」を選択',\n            'ページを再読み込みしてもう一度試す',\n            'プライベートブラウジングモードを無効にする（Safariの場合）'\n          ],\n          severity: 'high',\n          canRetry: true\n        };\n\n      case ErrorCode.AUDIO_CONTEXT_ERROR:\n        return {\n          title: 'オーディオシステムエラー',\n          message: 'オーディオの初期化に失敗しました。デバイスの音響設定を確認してください。',\n          actions: [\n            '他のアプリケーションでマイクが使用中でないか確認',\n            'ブラウザを再起動してもう一度試す',\n            'システムの音響設定でマイクが有効になっているか確認',\n            '外部マイクを使用している場合は接続を確認'\n          ],\n          severity: 'high',\n          canRetry: true\n        };\n\n      case ErrorCode.PITCH_DETECTION_ERROR:\n        return {\n          title: 'ピッチ検出エラー',\n          message: '音程の検出中に一時的な問題が発生しました。',\n          actions: [\n            'マイクに向かって明確に歌ってみる',\n            '周囲のノイズを減らす',\n            '感度設定を調整する',\n            '数秒待ってからもう一度試す'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.BUFFER_OVERFLOW:\n        return {\n          title: 'バッファオーバーフロー',\n          message: 'オーディオデータの処理が追いついていません。',\n          actions: [\n            '他のタブやアプリケーションを閉じる',\n            'ブラウザのハードウェアアクセラレーションを有効にする',\n            'より高性能なデバイスを使用する',\n            'ページを再読み込みする'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.PROCESSING_TIMEOUT:\n        return {\n          title: '処理タイムアウト',\n          message: 'オーディオ処理の応答時間が長すぎます。',\n          actions: [\n            'デバイスの負荷を減らす（他のアプリを閉じる）',\n            'ネットワーク接続を確認する',\n            'ブラウザを再起動する',\n            'しばらく待ってからもう一度試す'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.INVALID_SAMPLE_RATE:\n        return {\n          title: 'サンプリングレート不適合',\n          message: 'お使いのデバイスのサンプリングレートがサポートされていません。',\n          actions: [\n            'システムの音響設定で44.1kHz または 48kHzに設定',\n            '外部オーディオインターフェースの設定を確認',\n            'デバイスドライバを更新',\n            '別のマイクを試す'\n          ],\n          severity: 'high',\n          canRetry: false\n        };\n\n      case ErrorCode.DEVICE_NOT_SUPPORTED:\n        return {\n          title: 'デバイス非対応',\n          message: 'お使いのデバイスまたはブラウザはサポートされていません。',\n          actions: [\n            'Chrome、Firefox、Safari の最新版を使用',\n            'より新しいデバイスを使用',\n            'ブラウザの互換性情報を確認',\n            '技術サポートにお問い合わせ'\n          ],\n          severity: 'critical',\n          canRetry: false\n        };\n\n      default:\n        return {\n          title: '予期しないエラー',\n          message: 'システムで予期しない問題が発生しました。',\n          actions: [\n            'ページを再読み込み',\n            'ブラウザを再起動',\n            'しばらく時間をおいて再試行',\n            '問題が続く場合はサポートへ連絡'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n    }\n  }\n\n  /**\n   * Generates detailed technical error information for developers\n   * \n   * @param error - PitchProError instance\n   * @returns Formatted technical error details\n   */\n  static getTechnicalDetails(error: PitchProError): {\n    errorCode: string;\n    timestamp: string;\n    context: Record<string, any>;\n    stackTrace?: string;\n    diagnosticInfo: Record<string, any>;\n  } {\n    return {\n      errorCode: error.code,\n      timestamp: error.timestamp.toISOString(),\n      context: error.context || {},\n      stackTrace: error.stack,\n      diagnosticInfo: {\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n        timestamp: Date.now(),\n        url: typeof window !== 'undefined' ? window.location.href : 'unknown',\n        isRecoverable: isRecoverableError(error)\n      }\n    };\n  }\n\n  /**\n   * Creates formatted console error messages for development\n   * \n   * @param error - PitchProError instance\n   * @param context - Additional context information\n   */\n  static logError(error: PitchProError, context?: string): void {\n    const friendlyMessage = this.getUserFriendlyMessage(error);\n    const technicalDetails = this.getTechnicalDetails(error);\n\n    console.group(`🚨 [PitchPro Error] ${friendlyMessage.title}`);\n    \n    // User-friendly information\n    console.log('👤 User Message:', friendlyMessage.message);\n    console.log('📋 Suggested Actions:', friendlyMessage.actions);\n    console.log('⚠️ Severity:', friendlyMessage.severity);\n    console.log('🔄 Can Retry:', friendlyMessage.canRetry);\n    \n    // Technical details\n    console.log('🔧 Error Code:', technicalDetails.errorCode);\n    console.log('⏰ Timestamp:', technicalDetails.timestamp);\n    \n    if (context) {\n      console.log('📍 Context:', context);\n    }\n    \n    if (technicalDetails.context && Object.keys(technicalDetails.context).length > 0) {\n      console.log('🔍 Additional Context:', technicalDetails.context);\n    }\n    \n    if (technicalDetails.stackTrace) {\n      console.log('📜 Stack Trace:', technicalDetails.stackTrace);\n    }\n    \n    console.groupEnd();\n  }\n\n  /**\n   * Creates recovery suggestions based on error type and context\n   * \n   * @param error - PitchProError instance\n   * @param deviceType - Device type for specific recommendations\n   * @returns Recovery strategy object\n   */\n  static getRecoveryStrategy(error: PitchProError, deviceType?: string): {\n    immediate: string[];\n    fallback: string[];\n    preventive: string[];\n  } {\n    const base = this.getUserFriendlyMessage(error);\n    \n    const immediate = base.actions.slice(0, 2);\n    const fallback = base.actions.slice(2);\n    \n    // Device-specific preventive measures\n    let preventive: string[] = [];\n    \n    if (deviceType === 'iPhone' || deviceType === 'iPad') {\n      preventive = [\n        '感度を高めに設定（7.0x推奨）',\n        'Safari使用を推奨',\n        'iOS 14以上で使用',\n        '低電力モードを無効にする'\n      ];\n    } else if (deviceType === 'Android') {\n      preventive = [\n        'Chrome使用を推奨',\n        'バックグラウンドアプリを制限',\n        '省電力モードを無効にする',\n        'マイク権限を常に許可に設定'\n      ];\n    } else {\n      preventive = [\n        '安定したネットワーク環境で使用',\n        'ブラウザを最新版に更新',\n        'ハードウェアアクセラレーションを有効化',\n        '外部ノイズの少ない環境で使用'\n      ];\n    }\n    \n    return {\n      immediate,\n      fallback,\n      preventive\n    };\n  }\n}","/**\n * AudioManager - Framework-agnostic Global Audio Resource Management System\n * \n * @description Provides centralized management of Web Audio API resources with automatic\n * device optimization, reference counting, and health monitoring. Solves common issues\n * with AudioContext sharing and MediaStream lifecycle management.\n * \n * @example\n * ```typescript\n * const audioManager = new AudioManager({\n *   sampleRate: 44100,\n *   echoCancellation: false,\n *   autoGainControl: false\n * });\n * \n * const resources = await audioManager.initialize();\n * const analyser = audioManager.createAnalyser('pitch-detection');\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { \n  AudioManagerConfig, \n  MediaStreamResources, \n  HealthStatus, \n  TrackState,\n  DeviceSpecs\n} from '../types';\nimport { DeviceDetection } from '../utils/DeviceDetection';\nimport { \n  AudioContextError, \n  MicrophoneAccessError, \n  PitchProError, \n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class AudioManager {\n  /** @private Global AudioContext instance shared across the application */\n  private audioContext: AudioContext | null = null;\n  \n  /** @private MediaStream from user's microphone */\n  private mediaStream: MediaStream | null = null;\n  \n  /** @private Source node for audio processing pipeline */\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  \n  /** @private Gain node for microphone sensitivity adjustment */\n  private gainNode: GainNode | null = null;\n  \n  /** @private Map of analyser nodes by identifier for reuse */\n  private analysers = new Map<string, AnalyserNode>();\n  \n  /** @private Map of filter chains for noise reduction */\n  private filters = new Map<string, { highpass: BiquadFilterNode; lowpass: BiquadFilterNode; notch: BiquadFilterNode }>();\n  \n  /** @private Reference count for safe resource sharing */\n  private refCount = 0;\n  \n  /** @private Promise to prevent duplicate initialization */\n  private initPromise: Promise<MediaStreamResources> | null = null;\n  \n  /** @private Initialization state flag */\n  private isInitialized = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Current microphone sensitivity multiplier */\n  private currentSensitivity: number;\n  \n  /** @private Interval ID for gain monitoring (hotfix v1.1.3) */\n  private gainMonitorInterval: number | null = null;\n  \n  /** @private Microphone mute state flag */\n  private isMuted = false;\n  \n  /** @private AudioManager configuration */\n  private config: AudioManagerConfig;\n\n  /**\n   * Creates a new AudioManager instance with device-optimized configuration\n   * \n   * @param config - Optional configuration to override defaults\n   * @param config.sampleRate - Audio sample rate in Hz (default: 44100)\n   * @param config.channelCount - Number of audio channels (default: 1)\n   * @param config.echoCancellation - Enable echo cancellation (default: false)\n   * @param config.noiseSuppression - Enable noise suppression (default: false)\n   * @param config.autoGainControl - Enable auto gain control (default: false)\n   * @param config.latency - Target latency in seconds (default: 0.1)\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with defaults\n   * const audioManager = new AudioManager();\n   * \n   * // Custom configuration\n   * const audioManager = new AudioManager({\n   *   sampleRate: 48000,\n   *   echoCancellation: true,\n   *   latency: 0.05\n   * });\n   * ```\n   */\n  constructor(config: AudioManagerConfig = {}) {\n    // DIAGNOSTIC: Track configuration flow\n    console.log('🔍 [DIAGNOSTIC] AudioManager constructor - input config:', config);\n    \n    this.config = {\n      sampleRate: 44100,\n      channelCount: 1,\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      latency: 0.1,\n      ...config\n    };\n    \n    // DIAGNOSTIC: Verify final configuration\n    console.log('🔍 [DIAGNOSTIC] AudioManager constructor - final config:', this.config);\n    console.log('🔍 [DIAGNOSTIC] autoGainControl value after merge:', this.config.autoGainControl);\n    \n    this.currentSensitivity = this._getDefaultSensitivity();\n  }\n\n  /**\n   * Gets device-specific default sensitivity multiplier\n   * \n   * @private\n   * @returns Device-optimized sensitivity value (PC: 1.0x, iPhone: 3.0x, iPad: 7.0x)\n   */\n  private _getDefaultSensitivity(): number {\n    const deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    console.log(`🔧 [AudioManager] ${deviceSpecs.deviceType} detected - setting default sensitivity ${deviceSpecs.sensitivity}x`);\n    return deviceSpecs.sensitivity;\n  }\n\n  /**\n   * Initializes audio resources including AudioContext and MediaStream\n   * \n   * @description Safe to call multiple times - uses reference counting and health checks.\n   * Automatically handles browser-specific quirks and device optimization.\n   * \n   * @returns Promise resolving to audio resources\n   * @throws {Error} If microphone permission is denied or AudioContext creation fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   const { audioContext, mediaStream, sourceNode } = await audioManager.initialize();\n   *   console.log('Audio initialized:', audioContext.state);\n   * } catch (error) {\n   *   console.error('Failed to initialize audio:', error.message);\n   * }\n   * ```\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    // If already initializing, wait for completion\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // If already initialized - perform MediaStream health check\n    if (this.isInitialized && this.audioContext && this.mediaStream) {\n      const healthCheck = this.checkMediaStreamHealth();\n      \n      if (healthCheck.healthy) {\n        this.refCount++;\n        return {\n          audioContext: this.audioContext,\n          mediaStream: this.mediaStream,\n          sourceNode: this.sourceNode!\n        };\n      } else {\n        // Force re-initialization if MediaStream is unhealthy\n        console.warn('⚠️ [AudioManager] Unhealthy MediaStream detected - force re-initialization:', healthCheck);\n        console.log('🔄 [AudioManager] Unhealthy MediaStream details:', {\n          mediaStreamActive: this.mediaStream?.active,\n          trackCount: this.mediaStream?.getTracks().length,\n          trackStates: this.mediaStream?.getTracks().map(t => ({\n            kind: t.kind,\n            readyState: t.readyState,\n            enabled: t.enabled,\n            muted: t.muted\n          }))\n        });\n        \n        // Perform safe cleanup\n        this._cleanup();\n        this.isInitialized = false;\n        this.refCount = 0;\n        \n        // Short wait to ensure resource release\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        console.log('🔄 [AudioManager] Cleanup complete - starting re-initialization');\n        // Continue to next block for re-initialization\n      }\n    }\n\n    // Execute initialization\n    this.initPromise = this._doInitialize();\n    \n    try {\n      const result = await this.initPromise;\n      this.initPromise = null;\n      return result;\n    } catch (error) {\n      this.initPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Performs the actual initialization process\n   * \n   * @private\n   * @returns Promise resolving to initialized audio resources\n   * @throws {Error} If any step of initialization fails\n   */\n  private async _doInitialize(): Promise<MediaStreamResources> {\n    try {\n      console.log('🎤 [AudioManager] Starting initialization');\n\n      // Create AudioContext (single instance)\n      if (!this.audioContext) {\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n        console.log('✅ [AudioManager] AudioContext creation complete');\n      }\n\n      // Resume AudioContext if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n        console.log('✅ [AudioManager] AudioContext resume complete');\n      }\n\n      // Get MediaStream (single instance)\n      if (!this.mediaStream) {\n        const deviceSpecs = this.getPlatformSpecs();\n        \n        console.log(`🔍 [AudioManager] Device detection: ${deviceSpecs.deviceType}`, navigator.userAgent);\n        console.log(`🔍 [AudioManager] Touch support: ${'ontouchend' in document}`);\n        \n        // DIAGNOSTIC: Check if DeviceDetection affects autoGainControl\n        console.log('🔍 [DIAGNOSTIC] Device specs from getPlatformSpecs():', deviceSpecs);\n        console.log('🔍 [DIAGNOSTIC] Current this.config before constraints creation:', this.config);\n        \n        // Safari WebKit compatibility: Maximum compatibility audio settings\n        const audioConstraints: MediaStreamConstraints = {\n          audio: {\n            // Basic settings: Safari WebKit stability focused\n            echoCancellation: this.config.echoCancellation,\n            noiseSuppression: this.config.noiseSuppression,  // ✅ 設定値を尊重\n            autoGainControl: this.config.autoGainControl,\n            \n            // ブラウザ固有制御: noiseSuppression設定に基づく条件付き適用\n            ...(window as any).chrome && {\n              googAutoGainControl: false,     // AGCは常に無効（音量問題回避）\n              googNoiseSuppression: this.config.noiseSuppression,  // ✅ 設定値に従う\n              googEchoCancellation: this.config.echoCancellation,  // ✅ 設定値に従う\n              googHighpassFilter: false,      // ハイパスフィルターは独自実装を使用\n              googTypingNoiseDetection: this.config.noiseSuppression, // ノイズ抑制と連動\n              googBeamforming: this.config.noiseSuppression,          // ノイズ抑制と連動\n            },\n            \n            // Mozilla-specific constraints\n            ...(navigator.userAgent.includes('Firefox')) && {\n              mozAutoGainControl: false,      // AGCは常に無効\n              mozNoiseSuppression: this.config.noiseSuppression,  // ✅ 設定値に従う\n            },\n            \n            // Safari compatibility: Explicit quality settings  \n            sampleRate: this.config.sampleRate,\n            channelCount: this.config.channelCount,\n            sampleSize: 16,\n            \n            // Flexible device selection (Safari compatibility)\n            deviceId: { ideal: 'default' }\n          }\n        };\n        \n        console.log('🎤 [AudioManager] Getting MediaStream with noiseSuppression settings:', {\n          noiseSuppression: this.config.noiseSuppression,\n          constraints: audioConstraints\n        });\n        this.mediaStream = await navigator.mediaDevices.getUserMedia(audioConstraints);\n        console.log('✅ [AudioManager] MediaStream acquisition complete');\n        \n        // DIAGNOSTIC: Check actual constraints applied by browser (production only)\n        const audioTrack = this.mediaStream.getAudioTracks()[0];\n        if (audioTrack && typeof audioTrack.getConstraints === 'function' && typeof audioTrack.getSettings === 'function') {\n          try {\n            const actualConstraints = audioTrack.getConstraints();\n            const actualSettings = audioTrack.getSettings();\n            \n            console.log('🔍 [DIAGNOSTIC] Requested noiseSuppression:', this.config.noiseSuppression);\n            console.log('🔍 [DIAGNOSTIC] Actually applied constraints:', actualConstraints);\n            console.log('🔍 [DIAGNOSTIC] Actual MediaStream settings:', actualSettings);\n            \n            // Critical check: Verify noiseSuppression was applied as requested\n            if (actualSettings.noiseSuppression !== this.config.noiseSuppression) {\n              console.warn('⚠️ [DIAGNOSTIC] noiseSuppression setting mismatch!');\n              console.warn(`⚠️ [DIAGNOSTIC] Requested: ${this.config.noiseSuppression}, Applied: ${actualSettings.noiseSuppression}`);\n            } else {\n              console.log('✅ [DIAGNOSTIC] noiseSuppression successfully applied by browser');\n            }\n            \n            // Check autoGainControl status\n            if (actualSettings.autoGainControl === true) {\n              console.warn('⚠️ [DIAGNOSTIC] CRITICAL: Browser ignored autoGainControl: false setting!');\n              console.warn('⚠️ [DIAGNOSTIC] This explains the gain drift issues - browser is automatically adjusting gain');\n            } else {\n              console.log('✅ [DIAGNOSTIC] autoGainControl successfully disabled by browser');\n            }\n          } catch (error) {\n            console.log('ℹ️ [DIAGNOSTIC] MediaTrack constraint inspection not available in this environment');\n          }\n        } else {\n          console.log('ℹ️ [DIAGNOSTIC] MediaTrack constraint inspection not supported in this environment');\n        }\n      }\n\n      // Create SourceNode (single instance)\n      if (!this.sourceNode) {\n        this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n        console.log('✅ [AudioManager] SourceNode creation complete');\n        \n        // MediaStream state check\n        const tracks = this.mediaStream.getTracks();\n        console.log('🎤 [AudioManager] MediaStream tracks:', tracks.map(t => ({\n          kind: t.kind,\n          label: t.label,\n          enabled: t.enabled,\n          readyState: t.readyState,\n          muted: t.muted\n        })));\n      }\n\n      // Create GainNode (for microphone sensitivity adjustment)\n      if (!this.gainNode) {\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.setValueAtTime(this.currentSensitivity, this.audioContext.currentTime);\n        \n        // Connect SourceNode -> GainNode\n        this.sourceNode.connect(this.gainNode);\n        console.log(`✅ [AudioManager] GainNode creation complete (sensitivity: ${this.currentSensitivity}x)`);\n        \n        // HOTFIX: Temporarily disabled gain monitoring due to persistent drift issues\n        // Will be re-enabled in future version with proper browser compatibility\n        // this.startGainMonitoring();\n      }\n\n      this.isInitialized = true;\n      this.refCount++;\n      this.lastError = null;\n\n      console.log(`🎤 [AudioManager] Initialization complete (refCount: ${this.refCount})`);\n\n      return {\n        audioContext: this.audioContext,\n        mediaStream: this.mediaStream,\n        sourceNode: this.sourceNode\n      };\n\n    } catch (error) {\n      // Convert to structured error with context\n      const structuredError = this._createStructuredError(error as Error, 'initialization');\n      \n      // Enhanced error logging with user-friendly information\n      ErrorMessageBuilder.logError(structuredError, 'AudioManager initialization');\n      \n      this.lastError = structuredError;\n      this.isInitialized = false;\n      \n      // Cleanup on error\n      this._cleanup();\n      \n      throw structuredError;\n    }\n  }\n\n  /**\n   * Create dedicated AnalyserNode\n   * @param id - Analyser identifier\n   * @param options - Option settings\n   */\n  createAnalyser(id: string, options: {\n    fftSize?: number;\n    smoothingTimeConstant?: number;\n    minDecibels?: number;\n    maxDecibels?: number;\n    useFilters?: boolean;\n  } = {}): AnalyserNode {\n    if (!this.isInitialized || !this.audioContext || !this.sourceNode) {\n      const error = new AudioContextError(\n        'AudioManagerが初期化されていません。initialize()メソッドを最初に呼び出してください。',\n        {\n          operation: 'createAnalyser',\n          analyserId: id,\n          currentState: {\n            isInitialized: this.isInitialized,\n            hasAudioContext: !!this.audioContext,\n            hasSourceNode: !!this.sourceNode\n          }\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Analyser creation');\n      throw error;\n    }\n\n    // Remove existing analyser if present\n    this.removeAnalyser(id);\n\n    const {\n      fftSize = 2048,\n      smoothingTimeConstant = 0.8,\n      minDecibels = -90,\n      maxDecibels = -10,\n      useFilters = true\n    } = options;\n\n    // Create Analyser (Safari WebKit optimized)\n    const analyser = this.audioContext.createAnalyser();\n    \n    // Safari load reduction settings\n    analyser.fftSize = Math.min(fftSize, 2048); // Safari upper limit restriction\n    analyser.smoothingTimeConstant = Math.max(smoothingTimeConstant, 0.7); // Safari stabilization\n    analyser.minDecibels = Math.max(minDecibels, -80); // Safari range optimization\n    analyser.maxDecibels = Math.min(maxDecibels, -10);\n\n    let finalNode: AudioNode = this.gainNode || this.sourceNode;\n\n    // Create filter chain (optional)\n    if (useFilters) {\n      const filterChain = this._createFilterChain();\n      this.filters.set(id, filterChain);\n      \n      // Connect filter chain (starting from GainNode)\n      finalNode.connect(filterChain.highpass);\n      filterChain.highpass.connect(filterChain.lowpass);\n      filterChain.lowpass.connect(filterChain.notch);\n      filterChain.notch.connect(analyser);\n      \n      console.log(`🔧 [AudioManager] Filtered Analyser created: ${id}`);\n    } else {\n      // Direct connection (signal from GainNode)\n      finalNode.connect(analyser);\n      console.log(`🔧 [AudioManager] Raw signal Analyser created: ${id}`);\n    }\n    \n    // Important: Analyser only passes audio through, don't connect to destination\n    // (prevents microphone feedback)\n\n    this.analysers.set(id, analyser);\n    return analyser;\n  }\n\n  /**\n   * Create 3-stage noise reduction filter chain\n   */\n  private _createFilterChain() {\n    if (!this.audioContext) {\n      const error = new AudioContextError(\n        'AudioContextが利用できません。ブラウザでオーディオ機能が無効になっているか、デバイスがサポートされていません。',\n        {\n          operation: '_createFilterChain',\n          audioContextState: 'null'\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Filter chain creation');\n      throw error;\n    }\n\n    // 1. Highpass filter (remove low frequency noise: cut below 50Hz, 深い男性の声を保護)\n    const highpass = this.audioContext.createBiquadFilter();\n    highpass.type = 'highpass';\n    highpass.frequency.setValueAtTime(50, this.audioContext.currentTime);\n    highpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n    const lowpass = this.audioContext.createBiquadFilter();\n    lowpass.type = 'lowpass';\n    lowpass.frequency.setValueAtTime(800, this.audioContext.currentTime);\n    lowpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 3. Notch filter (remove power noise: 50Hz) - 🔧 日本の電源周波数に合わせて調整\n    const notch = this.audioContext.createBiquadFilter();\n    notch.type = 'notch';\n    notch.frequency.setValueAtTime(50, this.audioContext.currentTime);\n    notch.Q.setValueAtTime(10, this.audioContext.currentTime);\n\n    return { highpass, lowpass, notch };\n  }\n\n  /**\n   * Removes a specific analyser and its associated filter chain\n   * \n   * @param id - Unique identifier for the analyser to remove\n   * \n   * @example\n   * ```typescript\n   * audioManager.removeAnalyser('pitch-detection');\n   * ```\n   */\n  removeAnalyser(id: string): void {\n    if (this.analysers.has(id)) {\n      const analyser = this.analysers.get(id)!;\n      analyser.disconnect();\n      this.analysers.delete(id);\n      console.log(`🗑️ [AudioManager] Analyser removed: ${id}`);\n    }\n\n    if (this.filters.has(id)) {\n      const filterChain = this.filters.get(id)!;\n      filterChain.highpass.disconnect();\n      filterChain.lowpass.disconnect();\n      filterChain.notch.disconnect();\n      this.filters.delete(id);\n      console.log(`🗑️ [AudioManager] Filter chain removed: ${id}`);\n    }\n  }\n\n  /**\n   * Adjusts microphone sensitivity with automatic gain monitoring\n   * \n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   * - 0.1-1.0: Reduced sensitivity for loud environments\n   * - 1.0: Standard sensitivity (PC default)\n   * - 3.0: iPhone optimized sensitivity\n   * - 7.0: iPad optimized sensitivity\n   * - 10.0: Maximum sensitivity for quiet environments\n   * \n   * @example\n   * ```typescript\n   * // Set sensitivity for iPad\n   * audioManager.setSensitivity(7.0);\n   * \n   * // Reduce for loud environment\n   * audioManager.setSensitivity(0.5);\n   * ```\n   */\n  private async _verifyGainChange(expectedGain: number, timeout = 200, interval = 20): Promise<boolean> {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n      if (this.gainNode && Math.abs(this.gainNode.gain.value - expectedGain) <= 0.1) {\n        return true; // 許容誤差内で一致したので成功\n      }\n      // 指定された間隔で待機\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return false; // タイムアウトまでに一致しなかったので失敗\n  }\n\n  setSensitivity(sensitivity: number): void {\n    // Range limit (extended to 10.0x for iPad real device support)\n    const clampedSensitivity = Math.max(0.1, Math.min(10.0, sensitivity));\n    \n    if (this.gainNode) {\n      // ENHANCED: Robust gain setting with immediate verification\n      this.gainNode.gain.setValueAtTime(clampedSensitivity, this.audioContext?.currentTime || 0);\n      this.currentSensitivity = clampedSensitivity;\n      \n      // 非同期検証による堅牢なゲイン設定確認\n      (async () => {\n        const verified = await this._verifyGainChange(clampedSensitivity);\n\n        if (verified) {\n          console.log(`✅ [AudioManager] Gain setting verified: ${this.gainNode?.gain.value.toFixed(1)}x (expected: ${clampedSensitivity.toFixed(1)}x)`);\n        } else if (this.gainNode) { // ゲイン設定の検証失敗（警告レベル・機能継続）\n          const actualGain = this.gainNode.gain.value;\n          console.warn(`⚠️ [AudioManager] ゲイン検証失敗 (機能継続):`, {\n            期待値: `${clampedSensitivity}x`,\n            実際値: `${actualGain}x`,\n            差分: Math.abs(actualGain - clampedSensitivity).toFixed(2),\n            理由: 'ブラウザのautoGainControl制御による制限',\n            影響: '音量計算には影響なし（動的SCALING_FACTOR使用）',\n            状態: '正常動作中'\n          });\n          // エラーを投げずに機能を継続（音量計算に影響なし）\n        }\n      })();\n      \n      console.log(`🎤 [AudioManager] Microphone sensitivity updated: ${clampedSensitivity.toFixed(1)}x`);\n    } else {\n      // If GainNode not initialized, save setting only\n      this.currentSensitivity = clampedSensitivity;\n      console.log(`🎤 [AudioManager] Microphone sensitivity set (awaiting initialization): ${clampedSensitivity.toFixed(1)}x`);\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.currentSensitivity;\n  }\n\n  /**\n   * Mutes the microphone by disabling audio tracks\n   * \n   * @description Disables all audio tracks in the MediaStream while maintaining \n   * the connection. This provides instant mute functionality without requiring \n   * MediaStream reinitialization.\n   * \n   * @example\n   * ```typescript\n   * audioManager.mute();\n   * console.log('Microphone muted');\n   * ```\n   */\n  mute(): void {\n    if (!this.mediaStream) {\n      console.warn('⚠️ [AudioManager] Cannot mute, MediaStream is not available.');\n      return;\n    }\n\n    this.mediaStream.getAudioTracks().forEach(track => {\n      track.enabled = false; // Disable audio track (core mute functionality)\n    });\n    this.isMuted = true;\n    console.log('🔇 [AudioManager] Microphone muted.');\n  }\n\n  /**\n   * Unmutes the microphone by enabling audio tracks\n   * \n   * @description Re-enables all audio tracks in the MediaStream. The audio \n   * input resumes immediately without any initialization delays.\n   * \n   * @example\n   * ```typescript\n   * audioManager.unmute();\n   * console.log('Microphone unmuted');\n   * ```\n   */\n  unmute(): void {\n    if (!this.mediaStream) {\n      console.warn('⚠️ [AudioManager] Cannot unmute, MediaStream is not available.');\n      return;\n    }\n\n    this.mediaStream.getAudioTracks().forEach(track => {\n      track.enabled = true; // Re-enable audio track\n    });\n    this.isMuted = false;\n    console.log('🔊 [AudioManager] Microphone unmuted.');\n  }\n\n  /**\n   * Gets the current mute state\n   * \n   * @returns True if microphone is muted, false otherwise\n   * \n   * @example\n   * ```typescript\n   * if (audioManager.getIsMuted()) {\n   *   console.log('Microphone is currently muted');\n   * }\n   * ```\n   */\n  getIsMuted(): boolean {\n    return this.isMuted;\n  }\n\n  /**\n   * HOTFIX: Start gain monitoring to prevent level drops\n   * @deprecated Temporarily disabled in v1.1.4 due to browser compatibility issues\n   * \n   * This method is preserved for future re-implementation with proper browser compatibility.\n   * The gain monitoring caused 60% drift errors every 2 seconds in some environments.\n   * Will be re-enabled once a more robust solution is developed.\n   */\n  /* private startGainMonitoring(): void {\n    if (this.gainMonitorInterval) {\n      clearInterval(this.gainMonitorInterval);\n    }\n    \n    this.gainMonitorInterval = window.setInterval(() => {\n      if (this.gainNode && this.audioContext) {\n        const currentGainValue = this.gainNode.gain.value;\n        const expectedGain = this.currentSensitivity;\n        \n        // Check for significant drift (more than 50% difference) - relaxed threshold\n        if (Math.abs(currentGainValue - expectedGain) > expectedGain * 0.5) {\n          const monitorError = new PitchProError(\n            `ゲインモニタリングでドリフト検出: 期待値 ${expectedGain}, 現在値 ${currentGainValue}`,\n            ErrorCode.AUDIO_CONTEXT_ERROR,\n            {\n              operation: 'gainMonitoring',\n              expectedGain,\n              currentGain: currentGainValue,\n              driftPercentage: ((Math.abs(currentGainValue - expectedGain) / expectedGain) * 100).toFixed(1)\n            }\n          );\n          \n          ErrorMessageBuilder.logError(monitorError, 'Automatic gain monitoring');\n          \n          // Force reset to expected value\n          this.gainNode.gain.setValueAtTime(expectedGain, this.audioContext.currentTime);\n          console.log(`🔧 [AudioManager] Gain reset to: ${expectedGain}`);\n        }\n      }\n    }, 2000); // Check every 2 seconds\n  } */\n\n  /**\n   * HOTFIX: Stop gain monitoring\n   */\n  private stopGainMonitoring(): void {\n    if (this.gainMonitorInterval) {\n      clearInterval(this.gainMonitorInterval);\n      this.gainMonitorInterval = null;\n    }\n  }\n\n  /**\n   * Get platform-specific settings according to specification\n   * Complies with MICROPHONE_PLATFORM_SPECIFICATIONS.md\n   */\n  getPlatformSpecs(): DeviceSpecs {\n    // Use DeviceDetection utility for consistent device detection\n    const deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    // Add AudioManager-specific properties\n    return {\n      ...deviceSpecs,\n      sensitivity: this.currentSensitivity || deviceSpecs.sensitivity\n    };\n  }\n\n  /**\n   * Decrement reference count and cleanup\n   */\n  release(analyserIds: string[] = []): void {\n    // Remove specified analysers\n    analyserIds.forEach(id => this.removeAnalyser(id));\n\n    this.refCount = Math.max(0, this.refCount - 1);\n    console.log(`📉 [AudioManager] Reference count decremented: ${this.refCount}`);\n\n    // Full cleanup only when no one is using it\n    if (this.refCount <= 0) {\n      console.log('🧹 [AudioManager] Starting full resource cleanup');\n      this._cleanup();\n    }\n  }\n\n  /**\n   * Force cleanup (for emergency use)\n   */\n  forceCleanup(): void {\n    console.log('🚨 [AudioManager] Force cleanup executed');\n    this._cleanup();\n  }\n\n  /**\n   * Internal cleanup process\n   */\n  private _cleanup(): void {\n    console.log('🧹 [AudioManager] Starting cleanup');\n    \n    // HOTFIX: Stop gain monitoring\n    this.stopGainMonitoring();\n    \n    // Remove all analysers\n    for (const id of this.analysers.keys()) {\n      this.removeAnalyser(id);\n    }\n\n    // Stop MediaStream (health check compatible)\n    if (this.mediaStream) {\n      const tracks = this.mediaStream.getTracks();\n      console.log(`🛑 [AudioManager] Stopping MediaStream: ${tracks.length} tracks`);\n      \n      tracks.forEach((track, index) => {\n        try {\n          if (track.readyState !== 'ended') {\n            track.stop();\n            console.log(`🛑 [AudioManager] Track ${index} stop complete`);\n          } else {\n            console.log(`⚠️ [AudioManager] Track ${index} already ended`);\n          }\n        } catch (error) {\n          const trackError = new PitchProError(\n            `メディアトラック ${index} の停止中にエラーが発生しました: ${(error as Error).message}`,\n            ErrorCode.AUDIO_CONTEXT_ERROR,\n            {\n              operation: 'track_cleanup',\n              trackIndex: index,\n              originalError: (error as Error).message,\n              trackState: track.readyState\n            }\n          );\n          \n          ErrorMessageBuilder.logError(trackError, 'Media track cleanup');\n        }\n      });\n      \n      this.mediaStream = null;\n    }\n\n    // Close AudioContext\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      try {\n        this.audioContext.close();\n        console.log('🛑 [AudioManager] AudioContext close complete');\n      } catch (error) {\n        const contextError = new AudioContextError(\n          `AudioContextの終了中にエラーが発生しました: ${(error as Error).message}`,\n          {\n            operation: 'audioContext_cleanup',\n            contextState: this.audioContext?.state,\n            originalError: (error as Error).message\n          }\n        );\n        \n        ErrorMessageBuilder.logError(contextError, 'AudioContext cleanup');\n      }\n      this.audioContext = null;\n    }\n\n    // Remove GainNode\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n      this.gainNode = null;\n    }\n\n    // Remove SourceNode\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n\n    // Reset state\n    this.isInitialized = false;\n    this.refCount = 0;\n    this.initPromise = null;\n    this.currentSensitivity = this._getDefaultSensitivity(); // Reset to device-dependent default sensitivity\n\n    console.log('✅ [AudioManager] Cleanup complete');\n  }\n\n  /**\n   * Creates structured error with enhanced context information\n   * \n   * @private\n   * @param error - Original error\n   * @param operation - Operation that failed\n   * @returns Structured PitchProError with context\n   */\n  private _createStructuredError(error: Error, operation: string): PitchProError {\n    // Determine error type based on error message patterns\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.getPlatformSpecs(),\n          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('context')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          audioContextState: this.audioContext?.state || 'none',\n          sampleRate: this.audioContext?.sampleRate || 'unknown',\n          deviceSpecs: this.getPlatformSpecs()\n        }\n      );\n    }\n    \n    // Default to generic PitchPro error\n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.AUDIO_CONTEXT_ERROR,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        currentState: {\n          isInitialized: this.isInitialized,\n          refCount: this.refCount,\n          hasResources: !!(this.audioContext && this.mediaStream && this.sourceNode)\n        }\n      }\n    );\n  }\n\n  /**\n   * Gets current AudioManager status for debugging and monitoring\n   * \n   * @returns Status object containing initialization state, reference count, and resource states\n   * \n   * @example\n   * ```typescript\n   * const status = audioManager.getStatus();\n   * console.log('AudioManager Status:', status);\n   * console.log('Active analysers:', status.activeAnalysers);\n   * ```\n   */\n  getStatus() {\n    return {\n      isInitialized: this.isInitialized,\n      refCount: this.refCount,\n      audioContextState: this.audioContext?.state || 'none',\n      mediaStreamActive: this.mediaStream?.active || false,\n      activeAnalysers: Array.from(this.analysers.keys()),\n      activeFilters: Array.from(this.filters.keys()),\n      lastError: this.lastError,\n      currentSensitivity: this.currentSensitivity\n    };\n  }\n\n  /**\n   * Performs comprehensive health check on MediaStream and tracks\n   * \n   * @returns Health status object with detailed track information\n   * \n   * @example\n   * ```typescript\n   * const health = audioManager.checkMediaStreamHealth();\n   * if (!health.healthy) {\n   *   console.warn('MediaStream health issue detected:', health);\n   *   // Perform recovery actions\n   * }\n   * ```\n   */\n  checkMediaStreamHealth(): HealthStatus {\n    if (!this.mediaStream) {\n      return { \n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    // MediaStream state check (Safari compatibility enhanced)\n    if (!this.mediaStream.active) {\n      return {\n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const tracks = this.mediaStream.getTracks();\n    if (tracks.length === 0) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const audioTrack = tracks.find(track => track.kind === 'audio');\n    if (!audioTrack) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: tracks.map(track => ({\n          kind: track.kind,\n          enabled: track.enabled,\n          readyState: track.readyState,\n          muted: track.muted\n        })),\n        healthy: false\n      };\n    }\n\n    const trackStates: TrackState[] = tracks.map(track => ({\n      kind: track.kind,\n      enabled: track.enabled,\n      readyState: track.readyState,\n      muted: track.muted\n    }));\n\n    // AudioTrack detailed state check (Safari WebKit compatibility)\n    if (audioTrack.readyState === 'ended') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // 🔧 Note: audioTrack.enabled=false (muted state) is NOT considered unhealthy\n    // Mute/unmute operations are normal user actions and should not trigger health check failures\n    // Only check readyState and muted property for actual hardware/system issues\n    // if (!audioTrack.enabled) {\n    //   return {\n    //     mediaStreamActive: this.mediaStream.active,\n    //     audioContextState: this.audioContext?.state || 'none',\n    //     trackStates,\n    //     healthy: false\n    //   };\n    // }\n\n    // Safari-specific muted state check\n    if (audioTrack.muted) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Additional check: MediaStream and Track consistency verification\n    if (this.mediaStream.active && audioTrack.readyState !== 'live') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    return {\n      mediaStreamActive: this.mediaStream.active,\n      audioContextState: this.audioContext?.state || 'none',\n      trackStates,\n      healthy: true,\n      refCount: this.refCount\n    };\n  }\n}","'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","import FFT from \"fft.js\";\n\n/**\n * @typedef {Float32Array | Float64Array | number[]} Buffer One of the supported\n * buffer types. Other numeric array types may not work correctly.\n */\n\n/**\n * A class that can perform autocorrelation on input arrays of a given size.\n *\n * The class holds internal buffers so that no additional allocations are\n * necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use. While inputs to the\n * autocorrelation process can be any array-like type, the output buffer\n * (whether provided explicitly or using a fresh buffer) is always of this type.\n */\nexport class Autocorrelator {\n  /** @private @readonly @type {number} */\n  _inputLength;\n  /** @private @type {FFT} */\n  _fft;\n  /** @private @type {(size: number) => T} */\n  _bufferSupplier;\n  /** @private @type {T} */\n  _paddedInputBuffer;\n  /** @private @type {T} */\n  _transformBuffer;\n  /** @private @type {T} */\n  _inverseBuffer;\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float32Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float64Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using `number[]`\n   * buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new Autocorrelator(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link Autocorrelator} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `Autocorrelator` will only support operation on arrays of this length.\n   * @param bufferSupplier {(length: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    if (inputLength < 1) {\n      throw new Error(`Input length must be at least one`);\n    }\n    this._inputLength = inputLength;\n    // We need to double the input length to get correct results, and the FFT\n    // algorithm we use requires a length that's a power of 2\n    this._fft = new FFT(ceilPow2(2 * inputLength));\n    this._bufferSupplier = bufferSupplier;\n    this._paddedInputBuffer = this._bufferSupplier(this._fft.size);\n    this._transformBuffer = this._bufferSupplier(2 * this._fft.size);\n    this._inverseBuffer = this._bufferSupplier(2 * this._fft.size);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._inputLength;\n  }\n\n  /**\n   * Autocorrelates the given input data.\n   *\n   * @param input {ArrayLike<number>} the input data to autocorrelate\n   * @param output {T} the output buffer into which to write the autocorrelated\n   * data. If not provided, a new buffer will be created.\n   * @returns {T} `output`\n   */\n  autocorrelate(input, output = this._bufferSupplier(input.length)) {\n    if (input.length !== this._inputLength) {\n      throw new Error(\n        `Input must have length ${this._inputLength} but had length ${input.length}`,\n      );\n    }\n    // Step 0: pad the input array with zeros\n    for (let i = 0; i < input.length; i++) {\n      this._paddedInputBuffer[i] = input[i];\n    }\n    for (let i = input.length; i < this._paddedInputBuffer.length; i++) {\n      this._paddedInputBuffer[i] = 0;\n    }\n\n    // Step 1: get the DFT of the input array\n    this._fft.realTransform(this._transformBuffer, this._paddedInputBuffer);\n    // We need to fill in the right half of the array too\n    this._fft.completeSpectrum(this._transformBuffer);\n    // Step 2: multiply each entry by its conjugate\n    const tb = this._transformBuffer;\n    for (let i = 0; i < tb.length; i += 2) {\n      tb[i] = tb[i] * tb[i] + tb[i + 1] * tb[i + 1];\n      tb[i + 1] = 0;\n    }\n    // Step 3: perform the inverse transform\n    this._fft.inverseTransform(this._inverseBuffer, this._transformBuffer);\n\n    // This last result (the inverse transform) contains the autocorrelation\n    // data, which is completely real\n    for (let i = 0; i < input.length; i++) {\n      output[i] = this._inverseBuffer[2 * i];\n    }\n    return output;\n  }\n}\n\n/**\n * Returns an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: it may be more efficient not to construct a new output array each time,\n * but that would also make the code more complicated (more so than the changes\n * that were needed to remove the other allocations).\n *\n * @param input {ArrayLike<number>}\n * @returns {number[]}\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima\n  /** @type {number[]} */ const keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum\n  let lookingForMaximum = false;\n  // The largest local maximum found so far\n  let max = -Infinity;\n  // The index of the largest local maximum so far\n  let maxIndex = -1;\n\n  for (let i = 1; i < input.length - 1; i++) {\n    if (input[i - 1] <= 0 && input[i] > 0) {\n      // Positively sloped zero crossing\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] <= 0) {\n      // Negatively sloped zero crossing\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Refines the chosen key maximum index chosen from the given data by\n * interpolating a parabola using the key maximum index and its two neighbors\n * and finding the position of that parabola's maximum value.\n *\n * This is described in section 5 of the MPM paper as a way to refine the\n * position of the maximum.\n *\n * @param index {number} the chosen key maximum index. This must be between `1`\n * and `data.length - 2`, inclusive, since it and its two neighbors need to be\n * valid indexes of `data`.\n * @param data {ArrayLike<number>} the input array from which `index` was chosen\n * @returns {[number, number]} a pair consisting of the refined key maximum index and the\n * interpolated value of `data` at that index (the latter of which is used as a\n * measure of clarity)\n */\nfunction refineResultIndex(index, data) {\n  const [x0, x1, x2] = [index - 1, index, index + 1];\n  const [y0, y1, y2] = [data[x0], data[x1], data[x2]];\n\n  // The parabola going through the three data points can be written as\n  // y = y0(x - x1)(x - x2)/(x0 - x1)(x0 - x2)\n  //   + y1(x - x0)(x - x2)/(x1 - x0)(x1 - x2)\n  //   + y2(x - x0)(x - x1)/(x2 - x0)(x2 - x1)\n  // Given the definitions of x0, x1, and x2, we can simplify the denominators:\n  // y = y0(x - x1)(x - x2)/2\n  //   - y1(x - x0)(x - x2)\n  //   + y2(x - x0)(x - x1)/2\n  // We can expand this out and get the coefficients in standard form:\n  // a = y0/2 - y1 + y2/2\n  // b = -(y0/2)(x1 + x2) + y1(x0 + x2) - (y2/2)(x0 + x1)\n  // c = y0x1x2/2 - y1x0x2 + y2x0x1/2\n  // The index of the maximum is -b / 2a (by solving for x where the derivative\n  // is 0).\n\n  const a = y0 / 2 - y1 + y2 / 2;\n  const b = -(y0 / 2) * (x1 + x2) + y1 * (x0 + x2) - (y2 / 2) * (x0 + x1);\n  const c = (y0 * x1 * x2) / 2 - y1 * x0 * x2 + (y2 * x0 * x1) / 2;\n\n  const xMax = -b / (2 * a);\n  const yMax = a * xMax * xMax + b * xMax + c;\n  return [xMax, yMax];\n}\n\n/**\n * A class that can detect the pitch of a note from a time-domain input array.\n *\n * This class uses the McLeod pitch method (MPM) to detect pitches. MPM is\n * described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod and\n * Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * The class holds internal buffers so that a minimal number of additional\n * allocations are necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use internally. Inputs to the\n * pitch-detection process can be any numeric array type.\n */\nexport class PitchDetector {\n  /** @private @type {Autocorrelator<T>} */\n  _autocorrelator;\n  /** @private @type {T} */\n  _nsdfBuffer;\n  /** @private @type {number} */\n  _clarityThreshold = 0.9;\n  /** @private @type {number} */\n  _minVolumeAbsolute = 0.0;\n  /** @private @type {number} */\n  _maxInputAmplitude = 1.0;\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float32Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float64Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using `number[]` buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new PitchDetector(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link PitchDetector} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `PitchDetector` will only support operation on arrays of this length.\n   * @param bufferSupplier {(inputLength: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    this._autocorrelator = new Autocorrelator(inputLength, bufferSupplier);\n    this._nsdfBuffer = bufferSupplier(inputLength);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._autocorrelator.inputLength;\n  }\n\n  /**\n   * Sets the clarity threshold used when identifying the correct pitch (the constant\n   * `k` from the MPM paper). The value must be between 0 (exclusive) and 1\n   * (inclusive), with the most suitable range being between 0.8 and 1.\n   *\n   * @param threshold {number} the clarity threshold\n   */\n  set clarityThreshold(threshold) {\n    if (!Number.isFinite(threshold) || threshold <= 0 || threshold > 1) {\n      throw new Error(\"clarityThreshold must be a number in the range (0, 1]\");\n    }\n    this._clarityThreshold = threshold;\n  }\n\n  /**\n   * Sets the minimum detectable volume, as an absolute number between 0 and\n   * `maxInputAmplitude`, inclusive, to consider in a sample when detecting the\n   * pitch. If a sample fails to meet this minimum volume, `findPitch` will\n   * return a clarity of 0.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param volume {number} the minimum volume as an absolute amplitude value\n   */\n  set minVolumeAbsolute(volume) {\n    if (\n      !Number.isFinite(volume) ||\n      volume < 0 ||\n      volume > this._maxInputAmplitude\n    ) {\n      throw new Error(\n        `minVolumeAbsolute must be a number in the range [0, ${this._maxInputAmplitude}]`,\n      );\n    }\n    this._minVolumeAbsolute = volume;\n  }\n\n  /**\n   * Sets the minimum volume using a decibel measurement. Must be less than or\n   * equal to 0: 0 indicates the loudest possible sound (see\n   * `maxInputAmplitude`), -10 is a sound with a tenth of the volume of the\n   * loudest possible sound, etc.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param db {number} the minimum volume in decibels, with 0 being the loudest\n   * sound\n   */\n  set minVolumeDecibels(db) {\n    if (!Number.isFinite(db) || db > 0) {\n      throw new Error(\"minVolumeDecibels must be a number <= 0\");\n    }\n    this._minVolumeAbsolute = this._maxInputAmplitude * 10 ** (db / 10);\n  }\n\n  /**\n   * Sets the maximum amplitude of an input reading. Must be greater than 0.\n   *\n   * @param amplitude {number} the maximum amplitude (absolute value) of an input reading\n   */\n  set maxInputAmplitude(amplitude) {\n    if (!Number.isFinite(amplitude) || amplitude <= 0) {\n      throw new Error(\"maxInputAmplitude must be a number > 0\");\n    }\n    this._maxInputAmplitude = amplitude;\n  }\n\n  /**\n   * Returns the pitch detected using McLeod Pitch Method (MPM) along with a\n   * measure of its clarity.\n   *\n   * The clarity is a value between 0 and 1 (potentially inclusive) that\n   * represents how \"clear\" the pitch was. A clarity value of 1 indicates that\n   * the pitch was very distinct, while lower clarity values indicate less\n   * definite pitches.\n   *\n   * @param input {ArrayLike<number>} the time-domain input data\n   * @param sampleRate {number} the sample rate at which the input data was\n   * collected\n   * @returns {[number, number]} the detected pitch, in Hz, followed by the\n   * clarity. If a pitch cannot be determined from the input, such as if the\n   * volume is too low (see `minVolumeAbsolute` and `minVolumeDecibels`), this\n   * will be `[0, 0]`.\n   */\n  findPitch(input, sampleRate) {\n    // If the highest key maximum is less than the minimum volume, we don't need\n    // to bother detecting the pitch, as the sample is too quiet.\n    if (this._belowMinimumVolume(input)) return [0, 0];\n    this._nsdf(input);\n    const keyMaximumIndices = getKeyMaximumIndices(this._nsdfBuffer);\n    if (keyMaximumIndices.length === 0) {\n      // No key maxima means that we either don't have enough data to analyze or\n      // that the data was flawed (such as an input array of zeroes)\n      return [0, 0];\n    }\n    // The highest key maximum\n    const nMax = Math.max(...keyMaximumIndices.map((i) => this._nsdfBuffer[i]));\n    // Following the paper, we return the pitch corresponding to the first key\n    // maximum higher than K * nMax. This is guaranteed not to be undefined, since\n    // we know of at least one key maximum satisfying this condition (whichever\n    // key maximum gave us nMax).\n    const resultIndex = keyMaximumIndices.find(\n      (i) => this._nsdfBuffer[i] >= this._clarityThreshold * nMax,\n    );\n    const [refinedResultIndex, clarity] = refineResultIndex(\n      // @ts-expect-error resultIndex is guaranteed to be defined\n      resultIndex,\n      this._nsdfBuffer,\n    );\n\n    // Due to floating point errors, the clarity may occasionally come out to be\n    // slightly over 1.0. We can avoid incorrect results by clamping the value.\n    return [sampleRate / refinedResultIndex, Math.min(clarity, 1.0)];\n  }\n\n  /**\n   * Returns whether the input audio data is below the minimum volume allowed by\n   * the pitch detector.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   * @returns {boolean}\n   */\n  _belowMinimumVolume(input) {\n    if (this._minVolumeAbsolute === 0) return false;\n    let squareSum = 0;\n    for (let i = 0; i < input.length; i++) {\n      squareSum += input[i] ** 2;\n    }\n    return Math.sqrt(squareSum / input.length) < this._minVolumeAbsolute;\n  }\n\n  /**\n   * Computes the NSDF of the input and stores it in the internal buffer. This\n   * is equation (9) in the McLeod pitch method paper.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   */\n  _nsdf(input) {\n    // The function r'(tau) is the autocorrelation\n    this._autocorrelator.autocorrelate(input, this._nsdfBuffer);\n    // The function m'(tau) (defined in equation (6)) can be computed starting\n    // with m'(0), which is equal to 2r'(0), and then iteratively modified to\n    // get m'(1), m'(2), etc. For example, to get m'(1), we take m'(0) and\n    // subtract x_0^2 and x_{W-1}^2. Then, to get m'(2), we take m'(1) and\n    // subtract x_1^2 and x_{W-2}^2, and further values are similar (see the\n    // note at the end of section 6 in the MPM paper).\n    //\n    // The resulting array values are 2 * r'(tau) / m'(tau). We use m below as\n    // the incremental value of m'.\n    let m = 2 * this._nsdfBuffer[0];\n    /** @type {number} */ let i;\n    // As pointed out by issuefiler on GitHub, we can take advantage of the fact\n    // that m will never increase to avoid division by zero by ending this loop\n    // once m === 0. The rest of the array values after m becomes 0 will just be\n    // set to 0 themselves. We actually check for m > 0 rather than m === 0\n    // because there may be small floating-point errors that cause m to become\n    // negative rather than exactly 0.\n    for (i = 0; i < this._nsdfBuffer.length && m > 0; i++) {\n      this._nsdfBuffer[i] = (2 * this._nsdfBuffer[i]) / m;\n      m -= input[i] ** 2 + input[input.length - i - 1] ** 2;\n    }\n    // If there are any array values remaining, it means m === 0 for those\n    // values of tau, so we can just set them to 0\n    for (; i < this._nsdfBuffer.length; i++) {\n      this._nsdfBuffer[i] = 0;\n    }\n  }\n}\n\n/**\n * Rounds up the input to the next power of 2.\n *\n * @param {number} v\n * @returns {number} the next power of 2 at least as large as `v`\n */\nfunction ceilPow2(v) {\n  // https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n","/**\n * 音響処理に最適化されたパフォーマンス制御\n * 音質を維持しながらCPU負荷を削減\n */\n\nexport class AdaptiveFrameRateLimiter {\n  private lastFrameTime = 0;\n  private nextFrameTime = 0;\n  private targetFPS: number;\n  private frameInterval: number;\n  private frameDrops = 0;\n  \n  // 音楽用途に適した範囲\n  private readonly MIN_FPS = 30;  // 最低30FPS（33ms以下のレイテンシー）\n  private readonly MAX_FPS = 60;  // 最高60FPS（ブラウザ標準）\n  private readonly OPTIMAL_FPS = 45; // 推奨45FPS（22ms、音楽演奏に適切）\n  \n  constructor(initialFPS = 45) {\n    this.targetFPS = Math.max(this.MIN_FPS, Math.min(initialFPS, this.MAX_FPS));\n    this.frameInterval = 1000 / this.targetFPS;\n  }\n  \n  shouldProcess(): boolean {\n    const now = performance.now();\n    \n    // 初回実行時の初期化\n    if (this.nextFrameTime === 0) {\n      this.nextFrameTime = now + this.frameInterval;\n      this.lastFrameTime = now;\n      return true;\n    }\n    \n    // 次フレーム時刻に到達したかチェック\n    if (now >= this.nextFrameTime) {\n      const actualElapsed = now - this.lastFrameTime;\n      \n      // フレーム落ちを検出（期待間隔の1.5倍を超過）\n      if (actualElapsed > this.frameInterval * 1.5) {\n        this.frameDrops++;\n        this.adjustFrameRate();\n      }\n      \n      // 次フレーム時刻を絶対時刻で設定（累積誤差を回避）\n      this.nextFrameTime = now + this.frameInterval;\n      this.lastFrameTime = now;\n      \n      return true;\n    }\n    \n    return false;\n  }\n  \n  // CPU負荷に応じて動的にFPSを調整\n  private adjustFrameRate(): void {\n    if (this.frameDrops > 5 && this.targetFPS > this.MIN_FPS) {\n      // 負荷が高い場合はFPSを下げる\n      this.targetFPS = Math.max(this.MIN_FPS, this.targetFPS - 5);\n      this.frameInterval = 1000 / this.targetFPS;\n      this.frameDrops = 0;\n      \n      // 次フレーム時刻を新しい間隔で再計算\n      const now = performance.now();\n      this.nextFrameTime = now + this.frameInterval;\n      \n      console.log(`Adjusted FPS to ${this.targetFPS} due to high load`);\n    }\n  }\n  \n  // パフォーマンス回復時にFPSを戻す\n  recoverPerformance(): void {\n    if (this.frameDrops === 0 && this.targetFPS < this.OPTIMAL_FPS) {\n      this.targetFPS = Math.min(this.OPTIMAL_FPS, this.targetFPS + 5);\n      this.frameInterval = 1000 / this.targetFPS;\n      \n      // 次フレーム時刻を新しい間隔で再計算\n      const now = performance.now();\n      this.nextFrameTime = now + this.frameInterval;\n    }\n  }\n  \n  reset(): void {\n    this.lastFrameTime = 0;\n    this.nextFrameTime = 0;\n    this.frameDrops = 0;\n    this.targetFPS = this.OPTIMAL_FPS;\n    this.frameInterval = 1000 / this.targetFPS;\n  }\n  \n  getStats() {\n    return {\n      currentFPS: this.targetFPS,\n      frameDrops: this.frameDrops,\n      latency: this.frameInterval\n    };\n  }\n}\n\n/**\n * 音響処理専用のスロットリング\n * 視覚更新と音声処理を分離\n */\nexport class AudioProcessingThrottle {\n  private visualUpdateThrottle: number;\n  private audioProcessingThrottle: number;\n  \n  constructor() {\n    // 視覚更新は30FPS（33ms）で十分\n    this.visualUpdateThrottle = 33;\n    \n    // 音声処理は高頻度を維持（60FPS相当）\n    this.audioProcessingThrottle = 16;\n  }\n  \n  // UI更新用（メーター、グラフなど）\n  throttleVisual<T extends (...args: any[]) => any>(\n    func: T,\n    customWait?: number\n  ): (...args: Parameters<T>) => void {\n    const wait = customWait || this.visualUpdateThrottle;\n    return throttle(func, wait, { leading: true, trailing: true });\n  }\n  \n  // 音声処理用（ピッチ検出など）\n  throttleAudio<T extends (...args: any[]) => any>(\n    func: T,\n    customWait?: number\n  ): (...args: Parameters<T>) => void {\n    const wait = customWait || this.audioProcessingThrottle;\n    return throttle(func, wait, { leading: true, trailing: false });\n  }\n}\n\n// 既存のthrottle関数を再利用\nfunction throttle<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n  options: { leading?: boolean; trailing?: boolean } = {}\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n  let previous = 0;\n  let lastArgs: Parameters<T> | null = null;\n  \n  const { leading = true, trailing = true } = options;\n  \n  return function throttled(...args: Parameters<T>) {\n    const now = Date.now();\n    \n    if (!previous && !leading) {\n      previous = now;\n    }\n    \n    const remaining = wait - (now - previous);\n    lastArgs = args;\n    \n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(null, args);\n      lastArgs = null;\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(() => {\n        previous = leading ? Date.now() : 0;\n        timeout = null;\n        if (lastArgs) {\n          func.apply(null, lastArgs);\n          lastArgs = null;\n        }\n      }, remaining);\n    }\n  };\n}","/**\n * PitchDetector - Framework-agnostic High-precision Pitch Detection Engine\n * \n * @description Provides real-time pitch detection using the McLeod Pitch Method (Pitchy library)\n * with advanced features including configurable harmonic correction, adaptive frame rate control,\n * noise filtering, TypedArray-optimized volume history, and device-specific optimization for\n * consistent cross-platform performance. Supports development-mode debug logging and comprehensive\n * performance monitoring.\n * \n * @features\n * - **McLeod Pitch Method**: Industry-standard pitch detection algorithm\n * - **Harmonic Correction**: Configurable octave jump detection and correction\n * - **Adaptive Performance**: Dynamic frame rate adjustment (30-60 FPS)\n * - **TypedArray Optimization**: High-performance buffer operations\n * - **Device Optimization**: Platform-specific sensitivity adjustments\n * - **Silence Detection**: Configurable timeout and warning system\n * - **Development Debug**: Conditional debug logging for development builds\n * \n * @example\n * ```typescript\n * // Basic usage with default configuration\n * const pitchDetector = new PitchDetector(audioManager);\n * \n * // Advanced configuration with custom settings\n * const pitchDetector = new PitchDetector(audioManager, {\n *   fftSize: 4096,\n *   clarityThreshold: 0.4,\n *   minVolumeAbsolute: 0.003,\n *   harmonicCorrection: {\n *     enabled: true,\n *     confidenceThreshold: 0.7,\n *     historyWindow: 1000,\n *     frequencyThreshold: 0.1\n *   },\n *   volumeHistory: {\n *     historyLength: 5,\n *     useTypedArray: true\n *   },\n *   silenceDetection: {\n *     enabled: true,\n *     warningThreshold: 15000,\n *     timeoutThreshold: 30000\n *   }\n * });\n * \n * await pitchDetector.initialize();\n * \n * pitchDetector.setCallbacks({\n *   onPitchUpdate: (result) => {\n *     console.log(`Detected: ${result.note} (${result.frequency.toFixed(1)}Hz)`);\n *     console.log(`Clarity: ${(result.clarity * 100).toFixed(1)}%, Volume: ${result.volume.toFixed(1)}%`);\n *   },\n *   onError: (error) => {\n *     console.error('Detection error:', error.message);\n *   },\n *   onStateChange: (state) => {\n *     console.log('Detection state:', state);\n *   }\n * });\n * \n * pitchDetector.startDetection();\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport { PitchDetector as PitchyDetector } from 'pitchy';\nimport type { \n  PitchDetectorConfig, \n  PitchDetectionResult, \n  PitchCallback,\n  ErrorCallback,\n  StateChangeCallback,\n  DeviceSpecs,\n  SilenceDetectionConfig\n} from '../types';\n\n/**\n * Configuration for harmonic correction system\n * @interface HarmonicCorrectionConfig\n */\nexport interface HarmonicCorrectionConfig {\n  /** @description Enable/disable harmonic correction (default: true) */\n  enabled?: boolean;\n  /** @description Confidence threshold for corrections (0-1, default: 0.7) */\n  confidenceThreshold?: number;\n  /** @description Time window for harmonic history in ms (default: 1000) */\n  historyWindow?: number;\n  /** @description Frequency difference threshold for octave detection (0-1, default: 0.1) */\n  frequencyThreshold?: number;\n}\n\n/**\n * Configuration for volume history optimization\n * @interface VolumeHistoryConfig\n */\nexport interface VolumeHistoryConfig {\n  /** @description Number of frames to keep in volume history (default: 5) */\n  historyLength?: number;\n  /** @description Use optimized TypedArray buffer (default: false) */\n  useTypedArray?: boolean;\n}\nimport { AudioManager } from './AudioManager';\nimport { AdaptiveFrameRateLimiter } from '../utils/performance-optimized';\nimport { \n  PitchProError, \n  AudioContextError, \n  PitchDetectionError, \n  isRecoverableError,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class PitchDetector {\n  /** @private AudioManager instance for resource management */\n  private audioManager: AudioManager;\n  \n  /** @private Pitchy library detector instance for McLeod Pitch Method */\n  private pitchDetector: PitchyDetector<Float32Array> | null = null;\n  \n  /** @private AnalyserNode with noise filtering applied */\n  private analyser: AnalyserNode | null = null;\n  \n  /** @private Raw AnalyserNode for unfiltered volume measurement */\n  private rawAnalyser: AnalyserNode | null = null;\n  \n  /** @private RequestAnimationFrame ID for detection loop */\n  private animationFrame: number | null = null;\n  \n  /** @private Adaptive frame rate controller for optimal performance */\n  private frameRateLimiter: AdaptiveFrameRateLimiter;\n  \n  /** @private Current component state for lifecycle management */\n  private componentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'error' = 'uninitialized';\n  \n  /** @private Initialization completion flag */\n  private isInitialized = false;\n  \n  /** @private Detection active flag */\n  private isDetecting = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Array of analyser IDs for cleanup management */\n  private analyserIds: string[] = [];\n  \n  /** @private Current processed volume level (0-100) */\n  private currentVolume = 0;\n  \n  /** @private Raw volume level before processing (0-100) */\n  private rawVolume = 0;\n  \n  /** @private Currently detected frequency in Hz (preserves decimal precision) */\n  private currentFrequency = 0;\n  \n  /** @private Detected musical note name */\n  private detectedNote = '--';\n  \n  /** @private Detected octave number */\n  private detectedOctave: number | null = null;\n  \n  /** @private Pitch detection clarity/confidence (0-1) */\n  private pitchClarity = 0;\n  \n  /** @private Circular buffer for volume stabilization */\n  private volumeHistory: number[] | Float32Array = [];\n  \n  /** @private Stabilized volume after filtering */\n  private stableVolume = 0;\n  \n  /** @private Previous frequency for harmonic correction */\n  // @ts-ignore - Used in correctHarmonic method for frequency tracking\n  private previousFrequency = 0;\n  \n  /** @private History buffer for harmonic analysis */\n  private harmonicHistory: Array<{frequency: number, confidence: number, timestamp: number}> = [];\n  \n  /** @private PitchDetector configuration with defaults applied */\n  private config: Required<Omit<PitchDetectorConfig, 'silenceDetection'>> & { \n    silenceDetection?: SilenceDetectionConfig \n  };\n  \n  /** @private Harmonic correction configuration */\n  private harmonicConfig: Required<HarmonicCorrectionConfig>;\n  \n  /** @private Volume history configuration */\n  private volumeHistoryConfig: Required<VolumeHistoryConfig>;\n  \n  /** @private Flag to disable harmonic correction */\n  private disableHarmonicCorrection = false;\n  \n  /** @private Callback functions for events */\n  private callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  } = {};\n  \n  /** @private Device-specific optimization parameters */\n  private deviceSpecs: DeviceSpecs | null = null;\n  \n  /** @private Silence detection configuration */\n  private silenceDetectionConfig: SilenceDetectionConfig;\n  \n  /** @private Timestamp when silence started */\n  private silenceStartTime: number | null = null;\n  \n  /** @private Timer ID for silence warning */\n  private silenceWarningTimer: number | null = null;\n  \n  /** @private Timer ID for silence timeout */\n  private silenceTimeoutTimer: number | null = null;\n  \n  /** @private Current silence state flag */\n  private isSilent = false;\n  \n  /** @private Silence warning already issued flag */\n  private hasWarned = false;\n\n  /**\n   * Creates a new PitchDetector instance with comprehensive configuration options\n   * \n   * @description Initializes a high-performance pitch detection engine with configurable\n   * harmonic correction, optimized volume history buffers, and device-specific optimizations.\n   * The constructor applies sensible defaults while allowing fine-grained control over all\n   * detection parameters and performance characteristics.\n   * \n   * @param audioManager - AudioManager instance for resource management and audio context access\n   * @param config - Optional configuration object to customize detection behavior\n   * @param config.fftSize - FFT size for frequency analysis (default: 4096, recommended: 2048-8192)\n   * @param config.smoothing - Smoothing factor for AnalyserNode (default: 0.1, range: 0-1)\n   * @param config.clarityThreshold - Minimum clarity for valid detection (default: 0.4, range: 0-1)\n   * @param config.minVolumeAbsolute - Minimum volume threshold (default: 0.003, range: 0.001-0.01)\n   * @param config.harmonicCorrection - Harmonic correction configuration\n   * @param config.harmonicCorrection.enabled - Enable octave jump correction (default: true)\n   * @param config.harmonicCorrection.confidenceThreshold - Confidence required for correction (default: 0.7)\n   * @param config.harmonicCorrection.historyWindow - Time window for harmonic analysis in ms (default: 1000)\n   * @param config.harmonicCorrection.frequencyThreshold - Frequency difference threshold (default: 0.1)\n   * @param config.volumeHistory - Volume history buffer configuration\n   * @param config.volumeHistory.historyLength - Number of frames to average (default: 10)\n   * @param config.volumeHistory.useTypedArray - Use TypedArray for better performance (default: true)\n   * @param config.silenceDetection - Silence detection and timeout configuration\n   * @param config.silenceDetection.enabled - Enable silence detection (default: false)\n   * @param config.silenceDetection.warningThreshold - Warning timeout in ms (default: 15000)\n   * @param config.silenceDetection.timeoutThreshold - Hard timeout in ms (default: 30000)\n   * \n   * @example\n   * ```typescript\n   * // Minimal configuration (uses optimized defaults)\n   * const pitchDetector = new PitchDetector(audioManager);\n   * \n   * // Performance-optimized configuration for music applications\n   * const pitchDetector = new PitchDetector(audioManager, {\n   *   fftSize: 4096,           // Good balance of accuracy and performance\n   *   clarityThreshold: 0.5,   // Higher threshold for cleaner detection\n   *   minVolumeAbsolute: 0.002, // Sensitive to quiet sounds\n   *   harmonicCorrection: {\n   *     enabled: true,\n   *     confidenceThreshold: 0.8, // Conservative octave correction\n   *     historyWindow: 1500,       // Longer analysis window\n   *     frequencyThreshold: 0.08   // Tighter frequency matching\n   *   },\n   *   volumeHistory: {\n   *     historyLength: 7,      // More smoothing\n   *     useTypedArray: true    // Maximum performance\n   *   }\n   * });\n   * \n   * // Educational/debugging configuration\n   * const pitchDetector = new PitchDetector(audioManager, {\n   *   fftSize: 8192,           // High resolution for analysis\n   *   clarityThreshold: 0.3,   // Lower threshold to see more detections\n   *   harmonicCorrection: {\n   *     enabled: false         // Disable to see raw algorithm output\n   *   },\n   *   volumeHistory: {\n   *     historyLength: 3,      // Less smoothing for immediate response\n   *     useTypedArray: false   // Standard arrays for easier debugging\n   *   },\n   *   silenceDetection: {\n   *     enabled: true,\n   *     warningThreshold: 10000, // 10 second warning\n   *     timeoutThreshold: 20000  // 20 second timeout\n   *   }\n   * });\n   * ```\n   */\n  constructor(\n    audioManager: AudioManager, \n    config: PitchDetectorConfig & {\n      harmonicCorrection?: Partial<HarmonicCorrectionConfig>;\n      volumeHistory?: Partial<VolumeHistoryConfig>;\n    } = {}\n  ) {\n    this.audioManager = audioManager;\n    this.config = {\n      fftSize: 4096,\n      smoothing: 0.9, // 揺れ防止のため強化 (0.1 → 0.9)\n      clarityThreshold: 0.4,    // 0.8から0.4に現実的な値に変更\n      minVolumeAbsolute: 0.020, // 🔧 環境適応ノイズゲート: 10%閾値でマイクノイズを確実にブロック\n      noiseGate: 0.02,          // v1.1.8: デフォルトnoiseGate値\n      deviceOptimization: true, // v1.1.8: デバイス最適化デフォルト有効\n      ...config\n    };\n    \n    // Initialize harmonic correction configuration\n    this.harmonicConfig = {\n      enabled: true,\n      confidenceThreshold: 0.7,\n      historyWindow: 1000,\n      frequencyThreshold: 0.1,\n      ...config.harmonicCorrection\n    };\n    \n    // Initialize volume history configuration (prefer TypedArray for better performance)\n    this.volumeHistoryConfig = {\n      historyLength: 10, // 音程変化対応のため大幅短縮 (12 -> 10) - 高応答性重視\n      useTypedArray: true, // Enable by default for better performance\n      ...config.volumeHistory\n    };\n    \n    // Initialize volume history buffer\n    this.initializeVolumeHistory();\n    \n    // Set disableHarmonicCorrection based on harmonic config\n    this.disableHarmonicCorrection = !this.harmonicConfig.enabled;\n    \n    // Initialize silence detection configuration\n    this.silenceDetectionConfig = {\n      enabled: false,\n      warningThreshold: 15000,  // 15秒で警告\n      timeoutThreshold: 30000,  // 30秒でタイムアウト\n      minVolumeThreshold: 0.01, // 消音判定の音量閾値\n      ...config.silenceDetection\n    };\n    \n    // Note: getPlatformSpecs() will be called during initialize() to avoid timing issues\n    \n    // Initialize performance optimization\n    this.frameRateLimiter = new AdaptiveFrameRateLimiter(45); // 45FPS optimal for music\n  }\n\n  /**\n   * Sets callback functions for pitch detection events\n   * \n   * @description Configures event handlers for real-time pitch detection results,\n   * errors, and state changes. Callbacks are called at the adaptive frame rate\n   * (typically 30-60 FPS) during active detection.\n   * \n   * @param callbacks - Object containing callback functions\n   * @param callbacks.onPitchUpdate - Called when valid pitch is detected with frequency, note, clarity, and volume data\n   * @param callbacks.onError - Called when recoverable or non-recoverable errors occur during detection\n   * @param callbacks.onStateChange - Called when component transitions between states (uninitialized/ready/detecting/error)\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     // Real-time pitch data (30-60 times per second)\n   *     console.log(`Pitch: ${result.frequency.toFixed(2)}Hz`);\n   *     console.log(`Note: ${result.note}, Octave: ${result.octave}`);\n   *     console.log(`Clarity: ${(result.clarity * 100).toFixed(1)}%`);\n   *     console.log(`Volume: ${result.volume.toFixed(1)}%`);\n   *     \n   *     // Cents deviation from perfect tuning\n   *     if (result.cents !== undefined) {\n   *       console.log(`Tuning: ${result.cents > 0 ? '+' : ''}${result.cents} cents`);\n   *     }\n   *   },\n   *   onError: (error) => {\n   *     console.error('Detection error:', error.message);\n   *     \n   *     // Handle specific error types\n   *     if (error instanceof PitchDetectionError) {\n   *       console.log('Pitch detection algorithm error - may be recoverable');\n   *     } else if (error instanceof AudioContextError) {\n   *       console.log('Audio system error - requires reinitialization');\n   *     }\n   *   },\n   *   onStateChange: (state) => {\n   *     console.log('Detection state changed to:', state);\n   *     \n   *     // React to state changes\n   *     switch (state) {\n   *       case 'ready':\n   *         console.log('PitchDetector initialized and ready');\n   *         break;\n   *       case 'detecting':\n   *         console.log('Active pitch detection started');\n   *         break;\n   *       case 'error':\n   *         console.log('Error state - check error callback for details');\n   *         break;\n   *     }\n   *   }\n   * });\n   * ```\n   */\n  setCallbacks(callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Initializes the pitch detector with audio resources and Pitchy engine\n   * \n   * @description Sets up audio analysers, creates Pitchy detector instance, and initializes\n   * device-specific configurations. Must be called before starting detection.\n   * \n   * @returns Promise that resolves when initialization is complete\n   * @throws {AudioContextError} If AudioManager initialization fails\n   * @throws {PitchDetectionError} If Pitchy detector creation fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   await pitchDetector.initialize();\n   *   console.log('Pitch detector ready');\n   * } catch (error) {\n   *   console.error('Initialization failed:', error);\n   * }\n   * ```\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.componentState = 'initializing';\n      this.lastError = null;\n      \n      console.log('🎙️ [PitchDetector] Starting initialization via AudioManager');\n      \n      // Get shared resources from AudioManager\n      await this.audioManager.initialize();\n      \n      // Initialize device specifications after AudioManager is ready\n      this.deviceSpecs = this.audioManager.getPlatformSpecs();\n      console.log('📱 [PitchDetector] Device specs initialized:', this.deviceSpecs.deviceType);\n      \n      console.log('✅ [PitchDetector] AudioManager resources acquired');\n      \n      // Create dedicated Analyser (with filters)\n      const filteredAnalyserId = `pitch-detector-filtered-${Date.now()}`;\n      this.analyser = this.audioManager.createAnalyser(filteredAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: true\n      });\n      this.analyserIds.push(filteredAnalyserId);\n      \n      // Create raw signal Analyser (for comparison)\n      const rawAnalyserId = `pitch-detector-raw-${Date.now()}`;\n      this.rawAnalyser = this.audioManager.createAnalyser(rawAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: false\n      });\n      this.analyserIds.push(rawAnalyserId);\n      \n      console.log('✅ [PitchDetector] Analysers created:', this.analyserIds);\n      \n      // Initialize PitchDetector\n      this.pitchDetector = PitchyDetector.forFloat32Array(this.analyser.fftSize);\n      \n      // Development-only Pitchy instance debug logging\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n        console.log(`[Debug] Pitchyインスタンス作成: ${!!this.pitchDetector}, FFTサイズ: ${this.analyser.fftSize}`);\n      }\n      \n      // Initialization complete\n      this.componentState = 'ready';\n      this.isInitialized = true;\n      \n      // Notify state change\n      this.callbacks.onStateChange?.(this.componentState);\n      \n      console.log('✅ [PitchDetector] Initialization complete');\n      \n    } catch (error) {\n      // Convert to structured error\n      const pitchError = error instanceof PitchProError \n        ? error \n        : new AudioContextError(\n            'PitchDetector initialization failed',\n            {\n              originalError: error instanceof Error ? error.message : String(error),\n              audioContextState: this.audioManager.getStatus().audioContextState,\n              deviceSpecs: this.deviceSpecs\n            }\n          );\n          \n      console.error('❌ [PitchDetector] Initialization error:', pitchError.toJSON());\n      this.componentState = 'error';\n      this.lastError = pitchError;\n      this.isInitialized = false;\n      \n      // Notify with structured error\n      this.callbacks.onError?.(pitchError);\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Starts real-time pitch detection with adaptive frame rate control\n   * \n   * @description Begins the pitch detection loop using requestAnimationFrame.\n   * Automatically manages performance optimization and device-specific adjustments.\n   * \n   * @returns True if detection started successfully, false otherwise\n   * \n   * @example\n   * ```typescript\n   * if (pitchDetector.startDetection()) {\n   *   console.log('Pitch detection started');\n   * } else {\n   *   console.error('Failed to start detection');\n   * }\n   * ```\n   */\n  startDetection(): boolean {\n    if (this.componentState !== 'ready') {\n      const error = new Error(`Cannot start detection: component state is ${this.componentState}`);\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    if (!this.analyser || !this.pitchDetector) {\n      const error = new PitchDetectionError(\n        'ピッチ検出に必要なコンポーネントが初期化されていません。initialize()メソッドを先に呼び出してください。',\n        {\n          operation: 'startDetection',\n          hasAnalyser: !!this.analyser,\n          hasPitchDetector: !!this.pitchDetector,\n          componentState: this.componentState,\n          isInitialized: this.isInitialized\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Pitch detection startup');\n      this.componentState = 'error';\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    this.componentState = 'detecting';\n    this.isDetecting = true;\n    this.callbacks.onStateChange?.(this.componentState);\n    this.detectPitch();\n    return true;\n  }\n\n  /**\n   * Stops pitch detection and cleans up detection loop\n   * \n   * @description Cancels the detection loop, resets frame rate limiter,\n   * and clears silence detection timers. Safe to call multiple times.\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.stopDetection();\n   * console.log('Pitch detection stopped');\n   * ```\n   */\n  stopDetection(): void {\n    this.isDetecting = false;\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n    \n    // Reset frame rate limiter\n    this.frameRateLimiter.reset();\n    \n    // Reset silence detection\n    this.resetSilenceTracking();\n    \n    // Return state to ready (if initialized)\n    if (this.componentState === 'detecting' && this.isInitialized) {\n      this.componentState = 'ready';\n      this.callbacks.onStateChange?.(this.componentState);\n    }\n  }\n\n  /**\n   * Real-time pitch detection loop with adaptive frame rate\n   * @private\n   * @description Main detection loop optimized for performance with minimal\n   * redundant calculations and efficient buffer operations\n   */\n  private detectPitch(): void {\n    // デバッグモード判定（本番環境ではログを無効化）\n    const IS_DEBUG_MODE = typeof process !== 'undefined' && process.env?.NODE_ENV === 'development' || \n                          typeof window !== 'undefined';\n    \n    // Batch timestamp retrieval for performance\n    const frameStartTime = performance.now();\n    \n    // Check if we should process this frame based on adaptive FPS\n    if (!this.frameRateLimiter.shouldProcess()) {\n      // Skip this frame but schedule next\n      this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n      return;\n    }\n    // Development-only debug logging\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      console.log(`[Debug] detectPitch呼び出し: detecting=${this.isDetecting}, analyser=${!!this.analyser}, rawAnalyser=${!!this.rawAnalyser}, pitchDetector=${!!this.pitchDetector}`);\n      \n      const audioManagerStatus = this.audioManager.getStatus();\n      console.log(`[Debug] AudioManager状態: context=${audioManagerStatus.audioContextState}, stream=${audioManagerStatus.mediaStreamActive}`);\n    }\n    \n    if (!this.isDetecting || !this.analyser || !this.rawAnalyser || !this.pitchDetector || !this.deviceSpecs) return;\n    \n    const bufferLength = this.analyser.fftSize;\n    const buffer = new Float32Array(bufferLength);\n    const rawBuffer = new Float32Array(this.rawAnalyser.fftSize);\n    \n    this.analyser.getFloatTimeDomainData(buffer);\n    this.rawAnalyser.getFloatTimeDomainData(rawBuffer);\n    \n    // Development-only buffer analysis debug logging\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      const nonZeroCount = buffer.filter(val => Math.abs(val) > 0.0001).length;\n      const maxValue = Math.max(...buffer.map(val => Math.abs(val)));\n      console.log(`[Debug] バッファー分析: 非ゼロ値=${nonZeroCount}/${bufferLength}, 最大値=${maxValue.toFixed(6)}`);\n    }\n    \n    // Volume calculation (filtered)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += Math.abs(buffer[i]);\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n    \n    // Development-only RMS calculation debug logging\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      console.log(`[Debug] RMS計算: sum=${sum.toFixed(6)}, rms=${rms.toFixed(6)}`);\n    }\n    \n    // Platform-specific volume calculation\n    const platformSpecs = this.deviceSpecs;\n    const adjustedRms = rms * platformSpecs.gainCompensation;\n    \n    // 🔧 動的SCALING_FACTOR計算 (sensitivity値に基づく)\n    const currentSensitivity = platformSpecs.sensitivity;\n    const SCALING_FACTOR = 400 / (currentSensitivity * currentSensitivity);\n    const NOISE_GATE_SCALING_FACTOR = 500; // 📊 v1.2.9確定値: 理想の1.5%閾値（テスト導出最適値）\n    \n    // ハードクリッピング（シンプルなリニア変換）\n    const rawVolumeValue = adjustedRms * SCALING_FACTOR;\n    const volumePercent = Math.min(100, Math.max(0, rawVolumeValue));\n    \n    // ブラウザ環境でのデバッグログ（デバッグモード時のみ）\n    if (IS_DEBUG_MODE) {\n      console.log(`[Debug] 音量計算詳細:`);\n      console.log(`  rms=${rms.toFixed(6)}`);\n      console.log(`  adjustedRms=${adjustedRms.toFixed(6)}`);\n      console.log(`  SCALING_FACTOR=${SCALING_FACTOR}`);\n      console.log(`  計算前: adjustedRms * SCALING_FACTOR = ${rawVolumeValue.toFixed(6)}`);\n      console.log(`  計算後volumePercent=${volumePercent.toFixed(2)}%`);\n      console.log(`  クリップされた？: ${rawVolumeValue > 100 ? 'YES' : 'NO'}`);\n      console.log(`  プラットフォーム: gain=${platformSpecs.gainCompensation}, divisor=${platformSpecs.divisor}`);\n    }\n    \n    // Raw volume calculation (pre-filter)\n    let rawSum = 0;\n    for (let i = 0; i < rawBuffer.length; i++) {\n      rawSum += Math.abs(rawBuffer[i]);\n    }\n    const rawRms = Math.sqrt(rawSum / rawBuffer.length);\n    const rawAdjustedRms = rawRms * platformSpecs.gainCompensation;\n    const rawVolumePercent = Math.min(100, Math.max(0, rawAdjustedRms * SCALING_FACTOR));\n    \n    // Volume stabilization with configurable history length\n    this.addToVolumeHistory(volumePercent);\n    this.stableVolume = this.calculateVolumeAverage();\n    \n    // 平滑化結果のデバッグログ\n    if (IS_DEBUG_MODE) {\n      console.log(`[Debug] 平滑化結果: volumePercent=${volumePercent.toFixed(2)}%, stableVolume=${this.stableVolume.toFixed(2)}%`);\n    }\n    \n    // ★★★ ノイズゲート処理の追加 ★★★\n    const NOISE_GATE_THRESHOLD = this.config.minVolumeAbsolute * NOISE_GATE_SCALING_FACTOR; // 📊 v1.2.1.22: 200倍で1.75%閾値（理想の1.5%に近似）\n    const isSignalBelowNoiseGate = volumePercent < NOISE_GATE_THRESHOLD; // 平滑化前の値で判定\n    \n    // ノイズゲート判定のデバッグログ\n    if (IS_DEBUG_MODE) {\n      console.log(`[Debug] ノイズゲート判定:`);\n      console.log(`  閾値: ${NOISE_GATE_THRESHOLD.toFixed(2)}% (minVolumeAbsolute=${this.config.minVolumeAbsolute} × ${NOISE_GATE_SCALING_FACTOR})`);\n      console.log(`  現在値: ${volumePercent.toFixed(2)}%`);\n      console.log(`  判定: ${isSignalBelowNoiseGate ? 'ノイズとしてブロック' : '有効信号として通過'}`);\n    }\n    \n    if (isSignalBelowNoiseGate) {\n      // 閾値以下の場合は、検出結果をクリアするが、stableVolumeは保持（スムージング維持）\n      this.currentVolume = 0;\n      this.rawVolume = 0;\n      // this.stableVolume = 0; <- 削除：スムージング履歴を保持\n      this.currentFrequency = 0;\n      this.detectedNote = '--';\n      this.detectedOctave = null;\n      this.pitchClarity = 0;\n      this.resetHarmonicHistory();\n      \n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n        console.log(`[Debug] ノイズゲート作動: 入力音量=${volumePercent.toFixed(3)} < 閾値=${NOISE_GATE_THRESHOLD}, stableVolume=${this.stableVolume.toFixed(3)}（保持）`);\n      }\n    } else {\n      // 閾値以上の信号がある場合のみ、ピッチ検出を実行\n      this.currentVolume = this.stableVolume;\n      this.rawVolume = rawVolumePercent;\n      \n      // Pitch detection (using PitchDetector) with error handling\n      // AudioContextから実際のサンプルレートを動的に取得する\n      const sampleRate = this.analyser.context?.sampleRate || 44100; // フォールバック値\n      let pitch = 0;\n      let clarity = 0;\n    \n    try {\n      const pitchResult = this.pitchDetector.findPitch(buffer, sampleRate);\n      pitch = pitchResult[0] || 0;\n      clarity = pitchResult[1] || 0;\n    } catch (error) {\n      // Handle pitch detection errors gracefully\n      const pitchError = new PitchDetectionError(\n        'Pitch detection algorithm failed',\n        {\n          bufferLength: buffer.length,\n          sampleRate,\n          volume: this.currentVolume,\n          originalError: error instanceof Error ? error.message : String(error)\n        }\n      );\n      \n      console.warn('⚠️ [PitchDetector] Pitch detection error (recoverable):', pitchError.toJSON());\n      \n      // For recoverable errors, continue with zero values\n      if (isRecoverableError(pitchError)) {\n        pitch = 0;\n        clarity = 0;\n      } else {\n        // For non-recoverable errors, notify callback\n        this.callbacks.onError?.(pitchError);\n        return;\n      }\n    }\n    \n    // Development-only Pitchy results debug logging\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      console.log(`[Debug] Pitchy結果: pitch=${pitch?.toFixed(1) || 'null'}, clarity=${clarity?.toFixed(3) || 'null'}, volume=${this.currentVolume?.toFixed(1)}%, sampleRate=${sampleRate.toString()}`);\n      console.log(`[Debug] Pitchyバッファー: 最初5要素=${Array.from(buffer.slice(0, 5)).map(v => v.toFixed(6)).join(', ')}`);\n    }\n    \n    // Human vocal range filtering (practical adjustment)\n    // Optimized for actual human voice range:\n    // - Low range: 45Hz and above (F1 and above, supporting exceptional bass voices)\n    // - High range: 1200Hz and below (practical singing range)\n    // - Exclude extreme low frequency noise while preserving deep male voices\n    const isValidVocalRange = pitch >= 45 && pitch <= 1200;\n    \n    // Development-only decision criteria debug logging\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      console.log(`[Debug] 判定条件: pitch=${!!pitch}, clarity=${clarity?.toFixed(3)}>${this.config.clarityThreshold}, volume=${this.currentVolume?.toFixed(1)}>${this.config.minVolumeAbsolute}, range=${isValidVocalRange}`);\n    }\n    \n    if (pitch && clarity > this.config.clarityThreshold && this.currentVolume > this.config.minVolumeAbsolute && isValidVocalRange) {\n      let finalFreq = pitch;\n      \n      // Harmonic correction control\n      if (!this.disableHarmonicCorrection) {\n        // Apply unified harmonic correction system (pass volume information)\n        const normalizedVolume = Math.min(this.currentVolume / 100, 1.0); // Normalize to 0-1\n        finalFreq = this.correctHarmonic(pitch, normalizedVolume);\n      }\n      \n      // Update frequency display (preserve decimal precision)\n      this.currentFrequency = finalFreq;\n      const noteInfo = this.frequencyToNoteAndOctave(this.currentFrequency);\n      this.detectedNote = noteInfo.note;\n      this.detectedOctave = noteInfo.octave;\n      this.pitchClarity = clarity;\n      \n    } else {\n      // Clear harmonic correction history when signal is weak\n      if (this.currentFrequency === 0) {\n        this.resetHarmonicHistory();\n      }\n      \n      // Clear frequency display\n      this.currentFrequency = 0;\n      this.detectedNote = '--';\n      this.detectedOctave = null;\n      this.pitchClarity = 0;\n      }\n    } // else節の終了\n    \n    // 最後に、表示音量を決定するロジック - ノイズゲート適用\n    const displayVolume = isSignalBelowNoiseGate ? 0 : this.stableVolume; // ノイズゲート適用後の表示値\n    \n    // Process silence detection\n    this.processSilenceDetection(this.currentVolume);\n    \n    // Send data to callback\n    const result: PitchDetectionResult = {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      octave: this.detectedOctave || undefined,\n      clarity: this.pitchClarity,\n      volume: displayVolume,\n      cents: this.currentFrequency > 0 ? this.frequencyToCents(this.currentFrequency) : undefined\n    };\n    \n    // Separate visual updates from audio processing\n    this.processAudioData(result);\n    this.updateVisuals(result);\n    \n    // Performance optimization: batch timing operations\n    const frameEndTime = performance.now();\n    const frameProcessTime = frameEndTime - frameStartTime;\n    \n    // Check performance and adjust frame rate if needed\n    const stats = this.frameRateLimiter.getStats();\n    if (stats.frameDrops === 0) {\n      this.frameRateLimiter.recoverPerformance();\n    }\n    \n    // Performance monitoring (development only)\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development' && frameProcessTime > 16.67) { // > 60fps threshold\n      console.warn(`[PitchDetector] Frame processing took ${frameProcessTime.toFixed(2)}ms (>16.67ms threshold)`);\n    }\n    \n    this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n  }\n\n  /**\n   * Harmonic correction system with configurable parameters\n   * \n   * @private\n   * @description Analyzes frequency history to detect and correct harmonic errors\n   * like octave jumping. Uses configurable confidence thresholds and time windows\n   * to balance correction accuracy with responsiveness.\n   * \n   * @param frequency - The detected frequency to potentially correct\n   * @param volume - The current volume level for confidence calculation\n   * @returns The corrected frequency or original if no correction needed\n   */\n  private correctHarmonic(frequency: number, volume: number): number {\n    if (!this.harmonicConfig.enabled) {\n      this.previousFrequency = frequency;\n      return frequency;\n    }\n\n    const now = performance.now();\n\n    // 履歴から古いデータを削除\n    this.harmonicHistory = this.harmonicHistory.filter(\n      h => now - h.timestamp < this.harmonicConfig.historyWindow\n    );\n\n    // ★【重要】履歴には補正前の「生の周波数」のみを追加する\n    this.harmonicHistory.push({ frequency: frequency, confidence: volume, timestamp: now });\n\n    if (this.harmonicHistory.length < 8) { // 十分な履歴が溜まるまで補正しない（5→8に厳格化）\n      this.previousFrequency = frequency;\n      return frequency;\n    }\n\n    // 履歴内の平均周波数を計算\n    const avgFrequency = this.harmonicHistory.reduce((sum, h) => sum + h.frequency, 0) / this.harmonicHistory.length;\n\n    const octaveUp = frequency * 2;\n    const octaveDown = frequency / 2;\n    const diffCurrent = Math.abs(frequency - avgFrequency);\n    const diffUp = Math.abs(octaveUp - avgFrequency);\n    const diffDown = Math.abs(octaveDown - avgFrequency);\n\n    let correctedFrequency = frequency;\n\n    // 現在の周波数よりも、オクターブ下のほうが履歴の平均に近い場合、オクターブ下と判断\n    if (diffDown < diffCurrent && diffDown < diffUp) {\n      correctedFrequency = octaveDown;\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n        console.log(`🔧 [PitchDetector] Octave correction DOWN: ${frequency.toFixed(1)}Hz → ${correctedFrequency.toFixed(1)}Hz (avg: ${avgFrequency.toFixed(1)}Hz)`);\n      }\n    } \n    // 現在の周波数よりも、オクターブ上のほうが履歴の平均に近い場合、オクターブ上と判断\n    else if (diffUp < diffCurrent && diffUp < diffDown) {\n      correctedFrequency = octaveUp;\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n        console.log(`🔧 [PitchDetector] Octave correction UP: ${frequency.toFixed(1)}Hz → ${correctedFrequency.toFixed(1)}Hz (avg: ${avgFrequency.toFixed(1)}Hz)`);\n      }\n    }\n\n    // 補正後の周波数をpreviousFrequencyとして保持\n    this.previousFrequency = correctedFrequency;\n    return correctedFrequency;\n  }\n\n  /**\n   * Reset harmonic correction history and frequency tracking\n   * \n   * @private\n   * @description Clears the frequency history buffer used for harmonic correction\n   * and resets the previous frequency reference. Called when signal quality is poor\n   * or when restarting detection to prevent incorrect corrections.\n   */\n  private resetHarmonicHistory(): void {\n    this.harmonicHistory = [];\n    this.previousFrequency = 0;\n  }\n\n  /**\n   * Convert frequency to musical note name and octave number\n   * \n   * @private\n   * @description Converts a frequency in Hz to standard musical notation using\n   * equal temperament tuning (A4 = 440Hz). Calculates semitone distances\n   * and maps to chromatic scale positions.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Object containing note name (C, C#, D, etc.) and octave number\n   * \n   * @example\n   * ```typescript\n   * frequencyToNoteAndOctave(440) // { note: 'A', octave: 4 }\n   * frequencyToNoteAndOctave(261.63) // { note: 'C', octave: 4 }\n   * ```\n   */\n  private frequencyToNoteAndOctave(frequency: number): { note: string; octave: number | null } {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const A4 = 440;\n    \n    if (frequency <= 0) return { note: '--', octave: null };\n    \n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\n    const noteIndex = (semitonesFromA4 + 9 + 120) % 12;\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\n    \n    return { note: noteNames[noteIndex], octave };\n  }\n  \n\n  /**\n   * Convert frequency to cents deviation from the nearest semitone\n   * \n   * @private\n   * @description Calculates the pitch deviation in cents (1/100th of a semitone)\n   * from the nearest equal temperament note. Positive values indicate sharp,\n   * negative values indicate flat.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Cents deviation (-50 to +50 cents from nearest note)\n   * \n   * @example\n   * ```typescript\n   * frequencyToCents(440) // 0 (exactly A4)\n   * frequencyToCents(446) // ~25 cents sharp\n   * frequencyToCents(435) // ~-20 cents flat\n   * ```\n   */\n  private frequencyToCents(frequency: number): number {\n    const A4 = 440;\n    const semitonesFromA4 = 12 * Math.log2(frequency / A4);\n    const nearestSemitone = Math.round(semitonesFromA4);\n    const centsDeviation = (semitonesFromA4 - nearestSemitone) * 100;\n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Process silence detection logic and manage timeout handlers\n   * \n   * @private\n   * @description Monitors volume levels to detect periods of silence and triggers\n   * appropriate warnings and timeouts. Manages silence detection state and timers\n   * to provide automatic recovery from idle states.\n   * \n   * @param currentVolume - Current volume level to evaluate for silence\n   */\n  private processSilenceDetection(currentVolume: number): void {\n    if (!this.silenceDetectionConfig.enabled) {\n      return;\n    }\n    \n    const now = Date.now();\n    const volumeThreshold = this.silenceDetectionConfig.minVolumeThreshold || 0.01;\n    const isCurrentlySilent = currentVolume < volumeThreshold;\n    \n    if (isCurrentlySilent) {\n      // Start tracking silence if not already doing so\n      if (!this.isSilent) {\n        this.isSilent = true;\n        this.silenceStartTime = now;\n        this.hasWarned = false;\n        \n        console.log('🔇 [PitchDetector] Silence detected, starting timer');\n        \n        // Schedule warning\n        if (this.silenceDetectionConfig.warningThreshold) {\n          this.silenceWarningTimer = window.setTimeout(() => {\n            this.handleSilenceWarning();\n          }, this.silenceDetectionConfig.warningThreshold);\n        }\n        \n        // Schedule timeout\n        if (this.silenceDetectionConfig.timeoutThreshold) {\n          this.silenceTimeoutTimer = window.setTimeout(() => {\n            this.handleSilenceTimeout();\n          }, this.silenceDetectionConfig.timeoutThreshold);\n        }\n      }\n    } else {\n      // Voice detected - reset silence tracking\n      if (this.isSilent) {\n        const silenceDuration = this.silenceStartTime ? now - this.silenceStartTime : 0;\n        console.log(`🔊 [PitchDetector] Voice recovered after ${silenceDuration}ms of silence`);\n        \n        this.resetSilenceTracking();\n        \n        // Notify recovery\n        if (this.silenceDetectionConfig.onSilenceRecovered) {\n          this.silenceDetectionConfig.onSilenceRecovered();\n        }\n      }\n    }\n  }\n  \n  /**\n   * Handle silence warning\n   */\n  private handleSilenceWarning(): void {\n    if (!this.hasWarned && this.silenceStartTime) {\n      const duration = Date.now() - this.silenceStartTime;\n      this.hasWarned = true;\n      \n      console.log(`⚠️ [PitchDetector] Silence warning: ${duration}ms`);\n      \n      if (this.silenceDetectionConfig.onSilenceWarning) {\n        this.silenceDetectionConfig.onSilenceWarning(duration);\n      }\n    }\n  }\n  \n  /**\n   * Handle silence timeout\n   */\n  private handleSilenceTimeout(): void {\n    console.log('⏰ [PitchDetector] Silence timeout reached');\n    \n    if (this.silenceDetectionConfig.onSilenceTimeout) {\n      this.silenceDetectionConfig.onSilenceTimeout();\n    }\n    \n    // Optionally stop detection on timeout\n    this.stopDetection();\n    this.resetSilenceTracking();\n  }\n  \n  /**\n   * Reset silence tracking state\n   */\n  private resetSilenceTracking(): void {\n    this.isSilent = false;\n    this.silenceStartTime = null;\n    this.hasWarned = false;\n    \n    // Clear timers\n    if (this.silenceWarningTimer) {\n      clearTimeout(this.silenceWarningTimer);\n      this.silenceWarningTimer = null;\n    }\n    \n    if (this.silenceTimeoutTimer) {\n      clearTimeout(this.silenceTimeoutTimer);\n      this.silenceTimeoutTimer = null;\n    }\n  }\n\n  /**\n   * Reset display state and immediately update UI elements\n   */\n  resetDisplayState(): void {\n    this.currentVolume = 0;\n    this.rawVolume = 0;\n    this.currentFrequency = 0;\n    this.detectedNote = '--';\n    this.detectedOctave = null;\n    this.pitchClarity = 0;\n    this.stableVolume = 0;\n    \n    // Clear buffers\n    this.initializeVolumeHistory();\n    \n    // Reset harmonic correction\n    this.resetHarmonicHistory();\n    \n    // Reset silence detection\n    this.resetSilenceTracking();\n    \n    console.log('🔄 [PitchDetector] Display state reset');\n    \n    // Immediately update UI to reflect reset state by forcing a manual update\n    this.forceUIUpdate();\n    console.log('✅ [PitchDetector] UI forcefully updated to reflect reset state');\n  }\n\n  /**\n   * Force UI update with current internal state (reset values)\n   * @private\n   */\n  private forceUIUpdate(): void {\n    try {\n      // Reset common volume bar selectors\n      const volumeBarSelectors = [\n        '#volume-bar', '#mic-volume-bar', '#range-volume-bar', '#practice-volume-bar',\n        '[id*=\"volume-bar\"]', '.volume-bar'\n      ];\n      \n      volumeBarSelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          if (element instanceof HTMLProgressElement) {\n            element.value = 0;\n          } else {\n            (element as HTMLElement).style.width = '0%';\n          }\n        }\n      });\n\n      // Reset common volume text selectors\n      const volumeTextSelectors = [\n        '#volume-text', '#mic-volume-text', '#range-volume-text', '#practice-volume-text',\n        '[id*=\"volume-text\"]', '.volume-text'\n      ];\n      \n      volumeTextSelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          element.textContent = '0.0%';\n        }\n      });\n\n      // Reset common frequency selectors\n      const frequencySelectors = [\n        '#frequency', '#mic-frequency', '#range-frequency', '#practice-frequency',\n        '[id*=\"frequency\"]', '.frequency', '#freq-1', '#freq-2', '#freq-3'\n      ];\n      \n      frequencySelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          element.textContent = '0.0 Hz';\n        }\n      });\n\n      // Reset common note selectors\n      const noteSelectors = [\n        '#note', '#note-display', '#mic-note', '#range-note', '#practice-note',\n        '[id*=\"note\"]', '.note', '.note-display'\n      ];\n      \n      noteSelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          element.textContent = '--';\n        }\n      });\n    } catch (error) {\n      console.warn('⚠️ [PitchDetector] Error in forceUIUpdate:', (error as Error).message);\n    }\n  }\n\n  /**\n   * Enable/disable harmonic correction\n   */\n  setHarmonicCorrectionEnabled(enabled: boolean): void {\n    this.disableHarmonicCorrection = !enabled;\n    if (!enabled) {\n      this.resetHarmonicHistory();\n    }\n  }\n  \n  /**\n   * Update silence detection configuration\n   */\n  setSilenceDetectionConfig(config: Partial<SilenceDetectionConfig>): void {\n    this.silenceDetectionConfig = {\n      ...this.silenceDetectionConfig,\n      ...config\n    };\n    \n    // Reset tracking if disabled\n    if (!this.silenceDetectionConfig.enabled) {\n      this.resetSilenceTracking();\n    }\n    \n    console.log('🔇 [PitchDetector] Silence detection config updated:', this.silenceDetectionConfig);\n  }\n  \n  /**\n   * Get current silence detection status\n   */\n  getSilenceStatus(): {\n    isEnabled: boolean;\n    isSilent: boolean;\n    silenceDuration: number | null;\n    hasWarned: boolean;\n  } {\n    const silenceDuration = this.silenceStartTime && this.isSilent \n      ? Date.now() - this.silenceStartTime \n      : null;\n      \n    return {\n      isEnabled: this.silenceDetectionConfig.enabled || false,\n      isSilent: this.isSilent,\n      silenceDuration,\n      hasWarned: this.hasWarned\n    };\n  }\n\n  /**\n   * Get initialization status\n   */\n  getIsInitialized(): boolean {\n    return this.isInitialized && this.componentState === 'ready';\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      lastError: this.lastError,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector)\n    };\n  }\n\n  /**\n   * Get current detection result\n   */\n  getCurrentResult(): PitchDetectionResult {\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: this.currentFrequency > 0 ? this.rawVolume : 0\n    };\n  }\n\n  /**\n   * Process audio data with high priority for real-time callback delivery\n   * \n   * @private\n   * @description Handles critical audio processing that requires low latency.\n   * Runs at the full adaptive frame rate (30-60 FPS) to ensure responsive\n   * pitch detection callbacks for real-time applications.\n   * \n   * @param result - Complete pitch detection result to process\n   */\n  private processAudioData(result: PitchDetectionResult): void {\n    // Critical audio processing that needs low latency\n    // This runs at the full adaptive frame rate (30-60 FPS)\n    \n    // Callback for real-time audio processing\n    this.callbacks.onPitchUpdate?.(result);\n  }\n  \n  /**\n   * Update visual elements with lower priority rendering\n   * \n   * @private\n   * @description Handles visual updates that can be throttled to maintain performance.\n   * Visual rendering can be limited to 30 FPS without affecting audio processing quality.\n   * The underscore prefix indicates intentional parameter non-use.\n   * \n   * @param _result - Pitch detection result (unused, handled by UI layer)\n   */\n  private updateVisuals(_result: PitchDetectionResult): void {\n    // Visual updates can be throttled to 30 FPS\n    // This is handled by the UI layer if needed\n    \n    // The callback can decide to throttle visual updates\n    // For now, we pass through all updates\n    // Note: result parameter prefixed with _ to indicate intentional non-use\n  }\n  \n  /**\n   * Get current performance statistics\n   */\n  getPerformanceStats(): {\n    currentFPS: number;\n    frameDrops: number;\n    latency: number;\n  } {\n    return this.frameRateLimiter.getStats();\n  }\n  \n  /**\n   * Reinitialize detector\n   */\n  async reinitialize(): Promise<void> {\n    console.log('🔄 [PitchDetector] Starting reinitialization');\n    \n    // Cleanup current state\n    this.cleanup();\n    \n    // Short wait to ensure resource release\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // Execute reinitialization\n    await this.initialize();\n    \n    console.log('✅ [PitchDetector] Reinitialization complete');\n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    console.log('🧹 [PitchDetector] Starting cleanup');\n    \n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      console.log('📤 [PitchDetector] Notified AudioManager of Analyser release:', this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n    this.rawAnalyser = null;\n    this.pitchDetector = null;\n    \n    // Clear history\n    this.initializeVolumeHistory();\n    this.resetHarmonicHistory();\n    \n    console.log('✅ [PitchDetector] Cleanup complete');\n  }\n\n  /**\n   * Gets the latest pitch detection result without triggering new analysis\n   * \n   * @description Returns the most recent detection result from the ongoing analysis.\n   * Useful for UI updates and external monitoring without affecting detection performance.\n   * \n   * @returns Latest pitch detection result or null if no detection is active\n   * \n   * @example\n   * ```typescript\n   * const result = pitchDetector.getLatestResult();\n   * if (result) {\n   *   console.log(`Latest: ${result.note} - ${result.frequency.toFixed(1)}Hz`);\n   *   console.log(`Volume: ${result.volume.toFixed(1)}%, Clarity: ${result.clarity.toFixed(2)}`);\n   * }\n   * ```\n   */\n  getLatestResult(): PitchDetectionResult | null {\n    if (!this.isDetecting || this.componentState !== 'detecting') {\n      return null;\n    }\n\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      octave: this.detectedOctave ?? 0,\n      volume: this.currentVolume,\n      rawVolume: this.rawVolume,\n      clarity: this.pitchClarity,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Destroys the PitchDetector and cleans up all resources\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.destroy();\n   * console.log('PitchDetector destroyed and resources cleaned up');\n   * ```\n   */\n  destroy(): void {\n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      console.log('📤 [PitchDetector] Notified AudioManager of Analyser release:', this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n  }\n\n  /**\n   * Gets current PitchDetector status for debugging and monitoring\n   * \n   * @returns Status object with component state and performance metrics\n   */\n  getStatus() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      isRunning: this.isDetecting,\n      currentVolume: this.currentVolume,\n      rawVolume: this.rawVolume,\n      currentFrequency: this.currentFrequency,\n      detectedNote: this.detectedNote,\n      detectedOctave: this.detectedOctave,\n      currentClarity: this.pitchClarity,\n      lastError: this.lastError,\n      frameRateStatus: this.frameRateLimiter?.getStats(),\n      deviceSpecs: this.deviceSpecs,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector),\n      harmonicConfig: this.harmonicConfig,\n      volumeHistoryConfig: this.volumeHistoryConfig\n    };\n  }\n\n  /**\n   * Initialize volume history buffer based on configuration\n   * \n   * @private\n   * @description Creates either a regular array or TypedArray buffer based on config\n   */\n  private initializeVolumeHistory(): void {\n    const length = this.volumeHistoryConfig.historyLength;\n    \n    if (this.volumeHistoryConfig.useTypedArray) {\n      this.volumeHistory = new Float32Array(length);\n    } else {\n      this.volumeHistory = new Array(length).fill(0);\n    }\n  }\n\n  /**\n   * Add new volume value to history buffer with efficient circular buffer operation\n   * \n   * @private\n   * @param volume - Volume value to add to history\n   */\n  private addToVolumeHistory(volume: number): void {\n    if (this.volumeHistory instanceof Float32Array) {\n      // Efficient circular buffer for TypedArray\n      this.volumeHistory.copyWithin(0, 1);\n      this.volumeHistory[this.volumeHistory.length - 1] = volume;\n    } else {\n      // Traditional array operations\n      this.volumeHistory.push(volume);\n      if (this.volumeHistory.length > this.volumeHistoryConfig.historyLength) {\n        this.volumeHistory.shift();\n      }\n    }\n  }\n\n  /**\n   * Calculate average volume from history buffer\n   * \n   * @private\n   * @returns Average volume value\n   */\n  private calculateVolumeAverage(): number {\n    if (this.volumeHistory instanceof Float32Array) {\n      let sum = 0;\n      for (let i = 0; i < this.volumeHistory.length; i++) {\n        sum += this.volumeHistory[i];\n      }\n      return sum / this.volumeHistory.length;\n    } else {\n      return this.volumeHistory.reduce((sum, v) => sum + v, 0) / this.volumeHistory.length;\n    }\n  }\n\n  /**\n   * Update harmonic correction configuration\n   * \n   * @param config - Partial harmonic correction configuration to update\n   */\n  updateHarmonicConfig(config: Partial<HarmonicCorrectionConfig>): void {\n    this.harmonicConfig = { ...this.harmonicConfig, ...config };\n    \n    // Reset harmonic history when configuration changes\n    this.resetHarmonicHistory();\n    \n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      console.log('🔧 [PitchDetector] Harmonic correction config updated:', this.harmonicConfig);\n    }\n  }\n\n  /**\n   * Update volume history configuration\n   * \n   * @param config - Partial volume history configuration to update\n   */\n  updateVolumeHistoryConfig(config: Partial<VolumeHistoryConfig>): void {\n    this.volumeHistoryConfig = { ...this.volumeHistoryConfig, ...config };\n    \n    // Reinitialize volume history with new configuration\n    this.initializeVolumeHistory();\n    \n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      console.log('📊 [PitchDetector] Volume history config updated:', this.volumeHistoryConfig);\n    }\n  }\n}","/**\n * NoiseFilter - Advanced 3-Stage Noise Reduction Filter Chain\n * \n * @description Implements sophisticated cascade filtering optimized for voice detection\n * and pitch analysis. Removes environmental noise while preserving vocal frequencies\n * essential for accurate pitch detection.\n * \n * **Filter Stages:**\n * 1. **Highpass Filter** (80Hz) - Removes low-frequency environmental noise, breathing sounds\n * 2. **Lowpass Filter** (800Hz) - Removes high-frequency noise while preserving vocal harmonics  \n * 3. **Notch Filter** (60Hz) - Eliminates electrical power line interference\n * \n * @example\n * ```typescript\n * const noiseFilter = new NoiseFilter(audioContext, {\n *   highpassFreq: 100,  // More aggressive low-cut\n *   lowpassFreq: 1000,  // Extended high-frequency range\n *   useFilters: true\n * });\n * \n * // Connect in audio chain\n * sourceNode.connect(noiseFilter.connect(inputNode, analyserNode));\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { NoiseFilterConfig } from '../types';\nimport { \n  AudioContextError,\n  PitchProError,\n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class NoiseFilter {\n  /** @private AudioContext for creating filter nodes */\n  private audioContext: AudioContext;\n  \n  /** @private Complete filter configuration with defaults applied */\n  private config: Required<NoiseFilterConfig>;\n  \n  /** @private Highpass filter node for low-frequency noise removal */\n  private highpassFilter: BiquadFilterNode | null = null;\n  \n  /** @private Lowpass filter node for high-frequency noise removal */\n  private lowpassFilter: BiquadFilterNode | null = null;\n  \n  /** @private Notch filter node for power line noise elimination */\n  private notchFilter: BiquadFilterNode | null = null;\n  \n  /** @private Filter chain connection state */\n  private isConnected = false;\n  \n  /** @private Input node reference for disconnection */\n  private inputNode: AudioNode | null = null;\n  \n  /** @private Output node reference for disconnection */\n  private outputNode: AudioNode | null = null;\n\n  /**\n   * Creates a new NoiseFilter with configurable 3-stage filtering\n   * \n   * @param audioContext - Web Audio API AudioContext instance\n   * @param config - Optional filter configuration to override defaults\n   * @param config.highpassFreq - Highpass cutoff frequency in Hz (default: 80)\n   * @param config.lowpassFreq - Lowpass cutoff frequency in Hz (default: 800)  \n   * @param config.notchFreq - Notch filter center frequency in Hz (default: 60)\n   * @param config.highpassQ - Highpass filter Q factor (default: 0.7)\n   * @param config.lowpassQ - Lowpass filter Q factor (default: 0.7)\n   * @param config.notchQ - Notch filter Q factor (default: 10.0)\n   * @param config.useFilters - Enable/disable entire filter chain (default: true)\n   * \n   * @example\n   * ```typescript\n   * // Standard voice filtering\n   * const voiceFilter = new NoiseFilter(audioContext);\n   * \n   * // Custom instrument filtering  \n   * const instrumentFilter = new NoiseFilter(audioContext, {\n   *   highpassFreq: 60,   // Allow deeper frequencies\n   *   lowpassFreq: 2000,  // Extended harmonic range\n   *   notchQ: 20.0        // Sharper power line rejection\n   * });\n   * \n   * // Bypass filtering\n   * const bypassFilter = new NoiseFilter(audioContext, {\n   *   useFilters: false\n   * });\n   * ```\n   */\n  constructor(audioContext: AudioContext, config: NoiseFilterConfig = {}) {\n    this.audioContext = audioContext;\n    this.config = {\n      highpassFreq: 50,  // 深い男性の声に対応（G1 49Hzまで）\n      lowpassFreq: 800,\n      notchFreq: 50,      // 🔧 日本の電源周波数50Hzに合わせて電源ハムノイズを除去\n      highpassQ: 0.7,\n      lowpassQ: 0.7,\n      notchQ: 10.0,\n      useFilters: true,\n      ...config\n    };\n    \n    this.createFilterChain();\n  }\n\n  /**\n   * Create the 3-stage filter chain\n   */\n  private createFilterChain(): void {\n    if (!this.config.useFilters) {\n      console.log('🔇 [NoiseFilter] Filters disabled - bypassing filter chain');\n      return;\n    }\n\n    try {\n      // 1. Highpass filter (remove low frequency noise: cut below 50Hz, 深い男性の声を保護)\n      this.highpassFilter = this.audioContext.createBiquadFilter();\n      this.highpassFilter.type = 'highpass';\n      this.highpassFilter.frequency.setValueAtTime(this.config.highpassFreq, this.audioContext.currentTime);\n      this.highpassFilter.Q.setValueAtTime(this.config.highpassQ, this.audioContext.currentTime);\n\n      // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n      this.lowpassFilter = this.audioContext.createBiquadFilter();\n      this.lowpassFilter.type = 'lowpass';\n      this.lowpassFilter.frequency.setValueAtTime(this.config.lowpassFreq, this.audioContext.currentTime);\n      this.lowpassFilter.Q.setValueAtTime(this.config.lowpassQ, this.audioContext.currentTime);\n\n      // 3. Notch filter (remove power line noise: 60Hz)\n      this.notchFilter = this.audioContext.createBiquadFilter();\n      this.notchFilter.type = 'notch';\n      this.notchFilter.frequency.setValueAtTime(this.config.notchFreq, this.audioContext.currentTime);\n      this.notchFilter.Q.setValueAtTime(this.config.notchQ, this.audioContext.currentTime);\n\n      console.log('✅ [NoiseFilter] 3-stage filter chain created', {\n        highpass: `${this.config.highpassFreq}Hz (Q=${this.config.highpassQ})`,\n        lowpass: `${this.config.lowpassFreq}Hz (Q=${this.config.lowpassQ})`,\n        notch: `${this.config.notchFreq}Hz (Q=${this.config.notchQ})`\n      });\n\n    } catch (error) {\n      const structuredError = new AudioContextError(\n        'ノイズフィルターチェーンの初期化に失敗しました。オーディオシステムのサポート状況を確認してください。',\n        {\n          operation: 'createFilterChain',\n          originalError: (error as Error).message,\n          filterConfig: this.config,\n          audioContextState: this.audioContext.state,\n          sampleRate: this.audioContext.sampleRate\n        }\n      );\n      \n      ErrorMessageBuilder.logError(structuredError, 'NoiseFilter initialization');\n      console.error('❌ [NoiseFilter] Failed to create filter chain:', structuredError.toJSON());\n      throw structuredError;\n    }\n  }\n\n  /**\n   * Connects the filter chain between input and output nodes in audio processing pipeline\n   * \n   * @description Creates audio connections through the 3-stage filter chain or bypasses\n   * if filtering is disabled. Handles both inline filtering and return-node patterns.\n   * \n   * @param inputNode - Source audio node (e.g., MediaStreamAudioSourceNode)\n   * @param outputNode - Optional destination node (e.g., AnalyserNode)\n   * @returns The final output node in the chain for further connections\n   * \n   * @example\n   * ```typescript\n   * // Direct connection pattern\n   * sourceNode.connect(noiseFilter.connect(inputNode, analyserNode));\n   * \n   * // Chain connection pattern\n   * const filteredNode = noiseFilter.connect(sourceNode);\n   * filteredNode.connect(analyserNode);\n   * \n   * // Bypass mode (useFilters: false)\n   * const passthroughNode = noiseFilter.connect(sourceNode, analyserNode);\n   * ```\n   */\n  connect(inputNode: AudioNode, outputNode?: AudioNode): AudioNode {\n    if (!this.config.useFilters) {\n      // Bypass filtering - direct connection\n      if (outputNode) {\n        inputNode.connect(outputNode);\n      }\n      return inputNode;\n    }\n\n    if (!this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      const error = new PitchProError(\n        'ノイズフィルターが正しく初期化されていません。コンストラクタでuseFilters: trueで初期化してください。',\n        ErrorCode.AUDIO_CONTEXT_ERROR,\n        {\n          operation: 'connect',\n          useFilters: this.config.useFilters,\n          hasHighpassFilter: !!this.highpassFilter,\n          hasLowpassFilter: !!this.lowpassFilter,\n          hasNotchFilter: !!this.notchFilter\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'NoiseFilter connection');\n      throw error;\n    }\n\n    try {\n      // Disconnect any existing connections\n      this.disconnect();\n\n      // Store references\n      this.inputNode = inputNode;\n      this.outputNode = outputNode || null;\n\n      // Create filter chain: input → highpass → lowpass → notch → output\n      inputNode.connect(this.highpassFilter);\n      this.highpassFilter.connect(this.lowpassFilter);\n      this.lowpassFilter.connect(this.notchFilter);\n      \n      if (outputNode) {\n        this.notchFilter.connect(outputNode);\n      }\n\n      this.isConnected = true;\n\n      console.log('🔗 [NoiseFilter] Filter chain connected');\n      \n      // Return the final node in the chain (notch filter) for further connections\n      return this.notchFilter!;\n\n    } catch (error) {\n      const connectionError = new AudioContextError(\n        'ノイズフィルターの接続に失敗しました。オーディオノードの接続状態を確認してください。',\n        {\n          operation: 'connect',\n          originalError: (error as Error).message,\n          hasInputNode: !!this.inputNode,\n          hasOutputNode: !!this.outputNode,\n          isConnected: this.isConnected,\n          filterConfig: this.config\n        }\n      );\n      \n      ErrorMessageBuilder.logError(connectionError, 'NoiseFilter audio connection');\n      console.error('❌ [NoiseFilter] Connection failed:', connectionError.toJSON());\n      throw connectionError;\n    }\n  }\n\n  /**\n   * Disconnects all filter nodes and cleans up audio connections\n   * \n   * @description Safely disconnects all filter nodes in the chain and resets\n   * connection state. Safe to call multiple times.\n   * \n   * @example\n   * ```typescript\n   * // Clean up when finished\n   * noiseFilter.disconnect();\n   * console.log('Filter chain disconnected');\n   * ```\n   */\n  disconnect(): void {\n    try {\n      if (this.highpassFilter) {\n        this.highpassFilter.disconnect();\n      }\n      if (this.lowpassFilter) {\n        this.lowpassFilter.disconnect();\n      }\n      if (this.notchFilter) {\n        this.notchFilter.disconnect();\n      }\n      \n      this.isConnected = false;\n      this.inputNode = null;\n      this.outputNode = null;\n\n      console.log('🔌 [NoiseFilter] Filter chain disconnected');\n\n    } catch (error) {\n      console.warn('⚠️ [NoiseFilter] Disconnect warning:', error);\n    }\n  }\n\n  /**\n   * Updates filter parameters dynamically during runtime\n   * \n   * @param params - Object containing new filter parameters\n   * @param params.highpassFreq - New highpass cutoff frequency in Hz\n   * @param params.lowpassFreq - New lowpass cutoff frequency in Hz\n   * @param params.notchFreq - New notch filter center frequency in Hz\n   * @param params.highpassQ - New highpass filter Q factor\n   * @param params.lowpassQ - New lowpass filter Q factor  \n   * @param params.notchQ - New notch filter Q factor\n   * \n   * @example\n   * ```typescript\n   * // Adapt filtering for different content\n   * noiseFilter.updateFrequencies({\n   *   highpassFreq: 100,  // More aggressive low-cut\n   *   lowpassFreq: 1200   // Extended high-frequency range\n   * });\n   * \n   * // Adjust power line rejection\n   * noiseFilter.updateFrequencies({\n   *   notchFreq: 50,      // 50Hz power line (Europe)\n   *   notchQ: 15.0        // Sharper notch\n   * });\n   * ```\n   */\n  updateFrequencies(params: {\n    highpassFreq?: number;\n    lowpassFreq?: number;\n    notchFreq?: number;\n    highpassQ?: number;\n    lowpassQ?: number;\n    notchQ?: number;\n  }): void {\n    const currentTime = this.audioContext.currentTime;\n\n    try {\n      if (params.highpassFreq !== undefined && this.highpassFilter) {\n        this.highpassFilter.frequency.setValueAtTime(params.highpassFreq, currentTime);\n        this.config.highpassFreq = params.highpassFreq;\n      }\n\n      if (params.lowpassFreq !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.frequency.setValueAtTime(params.lowpassFreq, currentTime);\n        this.config.lowpassFreq = params.lowpassFreq;\n      }\n\n      if (params.notchFreq !== undefined && this.notchFilter) {\n        this.notchFilter.frequency.setValueAtTime(params.notchFreq, currentTime);\n        this.config.notchFreq = params.notchFreq;\n      }\n\n      if (params.highpassQ !== undefined && this.highpassFilter) {\n        this.highpassFilter.Q.setValueAtTime(params.highpassQ, currentTime);\n        this.config.highpassQ = params.highpassQ;\n      }\n\n      if (params.lowpassQ !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.Q.setValueAtTime(params.lowpassQ, currentTime);\n        this.config.lowpassQ = params.lowpassQ;\n      }\n\n      if (params.notchQ !== undefined && this.notchFilter) {\n        this.notchFilter.Q.setValueAtTime(params.notchQ, currentTime);\n        this.config.notchQ = params.notchQ;\n      }\n\n      console.log('🔧 [NoiseFilter] Filter parameters updated:', params);\n\n    } catch (error) {\n      const updateError = new PitchProError(\n        'フィルターパラメータの更新に失敗しました。指定した値が範囲外であるか、フィルターが無効になっている可能性があります。',\n        ErrorCode.INVALID_SAMPLE_RATE,\n        {\n          operation: 'updateFrequencies',\n          originalError: (error as Error).message,\n          requestedParams: params,\n          currentConfig: this.config,\n          audioContextTime: this.audioContext.currentTime\n        }\n      );\n      \n      ErrorMessageBuilder.logError(updateError, 'NoiseFilter parameter update');\n      console.error('❌ [NoiseFilter] Parameter update failed:', updateError.toJSON());\n      throw updateError;\n    }\n  }\n\n  /**\n   * Enable or disable the entire filter chain\n   */\n  setEnabled(enabled: boolean): void {\n    if (enabled === this.config.useFilters) {\n      return; // No change needed\n    }\n\n    this.config.useFilters = enabled;\n\n    if (this.isConnected && this.inputNode) {\n      // Reconnect with new settings\n      const savedOutputNode = this.outputNode;\n      this.disconnect();\n      \n      if (enabled) {\n        // Recreate filters if they were destroyed\n        if (!this.highpassFilter) {\n          this.createFilterChain();\n        }\n      }\n      \n      this.connect(this.inputNode, savedOutputNode || undefined);\n    }\n\n    console.log(`🔘 [NoiseFilter] Filters ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Get filter response at specific frequency (for visualization)\n   */\n  getFilterResponse(frequency: number): { magnitude: number; phase: number } {\n    if (!this.config.useFilters || !this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n\n    try {\n      // Create frequency array for single frequency\n      const frequencyArray = new Float32Array([frequency]);\n      const magnitudeArray = new Float32Array(1);\n      const phaseArray = new Float32Array(1);\n\n      // Calculate combined response (simplified - in practice you'd need to chain the calculations)\n      this.highpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const highpassMagnitude = magnitudeArray[0];\n      \n      this.lowpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const lowpassMagnitude = magnitudeArray[0];\n      \n      this.notchFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const notchMagnitude = magnitudeArray[0];\n\n      // Combined magnitude (multiply individual filter responses)\n      const combinedMagnitude = highpassMagnitude * lowpassMagnitude * notchMagnitude;\n      \n      return { \n        magnitude: combinedMagnitude, \n        phase: phaseArray[0] \n      };\n\n    } catch (error) {\n      const responseError = new PitchProError(\n        'フィルター応答の計算に失敗しました。デフォルト値を返します。',\n        ErrorCode.PROCESSING_TIMEOUT,\n        {\n          operation: 'getFilterResponse',\n          frequency,\n          originalError: (error as Error).message,\n          useFilters: this.config.useFilters\n        }\n      );\n      \n      ErrorMessageBuilder.logError(responseError, 'Filter response calculation');\n      console.warn('⚠️ [NoiseFilter] Filter response calculation failed:', responseError.toJSON());\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n  }\n\n  /**\n   * Get current filter configuration\n   */\n  getConfig(): Required<NoiseFilterConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get filter chain status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      useFilters: this.config.useFilters,\n      hasFilters: !!(this.highpassFilter && this.lowpassFilter && this.notchFilter),\n      filterTypes: this.config.useFilters ? ['highpass', 'lowpass', 'notch'] : [],\n      frequencies: {\n        highpass: this.config.highpassFreq,\n        lowpass: this.config.lowpassFreq,\n        notch: this.config.notchFreq\n      },\n      qFactors: {\n        highpass: this.config.highpassQ,\n        lowpass: this.config.lowpassQ,\n        notch: this.config.notchQ\n      }\n    };\n  }\n\n  /**\n   * Get the final output node (for chaining)\n   */\n  getOutputNode(): AudioNode | null {\n    if (!this.config.useFilters || !this.notchFilter) {\n      return this.inputNode || null; // Bypass mode\n    }\n    return this.notchFilter;\n  }\n\n  /**\n   * Cleanup and destroy filter nodes\n   */\n  destroy(): void {\n    console.log('🗑️ [NoiseFilter] Destroying filter chain');\n    \n    this.disconnect();\n    \n    // Note: Filter nodes are automatically garbage collected\n    // when disconnected and no longer referenced\n    this.highpassFilter = null;\n    this.lowpassFilter = null;\n    this.notchFilter = null;\n    \n    console.log('✅ [NoiseFilter] Cleanup complete');\n  }\n\n  /**\n   * Create a preset configuration for different scenarios\n   */\n  static getPresetConfig(preset: 'voice' | 'instrument' | 'wide' | 'minimal'): NoiseFilterConfig {\n    switch (preset) {\n      case 'voice':\n        return {\n          highpassFreq: 80,   // Remove breath noise\n          lowpassFreq: 800,   // Focus on vocal fundamentals\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.7,\n          lowpassQ: 0.7,\n          notchQ: 10.0,\n          useFilters: true\n        };\n        \n      case 'instrument':\n        return {\n          highpassFreq: 40,   // Preserve low fundamentals\n          lowpassFreq: 2000,  // Allow more harmonics\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.5,\n          lowpassQ: 0.5,\n          notchQ: 8.0,\n          useFilters: true\n        };\n        \n      case 'wide':\n        return {\n          highpassFreq: 20,   // Minimal low cut\n          lowpassFreq: 5000,  // Minimal high cut\n          notchFreq: 60,      // Only power line filtering\n          highpassQ: 0.3,\n          lowpassQ: 0.3,\n          notchQ: 5.0,\n          useFilters: true\n        };\n        \n      case 'minimal':\n        return {\n          highpassFreq: 60,   // Just power line region\n          lowpassFreq: 8000,  // Very high cutoff\n          notchFreq: 60,      // Power line only\n          highpassQ: 0.1,\n          lowpassQ: 0.1,\n          notchQ: 3.0,\n          useFilters: true\n        };\n        \n      default:\n        return {\n          useFilters: false\n        };\n    }\n  }\n}","/**\n * PitchPro Logger - Structured logging with levels and context\n * \n * Provides structured logging functionality with different levels,\n * prefixes, and context information for better debugging and monitoring.\n */\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  SILENT = 4\n}\n\nexport interface LogContext {\n  component?: string;\n  operation?: string;\n  userId?: string;\n  sessionId?: string;\n  timestamp?: number;\n  [key: string]: any;\n}\n\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  context?: LogContext;\n  timestamp: number;\n  prefix?: string;\n}\n\nexport class Logger {\n  private level: LogLevel;\n  private prefix: string;\n  private context: LogContext;\n  private listeners: ((entry: LogEntry) => void)[] = [];\n\n  constructor(\n    level: LogLevel = LogLevel.INFO,\n    prefix: string = '',\n    defaultContext: LogContext = {}\n  ) {\n    this.level = level;\n    this.prefix = prefix;\n    this.context = defaultContext;\n  }\n\n  /**\n   * Set the minimum log level\n   */\n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  /**\n   * Add a log listener for custom handling\n   */\n  addListener(listener: (entry: LogEntry) => void): void {\n    this.listeners.push(listener);\n  }\n\n  /**\n   * Remove a log listener\n   */\n  removeListener(listener: (entry: LogEntry) => void): void {\n    const index = this.listeners.indexOf(listener);\n    if (index !== -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Create a child logger with additional context\n   */\n  child(prefix: string, additionalContext: LogContext = {}): Logger {\n    const childPrefix = this.prefix ? `${this.prefix}:${prefix}` : prefix;\n    const childContext = { ...this.context, ...additionalContext };\n    const child = new Logger(this.level, childPrefix, childContext);\n    \n    // Forward entries to parent listeners\n    child.addListener((entry) => {\n      this.listeners.forEach(listener => listener(entry));\n    });\n    \n    return child;\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, context?: LogContext): void {\n    this.log(LogLevel.DEBUG, message, context);\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, context?: LogContext): void {\n    this.log(LogLevel.INFO, message, context);\n  }\n\n  /**\n   * Log a warning message\n   */\n  warn(message: string, context?: LogContext): void {\n    this.log(LogLevel.WARN, message, context);\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string, error?: Error, context?: LogContext): void {\n    const errorContext = error ? {\n      errorName: error.name,\n      errorMessage: error.message,\n      stack: error.stack,\n      ...context\n    } : context;\n\n    this.log(LogLevel.ERROR, message, errorContext);\n  }\n\n  /**\n   * Core logging method\n   */\n  private log(level: LogLevel, message: string, additionalContext?: LogContext): void {\n    if (level < this.level) {\n      return;\n    }\n\n    const entry: LogEntry = {\n      level,\n      message,\n      context: { ...this.context, ...additionalContext },\n      timestamp: Date.now(),\n      prefix: this.prefix\n    };\n\n    // Send to console\n    this.logToConsole(entry);\n\n    // Send to listeners\n    this.listeners.forEach(listener => {\n      try {\n        listener(entry);\n      } catch (error) {\n        // Prevent listener errors from breaking logging\n        console.error('Logger listener error:', error);\n      }\n    });\n  }\n\n  /**\n   * Format and output to console\n   */\n  private logToConsole(entry: LogEntry): void {\n    const timestamp = new Date(entry.timestamp).toISOString();\n    const levelStr = LogLevel[entry.level];\n    const prefix = entry.prefix ? `[${entry.prefix}]` : '';\n    const baseMessage = `${timestamp} ${levelStr} ${prefix} ${entry.message}`;\n\n    const consoleMethod = this.getConsoleMethod(entry.level);\n\n    if (entry.context && Object.keys(entry.context).length > 0) {\n      consoleMethod(baseMessage, entry.context);\n    } else {\n      consoleMethod(baseMessage);\n    }\n  }\n\n  /**\n   * Get appropriate console method for log level\n   */\n  private getConsoleMethod(level: LogLevel): (...args: any[]) => void {\n    switch (level) {\n      case LogLevel.DEBUG:\n        return console.debug;\n      case LogLevel.INFO:\n        return console.info;\n      case LogLevel.WARN:\n        return console.warn;\n      case LogLevel.ERROR:\n        return console.error;\n      default:\n        return console.log;\n    }\n  }\n\n  /**\n   * Get current log level\n   */\n  getLevel(): LogLevel {\n    return this.level;\n  }\n\n  /**\n   * Check if a level is enabled\n   */\n  isLevelEnabled(level: LogLevel): boolean {\n    return level >= this.level;\n  }\n}\n\n// Default logger instance\nexport const defaultLogger = new Logger(LogLevel.INFO, 'PitchPro');\n\n// Convenience functions using default logger\nexport const debug = (message: string, context?: LogContext) => \n  defaultLogger.debug(message, context);\n\nexport const info = (message: string, context?: LogContext) => \n  defaultLogger.info(message, context);\n\nexport const warn = (message: string, context?: LogContext) => \n  defaultLogger.warn(message, context);\n\nexport const error = (message: string, err?: Error, context?: LogContext) => \n  defaultLogger.error(message, err, context);","/**\n * MicrophoneLifecycleManager - Page transition and idle detection microphone control\n * \n * Manages microphone lifecycle across page transitions, idle periods, and redirects\n * Implements reference counting for safe resource management\n * Handles SSR compatibility and automatic recovery\n */\n\nimport type { \n  MediaStreamResources, \n  HealthStatus,\n  LifecycleEvents,\n  StateChangeCallback,\n  ErrorCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { Logger, LogLevel } from '../utils/Logger';\nimport { MicrophoneHealthError } from '../utils/errors';\n\nexport interface LifecycleManagerConfig {\n  healthCheckIntervalMs?: number;\n  idleTimeoutMs?: number;\n  autoRecoveryDelayMs?: number;\n  maxIdleTimeBeforeRelease?: number;\n  maxAutoRecoveryAttempts?: number;\n  logLevel?: LogLevel;\n  enableDetailedLogging?: boolean;\n}\n\nexport class MicrophoneLifecycleManager {\n  private audioManager: AudioManager;\n  private refCount = 0;\n  private isActive = false;\n  private lastHealthCheck: HealthStatus | null = null;\n  private logger: Logger;\n  \n  // Monitoring intervals\n  private healthCheckInterval: number | null = null;\n  private idleCheckInterval: number | null = null;\n  private visibilityCheckInterval: number | null = null;\n  \n  // State tracking\n  private lastActivityTime = Date.now();\n  private isPageVisible = true;\n  private isUserActive = true;\n  private autoRecoveryAttempts = 0;\n  \n  // Event listeners storage for cleanup\n  private eventListeners = new Map<string, { target: EventTarget; listener: EventListener; eventName: string }>();\n  \n  // Configuration\n  private config: Required<LifecycleManagerConfig>;\n  \n  // Callbacks\n  private callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  } = {};\n\n  constructor(audioManager: AudioManager, userConfig: LifecycleManagerConfig = {}) {\n    this.audioManager = audioManager;\n    \n    // Apply configuration with defaults\n    this.config = {\n      healthCheckIntervalMs: userConfig.healthCheckIntervalMs ?? 5000,     // 5 seconds\n      idleTimeoutMs: userConfig.idleTimeoutMs ?? 300000,                   // 5 minutes\n      autoRecoveryDelayMs: userConfig.autoRecoveryDelayMs ?? 2000,         // 2 seconds\n      maxIdleTimeBeforeRelease: userConfig.maxIdleTimeBeforeRelease ?? 600000, // 10 minutes\n      maxAutoRecoveryAttempts: userConfig.maxAutoRecoveryAttempts ?? 3,\n      logLevel: userConfig.logLevel ?? LogLevel.INFO,\n      enableDetailedLogging: userConfig.enableDetailedLogging ?? false\n    };\n\n    // Initialize logger\n    this.logger = new Logger(\n      this.config.logLevel,\n      'MicrophoneLifecycleManager',\n      {\n        component: 'MicrophoneLifecycleManager',\n        enableDetailedLogging: this.config.enableDetailedLogging\n      }\n    );\n    \n    // SSR compatibility check\n    if (typeof window === 'undefined') {\n      this.logger.info('SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.logger.debug('Initializing MicrophoneLifecycleManager', {\n      config: this.config\n    });\n    \n    this.setupEventListeners();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Helper method to add event listener with automatic tracking for cleanup\n   * Currently not used but available for future event listener management improvements\n   */\n  /* private addTrackedEventListener(\n    target: EventTarget,\n    eventName: string, \n    listener: EventListener,\n    options?: AddEventListenerOptions\n  ): void {\n    const key = `${eventName}-${Date.now()}-${Math.random()}`;\n    \n    target.addEventListener(eventName, listener, options);\n    this.eventListeners.set(key, { target, listener, eventName });\n    \n    this.logger.debug('Event listener added', {\n      eventName,\n      target: target.constructor.name,\n      totalListeners: this.eventListeners.size\n    });\n  } */\n\n  /**\n   * Helper method to remove all tracked event listeners\n   */\n  private removeAllTrackedEventListeners(): void {\n    this.logger.debug('Removing all tracked event listeners', {\n      count: this.eventListeners.size\n    });\n\n    this.eventListeners.forEach(({ target, listener, eventName }, key) => {\n      try {\n        target.removeEventListener(eventName, listener);\n      } catch (error) {\n        this.logger.warn('Failed to remove event listener', {\n          eventName,\n          key,\n          error: (error as Error).message\n        });\n      }\n    });\n    \n    this.eventListeners.clear();\n    this.logger.debug('All event listeners removed');\n  }\n\n  /**\n   * Acquire microphone resources (with reference counting)\n   */\n  async acquire(): Promise<MediaStreamResources> {\n    this.refCount++;\n    \n    console.log(`🎤 [MicrophoneLifecycleManager] Acquiring resources (refCount: ${this.refCount})`);\n    \n    try {\n      // Initialize AudioManager if not already active\n      if (!this.isActive) {\n        const resources = await this.audioManager.initialize();\n        this.isActive = true;\n        this.lastActivityTime = Date.now();\n        this.autoRecoveryAttempts = 0;\n        \n        // Start monitoring\n        this.startHealthMonitoring();\n        this.startIdleMonitoring();\n        this.startVisibilityMonitoring();\n        \n        this.callbacks.onStateChange?.('active');\n        \n        console.log('🟢 [MicrophoneLifecycleManager] Microphone activated');\n        return resources;\n      }\n      \n      // Already active - just update activity and return existing resources\n      this.updateActivity();\n      const resources = await this.audioManager.initialize();\n      return resources;\n      \n    } catch (error) {\n      console.error('❌ [MicrophoneLifecycleManager] Failed to acquire resources:', error);\n      this.refCount = Math.max(0, this.refCount - 1);\n      this.callbacks.onError?.(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Release microphone resources (with reference counting)\n   */\n  release(): void {\n    this.refCount = Math.max(0, this.refCount - 1);\n    \n    console.log(`📉 [MicrophoneLifecycleManager] Releasing resources (refCount: ${this.refCount})`);\n    \n    // Only stop monitoring and cleanup when no references remain\n    if (this.refCount <= 0) {\n      this.stopAllMonitoring();\n      this.audioManager.release();\n      this.isActive = false;\n      \n      this.callbacks.onStateChange?.('inactive');\n      \n      console.log('🔴 [MicrophoneLifecycleManager] Microphone deactivated');\n    }\n  }\n\n  /**\n   * Force release all resources (emergency cleanup)\n   */\n  forceRelease(): void {\n    console.log('🚨 [MicrophoneLifecycleManager] Force release - cleaning up all resources');\n    \n    this.refCount = 0;\n    this.stopAllMonitoring();\n    this.audioManager.forceCleanup();\n    this.isActive = false;\n    \n    this.callbacks.onStateChange?.('inactive');\n  }\n\n  /**\n   * Setup page lifecycle event listeners\n   */\n  private setupEventListeners(): void {\n    // Page visibility change\n    const visibilityChangeHandler = () => {\n      this.isPageVisible = !document.hidden;\n      this.handleVisibilityChange();\n    };\n    \n    // User activity tracking\n    const activityHandler = () => {\n      this.updateActivity();\n    };\n    \n    // Page unload / beforeunload\n    const unloadHandler = () => {\n      this.forceRelease();\n    };\n    \n    // Page focus / blur\n    const focusHandler = () => {\n      this.isPageVisible = true;\n      this.handleVisibilityChange();\n    };\n    \n    const blurHandler = () => {\n      this.isPageVisible = false;\n      this.handleVisibilityChange();\n    };\n    \n    // Add event listeners\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n    document.addEventListener('mousemove', activityHandler);\n    document.addEventListener('keydown', activityHandler);\n    document.addEventListener('click', activityHandler);\n    document.addEventListener('scroll', activityHandler);\n    document.addEventListener('touchstart', activityHandler);\n    window.addEventListener('beforeunload', unloadHandler);\n    window.addEventListener('unload', unloadHandler);\n    window.addEventListener('focus', focusHandler);\n    window.addEventListener('blur', blurHandler);\n    \n    // Store references for cleanup\n    this.eventListeners.set('visibilitychange', { target: document, listener: visibilityChangeHandler, eventName: 'visibilitychange' });\n    this.eventListeners.set('mousemove', { target: document, listener: activityHandler, eventName: 'mousemove' });\n    this.eventListeners.set('keydown', { target: document, listener: activityHandler, eventName: 'keydown' });\n    this.eventListeners.set('click', { target: document, listener: activityHandler, eventName: 'click' });\n    this.eventListeners.set('scroll', { target: document, listener: activityHandler, eventName: 'scroll' });\n    this.eventListeners.set('touchstart', { target: document, listener: activityHandler, eventName: 'touchstart' });\n    this.eventListeners.set('beforeunload', { target: window, listener: unloadHandler, eventName: 'beforeunload' });\n    this.eventListeners.set('unload', { target: window, listener: unloadHandler, eventName: 'unload' });\n    this.eventListeners.set('focus', { target: window, listener: focusHandler, eventName: 'focus' });\n    this.eventListeners.set('blur', { target: window, listener: blurHandler, eventName: 'blur' });\n    \n    console.log('👂 [MicrophoneLifecycleManager] Event listeners setup complete');\n  }\n\n  /**\n   * Handle page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (!this.isActive) return;\n    \n    if (this.isPageVisible) {\n      console.log('👁️ [MicrophoneLifecycleManager] Page became visible - resuming monitoring');\n      this.updateActivity();\n      \n      // Check microphone health after page becomes visible\n      setTimeout(() => {\n        this.performHealthCheck();\n      }, 1000);\n      \n    } else {\n      console.log('🙈 [MicrophoneLifecycleManager] Page became hidden - reducing monitoring frequency');\n      \n      // Consider releasing resources if page stays hidden for too long\n      setTimeout(() => {\n        if (!this.isPageVisible && this.isActive) {\n          const timeSinceActivity = Date.now() - this.lastActivityTime;\n          if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n            console.log('⏰ [MicrophoneLifecycleManager] Long inactivity detected - releasing resources');\n            this.forceRelease();\n          }\n        }\n      }, this.config.maxIdleTimeBeforeRelease);\n    }\n  }\n\n  /**\n   * Update user activity timestamp\n   */\n  private updateActivity(): void {\n    this.lastActivityTime = Date.now();\n    this.isUserActive = true;\n  }\n\n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    \n    this.healthCheckInterval = window.setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.healthCheckIntervalMs);\n    \n    console.log(`💓 [MicrophoneLifecycleManager] Health monitoring started (${this.config.healthCheckIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Start idle monitoring\n   */\n  private startIdleMonitoring(): void {\n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n    }\n    \n    this.idleCheckInterval = window.setInterval(() => {\n      this.checkIdleTimeout();\n    }, 30000); // Check every 30 seconds\n    \n    console.log('😴 [MicrophoneLifecycleManager] Idle monitoring started');\n  }\n\n  /**\n   * Start visibility monitoring\n   */\n  private startVisibilityMonitoring(): void {\n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n    }\n    \n    this.visibilityCheckInterval = window.setInterval(() => {\n      // Additional visibility-based health checks\n      if (this.isPageVisible && this.isActive) {\n        this.performHealthCheck();\n      }\n    }, 10000); // Check every 10 seconds when visible\n    \n    console.log('👁️ [MicrophoneLifecycleManager] Visibility monitoring started');\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  private async performHealthCheck(): Promise<void> {\n    if (!this.isActive) return;\n    \n    try {\n      const healthStatus = this.audioManager.checkMediaStreamHealth();\n      this.lastHealthCheck = healthStatus;\n      \n      if (!healthStatus.healthy) {\n        this.logger.warn('Unhealthy microphone state detected', { healthStatus });\n        \n        // Attempt automatic recovery\n        if (this.autoRecoveryAttempts < this.config.maxAutoRecoveryAttempts) {\n          this.autoRecoveryAttempts++;\n          \n          this.logger.warn('Attempting automatic recovery', {\n            attempt: this.autoRecoveryAttempts,\n            maxAttempts: this.config.maxAutoRecoveryAttempts,\n            healthStatus\n          });\n          \n          setTimeout(async () => {\n            try {\n              await this.audioManager.initialize(); // This will trigger re-initialization if needed\n              this.logger.info('Automatic recovery successful', {\n                attempt: this.autoRecoveryAttempts,\n                totalAttempts: this.autoRecoveryAttempts\n              });\n              \n              // Reset recovery attempts on success\n              this.autoRecoveryAttempts = 0;\n              \n              // Dispatch success event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoverySuccess', {});\n              \n            } catch (error) {\n              this.logger.error('Automatic recovery failed', error as Error, {\n                attempt: this.autoRecoveryAttempts,\n                maxAttempts: this.config.maxAutoRecoveryAttempts\n              });\n              this.callbacks.onError?.(error as Error);\n              \n              // Dispatch failure event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoveryFailed', { error });\n            }\n          }, this.config.autoRecoveryDelayMs);\n          \n        } else {\n          // Create detailed error with health status context\n          const healthError = new MicrophoneHealthError(\n            `Microphone health check failed after ${this.autoRecoveryAttempts} recovery attempts. Monitoring stopped to prevent infinite error loop.`,\n            healthStatus,\n            this.autoRecoveryAttempts,\n            {\n              operation: 'performHealthCheck',\n              maxAttemptsReached: true,\n              monitoringStopped: true\n            }\n          );\n\n          this.logger.error('Maximum recovery attempts reached - stopping health checks', healthError, {\n            attempts: this.autoRecoveryAttempts,\n            maxAttempts: this.config.maxAutoRecoveryAttempts,\n            healthStatus\n          });\n          \n          // Stop all monitoring to prevent infinite error loop\n          // Reason: After maxAutoRecoveryAttempts, we assume the microphone is permanently unavailable\n          // and continued monitoring would only generate more errors without resolution\n          this.stopAllMonitoring();\n          \n          // Mark as inactive to prevent further health checks\n          // This ensures that the lifecycle manager stops consuming resources\n          this.isActive = false;\n          \n          this.callbacks.onError?.(healthError);\n          \n          // Dispatch final error event for external monitoring\n          this.dispatchCustomEvent('pitchpro:lifecycle:maxRecoveryAttemptsReached', { \n            attempts: this.autoRecoveryAttempts,\n            lastHealthStatus: healthStatus \n          });\n        }\n      } else {\n        // Reset recovery attempts on healthy status\n        if (this.autoRecoveryAttempts > 0) {\n          this.logger.info('Microphone health restored, resetting recovery attempts', {\n            previousAttempts: this.autoRecoveryAttempts,\n            healthStatus\n          });\n          this.autoRecoveryAttempts = 0;\n        }\n      }\n      \n    } catch (error) {\n      this.logger.error('Health check failed', error as Error, {\n        operation: 'performHealthCheck',\n        isActive: this.isActive,\n        attempts: this.autoRecoveryAttempts\n      });\n      this.callbacks.onError?.(error as Error);\n    }\n  }\n\n  /**\n   * Check for idle timeout\n   */\n  private checkIdleTimeout(): void {\n    if (!this.isActive) return;\n    \n    const timeSinceActivity = Date.now() - this.lastActivityTime;\n    const isIdle = timeSinceActivity > this.config.idleTimeoutMs;\n    \n    if (isIdle && this.isUserActive) {\n      console.log('😴 [MicrophoneLifecycleManager] User idle detected');\n      this.isUserActive = false;\n      \n      // Optionally reduce monitoring frequency during idle\n      // But don't automatically release - let the application decide\n    }\n    \n    // Check for extreme idle (auto-release)\n    if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n      console.log('⏰ [MicrophoneLifecycleManager] Extreme idle detected - auto-releasing resources');\n      this.forceRelease();\n    }\n  }\n\n  /**\n   * Stop all monitoring intervals\n   */\n  private stopAllMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n      this.visibilityCheckInterval = null;\n    }\n    \n    console.log('⏹️ [MicrophoneLifecycleManager] All monitoring stopped');\n  }\n\n  /**\n   * Dispatch custom event\n   */\n  private dispatchCustomEvent(eventName: keyof LifecycleEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus() {\n    return {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      isPageVisible: this.isPageVisible,\n      isUserActive: this.isUserActive,\n      lastActivityTime: this.lastActivityTime,\n      timeSinceActivity: Date.now() - this.lastActivityTime,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      lastHealthCheck: this.lastHealthCheck,\n      audioManagerStatus: this.audioManager.getStatus()\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Restart monitoring with new intervals if active\n    if (this.isActive) {\n      this.stopAllMonitoring();\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n    }\n    \n    console.log('🔧 [MicrophoneLifecycleManager] Configuration updated:', newConfig);\n  }\n\n  /**\n   * Reset recovery attempts and restart monitoring if needed\n   * This method provides manual intervention capability for max recovery attempts errors\n   */\n  resetRecoveryAttempts(): void {\n    const previousAttempts = this.autoRecoveryAttempts;\n    this.autoRecoveryAttempts = 0;\n    \n    this.logger.info('Recovery attempts reset manually', {\n      previousAttempts,\n      refCount: this.refCount,\n      wasActive: this.isActive,\n      hasMonitoring: !!this.healthCheckInterval\n    });\n    \n    // If monitoring was stopped due to max attempts, restart it\n    // This only happens when refCount > 0 (someone still needs the microphone)\n    if (!this.healthCheckInterval && this.refCount > 0) {\n      this.logger.info('Restarting monitoring after manual reset', {\n        refCount: this.refCount,\n        reason: 'Manual recovery reset with active references'\n      });\n      \n      this.isActive = true;\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n      \n      // Dispatch event to notify listeners of monitoring restart\n      this.dispatchCustomEvent('pitchpro:lifecycle:monitoringRestarted', {\n        reason: 'Manual recovery reset',\n        refCount: this.refCount\n      });\n    }\n  }\n\n  /**\n   * Cleanup and destroy\n   */\n  destroy(): void {\n    this.logger.info('Destroying MicrophoneLifecycleManager', {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      listenerCount: this.eventListeners.size\n    });\n    \n    // Stop all monitoring\n    this.stopAllMonitoring();\n    \n    // Force release resources\n    // This ensures all microphone streams are properly closed\n    this.forceRelease();\n    \n    // Remove all tracked event listeners using the helper method\n    this.removeAllTrackedEventListeners();\n    \n    // Reset state\n    this.isActive = false;\n    this.refCount = 0;\n    this.autoRecoveryAttempts = 0;\n    \n    this.logger.info('MicrophoneLifecycleManager cleanup complete');\n  }\n}","/**\n * ErrorNotificationSystem - Framework-agnostic Error Display and Notification\n * \n * Provides error messaging functionality that can be displayed on any page\n * Includes different notification types, auto-hide functionality, and priority management\n * Framework-agnostic implementation using vanilla DOM manipulation\n */\n\nimport type { NotificationConfig, NotificationElement } from '../types';\n\nexport class ErrorNotificationSystem {\n  private container: HTMLElement | null = null;\n  private notifications = new Map<string, NotificationElement>();\n  private notificationCounter = 0;\n  private defaultDuration = 5000; // 5 seconds\n  private maxNotifications = 0; // 初期実装: 制限なし\n  \n  // CSS classes for styling\n  private cssClasses = {\n    container: 'pitchpro-notifications',\n    notification: 'pitchpro-notification',\n    title: 'pitchpro-notification-title',\n    message: 'pitchpro-notification-message',\n    details: 'pitchpro-notification-details',\n    solution: 'pitchpro-notification-solution',\n    closeButton: 'pitchpro-notification-close',\n    error: 'pitchpro-notification-error',\n    warning: 'pitchpro-notification-warning',\n    success: 'pitchpro-notification-success',\n    info: 'pitchpro-notification-info',\n    high: 'pitchpro-notification-priority-high',\n    medium: 'pitchpro-notification-priority-medium',\n    low: 'pitchpro-notification-priority-low'\n  };\n\n  constructor() {\n    // SSR compatibility\n    if (typeof window === 'undefined') {\n      console.log('🔇 [ErrorNotificationSystem] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.initializeContainer();\n    this.injectCSS();\n  }\n\n  /**\n   * Create and inject the notification container into the DOM\n   */\n  private initializeContainer(): void {\n    // Check if container already exists\n    let existingContainer = document.querySelector(`.${this.cssClasses.container}`);\n    \n    if (!existingContainer) {\n      this.container = document.createElement('div');\n      this.container.className = this.cssClasses.container;\n      this.container.setAttribute('role', 'alert');\n      this.container.setAttribute('aria-live', 'polite');\n      \n      // Add to document body\n      document.body.appendChild(this.container);\n      \n      console.log('📋 [ErrorNotificationSystem] Notification container created');\n    } else {\n      this.container = existingContainer as HTMLElement;\n      console.log('📋 [ErrorNotificationSystem] Using existing notification container');\n    }\n  }\n\n  /**\n   * Inject default CSS styles\n   */\n  private injectCSS(): void {\n    // Check if styles already exist\n    if (document.querySelector('#pitchpro-notifications-styles')) {\n      return;\n    }\n\n    const css = `\n      .${this.cssClasses.container} {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        max-width: 400px;\n        pointer-events: none;\n      }\n\n      .${this.cssClasses.notification} {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        margin-bottom: 12px;\n        padding: 16px;\n        pointer-events: auto;\n        position: relative;\n        animation: slideIn 0.3s ease-out;\n        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n      }\n\n      .${this.cssClasses.notification}.removing {\n        opacity: 0;\n        transform: translateX(100%);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateX(100%);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.error} {\n        border-left: 4px solid #ef4444;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.warning} {\n        border-left: 4px solid #f59e0b;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.success} {\n        border-left: 4px solid #10b981;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.info} {\n        border-left: 4px solid #3b82f6;\n      }\n\n      .${this.cssClasses.title} {\n        font-weight: 600;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n        padding-right: 24px;\n      }\n\n      .${this.cssClasses.message} {\n        font-size: 13px;\n        color: #4b5563;\n        margin-bottom: 8px;\n        line-height: 1.4;\n      }\n\n      .${this.cssClasses.details} {\n        font-size: 12px;\n        color: #6b7280;\n        margin-bottom: 8px;\n        padding-left: 12px;\n        border-left: 2px solid #e5e7eb;\n      }\n\n      .${this.cssClasses.details} li {\n        margin-bottom: 2px;\n      }\n\n      .${this.cssClasses.solution} {\n        font-size: 12px;\n        color: #059669;\n        background: #ecfdf5;\n        border: 1px solid #a7f3d0;\n        border-radius: 4px;\n        padding: 8px;\n        margin-top: 8px;\n      }\n\n      .${this.cssClasses.closeButton} {\n        position: absolute;\n        top: 12px;\n        right: 12px;\n        background: none;\n        border: none;\n        font-size: 18px;\n        color: #9ca3af;\n        cursor: pointer;\n        padding: 0;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .${this.cssClasses.closeButton}:hover {\n        color: #6b7280;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.high} {\n        border-width: 2px;\n        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      }\n\n      @media (max-width: 640px) {\n        .${this.cssClasses.container} {\n          top: 10px;\n          left: 10px;\n          right: 10px;\n          max-width: none;\n        }\n      }\n    `;\n\n    const style = document.createElement('style');\n    style.id = 'pitchpro-notifications-styles';\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Show a notification\n   */\n  show(config: NotificationConfig): string {\n    if (!this.container) {\n      console.warn('⚠️ [ErrorNotificationSystem] Container not available - cannot show notification');\n      return '';\n    }\n\n    // Generate unique ID\n    const id = `notification-${++this.notificationCounter}`;\n\n    // Create notification element\n    const notification = this.createNotificationElement(id, config);\n\n    // Remove oldest notification if we're at the limit\n    if (this.notifications.size >= this.maxNotifications) {\n      const oldestId = Array.from(this.notifications.keys())[0];\n      this.remove(oldestId);\n    }\n\n    // Add to container and tracking\n    this.container.appendChild(notification);\n    this.notifications.set(id, notification);\n\n    // Auto-hide if configured\n    if (config.autoHide !== false) {\n      const duration = config.duration || this.defaultDuration;\n      setTimeout(() => {\n        this.remove(id);\n      }, duration);\n    }\n\n    console.log(`📢 [ErrorNotificationSystem] Notification shown: ${config.type} - ${config.title}`);\n    \n    return id;\n  }\n\n  /**\n   * Create notification DOM element\n   */\n  private createNotificationElement(id: string, config: NotificationConfig): NotificationElement {\n    const notification = document.createElement('div') as unknown as NotificationElement;\n    notification.className = [\n      this.cssClasses.notification,\n      this.cssClasses[config.type],\n      config.priority ? this.cssClasses[config.priority] : ''\n    ].filter(Boolean).join(' ');\n    notification['data-notification-id'] = id;\n\n    // Title\n    const title = document.createElement('div');\n    title.className = this.cssClasses.title;\n    title.textContent = config.title;\n    notification.appendChild(title);\n\n    // Message\n    const message = document.createElement('div');\n    message.className = this.cssClasses.message;\n    message.textContent = config.message;\n    notification.appendChild(message);\n\n    // Details (if provided)\n    if (config.details && config.details.length > 0) {\n      const details = document.createElement('div');\n      details.className = this.cssClasses.details;\n      \n      const list = document.createElement('ul');\n      list.style.margin = '0';\n      list.style.paddingLeft = '16px';\n      \n      config.details.forEach(detail => {\n        const item = document.createElement('li');\n        item.textContent = detail;\n        list.appendChild(item);\n      });\n      \n      details.appendChild(list);\n      notification.appendChild(details);\n    }\n\n    // Solution (if provided)\n    if (config.solution) {\n      const solution = document.createElement('div');\n      solution.className = this.cssClasses.solution;\n      solution.textContent = config.solution;\n      notification.appendChild(solution);\n    }\n\n    // Close button\n    const closeButton = document.createElement('button');\n    closeButton.className = this.cssClasses.closeButton;\n    closeButton.innerHTML = '×';\n    closeButton.setAttribute('aria-label', 'Close notification');\n    closeButton.addEventListener('click', () => {\n      this.remove(id);\n    });\n    notification.appendChild(closeButton);\n\n    return notification;\n  }\n\n  /**\n   * Remove a specific notification\n   */\n  remove(id: string): void {\n    const notification = this.notifications.get(id);\n    if (!notification) {\n      return;\n    }\n\n    // Add removing class for exit animation\n    notification.classList.add('removing');\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n      this.notifications.delete(id);\n    }, 300);\n\n    console.log(`🗑️ [ErrorNotificationSystem] Notification removed: ${id}`);\n  }\n\n  /**\n   * Clear all notifications\n   */\n  clearAll(): void {\n    const ids = Array.from(this.notifications.keys());\n    ids.forEach(id => this.remove(id));\n    \n    console.log('🧹 [ErrorNotificationSystem] All notifications cleared');\n  }\n\n  /**\n   * Show error notification (convenience method)\n   */\n  showError(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'error',\n      title,\n      message,\n      priority: 'high',\n      autoHide: false, // Errors should be manually dismissed\n      ...options\n    });\n  }\n\n  /**\n   * Show warning notification (convenience method)\n   */\n  showWarning(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'warning',\n      title,\n      message,\n      priority: 'medium',\n      duration: 8000, // Longer duration for warnings\n      ...options\n    });\n  }\n\n  /**\n   * Show success notification (convenience method)\n   */\n  showSuccess(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'success',\n      title,\n      message,\n      priority: 'low',\n      duration: 3000, // Shorter duration for success messages\n      ...options\n    });\n  }\n\n  /**\n   * Show info notification (convenience method)\n   */\n  showInfo(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'info',\n      title,\n      message,\n      priority: 'low',\n      ...options\n    });\n  }\n\n  /**\n   * Show microphone error with common solutions\n   */\n  showMicrophoneError(error: Error, context?: string): string {\n    // Common solutions for microphone errors\n    // const commonSolutions = [\n    //   'ブラウザにマイクアクセスを許可してください',\n    //   'マイクが他のアプリケーションで使用されていないか確認してください',\n    //   'ブラウザを再起動して再度お試しください',\n    //   'デバイスの設定でマイクが有効になっていることを確認してください'\n    // ];\n\n    return this.showError(\n      'マイクロフォンエラー',\n      `マイクの初期化に失敗しました: ${error.message}`,\n      {\n        details: context ? [`発生箇所: ${context}`, `エラー詳細: ${error.name}`] : [`エラー詳細: ${error.name}`],\n        solution: 'マイクの設定を確認し、ブラウザにマイクアクセスを許可してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show audio context error\n   */\n  showAudioContextError(error: Error): string {\n    return this.showError(\n      'オーディオシステムエラー',\n      `音声処理システムの初期化に失敗しました: ${error.message}`,\n      {\n        details: [\n          'ブラウザがWeb Audio APIに対応していない可能性があります',\n          'または、音声デバイスに問題が発生しています'\n        ],\n        solution: 'ブラウザを最新版に更新するか、別のブラウザで試してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show network/loading error\n   */\n  showLoadingError(resource: string, error: Error): string {\n    return this.showError(\n      '読み込みエラー',\n      `${resource}の読み込みに失敗しました: ${error.message}`,\n      {\n        details: [\n          'ネットワーク接続を確認してください',\n          'ブラウザのキャッシュをクリアしてみてください'\n        ],\n        solution: 'ページを再読み込みするか、しばらく待ってから再度お試しください。',\n        priority: 'medium'\n      }\n    );\n  }\n\n  /**\n   * Get current notification count\n   */\n  getNotificationCount(): number {\n    return this.notifications.size;\n  }\n\n  /**\n   * Get all notification IDs\n   */\n  getNotificationIds(): string[] {\n    return Array.from(this.notifications.keys());\n  }\n\n  /**\n   * Check if a specific notification exists\n   */\n  hasNotification(id: string): boolean {\n    return this.notifications.has(id);\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: {\n    defaultDuration?: number;\n    maxNotifications?: number;\n  }): void {\n    if (config.defaultDuration !== undefined) {\n      this.defaultDuration = config.defaultDuration;\n    }\n    if (config.maxNotifications !== undefined) {\n      this.maxNotifications = config.maxNotifications;\n    }\n    \n    console.log('🔧 [ErrorNotificationSystem] Configuration updated:', config);\n  }\n\n  /**\n   * Destroy the notification system\n   */\n  destroy(): void {\n    console.log('🗑️ [ErrorNotificationSystem] Destroying notification system');\n    \n    this.clearAll();\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Remove injected CSS\n    const styleElement = document.querySelector('#pitchpro-notifications-styles');\n    if (styleElement && styleElement.parentNode) {\n      styleElement.parentNode.removeChild(styleElement);\n    }\n    \n    this.container = null;\n    this.notifications.clear();\n    \n    console.log('✅ [ErrorNotificationSystem] Cleanup complete');\n  }\n}","/**\n * MicrophoneController - High-level Unified Microphone Management Interface\n * \n * @description Provides a comprehensive, easy-to-use API that combines AudioManager,\n * MicrophoneLifecycleManager, and ErrorNotificationSystem into a single interface.\n * Handles device detection, permission management, sensitivity adjustment, and\n * automatic error recovery with user-friendly notifications.\n * \n * @example\n * ```typescript\n * const micController = new MicrophoneController();\n * \n * // Set up event callbacks\n * micController.setCallbacks({\n *   onStateChange: (state) => console.log('State:', state),\n *   onError: (error) => console.error('Error:', error.message),\n *   onDeviceChange: (specs) => console.log('Device:', specs.deviceType)\n * });\n * \n * // Initialize and start\n * const resources = await micController.initialize();\n * console.log('Microphone ready:', resources.mediaStream.active);\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { \n  DeviceSpecs,\n  MediaStreamResources,\n  MicrophoneControllerEvents,\n  ErrorCallback,\n  StateChangeCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { MicrophoneLifecycleManager } from './MicrophoneLifecycleManager';\nimport { ErrorNotificationSystem } from './ErrorNotificationSystem';\nimport { PitchDetector } from './PitchDetector';\nimport { \n  MicrophoneAccessError,\n  AudioContextError,\n  PitchProError,\n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\nimport type { LifecycleManagerConfig } from './MicrophoneLifecycleManager';\nimport { Logger, LogLevel } from '../utils/Logger';\n\nexport interface MicrophoneControllerConfig {\n  /** Audio manager configuration */\n  audioManager?: {\n    sampleRate?: number;\n    echoCancellation?: boolean;\n    noiseSuppression?: boolean;\n    autoGainControl?: boolean;\n  };\n  \n  /** Lifecycle manager configuration */\n  lifecycle?: LifecycleManagerConfig;\n  \n  /** Audio constraint defaults for permission checks */\n  audioConstraints?: {\n    echoCancellation?: boolean;\n    noiseSuppression?: boolean; \n    autoGainControl?: boolean;\n  };\n  \n  /** Error notification settings */\n  notifications?: {\n    enabled?: boolean;\n    position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n  };\n  \n  /** Logging configuration */\n  logging?: {\n    level?: LogLevel;\n    prefix?: string;\n  };\n}\n\nexport class MicrophoneController {\n  /** @readonly AudioManager instance for low-level audio resource management */\n  public readonly audioManager: AudioManager;\n  \n  /** @private Lifecycle manager for safe resource handling */\n  private lifecycleManager: MicrophoneLifecycleManager;\n  \n  /** @private Error notification system for user feedback */\n  private errorSystem: ErrorNotificationSystem;\n  \n  /** @private Logger for structured logging */\n  private logger: Logger;\n  \n  /** @private Configuration object with defaults */\n  private config: Required<MicrophoneControllerConfig>;\n  \n  /** @private Current controller state */\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'active' | 'error' = 'uninitialized';\n  \n  /** @private Microphone permission granted flag */\n  private isPermissionGranted = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Event callback functions */\n  private eventCallbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  } = {};\n  \n  /** @private Device-specific optimization specifications */\n  private deviceSpecs: DeviceSpecs | null = null;\n  \n  /** @private PitchDetector instance management for unified control */\n  private pitchDetector: PitchDetector | null = null;\n  \n  /** @private AudioDetectionComponent instance management for UI control */\n  private audioDetectionComponent: any | null = null;\n\n  /**\n   * Creates a new MicrophoneController with integrated management systems\n   * \n   * @param audioManagerConfig - Configuration for AudioManager (optional)\n   * @param audioManagerConfig.sampleRate - Audio sample rate (default: 44100)\n   * @param audioManagerConfig.echoCancellation - Enable echo cancellation (default: false)\n   * @param audioManagerConfig.autoGainControl - Enable auto gain control (default: false)\n   * @param lifecycleConfig - Configuration for lifecycle management (optional)\n   * @param lifecycleConfig.maxRetries - Maximum retry attempts (default: 3)\n   * @param lifecycleConfig.retryDelayMs - Delay between retries (default: 1000)\n   * @param showErrorNotifications - Enable visual error notifications (default: true)\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with defaults\n   * const micController = new MicrophoneController();\n   * \n   * // Custom configuration\n   * const micController = new MicrophoneController(\n   *   { sampleRate: 48000, echoCancellation: true },\n   *   { maxRetries: 5, retryDelayMs: 2000 },\n   *   false  // Disable error notifications\n   * );\n   * ```\n   */\n  constructor(config: MicrophoneControllerConfig = {}) {\n    // Apply configuration with defaults\n    this.config = {\n      audioManager: {\n        sampleRate: config.audioManager?.sampleRate ?? 44100,\n        echoCancellation: config.audioManager?.echoCancellation ?? false,\n        noiseSuppression: config.audioManager?.noiseSuppression ?? false,\n        autoGainControl: config.audioManager?.autoGainControl ?? false\n      },\n      lifecycle: config.lifecycle ?? {},\n      audioConstraints: {\n        echoCancellation: config.audioConstraints?.echoCancellation ?? false,\n        noiseSuppression: config.audioConstraints?.noiseSuppression ?? false,\n        autoGainControl: config.audioConstraints?.autoGainControl ?? false\n      },\n      notifications: {\n        enabled: config.notifications?.enabled ?? true,\n        position: config.notifications?.position ?? 'top-right'\n      },\n      logging: {\n        level: config.logging?.level ?? LogLevel.INFO,\n        prefix: config.logging?.prefix ?? 'MicrophoneController'\n      }\n    };\n\n    // Initialize logger first\n    this.logger = new Logger(\n      this.config.logging.level,\n      this.config.logging.prefix,\n      { component: 'MicrophoneController' }\n    );\n\n    this.logger.debug('Initializing MicrophoneController', { config: this.config });\n\n    // Initialize components with proper configuration\n    this.audioManager = new AudioManager(this.config.audioManager);\n    this.lifecycleManager = new MicrophoneLifecycleManager(this.audioManager, this.config.lifecycle);\n    this.errorSystem = this.config.notifications.enabled \n      ? new ErrorNotificationSystem() \n      : null as any;\n    \n    this.setupEventHandlers();\n    this.detectDevice();\n  }\n\n  /**\n   * Sets callback functions for microphone controller events\n   * \n   * @param callbacks - Object containing event callback functions\n   * @param callbacks.onStateChange - Called when controller state changes\n   * @param callbacks.onError - Called when errors occur\n   * @param callbacks.onPermissionChange - Called when microphone permission changes\n   * @param callbacks.onSensitivityChange - Called when sensitivity is adjusted\n   * @param callbacks.onDeviceChange - Called when device specifications are detected\n   * \n   * @example\n   * ```typescript\n   * micController.setCallbacks({\n   *   onStateChange: (state) => {\n   *     console.log('Controller state:', state);\n   *   },\n   *   onError: (error) => {\n   *     console.error('Microphone error:', error.message);\n   *   },\n   *   onDeviceChange: (specs) => {\n   *     console.log(`Device: ${specs.deviceType}, Sensitivity: ${specs.sensitivity}x`);\n   *   }\n   * });\n   * ```\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  }): void {\n    this.eventCallbacks = { ...this.eventCallbacks, ...callbacks };\n  }\n\n  /**\n   * Reset lifecycle manager recovery attempts\n   * Provides safe access to lifecycle recovery reset without exposing internal state\n   */\n  resetRecoveryAttempts(): void {\n    this.logger.info('Resetting recovery attempts via public API');\n    \n    try {\n      this.lifecycleManager.resetRecoveryAttempts();\n      this.logger.info('Recovery attempts reset successfully');\n    } catch (error) {\n      this.logger.error('Failed to reset recovery attempts', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if controller is in active state\n   */\n  isActive(): boolean {\n    return this.currentState === 'active';\n  }\n\n  /**\n   * Check if controller is ready for use\n   */\n  isReady(): boolean {\n    return this.currentState === 'ready' || this.currentState === 'active';\n  }\n\n  /**\n   * Check if controller is initialized\n   */\n  isInitialized(): boolean {\n    return this.currentState !== 'uninitialized';\n  }\n\n  /**\n   * Setup internal event handlers\n   */\n  private setupEventHandlers(): void {\n    // Lifecycle manager callbacks\n    this.lifecycleManager.setCallbacks({\n      onStateChange: (state) => {\n        this.updateState(state === 'active' ? 'active' : 'ready');\n      },\n      onError: (error) => {\n        this.handleError(error, 'lifecycle');\n      }\n    });\n  }\n\n  /**\n   * Detect device specifications\n   */\n  private detectDevice(): void {\n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n    console.log('📱 [MicrophoneController] Device detected:', this.deviceSpecs);\n    \n    // Notify callback\n    this.eventCallbacks.onDeviceChange?.(this.deviceSpecs);\n    \n    // Dispatch custom event\n    this.dispatchCustomEvent('pitchpro:deviceDetected', { specs: this.deviceSpecs });\n  }\n\n  /**\n   * Initializes microphone access with automatic device detection and permissions\n   * \n   * @description Handles the complete initialization flow including device detection,\n   * permission requests, resource acquisition, and error recovery. Automatically\n   * applies device-specific optimizations and sets up monitoring systems.\n   * \n   * @returns Promise resolving to audio resources (AudioContext, MediaStream, SourceNode)\n   * @throws {Error} If microphone permission is denied or initialization fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   const resources = await micController.initialize();\n   *   console.log('Microphone ready:', resources.mediaStream.active);\n   *   console.log('AudioContext state:', resources.audioContext.state);\n   * } catch (error) {\n   *   console.error('Failed to initialize microphone:', error.message);\n   * }\n   * ```\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    try {\n      this.updateState('initializing');\n      console.log('🎤 [MicrophoneController] Starting initialization');\n\n      // Acquire resources through lifecycle manager\n      const resources = await this.lifecycleManager.acquire();\n      \n      // Update state and permissions\n      this.isPermissionGranted = true;\n      this.updateState('ready');\n      this.lastError = null;\n\n      // Notify permission change\n      this.eventCallbacks.onPermissionChange?.(true);\n      this.dispatchCustomEvent('pitchpro:microphoneGranted', { stream: resources.mediaStream });\n\n      console.log('✅ [MicrophoneController] Initialization complete');\n      return resources;\n\n    } catch (error) {\n      this.logger.error('Initialization failed', error as Error, {\n        operation: 'initialize',\n        currentState: this.currentState\n      });\n      \n      // Update internal state\n      this.isPermissionGranted = false;\n      \n      // Handle error (this will update state, show notifications, and call callbacks)\n      this.handleError(error as Error, 'initialization');\n      \n      // Notify permission denial\n      this.eventCallbacks.onPermissionChange?.(false);\n      this.dispatchCustomEvent('pitchpro:microphoneDenied', { error: error as Error });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Request microphone permission (alias for initialize)\n   */\n  async requestPermission(): Promise<boolean> {\n    try {\n      await this.initialize();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if microphone permission is granted\n   */\n  async checkPermissionStatus(): Promise<'granted' | 'denied' | 'prompt'> {\n    if (typeof navigator === 'undefined' || !navigator.mediaDevices) {\n      return 'denied';\n    }\n\n    try {\n      const result = await navigator.permissions.query({ name: 'microphone' as PermissionName });\n      return result.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      // Fallback: try to access microphone with configured constraints\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: this.config.audioConstraints\n        });\n        stream.getTracks().forEach(track => track.stop());\n        return 'granted';\n      } catch {\n        return 'denied';\n      }\n    }\n  }\n\n  /**\n   * Stop microphone and release resources\n   */\n  stop(): void {\n    console.log('🛑 [MicrophoneController] Stopping microphone');\n    \n    this.lifecycleManager.release();\n    this.updateState('ready');\n    \n    // Dispatch stop event\n    this.dispatchCustomEvent('pitchpro:microphoneStopped', {});\n    \n    console.log('✅ [MicrophoneController] Microphone stopped');\n  }\n\n  /**\n   * Forcefully stops microphone with complete resource cleanup\n   * \n   * @description Performs immediate and complete cleanup of all microphone resources,\n   * resets permission state, and returns controller to uninitialized state.\n   * Use when normal stop() is not sufficient or emergency cleanup is needed.\n   * \n   * @example\n   * ```typescript\n   * // Emergency cleanup\n   * micController.forceStop();\n   * console.log('All microphone resources cleaned up');\n   * ```\n   */\n  forceStop(): void {\n    console.log('🚨 [MicrophoneController] Force stopping microphone');\n    \n    this.lifecycleManager.forceRelease();\n    this.updateState('uninitialized');\n    this.isPermissionGranted = false;\n    \n    console.log('✅ [MicrophoneController] Force stop complete');\n  }\n\n  /**\n   * Sets microphone sensitivity with automatic validation and event notification\n   * \n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   * - 0.1-1.0: Reduced sensitivity for loud environments\n   * - 1.0: Standard PC sensitivity\n   * - 3.0: iPhone optimized\n   * - 7.0: iPad optimized  \n   * - 10.0: Maximum sensitivity for quiet environments\n   * \n   * @example\n   * ```typescript\n   * // Set device-optimized sensitivity\n   * micController.setSensitivity(7.0);  // iPad optimization\n   * \n   * // Adjust for environment\n   * micController.setSensitivity(0.5);  // Reduce for loud room\n   * ```\n   */\n  setSensitivity(sensitivity: number): void {\n    const oldSensitivity = this.audioManager.getSensitivity();\n    this.audioManager.setSensitivity(sensitivity);\n    const newSensitivity = this.audioManager.getSensitivity();\n    \n    if (oldSensitivity !== newSensitivity) {\n      console.log(`🔧 [MicrophoneController] Sensitivity changed: ${oldSensitivity}x → ${newSensitivity}x`);\n      \n      // Notify callbacks\n      this.eventCallbacks.onSensitivityChange?.(newSensitivity);\n      this.dispatchCustomEvent('pitchpro:sensitivityChanged', { sensitivity: newSensitivity });\n    }\n  }\n\n  /**\n   * Gets current microphone sensitivity multiplier\n   * \n   * @returns Current sensitivity value (0.1 ~ 10.0)\n   * \n   * @example\n   * ```typescript\n   * const currentSensitivity = micController.getSensitivity();\n   * console.log(`Current sensitivity: ${currentSensitivity}x`);\n   * ```\n   */\n  getSensitivity(): number {\n    return this.audioManager.getSensitivity();\n  }\n\n  /**\n   * Mutes the microphone by disabling audio tracks\n   * \n   * @description Provides instant mute functionality by disabling MediaStream \n   * audio tracks without requiring resource reinitialization. Maintains stream \n   * connection for quick unmute operations. Ideal for UI switching and temporary \n   * audio interruptions.\n   * \n   * @example\n   * ```typescript\n   * micController.mute();\n   * console.log('Microphone muted');\n   * ```\n   */\n  mute(): void {\n    this.logger.info('Muting microphone via controller');\n    this.audioManager.mute();\n    \n    // Dispatch mute event\n    this.dispatchCustomEvent('pitchpro:microphoneMuted', {\n      timestamp: Date.now(),\n      controllerState: this.currentState\n    });\n  }\n\n  /**\n   * Unmutes the microphone by enabling audio tracks\n   * \n   * @description Re-enables audio input immediately without initialization delays.\n   * Complements the mute() method for seamless audio control during UI operations.\n   * \n   * @example\n   * ```typescript\n   * micController.unmute();\n   * console.log('Microphone unmuted');\n   * ```\n   */\n  unmute(): void {\n    this.logger.info('Unmuting microphone via controller');\n    this.audioManager.unmute();\n    \n    // Dispatch unmute event\n    this.dispatchCustomEvent('pitchpro:microphoneUnmuted', {\n      timestamp: Date.now(),\n      controllerState: this.currentState\n    });\n  }\n\n  /**\n   * Toggles microphone mute state\n   * \n   * @description Convenience method that automatically mutes or unmutes based on \n   * current state. Useful for implementing mute buttons and keyboard shortcuts.\n   * \n   * @returns The new mute state (true if now muted, false if now unmuted)\n   * \n   * @example\n   * ```typescript\n   * const isMuted = micController.toggleMute();\n   * console.log(`Microphone is now ${isMuted ? 'muted' : 'unmuted'}`);\n   * ```\n   */\n  toggleMute(): boolean {\n    if (this.audioManager.getIsMuted()) {\n      this.unmute();\n      return false;\n    } else {\n      this.mute();\n      return true;\n    }\n  }\n\n  /**\n   * Checks if microphone is currently muted\n   * \n   * @returns True if microphone is muted, false otherwise\n   * \n   * @example\n   * ```typescript\n   * if (micController.isMuted()) {\n   *   console.log('Microphone is currently muted');\n   * }\n   * ```\n   */\n  isMuted(): boolean {\n    return this.audioManager.getIsMuted();\n  }\n\n  /**\n   * Registers an AudioDetectionComponent instance with this controller for UI management\n   * \n   * @description Enables the MicrophoneController to control AudioDetectionComponent UI\n   * reset operations for complete system reset including comprehensive UI cleanup.\n   * \n   * @param component - The AudioDetectionComponent instance to register\n   * \n   * @example\n   * ```typescript\n   * const audioDetector = new AudioDetectionComponent();\n   * const micController = audioDetector.microphoneController;\n   * \n   * // Register component for UI control\n   * micController.registerAudioDetectionComponent(audioDetector);\n   * \n   * // Now reset() includes comprehensive UI reset\n   * micController.reset(); // Includes AudioDetectionComponent UI reset\n   * ```\n   */\n  registerAudioDetectionComponent(component: any): void {\n    this.audioDetectionComponent = component;\n    this.logger.info('AudioDetectionComponent registered for UI control');\n    console.log('🎛️ [MicrophoneController] AudioDetectionComponent registered for UI management');\n  }\n\n  /**\n   * Registers a PitchDetector instance with this controller for unified management\n   * \n   * @description Enables the MicrophoneController to act as the central coordinator\n   * for the entire PitchPro library by managing PitchDetector instances. This allows\n   * unified control over detection, display, and audio management operations.\n   * \n   * @param detector - The PitchDetector instance to register\n   * \n   * @example\n   * ```typescript\n   * const micController = new MicrophoneController();\n   * const pitchDetector = new PitchDetector(micController.audioManager);\n   * \n   * // Register detector for unified control\n   * micController.registerDetector(pitchDetector);\n   * \n   * // Now controller can manage both audio and detection\n   * micController.reset(); // Stops detection, resets display, mutes mic\n   * ```\n   */\n  registerDetector(detector: PitchDetector): void {\n    this.pitchDetector = detector;\n    this.logger.info('PitchDetector instance has been registered to the controller.');\n    console.log('🎯 [MicrophoneController] PitchDetector registered for unified management');\n  }\n\n  /**\n   * Starts microphone and pitch detection systems\n   * \n   * @description Unmutes the microphone and starts pitch detection if a PitchDetector\n   * is registered. This method complements the reset() method for complete system\n   * lifecycle management. Provides one-click start functionality for the entire\n   * PitchPro library ecosystem.\n   * \n   * @returns True if both unmute and detection start succeeded, false otherwise\n   * \n   * @example\n   * ```typescript\n   * // Start system - unmutes mic and begins detection\n   * const success = micController.start();\n   * if (success) {\n   *   console.log('System started successfully');\n   * }\n   * \n   * // Typical usage pattern\n   * micController.reset(); // Stop everything\n   * micController.start(); // Resume everything\n   * ```\n   */\n  start(): boolean {\n    this.logger.info('Starting microphone and pitch detection systems...');\n    console.log('▶️ [MicrophoneController] Starting comprehensive system startup');\n\n    // 1. Unmute the microphone\n    try {\n      this.unmute();\n      console.log('✅ [MicrophoneController] Microphone unmuted');\n    } catch (error) {\n      this.logger.error('Error during microphone unmute', error as Error);\n      console.warn('⚠️ [MicrophoneController] Microphone unmute failed:', (error as Error).message);\n      return false;\n    }\n\n    // 2. Start PitchDetector if registered\n    if (this.pitchDetector) {\n      try {\n        const started = this.pitchDetector.startDetection();\n        if (started) {\n          this.logger.info('PitchDetector detection started successfully');\n          console.log('✅ [MicrophoneController] Pitch detection started');\n          console.log('🎉 [MicrophoneController] System startup completed successfully');\n          return true;\n        } else {\n          this.logger.warn('PitchDetector failed to start detection');\n          console.warn('⚠️ [MicrophoneController] Pitch detection failed to start');\n          return false;\n        }\n      } catch (error) {\n        this.logger.error('Error during PitchDetector start', error as Error);\n        console.warn('⚠️ [MicrophoneController] PitchDetector start encountered error:', (error as Error).message);\n        return false;\n      }\n    } else {\n      this.logger.warn('No PitchDetector registered, cannot start detection');\n      console.log('⚠️ [MicrophoneController] No PitchDetector registered - skipping detection start');\n      console.log('ℹ️ [MicrophoneController] Only microphone unmuted, detection not available');\n      return false; // Cannot start detection without registered detector\n    }\n  }\n\n  /**\n   * Performs comprehensive system reset across all managed components\n   * \n   * @description Executes a complete system reset by stopping pitch detection,\n   * clearing all UI display elements, muting the microphone, and resetting\n   * internal states. Provides one-click reset functionality for the entire\n   * PitchPro library ecosystem when used as the central coordinator.\n   * \n   * @example\n   * ```typescript\n   * // Complete system reset - stops everything and clears UI\n   * micController.reset();\n   * console.log('All systems reset and ready for next operation');\n   * \n   * // Ideal for UI reset buttons\n   * function handleResetButtonClick() {\n   *   micController.reset(); // One call handles everything\n   * }\n   * ```\n   */\n  reset(): void {\n    this.logger.info('Performing full system reset...');\n    console.log('🔄 [MicrophoneController] Starting comprehensive system reset');\n\n    // 1. Stop and reset PitchDetector if registered\n    if (this.pitchDetector) {\n      try {\n        // Stop detection processing\n        this.pitchDetector.stopDetection();\n        console.log('✅ [MicrophoneController] PitchDetector stopped');\n        \n        // Reset display state to clear all UI elements\n        this.pitchDetector.resetDisplayState();\n        console.log('✅ [MicrophoneController] Display state reset');\n      } catch (error) {\n        this.logger.error('Error during PitchDetector reset', error as Error);\n        console.warn('⚠️ [MicrophoneController] PitchDetector reset encountered error:', (error as Error).message);\n      }\n    } else {\n      this.logger.warn('No PitchDetector registered, skipping detector reset.');\n      console.log('⚠️ [MicrophoneController] No PitchDetector registered - skipping detection reset');\n    }\n\n    // 1.5. Reset AudioDetectionComponent UI if registered\n    if (this.audioDetectionComponent) {\n      try {\n        if (typeof this.audioDetectionComponent.resetDisplayElements === 'function') {\n          this.audioDetectionComponent.resetDisplayElements();\n          console.log('✅ [MicrophoneController] AudioDetectionComponent UI reset');\n        } else {\n          console.warn('⚠️ [MicrophoneController] AudioDetectionComponent does not have resetDisplayElements method');\n        }\n      } catch (error) {\n        this.logger.error('Error during AudioDetectionComponent UI reset', error as Error);\n        console.warn('⚠️ [MicrophoneController] AudioDetectionComponent UI reset encountered error:', (error as Error).message);\n      }\n    } else {\n      console.log('ℹ️ [MicrophoneController] No AudioDetectionComponent registered - skipping comprehensive UI reset');\n    }\n\n    // 2. Mute microphone to ensure audio input is disabled\n    try {\n      this.mute();\n      console.log('✅ [MicrophoneController] Microphone muted');\n    } catch (error) {\n      this.logger.error('Error during microphone mute', error as Error);\n      console.warn('⚠️ [MicrophoneController] Microphone mute encountered error:', (error as Error).message);\n    }\n\n    // 3. Reset recovery attempts for clean state (this also clears error states)\n    try {\n      this.resetRecoveryAttempts();\n      console.log('✅ [MicrophoneController] Recovery attempts reset');\n    } catch (error) {\n      this.logger.error('Error during recovery reset', error as Error);\n      console.warn('⚠️ [MicrophoneController] Recovery reset encountered error:', (error as Error).message);\n    }\n\n    this.logger.info('System reset complete.');\n    console.log('🎉 [MicrophoneController] Comprehensive system reset completed');\n    console.log('ℹ️ [MicrophoneController] Note: Muted state is normal and will not trigger health check errors');\n  }\n\n  /**\n   * Get device specifications\n   */\n  getDeviceSpecs(): DeviceSpecs | null {\n    return this.deviceSpecs;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): string {\n    return this.currentState;\n  }\n\n\n  /**\n   * Check if permission is granted\n   */\n  hasPermission(): boolean {\n    return this.isPermissionGranted;\n  }\n\n  /**\n   * Get comprehensive status\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isPermissionGranted: this.isPermissionGranted,\n      isActive: this.isActive(),\n      isReady: this.isReady(),\n      sensitivity: this.getSensitivity(),\n      deviceSpecs: this.deviceSpecs,\n      lastError: this.lastError,\n      audioManagerStatus: this.audioManager.getStatus(),\n      lifecycleStatus: this.lifecycleManager.getStatus()\n    };\n  }\n\n  /**\n   * Perform health check\n   */\n  checkHealth() {\n    return this.audioManager.checkMediaStreamHealth();\n  }\n\n  /**\n   * Test microphone functionality\n   */\n  async testMicrophone(durationMs = 2000): Promise<{\n    success: boolean;\n    volume: number;\n    frequency: number | null;\n    duration: number;\n    error?: Error;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Ensure we have resources\n      if (!this.isReady() && !this.isActive()) {\n        await this.initialize();\n      }\n      \n      // Create temporary analyser for testing\n      const analyser = this.audioManager.createAnalyser('microphone-test', {\n        fftSize: 1024,\n        smoothingTimeConstant: 0.8\n      });\n      \n      // Collect audio data for specified duration\n      let maxVolume = 0;\n      let detectedFrequency: number | null = null as number | null;\n      const endTime = startTime + durationMs;\n      \n      await new Promise<void>((resolve) => {\n        const checkAudio = () => {\n          if (Date.now() >= endTime) {\n            resolve();\n            return;\n          }\n          \n          // Analyze current audio\n          const bufferLength = analyser.fftSize;\n          const dataArray = new Float32Array(bufferLength);\n          analyser.getFloatTimeDomainData(dataArray);\n          \n          // Calculate RMS volume\n          let sum = 0;\n          for (let i = 0; i < bufferLength; i++) {\n            sum += Math.abs(dataArray[i]);\n          }\n          const rms = Math.sqrt(sum / bufferLength);\n          const volume = rms * 100;\n          \n          if (volume > maxVolume) {\n            maxVolume = volume;\n          }\n          \n          // Simple peak detection for frequency\n          if (volume > 5) { // Only check frequency if there's significant volume\n            let maxIndex = 0;\n            let maxValue = 0;\n            for (let i = 1; i < bufferLength / 2; i++) {\n              const value = Math.abs(dataArray[i]);\n              if (value > maxValue) {\n                maxValue = value;\n                maxIndex = i;\n              }\n            }\n            if (maxIndex > 0) {\n              detectedFrequency = (maxIndex * 44100) / bufferLength;\n            }\n          }\n          \n          requestAnimationFrame(checkAudio);\n        };\n        \n        checkAudio();\n      });\n      \n      // Cleanup test analyser\n      this.audioManager.removeAnalyser('microphone-test');\n      \n      const duration = Date.now() - startTime;\n      const success = maxVolume > 1; // Consider success if we detected some audio\n      \n      const frequencyDisplay = detectedFrequency ? detectedFrequency.toFixed(0) : 'none';\n      console.log(`🧪 [MicrophoneController] Microphone test complete: volume=${maxVolume.toFixed(2)}, frequency=${frequencyDisplay}, duration=${duration}ms`);\n      \n      return {\n        success,\n        volume: maxVolume,\n        frequency: detectedFrequency,\n        duration\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const testError = this._createStructuredError(error as Error, 'microphone_test');\n      ErrorMessageBuilder.logError(testError, 'Microphone functionality test');\n      console.error('❌ [MicrophoneController] Microphone test failed:', testError.toJSON());\n      \n      return {\n        success: false,\n        volume: 0,\n        frequency: null,\n        duration,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Update internal state and notify\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      console.log(`🔄 [MicrophoneController] State changed: ${oldState} → ${newState}`);\n      \n      // Notify callback\n      this.eventCallbacks.onStateChange?.(newState);\n    }\n  }\n\n  /**\n   * Handle errors with notification system\n   */\n  private handleError(error: Error, context: string): void {\n    const structuredError = error instanceof PitchProError ? error : this._createStructuredError(error, context);\n    ErrorMessageBuilder.logError(structuredError, `MicrophoneController ${context}`);\n    console.error(`❌ [MicrophoneController] Error in ${context}:`, structuredError.toJSON());\n    \n    this.lastError = error;\n    this.updateState('error');\n    \n    // Show error notification if system is available\n    if (this.errorSystem) {\n      if (context === 'initialization' || context === 'lifecycle') {\n        this.errorSystem.showMicrophoneError(error, context);\n      } else {\n        this.errorSystem.showError(\n          'マイクエラー',\n          `${context}でエラーが発生しました: ${error.message}`,\n          { priority: 'medium' }\n        );\n      }\n    }\n    \n    // Notify error callback\n    this.eventCallbacks.onError?.(error);\n  }\n\n  /**\n   * Dispatch custom DOM event\n   */\n  private dispatchCustomEvent(eventName: keyof MicrophoneControllerEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Add event listener for microphone events\n   */\n  addEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.addEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Remove event listener for microphone events\n   */\n  removeEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.removeEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Cleanup and destroy all resources\n   */\n  destroy(): void {\n    console.log('🗑️ [MicrophoneController] Destroying controller');\n    \n    // Force stop to ensure cleanup\n    this.forceStop();\n    \n    // Destroy managed components\n    this.lifecycleManager.destroy();\n    this.errorSystem?.destroy();\n    \n    // Clear callbacks\n    this.eventCallbacks = {};\n    \n    // Reset state\n    this.currentState = 'uninitialized';\n    this.isPermissionGranted = false;\n    this.lastError = null;\n    this.deviceSpecs = null;\n    \n    console.log('✅ [MicrophoneController] Cleanup complete');\n  }\n\n  /**\n   * Creates structured error with enhanced context information\n   * \n   * @private\n   * @param error - Original error\n   * @param operation - Operation that failed\n   * @returns Structured PitchProError with context\n   */\n  private _createStructuredError(error: Error, operation: string): PitchProError {\n    // Determine error type based on error message patterns\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission') ||\n        error.message.includes('denied')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.deviceSpecs,\n          permissionState: this.isPermissionGranted,\n          controllerState: this.currentState,\n          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('context') ||\n        error.message.includes('initialization')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          controllerState: this.currentState,\n          audioManagerStatus: this.audioManager.getStatus(),\n          deviceSpecs: this.deviceSpecs\n        }\n      );\n    }\n    \n    // Default to generic PitchPro error\n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.MICROPHONE_ACCESS_DENIED,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        currentState: {\n          controllerState: this.currentState,\n          isPermissionGranted: this.isPermissionGranted,\n          isActive: this.isActive(),\n          isReady: this.isReady(),\n          deviceSpecs: this.deviceSpecs\n        }\n      }\n    );\n  }\n}","/**\n * FrequencyUtils - Comprehensive Frequency Conversion and Musical Analysis Utilities\n * \n * @description Provides essential utilities for converting between frequencies, musical notes,\n * cents deviation, and MIDI values. Includes advanced musical interval calculations and\n * frequency analysis functions optimized for pitch detection and music applications.\n * \n * **Key Features:**\n * - Frequency ↔ MIDI note conversion with A4=440Hz reference\n * - Musical note name resolution with enharmonic support\n * - Cents deviation calculation for pitch accuracy\n * - Musical interval analysis and recognition\n * - Octave detection and normalization\n * \n * @example\n * ```typescript\n * // Basic frequency conversion\n * const note = FrequencyUtils.frequencyToNote(440);\n * console.log(note); // { name: 'A', octave: 4, midi: 69, frequency: 440 }\n * \n * // Pitch accuracy analysis\n * const cents = FrequencyUtils.frequencyToCents(445, 440);\n * console.log(cents); // +19.56 cents sharp\n * \n * // Musical interval calculation\n * const interval = FrequencyUtils.getInterval(523.25, 261.63);\n * console.log(interval); // Perfect octave\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\n\nexport class FrequencyUtils {\n  /** Standard reference frequency for A4 note (440 Hz) */\n  static readonly A4_FREQUENCY = 440;\n  \n  /** MIDI note number for A4 (69) */\n  static readonly A4_MIDI_NUMBER = 69;\n  \n  /** Sharp note names in chromatic order */\n  static readonly NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  \n  /** Flat note names in chromatic order */\n  static readonly FLAT_NOTE_NAMES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  \n  /** Common musical intervals mapped to semitone values */\n  static readonly INTERVALS = {\n    unison: 0,\n    minorSecond: 1,\n    majorSecond: 2,\n    minorThird: 3,\n    majorThird: 4,\n    perfectFourth: 5,\n    tritone: 6,\n    perfectFifth: 7,\n    minorSixth: 8,\n    majorSixth: 9,\n    minorSeventh: 10,\n    majorSeventh: 11,\n    octave: 12\n  };\n\n  /**\n   * Converts frequency in Hz to MIDI note number\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns MIDI note number (0-127, where 69 = A4 = 440Hz)\n   * \n   * @example\n   * ```typescript\n   * const midiNote = FrequencyUtils.frequencyToMidi(440);\n   * console.log(midiNote); // 69 (A4)\n   * \n   * const midiNote2 = FrequencyUtils.frequencyToMidi(261.63);\n   * console.log(midiNote2); // 60 (C4)\n   * ```\n   */\n  static frequencyToMidi(frequency: number): number {\n    if (frequency <= 0) return 0;\n    return Math.round(12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER);\n  }\n\n  /**\n   * Converts MIDI note number to frequency in Hz\n   * \n   * @param midiNumber - MIDI note number (0-127)\n   * @returns Frequency in Hz\n   * \n   * @example\n   * ```typescript\n   * const frequency = FrequencyUtils.midiToFrequency(69);\n   * console.log(frequency); // 440 (A4)\n   * \n   * const frequency2 = FrequencyUtils.midiToFrequency(60);\n   * console.log(frequency2); // 261.63 (C4)\n   * ```\n   */\n  static midiToFrequency(midiNumber: number): number {\n    return FrequencyUtils.A4_FREQUENCY * Math.pow(2, (midiNumber - FrequencyUtils.A4_MIDI_NUMBER) / 12);\n  }\n\n  /**\n   * Converts frequency to musical note with octave detection and enharmonic support\n   * \n   * @param frequency - Input frequency in Hz\n   * @param useFlats - Use flat notation instead of sharps (default: false)\n   * @returns Musical note object with name, octave, MIDI number, and exact frequency\n   * \n   * @example\n   * ```typescript\n   * const note1 = FrequencyUtils.frequencyToNote(440);\n   * console.log(note1); // { name: 'A4', octave: 4, midi: 69, frequency: 440 }\n   * \n   * const note2 = FrequencyUtils.frequencyToNote(466.16, true);\n   * console.log(note2); // { name: 'Bb4', octave: 4, midi: 70, frequency: 466.164... }\n   * \n   * // Invalid frequency handling\n   * const invalid = FrequencyUtils.frequencyToNote(-10);\n   * console.log(invalid); // { name: '--', octave: 0, midi: 0, frequency: 0 }\n   * ```\n   */\n  static frequencyToNote(frequency: number, useFlats = false): MusicalNote {\n    if (frequency <= 0) {\n      return {\n        name: '--',\n        octave: 0,\n        midi: 0,\n        frequency: 0\n      };\n    }\n\n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    const noteNames = useFlats ? FrequencyUtils.FLAT_NOTE_NAMES : FrequencyUtils.NOTE_NAMES;\n    \n    const noteIndex = (midiNumber - 12) % 12; // C0 = MIDI 12\n    const octave = Math.floor((midiNumber - 12) / 12);\n    const noteName = noteNames[noteIndex];\n    \n    return {\n      name: noteName + octave,\n      octave,\n      midi: midiNumber,\n      frequency: FrequencyUtils.midiToFrequency(midiNumber)\n    };\n  }\n\n  /**\n   * Calculates cents deviation from the nearest semitone for pitch accuracy analysis\n   * \n   * @description Converts frequency to cents deviation, where 100 cents = 1 semitone.\n   * Positive values indicate sharp pitch, negative values indicate flat pitch.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Cents deviation from nearest semitone (-50 to +50 cents)\n   * \n   * @example\n   * ```typescript\n   * const cents1 = FrequencyUtils.frequencyToCents(440);\n   * console.log(cents1); // 0 (A4 is perfectly in tune)\n   * \n   * const cents2 = FrequencyUtils.frequencyToCents(445);\n   * console.log(cents2); // +20 (20 cents sharp)\n   * \n   * const cents3 = FrequencyUtils.frequencyToCents(435);\n   * console.log(cents3); // -20 (20 cents flat)\n   * ```\n   */\n  static frequencyToCents(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = 12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER;\n    const nearestMidi = Math.round(midiNumber);\n    const centsDeviation = (midiNumber - nearestMidi) * 100;\n    \n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Converts cents to frequency ratio for interval calculations\n   * \n   * @description Calculates the frequency multiplier for a given cent value.\n   * Useful for transposition and interval calculations.\n   * \n   * @param cents - Cents value (100 cents = 1 semitone)\n   * @returns Frequency ratio multiplier\n   * \n   * @example\n   * ```typescript\n   * const ratio1 = FrequencyUtils.centsToRatio(1200);\n   * console.log(ratio1); // 2.0 (1200 cents = 1 octave = 2x frequency)\n   * \n   * const ratio2 = FrequencyUtils.centsToRatio(700);\n   * console.log(ratio2); // ~1.498 (700 cents ≈ perfect fifth)\n   * \n   * // Apply ratio to transpose frequency\n   * const newFreq = 440 * FrequencyUtils.centsToRatio(100); // 440 * semitone ratio\n   * console.log(newFreq); // ~466.16 (A# above A4)\n   * ```\n   */\n  static centsToRatio(cents: number): number {\n    return Math.pow(2, cents / 1200);\n  }\n\n  /**\n   * Converts frequency ratio to cents for interval analysis\n   * \n   * @description Calculates the cent value for a given frequency ratio.\n   * Useful for analyzing musical intervals and pitch relationships.\n   * \n   * @param ratio - Frequency ratio (higher frequency / lower frequency)\n   * @returns Cents value (positive for ascending intervals)\n   * \n   * @example\n   * ```typescript\n   * const cents1 = FrequencyUtils.ratioToCents(2.0);\n   * console.log(cents1); // 1200 (octave)\n   * \n   * const cents2 = FrequencyUtils.ratioToCents(1.5);\n   * console.log(cents2); // 702 (perfect fifth)\n   * \n   * const cents3 = FrequencyUtils.ratioToCents(880 / 440);\n   * console.log(cents3); // 1200 (A4 to A5 = octave)\n   * ```\n   */\n  static ratioToCents(ratio: number): number {\n    if (ratio <= 0) return 0;\n    return Math.round(1200 * Math.log2(ratio));\n  }\n\n  /**\n   * Finds the exact frequency of the closest equal temperament note\n   * \n   * @description Rounds the input frequency to the nearest semitone frequency\n   * in equal temperament tuning. Useful for pitch correction and reference.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Exact frequency of the closest note in Hz\n   * \n   * @example\n   * ```typescript\n   * const closest1 = FrequencyUtils.getClosestNoteFrequency(445);\n   * console.log(closest1); // 440 (closest to A4)\n   * \n   * const closest2 = FrequencyUtils.getClosestNoteFrequency(470);\n   * console.log(closest2); // 466.16 (closest to A#4/Bb4)\n   * \n   * const closest3 = FrequencyUtils.getClosestNoteFrequency(260);\n   * console.log(closest3); // 261.63 (closest to C4)\n   * ```\n   */\n  static getClosestNoteFrequency(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Calculates the absolute interval between two frequencies in semitones\n   * \n   * @description Determines the musical interval size between two frequencies,\n   * always returning a positive value regardless of frequency order.\n   * \n   * @param frequency1 - First frequency in Hz\n   * @param frequency2 - Second frequency in Hz\n   * @returns Absolute interval in semitones (always positive)\n   * \n   * @example\n   * ```typescript\n   * const interval1 = FrequencyUtils.getInterval(440, 880);\n   * console.log(interval1); // 12 (octave)\n   * \n   * const interval2 = FrequencyUtils.getInterval(880, 440);\n   * console.log(interval2); // 12 (same interval, order doesn't matter)\n   * \n   * const interval3 = FrequencyUtils.getInterval(440, 659.25);\n   * console.log(interval3); // 7 (perfect fifth)\n   * ```\n   */\n  static getInterval(frequency1: number, frequency2: number): number {\n    if (frequency1 <= 0 || frequency2 <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(frequency1);\n    const midi2 = FrequencyUtils.frequencyToMidi(frequency2);\n    \n    return Math.abs(midi2 - midi1);\n  }\n\n  /**\n   * Calculates the signed interval between two frequencies with direction\n   * \n   * @description Determines the musical interval with direction information.\n   * Positive values indicate ascending intervals, negative values indicate descending.\n   * \n   * @param fromFrequency - Starting frequency in Hz\n   * @param toFrequency - Target frequency in Hz\n   * @returns Signed interval in semitones (positive = ascending, negative = descending)\n   * \n   * @example\n   * ```typescript\n   * const interval1 = FrequencyUtils.getSignedInterval(440, 880);\n   * console.log(interval1); // +12 (ascending octave)\n   * \n   * const interval2 = FrequencyUtils.getSignedInterval(880, 440);\n   * console.log(interval2); // -12 (descending octave)\n   * \n   * const interval3 = FrequencyUtils.getSignedInterval(261.63, 392);\n   * console.log(interval3); // +7 (ascending perfect fifth)\n   * ```\n   */\n  static getSignedInterval(fromFrequency: number, toFrequency: number): number {\n    if (fromFrequency <= 0 || toFrequency <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(fromFrequency);\n    const midi2 = FrequencyUtils.frequencyToMidi(toFrequency);\n    \n    return midi2 - midi1;\n  }\n\n  /**\n   * Provides comprehensive musical interval information and analysis\n   * \n   * @description Converts semitone count to detailed interval information including\n   * name, cents value, and frequency ratio. Handles compound intervals with octaves.\n   * \n   * @param semitones - Interval size in semitones\n   * @returns Musical interval object with name, semitones, cents, and ratio\n   * \n   * @example\n   * ```typescript\n   * const fifth = FrequencyUtils.getIntervalInfo(7);\n   * console.log(fifth);\n   * // { name: 'Perfect Fifth', semitones: 7, cents: 700, ratio: 1.498... }\n   * \n   * const compound = FrequencyUtils.getIntervalInfo(19);\n   * console.log(compound);\n   * // { name: 'Perfect Fifth + 1 octave(s)', semitones: 19, cents: 1900, ratio: 2.996... }\n   * \n   * const unison = FrequencyUtils.getIntervalInfo(0);\n   * console.log(unison);\n   * // { name: 'Perfect Unison', semitones: 0, cents: 0, ratio: 1.0 }\n   * ```\n   */\n  static getIntervalInfo(semitones: number): MusicalInterval {\n    const intervalNames = {\n      0: 'Perfect Unison',\n      1: 'Minor Second',\n      2: 'Major Second',\n      3: 'Minor Third',\n      4: 'Major Third',\n      5: 'Perfect Fourth',\n      6: 'Tritone',\n      7: 'Perfect Fifth',\n      8: 'Minor Sixth',\n      9: 'Major Sixth',\n      10: 'Minor Seventh',\n      11: 'Major Seventh',\n      12: 'Perfect Octave'\n    };\n\n    const normalizedSemitones = ((semitones % 12) + 12) % 12;\n    const octaves = Math.floor(semitones / 12);\n    \n    const baseName = intervalNames[normalizedSemitones as keyof typeof intervalNames] || 'Unknown';\n    const name = octaves > 0 ? `${baseName} + ${octaves} octave(s)` : baseName;\n    \n    return {\n      name,\n      semitones,\n      cents: semitones * 100,\n      ratio: Math.pow(2, semitones / 12)\n    };\n  }\n\n  /**\n   * Checks if frequency falls within typical human vocal range\n   * \n   * @description Tests whether a frequency is within the fundamental vocal range\n   * of approximately 80Hz to 1100Hz, covering bass to soprano voices.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns True if frequency is within vocal range, false otherwise\n   * \n   * @example\n   * ```typescript\n   * const isVocal1 = FrequencyUtils.isInVocalRange(220);\n   * console.log(isVocal1); // true (A3, typical male voice)\n   * \n   * const isVocal2 = FrequencyUtils.isInVocalRange(50);\n   * console.log(isVocal2); // false (below vocal range)\n   * \n   * const isVocal3 = FrequencyUtils.isInVocalRange(2000);\n   * console.log(isVocal3); // false (above fundamental vocal range)\n   * ```\n   */\n  static isInVocalRange(frequency: number): boolean {\n    // Human vocal range roughly 80Hz to 1100Hz\n    return frequency >= 80 && frequency <= 1100;\n  }\n\n  /**\n   * Checks if frequency falls within standard piano key range\n   * \n   * @description Tests whether a frequency is within the range of a standard\n   * 88-key piano, from A0 (27.5Hz) to C8 (4186Hz).\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns True if frequency is within piano range, false otherwise\n   * \n   * @example\n   * ```typescript\n   * const isPiano1 = FrequencyUtils.isInPianoRange(440);\n   * console.log(isPiano1); // true (A4, middle of piano range)\n   * \n   * const isPiano2 = FrequencyUtils.isInPianoRange(20);\n   * console.log(isPiano2); // false (below piano range)\n   * \n   * const isPiano3 = FrequencyUtils.isInPianoRange(5000);\n   * console.log(isPiano3); // false (above piano range)\n   * ```\n   */\n  static isInPianoRange(frequency: number): boolean {\n    // Piano range A0 (27.5Hz) to C8 (4186Hz)\n    return frequency >= 27.5 && frequency <= 4186;\n  }\n\n  /**\n   * Retrieves frequency range specifications for common instruments\n   * \n   * @description Returns the typical fundamental frequency range for various\n   * instruments and voice types. Useful for instrument-specific audio processing.\n   * \n   * @param instrument - Instrument name (piano, guitar, violin, cello, voice_bass, voice_tenor, voice_alto, voice_soprano)\n   * @returns Object with min/max frequencies in Hz, or null if instrument not found\n   * \n   * @example\n   * ```typescript\n   * const guitarRange = FrequencyUtils.getInstrumentRange('guitar');\n   * console.log(guitarRange); // { min: 82.4, max: 1397 } (E2 to F6)\n   * \n   * const bassRange = FrequencyUtils.getInstrumentRange('voice_bass');\n   * console.log(bassRange); // { min: 87.3, max: 349 } (F2 to F4)\n   * \n   * const unknown = FrequencyUtils.getInstrumentRange('kazoo');\n   * console.log(unknown); // null (instrument not in database)\n   * ```\n   */\n  static getInstrumentRange(instrument: string): { min: number; max: number } | null {\n    const ranges = {\n      piano: { min: 27.5, max: 4186 },\n      guitar: { min: 82.4, max: 1397 }, // E2 to F6\n      violin: { min: 196, max: 3520 },  // G3 to A7\n      cello: { min: 65.4, max: 1397 },  // C2 to F6\n      voice_bass: { min: 87.3, max: 349 }, // F2 to F4\n      voice_tenor: { min: 131, max: 523 }, // C3 to C5\n      voice_alto: { min: 175, max: 698 },  // F3 to F5\n      voice_soprano: { min: 262, max: 1047 } // C4 to C6\n    };\n\n    return ranges[instrument as keyof typeof ranges] || null;\n  }\n\n  /**\n   * Generates chromatic scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a chromatic scale\n   * (all 12 semitones) starting from the given base frequency.\n   * \n   * @param baseFrequency - Starting frequency in Hz\n   * @param octaves - Number of octaves to generate (default: 1)\n   * @returns Array of frequencies representing the chromatic scale\n   * \n   * @example\n   * ```typescript\n   * const chromaticC4 = FrequencyUtils.generateChromaticScale(261.63, 1);\n   * console.log(chromaticC4);\n   * // [261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.00, 415.30, 440.00, 466.16, 493.88, 523.25]\n   * \n   * const chromatic2Oct = FrequencyUtils.generateChromaticScale(440, 2);\n   * console.log(chromatic2Oct.length); // 24 (2 octaves × 12 semitones)\n   * ```\n   */\n  static generateChromaticScale(baseFrequency: number, octaves = 1): number[] {\n    const frequencies: number[] = [];\n    \n    for (let i = 0; i < 12 * octaves; i++) {\n      const frequency = baseFrequency * Math.pow(2, i / 12);\n      frequencies.push(frequency);\n    }\n    \n    return frequencies;\n  }\n\n  /**\n   * Generates major scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a major scale\n   * using the pattern W-W-H-W-W-W-H (whole step, half step intervals).\n   * \n   * @param baseFrequency - Starting frequency in Hz (tonic note)\n   * @returns Array of 8 frequencies representing the major scale (including octave)\n   * \n   * @example\n   * ```typescript\n   * const cMajor = FrequencyUtils.generateMajorScale(261.63); // C4 major\n   * console.log(cMajor);\n   * // [261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25]\n   * // [C4,     D4,     E4,     F4,     G4,     A4,     B4,     C5]\n   * \n   * const gMajor = FrequencyUtils.generateMajorScale(392); // G4 major\n   * console.log(gMajor.length); // 8 notes (including octave)\n   * ```\n   */\n  static generateMajorScale(baseFrequency: number): number[] {\n    // Major scale pattern: W-W-H-W-W-W-H (W=whole step=2 semitones, H=half step=1 semitone)\n    const pattern = [0, 2, 4, 5, 7, 9, 11, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Generates natural minor scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a natural minor scale\n   * using the pattern W-H-W-W-H-W-W (whole step, half step intervals).\n   * \n   * @param baseFrequency - Starting frequency in Hz (tonic note)\n   * @returns Array of 8 frequencies representing the natural minor scale (including octave)\n   * \n   * @example\n   * ```typescript\n   * const aMinor = FrequencyUtils.generateMinorScale(440); // A4 minor\n   * console.log(aMinor);\n   * // [440.00, 493.88, 523.25, 587.33, 659.25, 698.46, 783.99, 880.00]\n   * // [A4,     B4,     C5,     D5,     E5,     F5,     G5,     A5]\n   * \n   * const dMinor = FrequencyUtils.generateMinorScale(293.66); // D4 minor\n   * console.log(dMinor.length); // 8 notes (including octave)\n   * ```\n   */\n  static generateMinorScale(baseFrequency: number): number[] {\n    // Natural minor scale pattern: W-H-W-W-H-W-W\n    const pattern = [0, 2, 3, 5, 7, 8, 10, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Calculates harmonic series frequencies for a given fundamental\n   * \n   * @description Generates the harmonic series by multiplying the fundamental\n   * frequency by integer values. Essential for understanding timbre and overtones.\n   * \n   * @param fundamental - Fundamental frequency in Hz\n   * @param maxHarmonic - Maximum harmonic number to calculate (default: 8)\n   * @returns Array of harmonic frequencies including the fundamental\n   * \n   * @example\n   * ```typescript\n   * const harmonics = FrequencyUtils.findHarmonics(220, 5); // A3 harmonics\n   * console.log(harmonics);\n   * // [220, 440, 660, 880, 1100] (A3, A4, E5, A5, C#6)\n   * \n   * const allHarmonics = FrequencyUtils.findHarmonics(100, 8);\n   * console.log(allHarmonics.length); // 8 harmonics\n   * ```\n   */\n  static findHarmonics(fundamental: number, maxHarmonic = 8): number[] {\n    const harmonics: number[] = [];\n    \n    for (let i = 1; i <= maxHarmonic; i++) {\n      harmonics.push(fundamental * i);\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Analyzes whether a frequency is a harmonic of a fundamental frequency\n   * \n   * @description Tests if the given frequency matches a harmonic of the fundamental\n   * within the specified tolerance. Returns detailed harmonic analysis.\n   * \n   * @param frequency - Frequency to test in Hz\n   * @param fundamental - Fundamental frequency in Hz\n   * @param tolerance - Tolerance for harmonic matching (default: 0.05 = 5%)\n   * @returns Object containing harmonic analysis results\n   * \n   * @example\n   * ```typescript\n   * const result1 = FrequencyUtils.isHarmonic(440, 220);\n   * console.log(result1);\n   * // { isHarmonic: true, harmonicNumber: 2, exactFrequency: 440 }\n   * \n   * const result2 = FrequencyUtils.isHarmonic(665, 220, 0.1);\n   * console.log(result2);\n   * // { isHarmonic: true, harmonicNumber: 3, exactFrequency: 660 } (within 10% tolerance)\n   * \n   * const result3 = FrequencyUtils.isHarmonic(450, 220);\n   * console.log(result3);\n   * // { isHarmonic: false, harmonicNumber: null, exactFrequency: null }\n   * ```\n   */\n  static isHarmonic(frequency: number, fundamental: number, tolerance = 0.05): {\n    isHarmonic: boolean;\n    harmonicNumber: number | null;\n    exactFrequency: number | null;\n  } {\n    if (fundamental <= 0 || frequency <= 0) {\n      return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n    }\n\n    const ratio = frequency / fundamental;\n    const nearestInteger = Math.round(ratio);\n    \n    // Check if the ratio is close to an integer (within tolerance)\n    if (nearestInteger >= 1 && Math.abs(ratio - nearestInteger) <= tolerance) {\n      return {\n        isHarmonic: true,\n        harmonicNumber: nearestInteger,\n        exactFrequency: fundamental * nearestInteger\n      };\n    }\n\n    return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n  }\n\n  /**\n   * Calculate the fundamental frequency from a suspected harmonic\n   */\n  static calculateFundamental(harmonicFrequency: number, harmonicNumber: number): number {\n    if (harmonicNumber <= 0 || harmonicFrequency <= 0) return 0;\n    return harmonicFrequency / harmonicNumber;\n  }\n\n  /**\n   * Convert frequency to scientific pitch notation\n   */\n  static frequencyToScientificPitch(frequency: number): string {\n    const note = FrequencyUtils.frequencyToNote(frequency);\n    return note.name;\n  }\n\n  /**\n   * Convert scientific pitch notation to frequency\n   */\n  static scientificPitchToFrequency(scientificPitch: string): number {\n    const match = scientificPitch.match(/^([A-G][#b]?)(-?\\d+)$/);\n    if (!match) return 0;\n\n    const [, noteName, octaveStr] = match;\n    const octave = parseInt(octaveStr, 10);\n    \n    // Convert note name to semitone offset from C\n    let semitoneOffset = 0;\n    const baseNote = noteName[0];\n    const accidental = noteName.slice(1);\n    \n    const baseOffsets: { [key: string]: number } = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    semitoneOffset = baseOffsets[baseNote] || 0;\n    \n    if (accidental === '#') {\n      semitoneOffset += 1;\n    } else if (accidental === 'b') {\n      semitoneOffset -= 1;\n    }\n    \n    // Calculate MIDI number (C4 = MIDI 60)\n    const midiNumber = (octave + 1) * 12 + semitoneOffset;\n    \n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Format frequency display with appropriate precision\n   */\n  static formatFrequency(frequency: number, decimalPlaces = 1): string {\n    if (frequency === 0) return '0 Hz';\n    if (frequency < 0.1) return '<0.1 Hz';\n    if (frequency >= 10000) return `${Math.round(frequency / 1000)}k Hz`;\n    \n    return `${frequency.toFixed(decimalPlaces)} Hz`;\n  }\n\n  /**\n   * Format cents display with sign\n   */\n  static formatCents(cents: number): string {\n    if (cents === 0) return '0¢';\n    const sign = cents > 0 ? '+' : '';\n    return `${sign}${cents}¢`;\n  }\n}","/**\n * AudioDetectionComponent - Unified Audio Detection with Automatic UI Updates\n * \n * @description High-level integration component that combines PitchDetector functionality\n * with automatic UI updates, device optimization, and comprehensive error handling.\n * Designed to simplify audio detection integration in relative pitch training applications.\n * \n * @example\n * ```typescript\n * const audioDetector = new AudioDetectionComponent({\n *   volumeBarSelector: '#volume-bar',\n *   frequencySelector: '#frequency-display',\n *   clarityThreshold: 0.4,\n *   minVolumeAbsolute: 0.003  // ノイズゲート閾値（デバイス自動最適化される）\n * });\n *\n * await audioDetector.initialize();\n *\n * audioDetector.setCallbacks({\n *   onPitchUpdate: (result) => {\n *     console.log('音程検出:', result);\n *     // result.volume は既にデバイス固有補正済み（0-100%）\n *     // PC: 生音量 × 3.0, iPhone: 生音量 × 7.5, iPad: 生音量 × 20.0\n *     // { frequency: 261.6, note: 'C4', volume: 45.2 }\n *   },\n *   onError: (error) => {\n *     console.error('検出エラー:', error);\n *   }\n * });\n *\n * audioDetector.startDetection();\n * ```\n *\n * @remarks\n * **音量調整について（v1.2.9）**:\n * - デフォルトでは音量値は自動的にデバイス最適化が適用されます\n * - PC/iPhone/iPad の違いを意識する必要はありません\n * - 最終的な音量値は常に 0-100% の範囲で統一されています\n *\n * **カスタム音量処理が必要な場合**:\n * ```typescript\n * // deviceOptimization: false で生の音量値を取得\n * const audioDetector = new AudioDetectionComponent({\n *   deviceOptimization: false,  // 自動補正を無効化\n *   volumeBarSelector: '#volume-bar'\n * });\n *\n * audioDetector.setCallbacks({\n *   onPitchUpdate: (result) => {\n *     // result.volume は生の値（通常5-15%）\n *     const customVolume = result.volume * yourCustomMultiplier;\n *   }\n * });\n * ```\n * \n * @version 1.0.0\n * @since 1.0.0\n */\n\nimport { AudioManager } from '../core/AudioManager';\nimport { PitchDetector } from '../core/PitchDetector';\nimport { MicrophoneController } from '../core/MicrophoneController';\nimport { DeviceDetection } from '../utils/DeviceDetection';\nimport { FrequencyUtils } from '../utils/FrequencyUtils';\nimport { \n  PitchProError, \n  ErrorMessageBuilder, \n  AudioContextError,\n  MicrophoneAccessError,\n  ErrorCode\n} from '../utils/errors';\nimport type { PitchDetectionResult, DeviceSpecs } from '../types';\n\n/**\n * Configuration interface for AudioDetectionComponent\n */\nexport interface AudioDetectionConfig {\n  // UI Element Selectors\n  /**\n   * CSS selector for volume bar element.\n   * @warning When this selector is used with autoUpdateUI=true, the UI will be updated automatically.\n   * The value applied includes device-specific multipliers and may NOT be identical\n   * to the `result.volume` in the onPitchUpdate callback. For direct control,\n   * omit this selector and update the UI manually within the callback.\n   * @example\n   * // Manual control (recommended for precise values)\n   * { autoUpdateUI: false } // Handle UI in onPitchUpdate callback\n   * \n   * // Automatic control (convenient but may apply multipliers)\n   * { autoUpdateUI: true, volumeBarSelector: '#volume' }\n   */\n  volumeBarSelector?: string;\n  \n  /**\n   * CSS selector for volume text element.\n   * @warning Same considerations as volumeBarSelector apply.\n   */\n  volumeTextSelector?: string;\n  \n  /**\n   * CSS selector for frequency display element.\n   * @warning Same considerations as volumeBarSelector apply.\n   */\n  frequencySelector?: string;\n  \n  /**\n   * CSS selector for note display element.\n   * @warning Same considerations as volumeBarSelector apply.\n   */\n  noteSelector?: string;\n  \n  // PitchDetector Settings\n  clarityThreshold?: number;\n  minVolumeAbsolute?: number;\n  fftSize?: number;\n  smoothing?: number;\n  \n  // Device Optimization\n  /**\n   * デバイス固有の音量最適化を有効にするかどうか\n   *\n   * @remarks\n   * **デバイス最適化の効果**:\n   * - `true` (推奨): デバイス別の音量補正が自動適用\n   *   - PC: volumeMultiplier 3.0x\n   *   - iPhone: volumeMultiplier 7.5x\n   *   - iPad: volumeMultiplier 20.0x\n   * - `false`: 音量補正なし（生の音量値をそのまま使用）\n   *\n   * **オフにする場合の用途**:\n   * - 独自の音量処理を実装したい場合\n   * - デバッグ時に生の音量値を確認したい場合\n   * - 特定のデバイスで異なる動作を実装したい場合\n   *\n   * @default true\n   * @since v1.2.0\n   *\n   * @example\n   * ```typescript\n   * // デバイス最適化を無効にして生の音量値を取得\n   * const audioDetector = new AudioDetectionComponent({\n   *   deviceOptimization: false,  // 音量補正を無効化\n   *   volumeBarSelector: '#volume-bar'\n   * });\n   *\n   * audioDetector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     // result.volume は生の値（通常5-15%程度）\n   *     console.log(`生音量: ${result.volume}%`);\n   *\n   *     // 独自の音量処理\n   *     const customVolume = result.volume * myCustomMultiplier;\n   *     updateMyUI(customVolume);\n   *   }\n   * });\n   * ```\n   */\n  deviceOptimization?: boolean;\n  \n  // UI Update Settings\n  uiUpdateInterval?: number;\n  \n  /**\n   * Controls automatic UI updates using provided selectors.\n   * @default true (for backward compatibility)\n   * @description When true, UI elements specified by selectors will be updated automatically\n   * with device-specific multipliers applied. When false, no automatic updates occur\n   * and you should handle UI updates manually in the onPitchUpdate callback.\n   * @example\n   * // Recommended: Manual control for precise values\n   * const detector = new AudioDetectionComponent({\n   *   autoUpdateUI: false,\n   *   // Don't provide selectors when using manual mode\n   * });\n   * detector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     // Handle UI updates with exact result.volume values\n   *     volumeBar.style.width = `${result.volume}%`;\n   *   }\n   * });\n   * \n   * // Alternative: Automatic control (may apply multipliers)\n   * const detector = new AudioDetectionComponent({\n   *   autoUpdateUI: true,\n   *   volumeBarSelector: '#volume-bar'\n   * });\n   */\n  autoUpdateUI?: boolean;\n  \n  // Debug Settings\n  debug?: boolean;\n  logPrefix?: string;\n}\n\n/**\n * Callback functions for AudioDetectionComponent events\n */\nexport interface AudioDetectionCallbacks {\n  onPitchUpdate?: (result: PitchDetectionResult) => void;\n  onVolumeUpdate?: (volume: number) => void;\n  onStateChange?: (state: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'stopped' | 'error') => void;\n  onError?: (error: PitchProError) => void;\n  onDeviceDetected?: (deviceSpecs: DeviceSpecs) => void;\n}\n\n/**\n * Device-specific optimization settings\n */\ninterface DeviceSettings {\n  volumeMultiplier: number;\n  sensitivityMultiplier: number;\n  minVolumeAbsolute: number;\n}\n\nexport class AudioDetectionComponent {\n  /** @private UI timing constants */\n  private static readonly NOTE_RESET_DELAY_MS = 300;\n  private static readonly SELECTOR_UPDATE_DELAY_MS = 50;\n  private static readonly UI_RESTART_DELAY_MS = 200;\n\n  /** @private Configuration with applied defaults */\n  private config: Required<Omit<AudioDetectionConfig, 'volumeBarSelector' | 'volumeTextSelector' | 'frequencySelector' | 'noteSelector'>> & {\n    volumeBarSelector?: string;\n    volumeTextSelector?: string;\n    frequencySelector?: string;\n    noteSelector?: string;\n  };\n  \n  /** @private AudioManager instance for resource management */\n  private audioManager: AudioManager;\n  \n  /** @private PitchDetector instance for pitch detection */\n  private pitchDetector: PitchDetector | null = null;\n  \n  /** @private MicrophoneController for high-level microphone management */\n  private micController: MicrophoneController | null = null;\n  \n  /** @private Current component state */\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'stopped' | 'error' = 'uninitialized';\n  \n  /** @private Event callbacks */\n  private callbacks: AudioDetectionCallbacks = {};\n  \n  /** @private Device specifications */\n  private deviceSpecs: DeviceSpecs | null = null;\n  \n  /** @private Device-specific settings */\n  private deviceSettings: DeviceSettings | null = null;\n  \n  /** @private UI update interval ID */\n  private uiUpdateTimer: number | null = null;\n  \n  /** @private Flag to prevent UI updates during selector changes */\n  private isUpdatingSelectors: boolean = false;\n  \n  /** @private UI elements cache */\n  private uiElements: {\n    volumeBar?: HTMLElement;\n    volumeText?: HTMLElement;\n    frequency?: HTMLElement;\n    note?: HTMLElement;\n  } = {};\n  \n  /** @private Last error encountered */\n  private lastError: PitchProError | null = null;\n  \n  /** @private Initialization state */\n  private isInitialized = false;\n\n  /** @private Note display persistence timer */\n  private noteResetTimer: number | null = null;\n\n  /** @private Helper method for creating delays */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Creates a new AudioDetectionComponent with automatic device optimization\n   * \n   * @param config - Configuration options for the component\n   * @param config.volumeBarSelector - CSS selector for volume bar element\n   * @param config.volumeTextSelector - CSS selector for volume text element  \n   * @param config.frequencySelector - CSS selector for frequency display element\n   * @param config.noteSelector - CSS selector for note display element\n   * @param config.clarityThreshold - Minimum clarity for pitch detection (0-1, default: 0.4)\n   * @param config.minVolumeAbsolute - Minimum volume threshold (default: 0.003)\n   * @param config.fftSize - FFT size for analysis (default: 4096)\n   * @param config.smoothing - Smoothing factor (default: 0.1)\n   * @param config.deviceOptimization - デバイス固有の音量最適化を有効にする (default: true)\n   *   - true: 自動音量補正 (PC: 3.0x, iPhone: 7.5x, iPad: 20.0x)\n   *   - false: 生音量値を使用（独自処理向け）\n   * @param config.uiUpdateInterval - UI update interval in ms (default: 50)\n   * @param config.autoUpdateUI - Enable automatic UI updates (default: true)\n   * @param config.debug - Enable debug logging (default: false)\n   * @param config.logPrefix - Prefix for log messages (default: '🎵 AudioDetection')\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with automatic device optimization\n   * const audioDetector = new AudioDetectionComponent({\n   *   volumeBarSelector: '#volume-bar',\n   *   frequencySelector: '#frequency-display'\n   * });\n   * \n   * // Advanced configuration for range testing\n   * const audioDetector = new AudioDetectionComponent({\n   *   volumeBarSelector: '#range-test-volume-bar',\n   *   volumeTextSelector: '#range-test-volume-text', \n   *   frequencySelector: '#range-test-frequency-value',\n   *   clarityThreshold: 0.3,\n   *   minVolumeAbsolute: 0.001,\n   *   deviceOptimization: true,\n   *   debug: true\n   * });\n   * ```\n   */\n  constructor(config: AudioDetectionConfig = {}) {\n    // Apply default configuration\n    this.config = {\n      volumeBarSelector: config.volumeBarSelector,\n      volumeTextSelector: config.volumeTextSelector,\n      frequencySelector: config.frequencySelector,\n      noteSelector: config.noteSelector,\n      \n      clarityThreshold: config.clarityThreshold ?? 0.4,\n      minVolumeAbsolute: config.minVolumeAbsolute ?? 0.020, // 🔧 環境適応ノイズゲート: 10%閾値でマイクノイズを確実にブロック\n      fftSize: config.fftSize ?? 4096,\n      smoothing: config.smoothing ?? 0.1,\n      \n      deviceOptimization: config.deviceOptimization ?? true,\n      \n      uiUpdateInterval: config.uiUpdateInterval ?? 50, // 20fps\n      autoUpdateUI: config.autoUpdateUI ?? true,\n      \n      debug: config.debug ?? false,\n      logPrefix: config.logPrefix ?? '🎵 AudioDetection'\n    };\n\n    // Initialize AudioManager\n    this.audioManager = new AudioManager({\n      sampleRate: 44100,\n      channelCount: 1,\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false\n    });\n\n    // Detect device and apply optimization\n    if (this.config.deviceOptimization) {\n      this.detectAndOptimizeDevice();\n    }\n\n    // UI自動更新機能の警告メッセージ\n    this.checkAutoUpdateUIWarnings();\n    \n    this.debugLog('AudioDetectionComponent created with config:', this.config);\n  }\n\n  /**\n   * 自動UI更新機能に関する警告をチェックして表示\n   */\n  private checkAutoUpdateUIWarnings(): void {\n    const hasUISelectors = !!(\n      this.config.volumeBarSelector || \n      this.config.volumeTextSelector || \n      this.config.frequencySelector || \n      this.config.noteSelector\n    );\n    \n    if (hasUISelectors && !this.config.autoUpdateUI) {\n      console.warn(\n        '⚠️ [PitchPro v1.1.9] UI selectors provided without autoUpdateUI=true. ' +\n        'Set autoUpdateUI=true to enable automatic updates, ' +\n        'or remove selectors for manual control in onPitchUpdate callback.'\n      );\n    }\n    \n    if (hasUISelectors && this.config.autoUpdateUI) {\n      console.info(\n        'ℹ️ [PitchPro] Automatic UI updates enabled. ' +\n        'Note: Values applied may include device-specific multipliers and may differ from callback result.volume. ' +\n        'For precise control, set autoUpdateUI=false and handle UI manually.'\n      );\n    }\n  }\n\n  /**\n   * Initializes the audio detection system with device optimization\n   * \n   * @description Performs complete initialization including microphone permissions,\n   * audio context setup, device detection, and UI element binding.\n   * \n   * @returns Promise resolving when initialization is complete\n   * @throws {AudioContextError} If audio system initialization fails\n   * @throws {MicrophoneAccessError} If microphone permission is denied\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   await audioDetector.initialize();\n   *   console.log('Audio detection ready!');\n   * } catch (error) {\n   *   console.error('Initialization failed:', error.message);\n   *   // Handle specific error types\n   *   if (error instanceof MicrophoneAccessError) {\n   *     // Show permission guidance\n   *   }\n   * }\n   * ```\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      this.debugLog('Already initialized');\n      return;\n    }\n\n    try {\n      this.updateState('initializing');\n      this.debugLog('Starting initialization...');\n\n      // Initialize MicrophoneController\n      this.micController = new MicrophoneController({\n        audioManager: {\n          sampleRate: 44100,\n          echoCancellation: false,\n          autoGainControl: false\n        },\n        lifecycle: {\n          maxAutoRecoveryAttempts: 3,\n          healthCheckIntervalMs: 1000\n        },\n        notifications: {\n          enabled: this.config.debug\n        }\n      });\n\n      // Set up MicrophoneController callbacks\n      this.micController.setCallbacks({\n        onStateChange: (state) => {\n          this.debugLog('MicrophoneController state:', state);\n        },\n        onError: (error) => {\n          this.handleError(error, 'microphone_controller');\n        },\n        onDeviceChange: (specs) => {\n          this.deviceSpecs = specs;\n          this.callbacks.onDeviceDetected?.(specs);\n        }\n      });\n\n      // Initialize microphone\n      await this.micController.initialize();\n\n      // 🔧 CRITICAL DEBUG: Log actual minVolumeAbsolute before PitchDetector creation\n      console.log(`🔧 [CRITICAL] Before PitchDetector creation: this.config.minVolumeAbsolute = ${this.config.minVolumeAbsolute}`);\n      console.log(`📱 [CRITICAL] Device: ${this.deviceSpecs?.deviceType}, detectAndOptimizeDevice was called in constructor`);\n\n      // Initialize PitchDetector with DeviceDetection optimized settings\n      const pitchDetectorConfig = {\n        clarityThreshold: this.config.clarityThreshold,\n        minVolumeAbsolute: this.config.minVolumeAbsolute,\n        fftSize: this.config.fftSize,\n        smoothing: this.deviceSpecs?.smoothingFactor ?? this.config.smoothing,  // v1.1.8: Use DeviceDetection smoothing\n        deviceOptimization: this.config.deviceOptimization\n      };\n\n      console.log(`🔧 [CRITICAL] PitchDetector config object:`, pitchDetectorConfig);\n\n      this.pitchDetector = new PitchDetector(this.audioManager, pitchDetectorConfig);\n\n      // Set up PitchDetector callbacks\n      this.pitchDetector.setCallbacks({\n        onPitchUpdate: (result) => {\n          this.handlePitchUpdate(result);\n        },\n        onError: (error) => {\n          this.handleError(error, 'pitch_detector');\n        },\n        onStateChange: (state) => {\n          this.debugLog('PitchDetector state:', state);\n        }\n      });\n\n      await this.pitchDetector.initialize();\n\n      // 🔧 CRITICAL DEBUG: Verify PitchDetector's actual status after initialization\n      const pitchDetectorStatus = this.pitchDetector.getStatus();\n      console.log(`🔧 [CRITICAL] After PitchDetector initialization - status:`, pitchDetectorStatus);\n      console.log(`🔧 [CRITICAL] PitchDetector componentState:`, pitchDetectorStatus.componentState);\n      console.log(`🔧 [CRITICAL] PitchDetector isInitialized:`, pitchDetectorStatus.isInitialized);\n\n      // ⭐ Register PitchDetector and AudioDetectionComponent with MicrophoneController for unified management\n      if (this.micController && this.pitchDetector) {\n        this.micController.registerDetector(this.pitchDetector);\n        this.micController.registerAudioDetectionComponent(this);\n        this.debugLog('✅ PitchDetector and AudioDetectionComponent registered with MicrophoneController for unified management');\n      }\n\n      // Cache UI elements\n      this.cacheUIElements();\n\n      // Apply device-specific sensitivity\n      if (this.deviceSettings && this.micController) {\n        this.micController.setSensitivity(this.deviceSettings.sensitivityMultiplier);\n        this.debugLog('Applied device-specific sensitivity:', this.deviceSettings.sensitivityMultiplier);\n      }\n\n      this.isInitialized = true;\n      this.updateState('ready');\n      this.debugLog('Initialization complete');\n\n    } catch (error) {\n      const structuredError = this.createStructuredError(error as Error, 'initialization');\n      ErrorMessageBuilder.logError(structuredError, 'AudioDetectionComponent initialization');\n      \n      this.lastError = structuredError;\n      this.updateState('error');\n      \n      throw structuredError;\n    }\n  }\n\n  /**\n   * 音声検出イベント用のコールバック関数を設定します\n   *\n   * @param callbacks - コールバック関数を含むオブジェクト\n   * @param callbacks.onPitchUpdate - ピッチ検出時に呼び出される関数\n   * @param callbacks.onVolumeUpdate - 音量変化時に呼び出される関数\n   * @param callbacks.onStateChange - コンポーネント状態変化時に呼び出される関数\n   * @param callbacks.onError - エラー発生時に呼び出される関数\n   * @param callbacks.onDeviceDetected - デバイス検出時に呼び出される関数\n   *\n   * @remarks\n   * **重要な音量値について**:\n   * - `onPitchUpdate`の`result.volume`は既にデバイス固有の補正が適用済み\n   * - 範囲: 0-100% （最終的なUI表示値）\n   * - デバイス別の内部処理:\n   *   - PC: 生音量 × 3.0\n   *   - iPhone: 生音量 × 7.5\n   *   - iPad: 生音量 × 20.0\n   *\n   * @example\n   * ```typescript\n   * audioDetector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     // result.volume は既に補正済みの最終表示値（0-100%）\n   *     console.log(`${result.note} - ${result.frequency.toFixed(1)}Hz - ${result.volume.toFixed(1)}%`);\n   *     // 例: \"A4 - 440.0Hz - 67.5%\"\n   *   },\n   *   onVolumeUpdate: (volume) => {\n   *     // volume も同様に補正済み（0-100%）\n   *     console.log(`音量: ${volume.toFixed(1)}%`);\n   *   },\n   *   onError: (error) => {\n   *     console.error('Detection error:', error.message);\n   *   }\n   * });\n   * ```\n   *\n   * @see {@link _getProcessedResult} 音量補正の詳細処理\n   */\n  setCallbacks(callbacks: AudioDetectionCallbacks): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n    this.debugLog('Callbacks updated');\n  }\n\n  /**\n   * Starts pitch detection and automatic UI updates\n   * \n   * @returns True if detection started successfully, false otherwise\n   * @throws {PitchProError} If component is not initialized or detection fails\n   * \n   * @example\n   * ```typescript\n   * if (audioDetector.startDetection()) {\n   *   console.log('Detection started successfully');\n   * } else {\n   *   console.log('Failed to start detection');\n   * }\n   * ```\n   */\n  startDetection(): boolean {\n    if (!this.isInitialized || !this.pitchDetector) {\n      const error = new PitchProError(\n        'AudioDetectionComponentが初期化されていません。initialize()メソッドを先に呼び出してください。',\n        ErrorCode.AUDIO_CONTEXT_ERROR,\n        {\n          operation: 'startDetection',\n          isInitialized: this.isInitialized,\n          hasPitchDetector: !!this.pitchDetector,\n          currentState: this.currentState\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'AudioDetection start');\n      this.handleError(error, 'start_detection');\n      throw error;\n    }\n\n    try {\n      const started = this.pitchDetector.startDetection();\n      \n      if (started) {\n        this.updateState('detecting');\n        \n        // Start UI update timer\n        if (this.config.autoUpdateUI) {\n          this.startUIUpdates();\n        }\n        \n        this.debugLog('Detection started successfully');\n        return true;\n      } else {\n        this.debugLog('Failed to start detection');\n        return false;\n      }\n    } catch (error) {\n      const structuredError = this.createStructuredError(error as Error, 'start_detection');\n      this.handleError(structuredError, 'start_detection');\n      throw structuredError;\n    }\n  }\n\n  /**\n   * 音声検出を停止します（UIの値は保持されます）\n   *\n   * @remarks\n   * ⚠️ 重要: このメソッドは検出処理のみを停止し、UIの表示値は最後の状態を保持します。\n   * UIをリセットしたい場合は、別途 `resetDisplayElements()` を呼び出すか、\n   * MicrophoneController の `reset()` メソッドを使用してください。\n   *\n   * @example\n   * ```typescript\n   * // ❌ よくある間違い - UIの値が残ってしまう\n   * audioDetector.stopDetection();\n   *\n   * // ✅ 正しい実装1: 検出停止 + UI手動リセット\n   * audioDetector.stopDetection();\n   * audioDetector.resetDisplayElements();\n   *\n   * // ✅ 正しい実装2: MicrophoneController使用（推奨）\n   * micController.reset();  // 検出停止 + UIリセット + 状態クリア\n   * ```\n   *\n   * @see {@link resetDisplayElements} UIをリセットする\n   * @see {@link MicrophoneController.reset} 完全なリセット（推奨）\n   */\n  stopDetection(): void {\n    try {\n      // 開発時警告: UIが保持されることを明示的に通知\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n        console.warn(\n          '⚠️ [AudioDetectionComponent] stopDetection() called - UI values will be preserved.\\n' +\n          '   To clear UI: call resetDisplayElements() after this method\\n' +\n          '   For complete reset: use MicrophoneController.reset() instead'\n        );\n      }\n\n      if (this.pitchDetector) {\n        this.pitchDetector.stopDetection();\n      }\n\n      this.stopUIUpdates();\n      this.updateState('stopped');\n      this.debugLog('Detection stopped (UI values preserved)');\n    } catch (error) {\n      const structuredError = this.createStructuredError(error as Error, 'stop_detection');\n      this.handleError(structuredError, 'stop_detection');\n    }\n  }\n\n  /**\n   * Manually updates UI elements with current audio data\n   * \n   * @param result - Pitch detection result to display\n   * \n   * @example\n   * ```typescript\n   * const result = {\n   *   frequency: 440,\n   *   note: 'A4',\n   *   volume: 75.5,\n   *   clarity: 0.8\n   * };\n   * audioDetector.updateUI(result);\n   * ```\n   */\n  updateUI(result: PitchDetectionResult): void {\n    // Skip UI updates if autoUpdateUI is disabled\n    if (!this.config.autoUpdateUI) {\n      return;\n    }\n    \n    // Skip UI updates if selectors are being updated\n    if (this.isUpdatingSelectors) {\n      this.debugLog('UI update skipped - selectors are being updated');\n      return;\n    }\n    \n    try {\n      // Update volume bar - verify element matches current selector to prevent cross-mode updates\n      if (this.uiElements.volumeBar && this.config.volumeBarSelector) {\n        const currentElement = document.querySelector(this.config.volumeBarSelector);\n        if (currentElement && currentElement === this.uiElements.volumeBar) {\n          // result.volume は既に補正済みの値（_getProcessedResultで処理済み）\n          const volumePercent = Math.min(100, Math.max(0, result.volume));\n          if (this.uiElements.volumeBar instanceof HTMLProgressElement) {\n            this.uiElements.volumeBar.value = volumePercent;\n          } else {\n            // Assume it's a div with a width style\n            (this.uiElements.volumeBar as HTMLElement).style.width = `${volumePercent}%`;\n          }\n        }\n      }\n\n      // Update volume text - verify element matches current selector to prevent cross-mode updates\n      if (this.uiElements.volumeText && this.config.volumeTextSelector) {\n        const currentElement = document.querySelector(this.config.volumeTextSelector);\n        if (currentElement && currentElement === this.uiElements.volumeText) {\n          // result.volume は既に補正済みの値（_getProcessedResultで処理済み）\n          const volumePercent = Math.min(100, Math.max(0, result.volume));\n          this.uiElements.volumeText.textContent = `${volumePercent.toFixed(1)}%`;\n        }\n      }\n\n      // Update frequency display - verify element matches current selector to prevent cross-mode updates\n      if (this.uiElements.frequency && this.config.frequencySelector) {\n        const currentElement = document.querySelector(this.config.frequencySelector);\n        if (currentElement && currentElement === this.uiElements.frequency) {\n          if (result.frequency && result.frequency > 0) {\n            this.uiElements.frequency.textContent = FrequencyUtils.formatFrequency(result.frequency);\n          } else {\n            // Reset frequency display when no pitch is detected\n            this.uiElements.frequency.textContent = '0.0 Hz';\n          }\n        }\n      }\n\n      // Update note display with persistence - only if noteSelector is configured and matches current cached element\n      if (this.uiElements.note && this.config.noteSelector && this.config.noteSelector !== '#note-display') {\n        // Verify that cached element matches current selector to prevent cross-mode updates\n        const currentElement = document.querySelector(this.config.noteSelector);\n        if (currentElement && currentElement === this.uiElements.note) {\n          if (result.frequency && result.frequency > 0) {\n            // Clear any pending reset timer\n            if (this.noteResetTimer) {\n              clearTimeout(this.noteResetTimer);\n              this.noteResetTimer = null;\n            }\n            \n            const noteInfo = FrequencyUtils.frequencyToNote(result.frequency);\n            this.debugLog(`Updating note display: ${this.uiElements.note.id || 'unknown-id'} with note: ${noteInfo.name} (selector: ${this.config.noteSelector})`);\n            this.uiElements.note.textContent = noteInfo.name;\n          } else {\n            // Only reset after a short delay to avoid flickering\n            if (!this.noteResetTimer) {\n              this.noteResetTimer = window.setTimeout(() => {\n                if (this.uiElements.note) {\n                  this.debugLog(`Resetting note display: ${this.uiElements.note.id || 'unknown-id'} to \"-\" (delayed, selector: ${this.config.noteSelector})`);\n                  this.uiElements.note.textContent = '-';\n                }\n                this.noteResetTimer = null;\n              }, AudioDetectionComponent.NOTE_RESET_DELAY_MS);\n            }\n          }\n        } else {\n          this.debugLog(`Note element mismatch: cached element does not match current selector ${this.config.noteSelector} - skipping update to prevent cross-mode interference`);\n        }\n      } else {\n        if (!this.config.noteSelector) {\n          this.debugLog('Note updates skipped - no noteSelector configured');\n        } else {\n          this.debugLog('Note element not found in uiElements.note - check selector caching');\n        }\n      }\n    } catch (error) {\n      this.debugLog('UI update error:', error);\n    }\n  }\n\n  /**\n   * Updates UI element selectors and re-caches DOM elements\n   * \n   * @param selectors - Object containing new selector strings\n   * @param selectors.volumeBarSelector - New selector for volume bar element\n   * @param selectors.volumeTextSelector - New selector for volume text element\n   * @param selectors.frequencySelector - New selector for frequency display element\n   * @param selectors.noteSelector - New selector for note display element (if not provided, will be cleared to prevent cross-mode interference)\n   * \n   * @example\n   * ```typescript\n   * // Switch volume bar to different element (e.g., range test mode)\n   * audioDetector.updateSelectors({\n   *   volumeBarSelector: '#range-test-volume-bar',\n   *   volumeTextSelector: '#range-test-volume-text',\n   *   frequencySelector: '#range-test-frequency-value'\n   * });\n   * ```\n   */\n  async updateSelectors(selectors: Partial<Pick<AudioDetectionConfig, \n    'volumeBarSelector' | 'volumeTextSelector' | 'frequencySelector' | 'noteSelector'>>): Promise<void> {\n    \n    this.debugLog('Updating selectors:', selectors);\n    \n    // Set flag to prevent UI updates during selector changes\n    this.isUpdatingSelectors = true;\n    \n    // Temporarily stop UI updates to prevent overwriting reset values\n    const wasUIUpdating = this.uiUpdateTimer !== null;\n    if (wasUIUpdating) {\n      this.stopUIUpdates();\n    }\n    \n    // Wait a moment to ensure any pending UI updates are processed\n    await this.delay(AudioDetectionComponent.SELECTOR_UPDATE_DELAY_MS);\n    \n    // Reset all existing UI elements to initial state before switching\n    this.resetAllUIElements();\n    \n    // Update configuration with new selectors\n    if (selectors.volumeBarSelector !== undefined) {\n      this.config.volumeBarSelector = selectors.volumeBarSelector;\n    }\n    if (selectors.volumeTextSelector !== undefined) {\n      this.config.volumeTextSelector = selectors.volumeTextSelector;\n    }\n    if (selectors.frequencySelector !== undefined) {\n      this.config.frequencySelector = selectors.frequencySelector;\n    }\n    \n    // Handle noteSelector: if explicitly provided, use it; if not provided in a mode switch, clear it to prevent cross-mode interference\n    if (selectors.noteSelector !== undefined) {\n      this.config.noteSelector = selectors.noteSelector;\n    } else {\n      // When switching modes without specifying noteSelector, clear it to prevent old note elements from updating\n      this.config.noteSelector = '';\n      this.debugLog('noteSelector cleared automatically to prevent cross-mode interference');\n    }\n    \n    // Re-cache UI elements with new selectors\n    this.cacheUIElements();\n    \n    // Wait for DOM updates\n    await this.delay(AudioDetectionComponent.SELECTOR_UPDATE_DELAY_MS);\n    \n    // Reset the new UI elements as well to ensure they start clean\n    this.resetAllUIElements();\n    \n    // Clear the flag and resume UI updates if they were running\n    this.isUpdatingSelectors = false;\n    \n    if (wasUIUpdating) {\n      // Add longer delay to ensure reset values are visible\n      await this.delay(AudioDetectionComponent.UI_RESTART_DELAY_MS);\n      this.startUIUpdates();\n    }\n    \n    this.debugLog('Selectors updated, all elements reset, and UI elements re-cached:', Object.keys(this.uiElements));\n  }\n\n  /**\n   * Destroys the component and cleans up all resources\n   * \n   * @example\n   * ```typescript\n   * // Clean up when component is no longer needed\n   * audioDetector.destroy();\n   * ```\n   */\n  \n  /**\n   * Reset recovery attempts and restart monitoring if needed\n   * This method can be used to recover from \"Maximum recovery attempts reached\" errors\n   */\n  resetRecoveryAttempts(): void {\n    this.debugLog('Resetting recovery attempts...');\n    \n    try {\n      if (this.micController) {\n        this.micController.resetRecoveryAttempts();\n        this.debugLog('Recovery attempts reset successfully');\n      } else {\n        this.debugLog('No microphone controller available to reset');\n      }\n    } catch (error) {\n      this.debugLog('Error resetting recovery attempts:', error);\n      throw error;\n    }\n  }\n\n  destroy(): void {\n    this.debugLog('Destroying AudioDetectionComponent...');\n    \n    try {\n      // Stop detection and UI updates\n      this.stopDetection();\n      \n      // Clear note reset timer\n      if (this.noteResetTimer) {\n        clearTimeout(this.noteResetTimer);\n        this.noteResetTimer = null;\n      }\n      \n      // Cleanup components\n      if (this.pitchDetector) {\n        this.pitchDetector.destroy();\n        this.pitchDetector = null;\n      }\n      \n      if (this.micController) {\n        this.micController.destroy();\n        this.micController = null;\n      }\n      \n      // Clear UI elements cache\n      this.uiElements = {};\n      \n      // Reset state\n      this.isInitialized = false;\n      this.currentState = 'uninitialized';\n      this.callbacks = {};\n      this.lastError = null;\n      \n      this.debugLog('AudioDetectionComponent destroyed');\n    } catch (error) {\n      console.error('Error during AudioDetectionComponent destruction:', error);\n    }\n  }\n\n  /**\n   * Gets current component status for debugging\n   * \n   * @returns Status object with current state information\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isInitialized: this.isInitialized,\n      deviceSpecs: this.deviceSpecs,\n      deviceSettings: this.deviceSettings,\n      config: this.config,\n      lastError: this.lastError,\n      pitchDetectorStatus: this.pitchDetector?.getStatus(),\n      micControllerStatus: this.micController?.getStatus()\n    };\n  }\n\n  /**\n   * Provides access to the MicrophoneController for unified system management\n   * \n   * @description Exposes the MicrophoneController instance to enable external access\n   * to unified reset operations, mute/unmute functionality, and centralized control\n   * of the entire PitchPro system. This is the primary interface for system-wide operations.\n   * \n   * @returns The MicrophoneController instance, or null if not initialized\n   * \n   * @example\n   * ```typescript\n   * const micController = audioDetector.microphoneController;\n   * if (micController) {\n   *   // Perform unified system reset\n   *   micController.reset(); // Stops detection, clears UI, mutes mic\n   *   \n   *   // Control microphone state\n   *   micController.toggleMute();\n   * }\n   * ```\n   */\n  get microphoneController(): MicrophoneController | null {\n    return this.micController;\n  }\n\n  // Private methods implementation continues...\n  // (Will be implemented in the next part)\n\n  /**\n   * Detects device type and applies optimization settings\n   * @private\n   */\n  private detectAndOptimizeDevice(): void {\n    this.deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    // v1.2.9: 確定値に復元 - 正常動作していた設定値\n    const deviceSettingsMap: Record<string, DeviceSettings> = {\n      PC: {\n        volumeMultiplier: 3.0,        // 📊 v1.2.9確定値に復元\n        sensitivityMultiplier: 2.5,\n        minVolumeAbsolute: this.deviceSpecs.noiseGate * 0.25  // Based on DeviceDetection noiseGate\n      },\n      iPhone: {\n        volumeMultiplier: 7.5,        // ✅ 最適化完了 (ユーザー確認済み)\n        sensitivityMultiplier: 3.5,\n        minVolumeAbsolute: this.deviceSpecs.noiseGate * 0.15  // ノイズゲート最適化\n      },\n      iPad: {\n        volumeMultiplier: 20.0,       // 📈 調整: 15.0→20.0 (50%→67%目標)\n        sensitivityMultiplier: 5.0,\n        minVolumeAbsolute: this.deviceSpecs.noiseGate * 0.10  // 📈 ノイズゲート緩和済み\n      }\n    };\n\n    this.deviceSettings = deviceSettingsMap[this.deviceSpecs.deviceType] || deviceSettingsMap.PC;\n    \n    // 🔧 v1.2.9 iPhone専用ノイズカット: 10%閾値で動作確認済みの安定設定に復帰\n    if (this.deviceSpecs.deviceType === 'iPhone') {\n      this.config.minVolumeAbsolute = 0.020;  // iPhone: 10%閾値（動作確認済み設定に復帰）\n      console.log(`📱 [iPhone Restore] minVolumeAbsolute restored to ${this.config.minVolumeAbsolute} (10% threshold - confirmed working setting)`);\n    } else {\n      console.log(`🔧 [DeviceOptimization] minVolumeAbsolute preserved at library default: ${this.config.minVolumeAbsolute}`);\n    }\n    // this.config.minVolumeAbsolute = this.deviceSettings.minVolumeAbsolute;  // ❌ 修正: この行をコメントアウト\n    \n    this.debugLog('Device optimization applied:', {\n      device: this.deviceSpecs.deviceType,\n      settings: this.deviceSettings\n    });\n  }\n\n  /**\n   * Caches UI elements for efficient updates\n   * @private\n   */\n  private cacheUIElements(): void {\n    // Only cache UI elements if autoUpdateUI is enabled\n    if (!this.config.autoUpdateUI) {\n      this.debugLog('UI element caching skipped - autoUpdateUI is disabled');\n      return;\n    }\n    \n    if (this.config.volumeBarSelector) {\n      this.uiElements.volumeBar = document.querySelector(this.config.volumeBarSelector) || undefined;\n    }\n    if (this.config.volumeTextSelector) {\n      this.uiElements.volumeText = document.querySelector(this.config.volumeTextSelector) || undefined;\n    }\n    if (this.config.frequencySelector) {\n      this.uiElements.frequency = document.querySelector(this.config.frequencySelector) || undefined;\n    }\n    if (this.config.noteSelector) {\n      this.uiElements.note = document.querySelector(this.config.noteSelector) || undefined;\n      this.debugLog(`Note element cached: selector=\"${this.config.noteSelector}\", found=${!!this.uiElements.note}, id=\"${this.uiElements.note?.id || 'no-id'}\"`);\n    }\n\n    this.debugLog('UI elements cached:', Object.keys(this.uiElements));\n  }\n\n  /**\n   * Publicly accessible method to reset all UI elements to their initial state\n   * Provides external access to comprehensive UI reset functionality\n   */\n  public resetDisplayElements(): void {\n    this.resetAllUIElements();\n  }\n\n  /**\n   * Resets all UI elements to their initial state (0 values)\n   * @private\n   */\n  private resetAllUIElements(): void {\n    try {\n      // Reset all possible UI elements by querying all selectors that might exist\n      const allPossibleSelectors = [\n        // Mic mode selectors (all possible variations)\n        '#mic-volume-bar', '#mic-volume-text', '#mic-frequency', '#mic-frequency-display',\n        // Range mode selectors (all possible variations)\n        '#range-volume-bar', '#range-volume-text', '#range-frequency', '#range-frequency-value', '#range-frequency-display',\n        // Practice mode selectors (always reset note display when switching modes)\n        '#practice-volume-bar', '#practice-volume-text', '#practice-frequency', '#practice-note',\n        // Add common frequency display patterns\n        '#freq-1', '#freq-2', '#freq-3', '#freq-4', '#freq-5',\n        '#frequency-1', '#frequency-2', '#frequency-3',\n        '#pitch-1', '#pitch-2', '#pitch-3',\n        // Also reset current configuration selectors\n        this.config.volumeBarSelector,\n        this.config.volumeTextSelector,\n        this.config.frequencySelector,\n        this.config.noteSelector\n      ];\n      \n      // Additionally, try to find all elements with frequency-related IDs or classes\n      // But be more selective to avoid breaking UI elements\n      const frequencyElements = document.querySelectorAll('[id*=\"freq\"]:not(.frequency-group):not(.frequency-box), [id*=\"frequency\"]:not(.frequency-group):not(.frequency-box), [id*=\"pitch\"]:not(.frequency-group):not(.frequency-box)');\n      frequencyElements.forEach(element => {\n        // Only reset if it looks like a frequency display (contains Hz or is a known pattern)\n        const text = element.textContent || '';\n        if (text.includes('Hz') || text.match(/^\\d+\\.?\\d*$/)) {\n          // Only update text content, don't change any other properties\n          if (element.classList.contains('frequency-display') || element.id.includes('freq-')) {\n            element.textContent = '0.0 Hz';\n          }\n        }\n      });\n\n      allPossibleSelectors.forEach(selector => {\n        if (selector) {\n          const element = document.querySelector(selector);\n          if (element) {\n            this.debugLog(`Processing selector: ${selector}, element found: ${!!element}`);\n            if (selector.includes('volume-bar')) {\n              // Reset volume bar (width style or progress value)\n              if (element instanceof HTMLProgressElement) {\n                element.value = 0;\n              } else {\n                (element as HTMLElement).style.width = '0%';\n              }\n            } else if (selector.includes('volume-text')) {\n              // Reset volume text\n              element.textContent = '0.0%';\n            } else if (selector.includes('frequency')) {\n              // Reset frequency display - use multiple approaches for reliability\n              element.textContent = '0.0 Hz';\n              (element as HTMLElement).innerHTML = '0.0 Hz';\n              (element as HTMLElement).setAttribute('data-frequency', '0');\n              // Force style refresh to ensure visual update (without breaking display property)\n              const originalDisplay = (element as HTMLElement).style.display;\n              if (originalDisplay !== 'none') {\n                // Only force reflow, don't change display property\n                (element as HTMLElement).style.opacity = '0.99';\n                (element as HTMLElement).offsetHeight; // Force reflow\n                (element as HTMLElement).style.opacity = '';\n              }\n            } else if (selector.includes('note')) {\n              // Reset note display - use multiple approaches for reliability\n              const currentText = element.textContent;\n              const currentHTML = (element as HTMLElement).innerHTML;\n              this.debugLog(`Resetting note element: ${selector}, textContent: \"${currentText}\", innerHTML: \"${currentHTML}\"`);\n              element.textContent = '-';\n              (element as HTMLElement).innerHTML = '-';\n              // Force DOM refresh\n              (element as HTMLElement).style.opacity = '0.99';\n              (element as HTMLElement).offsetHeight; // Force reflow\n              (element as HTMLElement).style.opacity = '';\n              this.debugLog(`Note reset complete: ${selector}, new textContent: \"${element.textContent}\", new innerHTML: \"${(element as HTMLElement).innerHTML}\"`);\n            }\n          }\n        }\n      });\n\n      this.debugLog('All UI elements reset to initial state');\n    } catch (error) {\n      this.debugLog('Error resetting UI elements:', error);\n    }\n  }\n\n  /**\n   * Handles pitch update events from PitchDetector\n   * @private\n   */\n  private handlePitchUpdate(rawResult: PitchDetectionResult): void {\n    // 生の結果にデバイス最適化を適用\n    const processedResult = this._getProcessedResult(rawResult);\n    \n    if (processedResult) {\n      // 加工後の結果をコールバックに渡す\n      this.callbacks.onPitchUpdate?.(processedResult);\n      this.callbacks.onVolumeUpdate?.(processedResult.volume);\n    }\n    \n    // UI updates are handled by the timer for consistent frame rate\n  }\n\n  /**\n   * Starts UI update timer\n   * @private\n   */\n  private startUIUpdates(): void {\n    if (this.uiUpdateTimer) {\n      clearInterval(this.uiUpdateTimer);\n    }\n    \n    this.uiUpdateTimer = window.setInterval(() => {\n      if (this.pitchDetector && this.currentState === 'detecting') {\n        // Get the latest pitch detection result\n        const rawResult = this.pitchDetector.getLatestResult();\n        \n        // 生の結果にデバイス最適化を適用\n        const processedResult = this._getProcessedResult(rawResult);\n        \n        if (processedResult) {\n          // 加工後の結果でUIを更新\n          this.updateUI(processedResult);\n        } else {\n          // When no result, ensure UI shows reset state\n          this.updateUI({\n            frequency: 0,\n            note: '-',\n            octave: 0,\n            volume: 0,\n            clarity: 0\n          });\n        }\n      }\n    }, this.config.uiUpdateInterval);\n  }\n\n  /**\n   * Stops UI update timer\n   * @private\n   */\n  private stopUIUpdates(): void {\n    if (this.uiUpdateTimer) {\n      clearInterval(this.uiUpdateTimer);\n      this.uiUpdateTimer = null;\n    }\n  }\n\n  /**\n   * 検出結果にデバイス最適化を適用し、最終的な値を生成します。\n   * コールバック値とUI値の一貫性を保証するための一元管理メソッド。\n   * @param rawResult PitchDetectorからの生の検出結果\n   * @returns デバイス最適化が適用された処理済み結果、またはnull\n   * @private\n   */\n  /**\n   * 生の検出結果にデバイス固有の音量補正を適用します\n   *\n   * @remarks\n   * このメソッドがPitchProの音量調整の核心部分です。以下の処理を行います：\n   *\n   * 1. **デバイス固有の音量補正**: volumeMultiplierによる音量調整\n   *    - PC: 3.0x（v1.2.9確定）\n   *    - iPhone: 7.5x（v1.2.9確定）\n   *    - iPad: 20.0x（v1.2.9確定）\n   *\n   * 2. **範囲制限**: 最終音量を0-100%の範囲に制限\n   *\n   * 3. **デバッグログ**: モバイルデバイスでの音量調整過程を記録\n   *\n   * @param rawResult - PitchDetectorから取得した生の検出結果\n   * @returns 音量補正が適用された最終的な検出結果\n   *\n   * @example\n   * ```typescript\n   * // PitchDetectorからの生結果\n   * const rawResult = { frequency: 440, note: 'A4', volume: 15.2 };\n   *\n   * // iPhone (volumeMultiplier: 7.5) での処理\n   * const processed = this._getProcessedResult(rawResult);\n   * // → { frequency: 440, note: 'A4', volume: 100 } (15.2 * 7.5 = 114 → 100に制限)\n   *\n   * // PC (volumeMultiplier: 3.0) での処理\n   * // → { frequency: 440, note: 'A4', volume: 45.6 } (15.2 * 3.0 = 45.6)\n   * ```\n   *\n   * @since v1.2.0 デバイス固有音量調整システム導入\n   * @see {@link detectAndOptimizeDevice} デバイス設定の決定方法\n   */\n  private _getProcessedResult(rawResult: PitchDetectionResult | null): PitchDetectionResult | null {\n    if (!rawResult) return null;\n\n    // 元のオブジェクトを変更しないようにコピーを作成\n    const processedResult = { ...rawResult };\n\n    // デバイスごとの補正係数を適用\n    const volumeMultiplier = this.deviceSettings?.volumeMultiplier ?? 1.0;\n    const finalVolume = rawResult.volume * volumeMultiplier;\n    \n    // 🔍 v1.2.1.20: 全デバイスでvolumeMultiplier処理をログ出力\n    if (rawResult.volume > 0.1) {\n      console.log(`📊 [VolumeAdjustment] Device: ${this.deviceSpecs?.deviceType}, Raw: ${rawResult.volume.toFixed(2)}%, Multiplier: ${volumeMultiplier}, Final: ${Math.min(100, Math.max(0, finalVolume)).toFixed(2)}%`);\n      console.log(`🔍 [CRITICAL] _getProcessedResult details:`, {\n        inputVolume: rawResult.volume,\n        deviceType: this.deviceSpecs?.deviceType,\n        volumeMultiplier: volumeMultiplier,\n        calculatedFinal: finalVolume,\n        clampedFinal: Math.min(100, Math.max(0, finalVolume))\n      });\n    }\n    \n    // 最終的な音量を0-100の範囲に丸めて、結果オブジェクトを更新\n    processedResult.volume = Math.min(100, Math.max(0, finalVolume));\n\n    return processedResult;\n  }\n\n  /**\n   * Updates component state and notifies callbacks\n   * @private\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      this.debugLog(`State changed: ${oldState} → ${newState}`);\n      this.callbacks.onStateChange?.(newState);\n    }\n  }\n\n  /**\n   * Handles errors with proper logging and callback notification\n   * @private\n   */\n  private handleError(error: Error | PitchProError, context: string): void {\n    const structuredError = error instanceof PitchProError \n      ? error \n      : this.createStructuredError(error, context);\n\n    this.lastError = structuredError;\n    this.updateState('error');\n    \n    this.callbacks.onError?.(structuredError);\n    this.debugLog('Error handled:', structuredError.toJSON());\n  }\n\n  /**\n   * Creates structured error with context information\n   * @private\n   */\n  private createStructuredError(error: Error, operation: string): PitchProError {\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.deviceSpecs,\n          componentState: this.currentState\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('initialization')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          componentState: this.currentState,\n          deviceSpecs: this.deviceSpecs\n        }\n      );\n    }\n    \n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.PITCH_DETECTION_ERROR,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        componentState: this.currentState,\n        isInitialized: this.isInitialized\n      }\n    );\n  }\n\n  /**\n   * Debug logging utility\n   * @private\n   */\n  private debugLog(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`${this.config.logPrefix} ${message}`, ...args);\n    }\n  }\n}","/**\n * HarmonicCorrection - Advanced harmonic detection and correction\n * \n * Provides sophisticated harmonic analysis and correction algorithms\n * Handles complex harmonic patterns, subharmonics, and frequency drift\n */\n\nimport type { HarmonicCorrectionResult } from '../types';\n\nexport class HarmonicCorrection {\n  private historyBuffer: Array<{\n    frequency: number;\n    confidence: number;\n    timestamp: number;\n    volume: number;\n  }> = [];\n  \n  private config = {\n    historyWindowMs: 2000,\n    minConfidenceThreshold: 0.6,\n    harmonicToleranceCents: 30,\n    maxHarmonicNumber: 8,\n    stabilityWeight: 0.7,\n    volumeWeight: 0.3\n  };\n\n  constructor(config: Partial<typeof HarmonicCorrection.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Apply harmonic correction to detected frequency\n   */\n  correctFrequency(frequency: number, volume: number = 1.0): HarmonicCorrectionResult {\n    const now = Date.now();\n    \n    // Clean old history\n    this.cleanHistory(now);\n    \n    // Add current detection to history\n    this.addToHistory(frequency, volume, now);\n    \n    // Analyze for harmonic patterns\n    const analysis = this.analyzeHarmonics(frequency);\n    \n    // Apply correction if confidence is high enough\n    if (analysis.confidence >= this.config.minConfidenceThreshold) {\n      return {\n        correctedFreq: analysis.correctedFrequency,\n        confidence: analysis.confidence,\n        correctionApplied: Math.abs(analysis.correctedFrequency - frequency) > 1.0\n      };\n    }\n    \n    return {\n      correctedFreq: frequency,\n      confidence: analysis.confidence,\n      correctionApplied: false\n    };\n  }\n\n  /**\n   * Analyze frequency for harmonic patterns\n   */\n  private analyzeHarmonics(frequency: number): {\n    correctedFrequency: number;\n    confidence: number;\n    harmonicNumber?: number;\n    fundamentalCandidate?: number;\n  } {\n    if (this.historyBuffer.length < 3) {\n      return {\n        correctedFrequency: frequency,\n        confidence: 0.1\n      };\n    }\n\n    // Get recent stable frequencies\n    const recentFrequencies = this.historyBuffer\n      .slice(-10)\n      .map(entry => entry.frequency);\n\n    // Look for fundamental candidates\n    const fundamentalCandidates = this.findFundamentalCandidates(frequency);\n    \n    let bestCandidate = {\n      frequency,\n      confidence: 0.1,\n      harmonicNumber: 1\n    };\n\n    // Test each fundamental candidate\n    for (const candidate of fundamentalCandidates) {\n      const confidence = this.calculateHarmonicConfidence(\n        candidate.fundamental,\n        candidate.harmonicNumber,\n        recentFrequencies\n      );\n      \n      if (confidence > bestCandidate.confidence) {\n        bestCandidate = {\n          frequency: candidate.fundamental,\n          confidence,\n          harmonicNumber: candidate.harmonicNumber\n        };\n      }\n    }\n\n    // If we found a likely harmonic, correct to fundamental\n    if (bestCandidate.harmonicNumber > 1 && bestCandidate.confidence > this.config.minConfidenceThreshold) {\n      return {\n        correctedFrequency: bestCandidate.frequency,\n        confidence: bestCandidate.confidence,\n        harmonicNumber: bestCandidate.harmonicNumber,\n        fundamentalCandidate: bestCandidate.frequency\n      };\n    }\n\n    return {\n      correctedFrequency: frequency,\n      confidence: bestCandidate.confidence\n    };\n  }\n\n  /**\n   * Find potential fundamental frequencies for a given detected frequency\n   */\n  private findFundamentalCandidates(frequency: number): Array<{\n    fundamental: number;\n    harmonicNumber: number;\n    likelihood: number;\n  }> {\n    const candidates: Array<{\n      fundamental: number;\n      harmonicNumber: number;\n      likelihood: number;\n    }> = [];\n\n    // Check if this could be a harmonic of a lower fundamental\n    for (let harmonicNum = 2; harmonicNum <= this.config.maxHarmonicNumber; harmonicNum++) {\n      const fundamental = frequency / harmonicNum;\n      \n      // Skip if fundamental is too low for human voice\n      if (fundamental < 60) continue;\n      \n      // Calculate likelihood based on how close it is to exact harmonic ratio\n      const exactHarmonic = fundamental * harmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(frequency / exactHarmonic));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents) {\n        const likelihood = 1.0 - (centDeviation / this.config.harmonicToleranceCents);\n        candidates.push({\n          fundamental,\n          harmonicNumber: harmonicNum,\n          likelihood\n        });\n      }\n    }\n\n    // Also consider the frequency itself as fundamental (no correction)\n    candidates.push({\n      fundamental: frequency,\n      harmonicNumber: 1,\n      likelihood: 0.5\n    });\n\n    return candidates.sort((a, b) => b.likelihood - a.likelihood);\n  }\n\n  /**\n   * Calculate confidence that a frequency pattern represents a harmonic series\n   */\n  private calculateHarmonicConfidence(\n    fundamental: number,\n    _harmonicNumber: number,\n    recentFrequencies: number[]\n  ): number {\n    if (recentFrequencies.length < 3) return 0.1;\n\n    let totalConfidence = 0;\n    let validMeasurements = 0;\n\n    // Check how well recent frequencies fit the harmonic pattern\n    for (const freq of recentFrequencies) {\n      // Find the closest harmonic to this frequency\n      let closestHarmonicNum = Math.round(freq / fundamental);\n      if (closestHarmonicNum < 1) closestHarmonicNum = 1;\n      \n      const expectedFreq = fundamental * closestHarmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(freq / expectedFreq));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents * 2) {\n        const confidence = 1.0 - (centDeviation / (this.config.harmonicToleranceCents * 2));\n        totalConfidence += confidence;\n        validMeasurements++;\n      }\n    }\n\n    if (validMeasurements === 0) return 0.1;\n\n    // Average confidence, weighted by stability\n    const avgConfidence = totalConfidence / validMeasurements;\n    \n    // Add stability bonus if we have consistent measurements\n    const stabilityBonus = Math.min(validMeasurements / recentFrequencies.length, 1.0);\n    \n    return Math.min(avgConfidence * this.config.stabilityWeight + stabilityBonus * (1 - this.config.stabilityWeight), 1.0);\n  }\n\n  /**\n   * Add frequency detection to history\n   */\n  private addToHistory(frequency: number, volume: number, timestamp: number): void {\n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume, 1.0);\n    let stabilityConfidence = 0.5;\n    \n    if (this.historyBuffer.length > 0) {\n      const lastFreq = this.historyBuffer[this.historyBuffer.length - 1].frequency;\n      const freqRatio = Math.max(frequency, lastFreq) / Math.min(frequency, lastFreq);\n      stabilityConfidence = Math.max(0, 1.0 - (freqRatio - 1.0) * 5); // Penalty for large jumps\n    }\n    \n    const confidence = volumeConfidence * this.config.volumeWeight + \n                      stabilityConfidence * (1 - this.config.volumeWeight);\n    \n    this.historyBuffer.push({\n      frequency,\n      confidence,\n      timestamp,\n      volume\n    });\n    \n    // Limit buffer size\n    if (this.historyBuffer.length > 50) {\n      this.historyBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old entries from history\n   */\n  private cleanHistory(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.historyWindowMs;\n    this.historyBuffer = this.historyBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset correction history\n   */\n  resetHistory(): void {\n    this.historyBuffer = [];\n  }\n\n  /**\n   * Get current analysis statistics\n   */\n  getAnalysisStats(): {\n    historyLength: number;\n    averageConfidence: number;\n    frequencyRange: { min: number; max: number } | null;\n    stabilityScore: number;\n  } {\n    if (this.historyBuffer.length === 0) {\n      return {\n        historyLength: 0,\n        averageConfidence: 0,\n        frequencyRange: null,\n        stabilityScore: 0\n      };\n    }\n\n    const frequencies = this.historyBuffer.map(entry => entry.frequency);\n    const confidences = this.historyBuffer.map(entry => entry.confidence);\n    \n    const avgConfidence = confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;\n    const minFreq = Math.min(...frequencies);\n    const maxFreq = Math.max(...frequencies);\n    \n    // Calculate stability as inverse of coefficient of variation\n    const mean = frequencies.reduce((sum, freq) => sum + freq, 0) / frequencies.length;\n    const variance = frequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / frequencies.length;\n    const coefficientOfVariation = Math.sqrt(variance) / mean;\n    const stabilityScore = Math.max(0, 1.0 - coefficientOfVariation);\n\n    return {\n      historyLength: this.historyBuffer.length,\n      averageConfidence: avgConfidence,\n      frequencyRange: { min: minFreq, max: maxFreq },\n      stabilityScore\n    };\n  }\n\n  /**\n   * Configure correction parameters\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}","/**\n * TypeScript type definitions for PitchPro Audio Processing\n */\n\n// AudioManager types\nexport interface AudioManagerConfig {\n  sampleRate?: number;\n  channelCount?: number;\n  echoCancellation?: boolean;\n  noiseSuppression?: boolean;\n  autoGainControl?: boolean;\n  latency?: number;\n}\n\n// PitchDetector types\nexport interface PitchDetectorConfig {\n  fftSize?: number;\n  smoothing?: number;\n  clarityThreshold?: number;\n  minVolumeAbsolute?: number;\n  noiseGate?: number;        // v1.1.8: DeviceDetection最適化対応\n  deviceOptimization?: boolean;\n  silenceDetection?: SilenceDetectionConfig;\n}\n\n// Silence detection types\nexport interface SilenceDetectionConfig {\n  enabled?: boolean;\n  warningThreshold?: number;    // 警告までの時間（ms）\n  timeoutThreshold?: number;    // タイムアウトまでの時間（ms）\n  minVolumeThreshold?: number;  // 消音判定の音量閾値\n  onSilenceWarning?: (duration: number) => void;\n  onSilenceTimeout?: () => void;\n  onSilenceRecovered?: () => void;\n}\n\nexport interface PitchDetectionResult {\n  frequency: number;\n  note: string;\n  octave?: number;\n  clarity: number;\n  volume: number;\n  rawVolume?: number;\n  cents?: number;\n  timestamp?: number;\n}\n\n// NoiseFilter types\nexport interface NoiseFilterConfig {\n  highpassFreq?: number;\n  lowpassFreq?: number;\n  notchFreq?: number;\n  highpassQ?: number;\n  lowpassQ?: number;\n  notchQ?: number;\n  useFilters?: boolean;\n}\n\n// HarmonicCorrection types\nexport interface HarmonicCorrectionResult {\n  correctedFreq: number;\n  confidence: number;\n  correctionApplied: boolean;\n}\n\n// ErrorNotification types\nexport interface NotificationConfig {\n  type: 'error' | 'warning' | 'success' | 'info';\n  title: string;\n  message: string;\n  details?: string[];\n  solution?: string;\n  autoHide?: boolean;\n  duration?: number;\n  priority?: 'low' | 'medium' | 'high';\n}\n\nexport interface NotificationElement extends HTMLElement {\n  'data-notification-id': string;\n}\n\n// Music theory types\nexport interface MusicalNote {\n  name: string;\n  octave: number;\n  midi: number;\n  frequency: number;\n}\n\nexport interface MusicalInterval {\n  name: string;\n  semitones: number;\n  cents: number;\n  ratio: number;\n}\n\n// Voice analysis types\nexport interface VoiceAnalysis {\n  quality: VoiceQuality;\n  stability: number;\n  recommendations: string[];\n}\n\nexport const VoiceQuality = {\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type VoiceQuality = typeof VoiceQuality[keyof typeof VoiceQuality];\n\nexport const AccuracyLevel = {\n  PERFECT: 'perfect' as const,\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type AccuracyLevel = typeof AccuracyLevel[keyof typeof AccuracyLevel];\n\nexport interface AccuracyResult {\n  accuracy: AccuracyLevel;\n  centsOff: number;\n  score: number;\n}\n\n// Device detection types\nexport interface DeviceSpecs {\n  deviceType: 'iPhone' | 'iPad' | 'PC';\n  isIOS: boolean;\n  sensitivity: number;\n  noiseGate: number;\n  divisor: number;\n  gainCompensation: number;\n  noiseThreshold: number;\n  smoothingFactor: number;\n}\n\n// Lifecycle management types\nexport interface MediaStreamResources {\n  audioContext: AudioContext;\n  mediaStream: MediaStream;\n  sourceNode: MediaStreamAudioSourceNode;\n}\n\nexport interface HealthStatus {\n  mediaStreamActive: boolean;\n  audioContextState: string;\n  trackStates: TrackState[];\n  healthy: boolean;\n  refCount?: number;\n}\n\nexport interface TrackState {\n  kind: string;\n  enabled: boolean;\n  readyState: MediaStreamTrackState;\n  muted: boolean;\n}\n\n// Event types\nexport interface MicrophoneControllerEvents {\n  'pitchpro:microphoneGranted': CustomEvent<{ stream: MediaStream }>;\n  'pitchpro:microphoneDenied': CustomEvent<{ error: Error }>;\n  'pitchpro:microphoneStopped': CustomEvent;\n  'pitchpro:microphoneMuted': CustomEvent<{ timestamp: number; controllerState: string }>;\n  'pitchpro:microphoneUnmuted': CustomEvent<{ timestamp: number; controllerState: string }>;\n  'pitchpro:sensitivityChanged': CustomEvent<{ sensitivity: number }>;\n  'pitchpro:noiseGateChanged': CustomEvent<{ threshold: number }>;\n  'pitchpro:deviceDetected': CustomEvent<{ specs: DeviceSpecs }>;\n}\n\nexport interface LifecycleEvents {\n  'pitchpro:lifecycle:trackEnded': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackMuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackUnmuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:autoRecoverySuccess': CustomEvent;\n  'pitchpro:lifecycle:autoRecoveryFailed': CustomEvent<{ error: Error }>;\n  'pitchpro:lifecycle:maxRecoveryAttemptsReached': CustomEvent<{ attempts: number; lastHealthStatus: any }>;\n  'pitchpro:lifecycle:monitoringRestarted': CustomEvent<{ reason: string; refCount: number }>;\n}\n\n// Callback types\nexport type PitchCallback = (result: PitchDetectionResult) => void;\nexport type ErrorCallback = (error: Error) => void;\nexport type StateChangeCallback = (state: string) => void;","/**\n * VoiceAnalyzer - Advanced voice quality and analysis\n * \n * Analyzes voice characteristics, stability, and provides recommendations\n * Includes vibrato detection, breathiness analysis, and vocal health indicators\n */\n\nimport type { VoiceAnalysis } from '../types';\nimport { VoiceQuality } from '../types';\n\nexport class VoiceAnalyzer {\n  private analysisBuffer: Array<{\n    frequency: number;\n    volume: number;\n    clarity: number;\n    timestamp: number;\n  }> = [];\n  \n  private config = {\n    analysisWindowMs: 3000,\n    stabilityThresholdCents: 20,\n    vibratoMinRate: 4.5,\n    vibratoMaxRate: 7.5,\n    vibratoMinDepthCents: 50,\n    breathinessThreshold: 0.3,\n    minAnalysisTime: 1000\n  };\n\n  constructor(config: Partial<typeof VoiceAnalyzer.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Analyze voice characteristics from audio data\n   */\n  analyzeVoice(\n    frequency: number, \n    volume: number, \n    clarity: number,\n    spectralData?: Float32Array\n  ): VoiceAnalysis {\n    const timestamp = Date.now();\n    \n    // Add to analysis buffer\n    this.addToBuffer(frequency, volume, clarity, timestamp);\n    \n    // Clean old data\n    this.cleanBuffer(timestamp);\n    \n    // Perform comprehensive analysis\n    const stability = this.calculateStability();\n    const vibrato = this.detectVibrato();\n    const breathiness = spectralData ? this.analyzeBreathiness(spectralData) : null;\n    const consistency = this.analyzeConsistency();\n    \n    // Calculate overall quality\n    const quality = this.calculateOverallQuality(stability, vibrato, breathiness, consistency);\n    \n    // Generate recommendations\n    const recommendations = this.generateRecommendations(\n      quality,\n      stability,\n      vibrato,\n      breathiness,\n      consistency\n    );\n\n    return {\n      quality,\n      stability,\n      recommendations\n    };\n  }\n\n  /**\n   * Calculate pitch stability\n   */\n  private calculateStability(): number {\n    if (this.analysisBuffer.length < 10) {\n      return 0.5; // Neutral stability for insufficient data\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency);\n    const validFrequencies = frequencies.filter(freq => freq > 0);\n    \n    if (validFrequencies.length < 5) {\n      return 0.3; // Low stability for sparse data\n    }\n\n    // Calculate coefficient of variation\n    const mean = validFrequencies.reduce((sum, freq) => sum + freq, 0) / validFrequencies.length;\n    const variance = validFrequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / validFrequencies.length;\n    const standardDeviation = Math.sqrt(variance);\n    const coefficientOfVariation = standardDeviation / mean;\n    \n    // Convert to cents for musical relevance\n    const deviationCents = coefficientOfVariation * 1200;\n    \n    // Map to 0-1 stability score\n    return Math.max(0, Math.min(1, 1 - (deviationCents / 100)));\n  }\n\n  /**\n   * Detect vibrato characteristics\n   */\n  private detectVibrato(): {\n    detected: boolean;\n    rate: number | null;\n    depth: number | null;\n    regularity: number | null;\n  } {\n    if (this.analysisBuffer.length < 30) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency).filter(f => f > 0);\n    if (frequencies.length < 20) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Smooth the frequency data\n    const smoothed = this.smoothFrequencies(frequencies, 3);\n    \n    // Find peaks and valleys\n    const extrema = this.findExtrema(smoothed);\n    \n    if (extrema.length < 4) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Calculate vibrato rate (cycles per second)\n    const timeSpan = (this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - \n                     this.analysisBuffer[0].timestamp) / 1000;\n    const cycles = extrema.length / 2; // pairs of peaks and valleys\n    const rate = cycles / timeSpan;\n\n    // Calculate vibrato depth (in cents)\n    const depths = [];\n    for (let i = 0; i < extrema.length - 1; i++) {\n      const freq1 = smoothed[extrema[i].index];\n      const freq2 = smoothed[extrema[i + 1].index];\n      if (freq1 > 0 && freq2 > 0) {\n        const cents = Math.abs(1200 * Math.log2(freq1 / freq2));\n        depths.push(cents);\n      }\n    }\n\n    const averageDepth = depths.length > 0 ? \n      depths.reduce((sum, depth) => sum + depth, 0) / depths.length : 0;\n\n    // Calculate regularity (consistency of periods)\n    const periods = [];\n    for (let i = 0; i < extrema.length - 2; i += 2) {\n      const period = extrema[i + 2].index - extrema[i].index;\n      periods.push(period);\n    }\n\n    let regularity = 0;\n    if (periods.length > 2) {\n      const periodMean = periods.reduce((sum, p) => sum + p, 0) / periods.length;\n      const periodVariance = periods.reduce((sum, p) => sum + Math.pow(p - periodMean, 2), 0) / periods.length;\n      regularity = Math.max(0, 1 - (Math.sqrt(periodVariance) / periodMean));\n    }\n\n    // Determine if vibrato is detected\n    const detected = rate >= this.config.vibratoMinRate && \n                    rate <= this.config.vibratoMaxRate &&\n                    averageDepth >= this.config.vibratoMinDepthCents;\n\n    return {\n      detected,\n      rate: rate,\n      depth: averageDepth,\n      regularity\n    };\n  }\n\n  /**\n   * Analyze breathiness from spectral data\n   */\n  private analyzeBreathiness(spectralData: Float32Array): number {\n    // Analyze high-frequency noise content relative to fundamental\n    const fundamentalBin = Math.floor(spectralData.length * 0.1); // Rough estimate\n    const noiseBins = spectralData.slice(Math.floor(spectralData.length * 0.7)); // High frequency content\n    \n    const fundamentalEnergy = spectralData.slice(0, fundamentalBin * 2)\n      .reduce((sum, val) => sum + val * val, 0);\n    \n    const noiseEnergy = noiseBins.reduce((sum, val) => sum + val * val, 0);\n    \n    if (fundamentalEnergy === 0) return 1.0; // Maximum breathiness if no fundamental\n    \n    const noiseRatio = noiseEnergy / fundamentalEnergy;\n    return Math.min(1.0, noiseRatio);\n  }\n\n  /**\n   * Analyze consistency over time\n   */\n  private analyzeConsistency(): number {\n    if (this.analysisBuffer.length < 10) return 0.5;\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    \n    // Calculate consistency metrics\n    const volumeConsistency = this.calculateConsistencyScore(volumes);\n    const clarityConsistency = this.calculateConsistencyScore(clarities);\n    \n    return (volumeConsistency + clarityConsistency) / 2;\n  }\n\n  /**\n   * Calculate consistency score for an array of values\n   */\n  private calculateConsistencyScore(values: number[]): number {\n    if (values.length < 3) return 0.5;\n\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const coefficientOfVariation = Math.sqrt(variance) / (mean || 1);\n    \n    return Math.max(0, Math.min(1, 1 - coefficientOfVariation));\n  }\n\n  /**\n   * Calculate overall voice quality\n   */\n  private calculateOverallQuality(\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): VoiceQuality {\n    // Weight factors for different aspects\n    const weights = {\n      stability: 0.4,\n      consistency: 0.3,\n      breathiness: 0.2,\n      vibrato: 0.1\n    };\n\n    let score = stability * weights.stability + consistency * weights.consistency;\n    \n    // Breathiness penalty (lower is better for breathiness)\n    if (breathiness !== null) {\n      score += (1 - Math.min(breathiness, 1)) * weights.breathiness;\n    } else {\n      score += 0.7 * weights.breathiness; // Neutral if no data\n    }\n    \n    // Vibrato bonus for controlled vibrato\n    if (vibrato.detected && vibrato.regularity > 0.7) {\n      score += 0.9 * weights.vibrato;\n    } else if (vibrato.detected) {\n      score += 0.6 * weights.vibrato;\n    } else {\n      score += 0.5 * weights.vibrato;\n    }\n\n    // Map score to quality levels\n    if (score >= 0.85) return VoiceQuality.EXCELLENT;\n    if (score >= 0.7) return VoiceQuality.GOOD;\n    if (score >= 0.5) return VoiceQuality.FAIR;\n    return VoiceQuality.POOR;\n  }\n\n  /**\n   * Generate recommendations based on analysis\n   */\n  private generateRecommendations(\n    quality: VoiceQuality,\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Stability recommendations\n    if (stability < 0.5) {\n      recommendations.push('音程の安定性を向上させるため、ゆっくりとした発声練習を行ってください');\n      recommendations.push('腹式呼吸を意識して、息の流れを一定に保つ練習をしてください');\n    } else if (stability < 0.7) {\n      recommendations.push('音程の微調整練習で、より正確なピッチコントロールを目指しましょう');\n    }\n\n    // Consistency recommendations\n    if (consistency < 0.5) {\n      recommendations.push('音量と音質の一貫性を保つため、定期的な発声練習を継続してください');\n      recommendations.push('録音を聞き返して、自分の声の特徴を把握しましょう');\n    }\n\n    // Breathiness recommendations\n    if (breathiness !== null && breathiness > 0.6) {\n      recommendations.push('声の息漏れが気になります。発声時の喉の締まりを意識してください');\n      recommendations.push('ハミング練習で、クリアな声質を目指しましょう');\n    }\n\n    // Vibrato recommendations\n    if (vibrato.detected) {\n      if (vibrato.regularity < 0.5) {\n        recommendations.push('ビブラートの規則性を改善するため、メトロノームに合わせた練習をしてください');\n      } else if (vibrato.rate > 7.5) {\n        recommendations.push('ビブラートの速度が速すぎます。よりゆったりとしたビブラートを練習してください');\n      }\n    } else if (quality === VoiceQuality.GOOD || quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('美しいビブラートの習得に挑戦してみましょう');\n    }\n\n    // General recommendations based on quality\n    if (quality === VoiceQuality.POOR) {\n      recommendations.push('基礎的な発声練習から始めることをお勧めします');\n      recommendations.push('専門的な指導を受けることを検討してください');\n    } else if (quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('素晴らしい声質です。この状態を維持する練習を続けてください');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Smooth frequency data using moving average\n   */\n  private smoothFrequencies(frequencies: number[], windowSize: number): number[] {\n    const smoothed: number[] = [];\n    \n    for (let i = 0; i < frequencies.length; i++) {\n      let sum = 0;\n      let count = 0;\n      \n      const start = Math.max(0, i - Math.floor(windowSize / 2));\n      const end = Math.min(frequencies.length, i + Math.floor(windowSize / 2) + 1);\n      \n      for (let j = start; j < end; j++) {\n        sum += frequencies[j];\n        count++;\n      }\n      \n      smoothed.push(sum / count);\n    }\n    \n    return smoothed;\n  }\n\n  /**\n   * Find local extrema (peaks and valleys) in frequency data\n   */\n  private findExtrema(data: number[]): Array<{ index: number; value: number; type: 'peak' | 'valley' }> {\n    const extrema: Array<{ index: number; value: number; type: 'peak' | 'valley' }> = [];\n    \n    for (let i = 1; i < data.length - 1; i++) {\n      const prev = data[i - 1];\n      const curr = data[i];\n      const next = data[i + 1];\n      \n      if (curr > prev && curr > next) {\n        extrema.push({ index: i, value: curr, type: 'peak' });\n      } else if (curr < prev && curr < next) {\n        extrema.push({ index: i, value: curr, type: 'valley' });\n      }\n    }\n    \n    return extrema;\n  }\n\n  /**\n   * Add data to analysis buffer\n   */\n  private addToBuffer(frequency: number, volume: number, clarity: number, timestamp: number): void {\n    this.analysisBuffer.push({ frequency, volume, clarity, timestamp });\n    \n    // Limit buffer size\n    if (this.analysisBuffer.length > 200) {\n      this.analysisBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old data from buffer\n   */\n  private cleanBuffer(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.analysisWindowMs;\n    this.analysisBuffer = this.analysisBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset analysis buffer\n   */\n  reset(): void {\n    this.analysisBuffer = [];\n  }\n\n  /**\n   * Get current buffer statistics\n   */\n  getBufferStats(): {\n    entryCount: number;\n    timeSpanMs: number;\n    averageVolume: number;\n    averageClarity: number;\n  } {\n    if (this.analysisBuffer.length === 0) {\n      return { entryCount: 0, timeSpanMs: 0, averageVolume: 0, averageClarity: 0 };\n    }\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    const timeSpan = this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - this.analysisBuffer[0].timestamp;\n\n    return {\n      entryCount: this.analysisBuffer.length,\n      timeSpanMs: timeSpan,\n      averageVolume: volumes.reduce((sum, vol) => sum + vol, 0) / volumes.length,\n      averageClarity: clarities.reduce((sum, clarity) => sum + clarity, 0) / clarities.length\n    };\n  }\n}","/**\n * CalibrationSystem - Device-specific audio calibration and optimization\n * \n * Automatically calibrates audio processing parameters based on device capabilities\n * Handles microphone sensitivity, noise characteristics, and frequency response\n */\n\nimport type { DeviceSpecs } from '../types';\nimport { DeviceDetection } from '../utils/DeviceDetection';\n\nexport class CalibrationSystem {\n  private deviceSpecs: DeviceSpecs;\n  private calibrationData: {\n    volumeOffset: number;\n    frequencyResponse: { [frequency: number]: number };\n    noiseProfile: { [frequency: number]: number };\n    optimalSettings: {\n      sensitivity: number;\n      noiseGate: number;\n      filterSettings: any;\n    };\n  } | null = null;\n\n  private isCalibrated = false;\n  private calibrationInProgress = false;\n\n  constructor() {\n    this.deviceSpecs = DeviceDetection.getDeviceSpecs();\n  }\n\n  /**\n   * Perform automatic calibration\n   */\n  async calibrate(audioContext: AudioContext, mediaStream: MediaStream): Promise<{\n    success: boolean;\n    calibrationData: any;\n    recommendedSettings: any;\n    error?: Error;\n  }> {\n    if (this.calibrationInProgress) {\n      throw new Error('Calibration already in progress');\n    }\n\n    this.calibrationInProgress = true;\n\n    try {\n      console.log('🎛️ [CalibrationSystem] Starting device calibration');\n\n      // Step 1: Measure background noise\n      const noiseProfile = await this.measureBackgroundNoise(audioContext, mediaStream);\n\n      // Step 2: Calibrate volume levels\n      const volumeCalibration = await this.calibrateVolumeLevels(audioContext, mediaStream);\n\n      // Step 3: Measure frequency response (simplified)\n      const frequencyResponse = await this.measureFrequencyResponse(audioContext, mediaStream);\n\n      // Step 4: Determine optimal settings\n      const optimalSettings = this.calculateOptimalSettings(\n        noiseProfile,\n        volumeCalibration,\n        frequencyResponse\n      );\n\n      this.calibrationData = {\n        volumeOffset: volumeCalibration.offset,\n        frequencyResponse,\n        noiseProfile,\n        optimalSettings\n      };\n\n      this.isCalibrated = true;\n      this.calibrationInProgress = false;\n\n      console.log('✅ [CalibrationSystem] Calibration completed successfully');\n\n      return {\n        success: true,\n        calibrationData: this.calibrationData,\n        recommendedSettings: optimalSettings\n      };\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Calibration failed:', error);\n      this.calibrationInProgress = false;\n      \n      return {\n        success: false,\n        calibrationData: null,\n        recommendedSettings: this.getDefaultSettings(),\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Measure background noise levels\n   */\n  private async measureBackgroundNoise(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 2000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 2048;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const measurements: Float32Array[] = [];\n\n      const startTime = Date.now();\n\n      const measureNoise = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average noise profile\n          const avgNoise: { [frequency: number]: number } = {};\n          \n          for (let bin = 0; bin < bufferLength; bin++) {\n            const frequency = (bin * audioContext.sampleRate) / (analyser.fftSize);\n            let sum = 0;\n            \n            for (const measurement of measurements) {\n              sum += measurement[bin];\n            }\n            \n            avgNoise[Math.round(frequency)] = sum / measurements.length;\n          }\n\n          source.disconnect();\n          resolve(avgNoise);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        measurements.push(new Float32Array(dataArray));\n        \n        setTimeout(measureNoise, 100);\n      };\n\n      measureNoise();\n    });\n  }\n\n  /**\n   * Calibrate volume levels\n   */\n  private async calibrateVolumeLevels(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 3000\n  ): Promise<{ offset: number; range: { min: number; max: number } }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 1024;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.fftSize;\n      const dataArray = new Float32Array(bufferLength);\n      const volumeMeasurements: number[] = [];\n\n      const startTime = Date.now();\n\n      const measureVolume = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Analyze volume distribution\n          volumeMeasurements.sort((a, b) => a - b);\n          \n          const min = volumeMeasurements[0] || 0;\n          const max = volumeMeasurements[volumeMeasurements.length - 1] || 1;\n          const median = volumeMeasurements[Math.floor(volumeMeasurements.length / 2)] || 0.5;\n          \n          // Calculate offset to center dynamic range\n          const targetCenter = 0.3; // Aim for 30% as comfortable speaking level\n          const offset = targetCenter - median;\n\n          source.disconnect();\n          resolve({\n            offset,\n            range: { min, max }\n          });\n          return;\n        }\n\n        analyser.getFloatTimeDomainData(dataArray);\n        \n        // Calculate RMS\n        let sum = 0;\n        for (let i = 0; i < bufferLength; i++) {\n          sum += dataArray[i] * dataArray[i];\n        }\n        const rms = Math.sqrt(sum / bufferLength);\n        volumeMeasurements.push(rms);\n        \n        setTimeout(measureVolume, 50);\n      };\n\n      measureVolume();\n    });\n  }\n\n  /**\n   * Measure frequency response (simplified version)\n   */\n  private async measureFrequencyResponse(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 5000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 4096;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const responseMap: { [frequency: number]: number[] } = {};\n\n      const startTime = Date.now();\n\n      const measureResponse = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average response for each frequency\n          const avgResponse: { [frequency: number]: number } = {};\n          \n          Object.keys(responseMap).forEach(freqStr => {\n            const frequency = parseInt(freqStr);\n            const measurements = responseMap[frequency];\n            const avg = measurements.reduce((sum, val) => sum + val, 0) / measurements.length;\n            avgResponse[frequency] = avg;\n          });\n\n          source.disconnect();\n          resolve(avgResponse);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        \n        // Store measurements for key frequencies\n        for (let bin = 0; bin < bufferLength; bin++) {\n          const frequency = Math.round((bin * audioContext.sampleRate) / (analyser.fftSize));\n          \n          // Focus on vocal range\n          if (frequency >= 80 && frequency <= 1000) {\n            if (!responseMap[frequency]) {\n              responseMap[frequency] = [];\n            }\n            responseMap[frequency].push(dataArray[bin]);\n          }\n        }\n        \n        setTimeout(measureResponse, 100);\n      };\n\n      measureResponse();\n    });\n  }\n\n  /**\n   * Calculate optimal settings based on calibration data\n   */\n  private calculateOptimalSettings(\n    noiseProfile: { [frequency: number]: number },\n    volumeCalibration: any,\n    frequencyResponse: { [frequency: number]: number }\n  ): any {\n    const baseSettings = this.getDefaultSettings();\n\n    // Adjust sensitivity based on volume calibration\n    const sensitivityAdjustment = Math.max(0.5, Math.min(2.0, 1.0 - volumeCalibration.offset));\n    const adjustedSensitivity = baseSettings.sensitivity * sensitivityAdjustment;\n\n    // Adjust noise gate based on background noise\n    const noiseFrequencies = Object.keys(noiseProfile).map(f => parseInt(f));\n    const vocalRangeNoise = noiseFrequencies\n      .filter(f => f >= 100 && f <= 800)\n      .map(f => noiseProfile[f]);\n    \n    const avgNoise = vocalRangeNoise.length > 0 ? \n      vocalRangeNoise.reduce((sum, val) => sum + val, 0) / vocalRangeNoise.length : -60;\n    \n    const noiseGateAdjustment = Math.max(-20, avgNoise + 10); // 10dB above average noise\n    const adjustedNoiseGate = Math.max(baseSettings.noiseGate, Math.abs(noiseGateAdjustment) / 1000);\n\n    // Analyze frequency response for filter adjustments\n    const frequencyKeys = Object.keys(frequencyResponse).map(f => parseInt(f)).sort((a, b) => a - b);\n    const responseLevels = frequencyKeys.map(f => frequencyResponse[f]);\n    \n    // Simple frequency response correction\n    const lowFreqResponse = responseLevels.slice(0, Math.floor(responseLevels.length * 0.3));\n    const midFreqResponse = responseLevels.slice(\n      Math.floor(responseLevels.length * 0.3),\n      Math.floor(responseLevels.length * 0.7)\n    );\n    const highFreqResponse = responseLevels.slice(Math.floor(responseLevels.length * 0.7));\n\n    const lowAvg = lowFreqResponse.reduce((sum, val) => sum + val, 0) / lowFreqResponse.length;\n    const midAvg = midFreqResponse.reduce((sum, val) => sum + val, 0) / midFreqResponse.length;\n    const highAvg = highFreqResponse.reduce((sum, val) => sum + val, 0) / highFreqResponse.length;\n\n    return {\n      sensitivity: Math.round(adjustedSensitivity * 10) / 10,\n      noiseGate: Math.round(adjustedNoiseGate * 1000) / 1000,\n      volumeOffset: volumeCalibration.offset,\n      filterSettings: {\n        highpassFreq: lowAvg < (midAvg - 5) ? 100 : 80, // Stronger highpass if low freq is weak\n        lowpassFreq: highAvg > (midAvg + 3) ? 600 : 800, // Lower cutoff if high freq is strong\n        notchFreq: 60, // Standard power line frequency\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      },\n      deviceAdjustments: {\n        lowFreqCompensation: Math.max(0.8, Math.min(1.5, midAvg / (lowAvg || -60))),\n        highFreqCompensation: Math.max(0.8, Math.min(1.2, midAvg / (highAvg || -60)))\n      }\n    };\n  }\n\n  /**\n   * Get default settings for current device\n   */\n  private getDefaultSettings(): any {\n    return {\n      sensitivity: this.deviceSpecs.sensitivity,\n      noiseGate: this.deviceSpecs.noiseGate,\n      volumeOffset: 0,\n      filterSettings: {\n        highpassFreq: 80,\n        lowpassFreq: 800,\n        notchFreq: 60,\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      }\n    };\n  }\n\n  /**\n   * Apply calibrated settings to audio processing\n   */\n  applyCalibration(audioProcessor: any): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      console.warn('⚠️ [CalibrationSystem] No calibration data available');\n      return false;\n    }\n\n    try {\n      const settings = this.calibrationData.optimalSettings;\n      \n      // Apply settings to audio processor\n      if (audioProcessor.setSensitivity) {\n        audioProcessor.setSensitivity(settings.sensitivity);\n      }\n      \n      if (audioProcessor.setNoiseGate) {\n        audioProcessor.setNoiseGate(settings.noiseGate);\n      }\n      \n      if (audioProcessor.updateFilterSettings) {\n        audioProcessor.updateFilterSettings(settings.filterSettings);\n      }\n\n      console.log('✅ [CalibrationSystem] Calibration applied successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to apply calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get calibration status\n   */\n  getCalibrationStatus(): {\n    isCalibrated: boolean;\n    inProgress: boolean;\n    deviceSpecs: DeviceSpecs;\n    calibrationData: any;\n  } {\n    return {\n      isCalibrated: this.isCalibrated,\n      inProgress: this.calibrationInProgress,\n      deviceSpecs: this.deviceSpecs,\n      calibrationData: this.calibrationData\n    };\n  }\n\n  /**\n   * Reset calibration\n   */\n  reset(): void {\n    this.isCalibrated = false;\n    this.calibrationInProgress = false;\n    this.calibrationData = null;\n    \n    console.log('🔄 [CalibrationSystem] Calibration reset');\n  }\n\n  /**\n   * Save calibration data to localStorage\n   */\n  saveCalibration(): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      return false;\n    }\n\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const dataToSave = {\n        deviceSpecs: this.deviceSpecs,\n        calibrationData: this.calibrationData,\n        timestamp: Date.now()\n      };\n\n      localStorage.setItem(calibrationKey, JSON.stringify(dataToSave));\n      console.log('💾 [CalibrationSystem] Calibration saved');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to save calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Load calibration data from localStorage\n   */\n  loadCalibration(): boolean {\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const savedData = localStorage.getItem(calibrationKey);\n      \n      if (!savedData) {\n        return false;\n      }\n\n      const parsedData = JSON.parse(savedData);\n      \n      // Check if calibration is recent (within 7 days)\n      const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n      if (Date.now() - parsedData.timestamp > maxAge) {\n        console.log('⏰ [CalibrationSystem] Saved calibration is too old, ignoring');\n        return false;\n      }\n\n      // Verify device compatibility\n      if (parsedData.deviceSpecs.deviceType !== this.deviceSpecs.deviceType) {\n        console.log('📱 [CalibrationSystem] Device type mismatch, ignoring saved calibration');\n        return false;\n      }\n\n      this.calibrationData = parsedData.calibrationData;\n      this.isCalibrated = true;\n      \n      console.log('📂 [CalibrationSystem] Calibration loaded successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to load calibration:', error);\n      return false;\n    }\n  }\n}","/**\n * MusicTheory - Musical theory utilities and calculations\n * \n * Provides utilities for scales, chords, intervals, and musical analysis\n * Supports various temperaments and tuning systems\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\nimport { FrequencyUtils } from './FrequencyUtils';\n\nexport class MusicTheory {\n  // Scale patterns (in semitones from root)\n  static readonly SCALE_PATTERNS = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    naturalMinor: [0, 2, 3, 5, 7, 8, 10],\n    harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n    melodicMinor: [0, 2, 3, 5, 7, 9, 11],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n    pentatonicMajor: [0, 2, 4, 7, 9],\n    pentatonicMinor: [0, 3, 5, 7, 10],\n    blues: [0, 3, 5, 6, 7, 10],\n    chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  };\n\n  // Chord patterns (in semitones from root)\n  static readonly CHORD_PATTERNS = {\n    major: [0, 4, 7],\n    minor: [0, 3, 7],\n    diminished: [0, 3, 6],\n    augmented: [0, 4, 8],\n    sus2: [0, 2, 7],\n    sus4: [0, 5, 7],\n    major7: [0, 4, 7, 11],\n    minor7: [0, 3, 7, 10],\n    dominant7: [0, 4, 7, 10],\n    majorMaj7: [0, 4, 7, 11],\n    halfDiminished7: [0, 3, 6, 10],\n    diminished7: [0, 3, 6, 9],\n    add9: [0, 4, 7, 14], // 14 = 2 + 12 (octave)\n    major9: [0, 4, 7, 11, 14],\n    minor9: [0, 3, 7, 10, 14]\n  };\n\n  // Circle of fifths\n  static readonly CIRCLE_OF_FIFTHS = [\n    'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'Ab', 'Eb', 'Bb', 'F'\n  ];\n\n  // Interval names\n  static readonly INTERVAL_NAMES = {\n    0: 'Perfect Unison',\n    1: 'Minor Second',\n    2: 'Major Second',\n    3: 'Minor Third',\n    4: 'Major Third',\n    5: 'Perfect Fourth',\n    6: 'Tritone',\n    7: 'Perfect Fifth',\n    8: 'Minor Sixth',\n    9: 'Major Sixth',\n    10: 'Minor Seventh',\n    11: 'Major Seventh',\n    12: 'Perfect Octave'\n  };\n\n  /**\n   * Generate scale from root note\n   */\n  static generateScale(\n    rootFrequency: number, \n    scaleType: keyof typeof MusicTheory.SCALE_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.SCALE_PATTERNS[scaleType];\n    if (!pattern) {\n      throw new Error(`Unknown scale type: ${scaleType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Generate chord from root note\n   */\n  static generateChord(\n    rootFrequency: number,\n    chordType: keyof typeof MusicTheory.CHORD_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.CHORD_PATTERNS[chordType];\n    if (!pattern) {\n      throw new Error(`Unknown chord type: ${chordType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Identify scale from a set of frequencies\n   */\n  static identifyScale(frequencies: number[]): Array<{\n    scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n  }> {\n    if (frequencies.length < 3) {\n      return [];\n    }\n\n    // Convert frequencies to note numbers relative to the lowest note\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const baseFreq = sortedFreqs[0];\n    const intervals = sortedFreqs.map(freq => \n      Math.round(12 * Math.log2(freq / baseFreq))\n    );\n\n    const results: Array<{\n      scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n    }> = [];\n\n    // Test each scale pattern\n    Object.entries(MusicTheory.SCALE_PATTERNS).forEach(([scaleName, pattern]) => {\n      // Test each possible root\n      for (let rootOffset = 0; rootOffset < 12; rootOffset++) {\n        const adjustedPattern = pattern.map(interval => (interval + rootOffset) % 12).sort((a, b) => a - b);\n        const normalizedIntervals = intervals.map(interval => interval % 12).sort((a, b) => a - b);\n        \n        // Calculate confidence based on pattern matching\n        let matches = 0;\n        normalizedIntervals.forEach(interval => {\n          if (adjustedPattern.includes(interval)) {\n            matches++;\n          }\n        });\n\n        const confidence = matches / Math.max(normalizedIntervals.length, adjustedPattern.length);\n        \n        if (confidence > 0.5) { // Only include reasonable matches\n          const rootFreq = baseFreq * Math.pow(2, -rootOffset / 12);\n          results.push({\n            scale: scaleName as keyof typeof MusicTheory.SCALE_PATTERNS,\n            confidence,\n            root: FrequencyUtils.frequencyToNote(rootFreq)\n          });\n        }\n      }\n    });\n\n    // Sort by confidence and return top matches\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 5);\n  }\n\n  /**\n   * Identify chord from frequencies\n   */\n  static identifyChord(frequencies: number[]): Array<{\n    chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n    inversion?: number;\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const results: Array<{\n      chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n      inversion?: number;\n    }> = [];\n\n    // Test each chord pattern\n    Object.entries(MusicTheory.CHORD_PATTERNS).forEach(([chordName, pattern]) => {\n      // Test different inversions\n      for (let inversion = 0; inversion < pattern.length; inversion++) {\n        // Create inverted pattern\n        const invertedPattern = [\n          ...pattern.slice(inversion),\n          ...pattern.slice(0, inversion).map(interval => interval + 12)\n        ];\n\n        // Test each possible bass note as root\n        sortedFreqs.forEach((bassFreq, _bassIndex) => {\n          const intervals = sortedFreqs.map(freq => \n            Math.round(12 * Math.log2(freq / bassFreq))\n          );\n\n          // Calculate confidence\n          let matches = 0;\n          const patternSet = new Set(invertedPattern);\n          intervals.forEach(interval => {\n            const normalizedInterval = interval % 12;\n            if (patternSet.has(normalizedInterval) || patternSet.has(normalizedInterval + 12)) {\n              matches++;\n            }\n          });\n\n          const confidence = matches / Math.max(intervals.length, pattern.length);\n          \n          if (confidence > 0.6) {\n            const rootFreq = inversion === 0 ? bassFreq : \n              bassFreq * Math.pow(2, -pattern[inversion] / 12);\n            \n            results.push({\n              chord: chordName as keyof typeof MusicTheory.CHORD_PATTERNS,\n              confidence,\n              root: FrequencyUtils.frequencyToNote(rootFreq),\n              inversion: inversion > 0 ? inversion : undefined\n            });\n          }\n        });\n      }\n    });\n\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n  }\n\n  /**\n   * Get the key signature for a given key\n   */\n  static getKeySignature(key: string, mode: 'major' | 'minor' = 'major'): {\n    sharps: string[];\n    flats: string[];\n    accidentalCount: number;\n  } {\n    // Order of sharps: F# C# G# D# A# E# B#\n    const sharpOrder = ['F', 'C', 'G', 'D', 'A', 'E', 'B'];\n    // Order of flats: Bb Eb Ab Db Gb Cb Fb\n    const flatOrder = ['B', 'E', 'A', 'D', 'G', 'C', 'F'];\n    \n    // Major key signatures\n    const majorKeys = {\n      'C': { sharps: 0, flats: 0 },\n      'G': { sharps: 1, flats: 0 },\n      'D': { sharps: 2, flats: 0 },\n      'A': { sharps: 3, flats: 0 },\n      'E': { sharps: 4, flats: 0 },\n      'B': { sharps: 5, flats: 0 },\n      'F#': { sharps: 6, flats: 0 },\n      'C#': { sharps: 7, flats: 0 },\n      'F': { sharps: 0, flats: 1 },\n      'Bb': { sharps: 0, flats: 2 },\n      'Eb': { sharps: 0, flats: 3 },\n      'Ab': { sharps: 0, flats: 4 },\n      'Db': { sharps: 0, flats: 5 },\n      'Gb': { sharps: 0, flats: 6 },\n      'Cb': { sharps: 0, flats: 7 }\n    };\n\n    // Adjust for minor keys (relative minor is 3 semitones below major)\n    let keySignature = majorKeys[key as keyof typeof majorKeys];\n    \n    if (!keySignature && mode === 'minor') {\n      // Find relative major\n      const minorToMajor = {\n        'A': 'C', 'E': 'G', 'B': 'D', 'F#': 'A', 'C#': 'E', 'G#': 'B', 'D#': 'F#', 'A#': 'C#',\n        'D': 'F', 'G': 'Bb', 'C': 'Eb', 'F': 'Ab', 'Bb': 'Db', 'Eb': 'Gb', 'Ab': 'Cb'\n      };\n      \n      const relativeMajor = minorToMajor[key as keyof typeof minorToMajor];\n      if (relativeMajor) {\n        keySignature = majorKeys[relativeMajor as keyof typeof majorKeys];\n      }\n    }\n\n    if (!keySignature) {\n      return { sharps: [], flats: [], accidentalCount: 0 };\n    }\n\n    const sharps = sharpOrder.slice(0, keySignature.sharps).map(note => note + '#');\n    const flats = flatOrder.slice(0, keySignature.flats).map(note => note + 'b');\n    \n    return {\n      sharps,\n      flats,\n      accidentalCount: keySignature.sharps || keySignature.flats\n    };\n  }\n\n  /**\n   * Calculate the harmonic series for a fundamental frequency\n   */\n  static getHarmonicSeries(fundamental: number, harmonicCount: number = 16): MusicalNote[] {\n    const harmonics: MusicalNote[] = [];\n    \n    for (let i = 1; i <= harmonicCount; i++) {\n      const frequency = fundamental * i;\n      harmonics.push(FrequencyUtils.frequencyToNote(frequency));\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Calculate just intonation ratios for common intervals\n   */\n  static getJustIntonationRatios(): { [key: string]: { ratio: number; cents: number } } {\n    return {\n      'unison': { ratio: 1/1, cents: 0 },\n      'minorSecond': { ratio: 16/15, cents: 112 },\n      'majorSecond': { ratio: 9/8, cents: 204 },\n      'minorThird': { ratio: 6/5, cents: 316 },\n      'majorThird': { ratio: 5/4, cents: 386 },\n      'perfectFourth': { ratio: 4/3, cents: 498 },\n      'tritone': { ratio: 45/32, cents: 590 },\n      'perfectFifth': { ratio: 3/2, cents: 702 },\n      'minorSixth': { ratio: 8/5, cents: 814 },\n      'majorSixth': { ratio: 5/3, cents: 884 },\n      'minorSeventh': { ratio: 16/9, cents: 996 },\n      'majorSeventh': { ratio: 15/8, cents: 1088 },\n      'octave': { ratio: 2/1, cents: 1200 }\n    };\n  }\n\n  /**\n   * Convert equal temperament interval to just intonation\n   */\n  static equalTemperamentToJustIntonation(semitones: number): {\n    ratio: number;\n    cents: number;\n    closestJustInterval?: string;\n    centsDeviation?: number;\n  } {\n    const equalTempCents = semitones * 100;\n    const justRatios = MusicTheory.getJustIntonationRatios();\n    \n    // Find closest just intonation interval\n    let closestInterval: string | undefined;\n    let smallestDeviation = Infinity;\n    \n    Object.entries(justRatios).forEach(([intervalName, { cents }]) => {\n      const deviation = Math.abs(equalTempCents - cents);\n      if (deviation < smallestDeviation) {\n        smallestDeviation = deviation;\n        closestInterval = intervalName;\n      }\n    });\n    \n    const ratio = Math.pow(2, semitones / 12);\n    \n    return {\n      ratio,\n      cents: equalTempCents,\n      closestJustInterval: closestInterval,\n      centsDeviation: closestInterval ? smallestDeviation : undefined\n    };\n  }\n\n  /**\n   * Analyze melodic intervals in a sequence of notes\n   */\n  static analyzeMelody(frequencies: number[]): Array<{\n    fromNote: MusicalNote;\n    toNote: MusicalNote;\n    interval: MusicalInterval;\n    direction: 'up' | 'down' | 'same';\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const analysis: Array<{\n      fromNote: MusicalNote;\n      toNote: MusicalNote;\n      interval: MusicalInterval;\n      direction: 'up' | 'down' | 'same';\n    }> = [];\n\n    for (let i = 1; i < frequencies.length; i++) {\n      const fromFreq = frequencies[i - 1];\n      const toFreq = frequencies[i];\n      \n      const fromNote = FrequencyUtils.frequencyToNote(fromFreq);\n      const toNote = FrequencyUtils.frequencyToNote(toFreq);\n      \n      const semitones = FrequencyUtils.getSignedInterval(fromFreq, toFreq);\n      const interval = FrequencyUtils.getIntervalInfo(Math.abs(semitones));\n      \n      const direction = semitones > 0 ? 'up' : semitones < 0 ? 'down' : 'same';\n      \n      analysis.push({\n        fromNote,\n        toNote,\n        interval,\n        direction\n      });\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Generate chord progressions in a given key\n   */\n  static generateChordProgression(\n    key: string, \n    mode: 'major' | 'minor' = 'major',\n    progression: number[] = [1, 4, 5, 1] // Roman numerals as scale degrees\n  ): MusicalNote[][] {\n    const rootFreq = FrequencyUtils.scientificPitchToFrequency(key + '4');\n    if (rootFreq === 0) {\n      throw new Error(`Invalid key: ${key}`);\n    }\n\n    const scale = MusicTheory.generateScale(rootFreq, mode === 'minor' ? 'naturalMinor' : 'major');\n    const chords: MusicalNote[][] = [];\n\n    progression.forEach(degree => {\n      const chordRoot = scale[(degree - 1) % scale.length];\n      const chordType = mode === 'major' \n        ? MusicTheory.getMajorScaleChordType(degree)\n        : MusicTheory.getMinorScaleChordType(degree);\n      \n      const chord = MusicTheory.generateChord(chordRoot.frequency, chordType);\n      chords.push(chord);\n    });\n\n    return chords;\n  }\n\n  /**\n   * Get chord type for scale degree in major scale\n   */\n  private static getMajorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n\n  /**\n   * Get chord type for scale degree in minor scale\n   */\n  private static getMinorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n}","/**\n * PitchPro Audio Processing Library\n * High-precision pitch detection and audio processing for web applications\n * \n * @version 1.2.1 (自動同期)\n * @author PitchPro Team\n * @license MIT\n */\n\n// Core exports\nexport { AudioManager } from './core/AudioManager';\nexport { PitchDetector } from './core/PitchDetector';\nexport { NoiseFilter } from './core/NoiseFilter';\nexport { MicrophoneLifecycleManager } from './core/MicrophoneLifecycleManager';\nexport type { LifecycleManagerConfig } from './core/MicrophoneLifecycleManager';\nexport { MicrophoneController } from './core/MicrophoneController';\nexport type { MicrophoneControllerConfig } from './core/MicrophoneController';\nexport { ErrorNotificationSystem } from './core/ErrorNotificationSystem';\n\n// Component exports\nexport { AudioDetectionComponent } from './components/AudioDetectionComponent';\nexport type { AudioDetectionConfig, AudioDetectionCallbacks } from './components/AudioDetectionComponent';\n\n// Advanced exports\nexport { HarmonicCorrection } from './advanced/HarmonicCorrection';\nexport { VoiceAnalyzer } from './advanced/VoiceAnalyzer';\nexport { CalibrationSystem } from './advanced/CalibrationSystem';\n\n// Utils exports\nexport { FrequencyUtils } from './utils/FrequencyUtils';\nexport { MusicTheory } from './utils/MusicTheory';\nexport { DeviceDetection } from './utils/DeviceDetection';\nexport { Logger, LogLevel, defaultLogger, debug, info, warn, error } from './utils/Logger';\nexport type { LogContext, LogEntry } from './utils/Logger';\nexport { MicrophoneHealthError } from './utils/errors';\n\n// Type exports\nexport type {\n  AudioManagerConfig,\n  PitchDetectorConfig,\n  PitchDetectionResult,\n  NoiseFilterConfig,\n  HarmonicCorrectionResult,\n  NotificationConfig,\n  MusicalNote,\n  MusicalInterval,\n  VoiceAnalysis,\n  DeviceSpecs\n} from './types';\n\n// Constants (自動注入 - package.jsonと同期)\nexport const VERSION = process.env.npm_package_version || '1.2.1';\nexport const BUILD_DATE = new Date().toISOString();\n\n// Default configurations\nexport const DEFAULT_CONFIG = {\n  pitchDetector: {\n    fftSize: 4096,\n    smoothing: 0.1,\n    clarityThreshold: 0.4,    // 現実的な値に修正\n    minVolumeAbsolute: 0.020  // 🔧 環境適応ノイズゲート: 10%閾値でマイクノイズを確実にブロック\n  },\n  audioManager: {\n    sampleRate: 44100,\n    channelCount: 1,\n    echoCancellation: false,\n    noiseSuppression: false, // 独自フィルター優先（PitchPro 3段階フィルタリング使用）\n    autoGainControl: false\n  },\n  noiseFilter: {\n    highpassFreq: 50,  // 深い男性の声に対応（G1 49Hzまで）\n    lowpassFreq: 800,\n    notchFreq: 50,     // 🔧 日本の電源周波数50Hzに合わせて電源ハムノイズを除去\n    highpassQ: 0.7,    // 個別に設定\n    lowpassQ: 0.7,     // 個別に設定\n    notchQ: 10.0       // ノッチフィルターは通常、より高いQ値を持つ\n  }\n} as const;;"],"names":["_DeviceDetection","userAgent","deviceSpecs","isIPhone","isIPad","isIPadOS","hasIOSNavigator","hasIOSPlatform","isIOS","deviceType","optimizations","screenWidth","screenHeight","maxDimension","minDimension","_isIOS","specs","baseConstraints","DeviceDetection","ErrorCode","PitchProError","message","code","context","AudioContextError","MicrophoneAccessError","MicrophoneHealthError","healthStatus","recoveryAttempts","_a","PitchDetectionError","isRecoverableError","error","ErrorMessageBuilder","friendlyMessage","technicalDetails","base","immediate","fallback","preventive","AudioManager","config","_b","_c","healthCheck","t","resolve","result","audioConstraints","audioTrack","actualConstraints","actualSettings","tracks","structuredError","id","options","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","useFilters","analyser","finalNode","filterChain","highpass","lowpass","notch","expectedGain","timeout","interval","startTime","sensitivity","clampedSensitivity","actualGain","track","analyserIds","index","trackError","contextError","operation","_d","_e","_f","_g","_h","trackStates","FFT","size","table","i","angle","power","j","shift","revShift","fft","complex","storage","res","input","spectrum","half","out","data","width","step","len","outOff","bitrev","off","inv","quarterLen","limit","k","A","B","C","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","halfLen","hquarterLen","ST0r","ST0i","ST1r","ST1i","ST2r","ST2i","ST3r","ST3i","SFAr","SFAi","SFBr","SFBi","SA","SB","Autocorrelator","inputLength","bufferSupplier","__publicField","ceilPow2","length","output","tb","getKeyMaximumIndices","keyIndices","lookingForMaximum","max","maxIndex","refineResultIndex","x0","x1","x2","y0","y1","y2","b","c","xMax","yMax","PitchDetector$1","PitchDetector","threshold","volume","db","amplitude","sampleRate","keyMaximumIndices","nMax","resultIndex","refinedResultIndex","clarity","squareSum","m","v","AdaptiveFrameRateLimiter","initialFPS","now","audioManager","callbacks","filteredAnalyserId","rawAnalyserId","PitchyDetector","pitchError","_i","_j","_k","_l","_m","IS_DEBUG_MODE","frameStartTime","audioManagerStatus","bufferLength","buffer","rawBuffer","nonZeroCount","val","maxValue","sum","rms","platformSpecs","adjustedRms","currentSensitivity","SCALING_FACTOR","NOISE_GATE_SCALING_FACTOR","rawVolumeValue","volumePercent","rawSum","rawAdjustedRms","rawVolumePercent","NOISE_GATE_THRESHOLD","isSignalBelowNoiseGate","pitch","pitchResult","isValidVocalRange","finalFreq","normalizedVolume","noteInfo","displayVolume","frameProcessTime","frequency","h","avgFrequency","octaveUp","octaveDown","diffCurrent","diffUp","diffDown","correctedFrequency","noteNames","semitonesFromA4","noteIndex","octave","nearestSemitone","centsDeviation","currentVolume","volumeThreshold","silenceDuration","duration","selector","element","enabled","_result","NoiseFilter","audioContext","inputNode","outputNode","connectionError","params","currentTime","updateError","savedOutputNode","frequencyArray","magnitudeArray","phaseArray","highpassMagnitude","lowpassMagnitude","notchMagnitude","responseError","preset","LogLevel","Logger","level","prefix","defaultContext","listener","additionalContext","childPrefix","childContext","child","entry","errorContext","timestamp","levelStr","baseMessage","consoleMethod","defaultLogger","debug","info","warn","err","MicrophoneLifecycleManager","userConfig","target","eventName","key","resources","visibilityChangeHandler","activityHandler","unloadHandler","focusHandler","blurHandler","healthError","timeSinceActivity","detail","event","newConfig","previousAttempts","ErrorNotificationSystem","existingContainer","css","style","notification","oldestId","title","details","list","item","solution","closeButton","resource","styleElement","MicrophoneController","state","oldSensitivity","newSensitivity","component","detector","durationMs","maxVolume","detectedFrequency","endTime","checkAudio","dataArray","value","success","frequencyDisplay","testError","newState","oldState","type","_FrequencyUtils","midiNumber","useFlats","nearestMidi","cents","ratio","frequency1","frequency2","midi1","midi2","fromFrequency","toFrequency","semitones","intervalNames","normalizedSemitones","octaves","baseName","instrument","baseFrequency","frequencies","fundamental","maxHarmonic","harmonics","tolerance","nearestInteger","harmonicFrequency","harmonicNumber","scientificPitch","match","noteName","octaveStr","semitoneOffset","baseNote","accidental","decimalPlaces","FrequencyUtils","_AudioDetectionComponent","ms","hasUISelectors","pitchDetectorConfig","pitchDetectorStatus","currentElement","selectors","wasUIUpdating","deviceSettingsMap","allPossibleSelectors","text","currentText","currentHTML","rawResult","processedResult","volumeMultiplier","finalVolume","args","AudioDetectionComponent","HarmonicCorrection","analysis","recentFrequencies","fundamentalCandidates","bestCandidate","candidate","confidence","candidates","harmonicNum","exactHarmonic","centDeviation","likelihood","a","_harmonicNumber","totalConfidence","validMeasurements","freq","closestHarmonicNum","expectedFreq","avgConfidence","stabilityBonus","volumeConfidence","stabilityConfidence","lastFreq","freqRatio","cutoffTime","confidences","conf","minFreq","maxFreq","mean","variance","coefficientOfVariation","stabilityScore","VoiceQuality","VoiceAnalyzer","spectralData","stability","vibrato","breathiness","consistency","quality","recommendations","validFrequencies","deviationCents","f","smoothed","extrema","timeSpan","rate","depths","freq1","freq2","averageDepth","depth","periods","period","regularity","periodMean","p","periodVariance","fundamentalBin","noiseBins","fundamentalEnergy","noiseEnergy","noiseRatio","volumes","clarities","volumeConsistency","clarityConsistency","values","weights","score","windowSize","count","start","end","prev","curr","next","vol","CalibrationSystem","mediaStream","noiseProfile","volumeCalibration","frequencyResponse","optimalSettings","source","measurements","measureNoise","avgNoise","bin","measurement","volumeMeasurements","measureVolume","min","offset","responseMap","measureResponse","avgResponse","freqStr","avg","baseSettings","sensitivityAdjustment","adjustedSensitivity","vocalRangeNoise","noiseGateAdjustment","adjustedNoiseGate","responseLevels","lowFreqResponse","midFreqResponse","highFreqResponse","lowAvg","midAvg","highAvg","audioProcessor","settings","calibrationKey","dataToSave","savedData","parsedData","maxAge","_MusicTheory","rootFrequency","scaleType","pattern","chordType","sortedFreqs","baseFreq","intervals","results","scaleName","rootOffset","adjustedPattern","normalizedIntervals","matches","rootFreq","chordName","inversion","invertedPattern","bassFreq","_bassIndex","patternSet","normalizedInterval","mode","sharpOrder","flatOrder","majorKeys","keySignature","relativeMajor","sharps","note","flats","harmonicCount","equalTempCents","justRatios","closestInterval","smallestDeviation","intervalName","deviation","fromFreq","toFreq","fromNote","toNote","direction","progression","scale","chords","degree","chordRoot","chord","MusicTheory","VERSION","BUILD_DATE","DEFAULT_CONFIG"],"mappings":"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","x_google_ignoreList":[3,4]}