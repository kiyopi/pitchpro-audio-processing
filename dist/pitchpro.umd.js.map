{"version":3,"file":"pitchpro.umd.js","sources":["../src/utils/version.ts","../src/utils/DeviceDetection.ts","../src/utils/errors.ts","../src/core/AudioManager.ts","../node_modules/fft.js/lib/fft.js","../node_modules/pitchy/index.js","../src/utils/performance-optimized.ts","../src/core/PitchDetector.ts","../src/core/NoiseFilter.ts","../src/utils/Logger.ts","../src/core/MicrophoneLifecycleManager.ts","../src/core/ErrorNotificationSystem.ts","../src/core/MicrophoneController.ts","../src/utils/FrequencyUtils.ts","../src/components/AudioDetectionComponent.ts","../src/advanced/HarmonicCorrection.ts","../src/types/index.ts","../src/advanced/VoiceAnalyzer.ts","../src/advanced/CalibrationSystem.ts","../node_modules/tone/build/esm/version.js","../node_modules/automation-events/build/es2019/functions/create-extended-exponential-ramp-to-value-automation-event.js","../node_modules/automation-events/build/es2019/functions/create-extended-linear-ramp-to-value-automation-event.js","../node_modules/automation-events/build/es2019/functions/create-set-value-automation-event.js","../node_modules/automation-events/build/es2019/functions/create-set-value-curve-automation-event.js","../node_modules/automation-events/build/es2019/functions/get-target-value-at-time.js","../node_modules/automation-events/build/es2019/guards/exponential-ramp-to-value-automation-event.js","../node_modules/automation-events/build/es2019/guards/linear-ramp-to-value-automation-event.js","../node_modules/automation-events/build/es2019/guards/any-ramp-to-value-automation-event.js","../node_modules/automation-events/build/es2019/guards/set-value-automation-event.js","../node_modules/automation-events/build/es2019/guards/set-value-curve-automation-event.js","../node_modules/automation-events/build/es2019/functions/get-value-of-automation-event-at-index-at-time.js","../node_modules/automation-events/build/es2019/functions/get-end-time-and-value-of-previous-automation-event.js","../node_modules/automation-events/build/es2019/guards/cancel-and-hold-automation-event.js","../node_modules/automation-events/build/es2019/guards/cancel-scheduled-values-automation-event.js","../node_modules/automation-events/build/es2019/functions/get-event-time.js","../node_modules/automation-events/build/es2019/functions/get-exponential-ramp-value-at-time.js","../node_modules/automation-events/build/es2019/functions/get-linear-ramp-value-at-time.js","../node_modules/automation-events/build/es2019/functions/interpolate-value.js","../node_modules/automation-events/build/es2019/functions/get-value-curve-value-at-time.js","../node_modules/automation-events/build/es2019/guards/set-target-automation-event.js","../node_modules/automation-events/build/es2019/classes/automation-event-list.js","../node_modules/automation-events/build/es2019/functions/create-cancel-and-hold-automation-event.js","../node_modules/automation-events/build/es2019/functions/create-cancel-scheduled-values-automation-event.js","../node_modules/automation-events/build/es2019/functions/create-exponential-ramp-to-value-automation-event.js","../node_modules/automation-events/build/es2019/functions/create-linear-ramp-to-value-automation-event.js","../node_modules/automation-events/build/es2019/functions/create-set-target-automation-event.js","../node_modules/standardized-audio-context/build/es2019/factories/abort-error.js","../node_modules/standardized-audio-context/build/es2019/factories/add-active-input-connection-to-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/add-audio-node-connections.js","../node_modules/standardized-audio-context/build/es2019/factories/add-audio-param-connections.js","../node_modules/standardized-audio-context/build/es2019/globals.js","../node_modules/standardized-audio-context/build/es2019/helpers/is-constructible.js","../node_modules/standardized-audio-context/build/es2019/helpers/split-import-statements.js","../node_modules/standardized-audio-context/build/es2019/factories/add-audio-worklet-module.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-value-for-key.js","../node_modules/standardized-audio-context/build/es2019/helpers/pick-element-from-set.js","../node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-event-listeners-of-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-active.js","../node_modules/standardized-audio-context/build/es2019/guards/audio-worklet-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive.js","../node_modules/standardized-audio-context/build/es2019/helpers/set-internal-state-to-passive-when-necessary.js","../node_modules/standardized-audio-context/build/es2019/factories/add-connection-to-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/add-passive-input-connection-to-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/add-silent-connection.js","../node_modules/standardized-audio-context/build/es2019/factories/add-unrendered-audio-worklet-node.js","../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/helpers/is-owned-by-context.js","../node_modules/standardized-audio-context/build/es2019/factories/analyser-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support.js","../node_modules/standardized-audio-context/build/es2019/factories/index-size-error.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-get-channel-data-method.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-constructor.js","../node_modules/standardized-audio-context/build/es2019/constants.js","../node_modules/standardized-audio-context/build/es2019/helpers/is-active-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-buffer-source-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/guards/audio-buffer-source-node.js","../node_modules/standardized-audio-context/build/es2019/guards/biquad-filter-node.js","../node_modules/standardized-audio-context/build/es2019/guards/constant-source-node.js","../node_modules/standardized-audio-context/build/es2019/guards/gain-node.js","../node_modules/standardized-audio-context/build/es2019/guards/oscillator-node.js","../node_modules/standardized-audio-context/build/es2019/guards/stereo-panner-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-node-connections.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-param-connections.js","../node_modules/standardized-audio-context/build/es2019/helpers/deactivate-active-audio-node-input-connections.js","../node_modules/standardized-audio-context/build/es2019/helpers/deactivate-audio-graph.js","../node_modules/standardized-audio-context/build/es2019/helpers/is-valid-latency-hint.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-context-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-destination-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-listener-factory.js","../node_modules/standardized-audio-context/build/es2019/guards/audio-node.js","../node_modules/standardized-audio-context/build/es2019/guards/audio-node-output-connection.js","../node_modules/standardized-audio-context/build/es2019/helpers/insert-element-in-set.js","../node_modules/standardized-audio-context/build/es2019/helpers/add-active-input-connection-to-audio-param.js","../node_modules/standardized-audio-context/build/es2019/helpers/add-passive-input-connection-to-audio-param.js","../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node-faker.js","../node_modules/standardized-audio-context/build/es2019/helpers/connect-native-audio-node-to-native-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection.js","../node_modules/standardized-audio-context/build/es2019/helpers/delete-active-input-connection-to-audio-param.js","../node_modules/standardized-audio-context/build/es2019/helpers/delete-event-listeners-of-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/delete-passive-input-connection-to-audio-param.js","../node_modules/standardized-audio-context/build/es2019/helpers/disconnect-native-audio-node-from-native-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-native-audio-param.js","../node_modules/standardized-audio-context/build/es2019/helpers/is-part-of-a-cycle.js","../node_modules/standardized-audio-context/build/es2019/helpers/is-passive-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-node-disconnect-method-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/visit-each-audio-node-once.js","../node_modules/standardized-audio-context/build/es2019/guards/native-audio-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-node-disconnect-method.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-param-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-param-renderer.js","../node_modules/standardized-audio-context/build/es2019/read-only-map.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/helpers/copy-from-channel.js","../node_modules/standardized-audio-context/build/es2019/helpers/copy-to-channel.js","../node_modules/standardized-audio-context/build/es2019/helpers/create-nested-arrays.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-audio-worklet-processor.js","../node_modules/standardized-audio-context/build/es2019/factories/audio-worklet-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/base-audio-context-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/biquad-filter-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/cache-test-result.js","../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/channel-merger-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/channel-splitter-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/connect-audio-param.js","../node_modules/standardized-audio-context/build/es2019/factories/connect-multiple-outputs.js","../node_modules/standardized-audio-context/build/es2019/factories/connected-native-audio-buffer-source-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/constant-source-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/convert-number-to-unsigned-long.js","../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/convolver-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/create-native-offline-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/data-clone-error.js","../node_modules/standardized-audio-context/build/es2019/helpers/detach-array-buffer.js","../node_modules/standardized-audio-context/build/es2019/factories/decode-audio-data.js","../node_modules/standardized-audio-context/build/es2019/factories/decrement-cycle-counter.js","../node_modules/standardized-audio-context/build/es2019/factories/delay-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/delay-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/delete-active-input-connection-to-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/delete-unrendered-audio-worklet-node.js","../node_modules/standardized-audio-context/build/es2019/guards/delay-node.js","../node_modules/standardized-audio-context/build/es2019/factories/detect-cycles.js","../node_modules/standardized-audio-context/build/es2019/factories/disconnect-multiple-outputs.js","../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/dynamics-compressor-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/encoding-error.js","../node_modules/standardized-audio-context/build/es2019/factories/evaluate-source.js","../node_modules/standardized-audio-context/build/es2019/factories/event-target-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/expose-current-frame-and-current-time.js","../node_modules/standardized-audio-context/build/es2019/factories/fetch-source.js","../node_modules/standardized-audio-context/build/es2019/factories/gain-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/gain-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/get-active-audio-worklet-node-inputs.js","../node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-renderer.js","../node_modules/standardized-audio-context/build/es2019/factories/get-audio-node-tail-time.js","../node_modules/standardized-audio-context/build/es2019/factories/get-audio-param-renderer.js","../node_modules/standardized-audio-context/build/es2019/factories/get-backup-offline-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/invalid-state-error.js","../node_modules/standardized-audio-context/build/es2019/factories/get-native-context.js","../node_modules/standardized-audio-context/build/es2019/factories/get-or-create-backup-offline-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/get-unrendered-audio-worklet-nodes.js","../node_modules/standardized-audio-context/build/es2019/factories/invalid-access-error.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-iir-filter-node-get-frequency-response-method.js","../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/helpers/filter-buffer.js","../node_modules/standardized-audio-context/build/es2019/factories/iir-filter-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/increment-cycle-counter-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/is-any-audio-param.js","../node_modules/standardized-audio-context/build/es2019/factories/is-any-offline-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/is-native-audio-param.js","../node_modules/standardized-audio-context/build/es2019/factories/is-native-context.js","../node_modules/standardized-audio-context/build/es2019/factories/is-native-offline-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/is-secure-context.js","../node_modules/standardized-audio-context/build/es2019/factories/media-element-audio-source-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-destination-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/media-stream-audio-source-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/media-stream-track-audio-source-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/minimal-base-audio-context-constructor.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-promise-support.js","../node_modules/standardized-audio-context/build/es2019/factories/monitor-connections.js","../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-option.js","../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-options.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-analyser-node-get-float-time-domain-data-method-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-analyser-node-get-float-time-domain-data-method.js","../node_modules/standardized-audio-context/build/es2019/factories/native-analyser-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-constructor.js","../node_modules/standardized-audio-context/build/es2019/helpers/assign-native-audio-node-audio-param-value.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters.js","../node_modules/standardized-audio-context/build/es2019/factories/native-audio-buffer-source-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-audio-context-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/native-audio-destination-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-clonability-of-audio-worklet-node-options.js","../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-factory.js","../node_modules/standardized-audio-context/build/es2019/helpers/compute-buffer-size.js","../node_modules/standardized-audio-context/build/es2019/helpers/clone-audio-worklet-node-options.js","../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor-promise.js","../node_modules/standardized-audio-context/build/es2019/helpers/create-audio-worklet-processor.js","../node_modules/standardized-audio-context/build/es2019/factories/native-audio-worklet-node-faker-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-biquad-filter-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-channel-merger-node-factory.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-channel-splitter-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-channel-splitter-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-factory.js","../node_modules/standardized-audio-context/build/es2019/helpers/intercept-connections.js","../node_modules/standardized-audio-context/build/es2019/factories/native-constant-source-node-faker-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-convolver-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-delay-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-dynamics-compressor-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-gain-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-iir-filter-node-faker-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-media-element-audio-source-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-destination-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-audio-source-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-media-stream-track-audio-source-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-offline-audio-context-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/native-oscillator-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-panner-node-faker-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-periodic-wave-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-script-processor-node.js","../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-stereo-panner-node-faker-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/native-wave-shaper-node-faker-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/not-supported-error.js","../node_modules/standardized-audio-context/build/es2019/factories/offline-audio-context-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/oscillator-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/panner-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/panner-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/periodic-wave-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/render-automation.js","../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-node.js","../node_modules/standardized-audio-context/build/es2019/factories/render-inputs-of-audio-param.js","../node_modules/standardized-audio-context/build/es2019/factories/render-native-offline-audio-context.js","../node_modules/standardized-audio-context/build/es2019/factories/set-active-audio-worklet-node-inputs.js","../node_modules/standardized-audio-context/build/es2019/factories/set-audio-node-tail-time.js","../node_modules/standardized-audio-context/build/es2019/factories/start-rendering.js","../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/stereo-panner-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/test-audio-buffer-constructor-support.js","../node_modules/standardized-audio-context/build/es2019/factories/test-audio-worklet-processor-post-message-support.js","../node_modules/standardized-audio-context/build/es2019/factories/test-offline-audio-context-current-time-support.js","../node_modules/standardized-audio-context/build/es2019/factories/unknown-error.js","../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-constructor.js","../node_modules/standardized-audio-context/build/es2019/factories/wave-shaper-node-renderer-factory.js","../node_modules/standardized-audio-context/build/es2019/factories/window.js","../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods.js","../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds.js","../node_modules/standardized-audio-context/build/es2019/factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer.js","../node_modules/standardized-audio-context/build/es2019/factories/wrap-channel-merger-node.js","../node_modules/standardized-audio-context/build/es2019/helpers/get-first-sample.js","../node_modules/standardized-audio-context/build/es2019/helpers/is-dc-curve.js","../node_modules/standardized-audio-context/build/es2019/helpers/overwrite-accessors.js","../node_modules/standardized-audio-context/build/es2019/helpers/sanitize-audio-worklet-node-options.js","../node_modules/standardized-audio-context/build/es2019/helpers/sanitize-channel-splitter-options.js","../node_modules/standardized-audio-context/build/es2019/helpers/sanitize-periodic-wave-options.js","../node_modules/standardized-audio-context/build/es2019/helpers/set-value-at-time-until-possible.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-start-method-offset-clamping-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support.js","../node_modules/standardized-audio-context/build/es2019/helpers/test-audio-worklet-node-options-clonability.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-buffer-source-node-start-method-offset-clamping.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js","../node_modules/standardized-audio-context/build/es2019/helpers/wrap-event-listener.js","../node_modules/standardized-audio-context/build/es2019/module.js","../node_modules/tone/build/esm/core/util/TypeCheck.js","../node_modules/tone/build/esm/core/util/Debug.js","../node_modules/tone/build/esm/core/context/AudioContext.js","../node_modules/tslib/tslib.es6.mjs","../node_modules/tone/build/esm/core/clock/Ticker.js","../node_modules/tone/build/esm/core/util/AdvancedTypeCheck.js","../node_modules/tone/build/esm/core/util/Defaults.js","../node_modules/tone/build/esm/core/Tone.js","../node_modules/tone/build/esm/core/util/Math.js","../node_modules/tone/build/esm/core/util/Timeline.js","../node_modules/tone/build/esm/core/context/ContextInitialization.js","../node_modules/tone/build/esm/core/util/Emitter.js","../node_modules/tone/build/esm/core/context/BaseContext.js","../node_modules/tone/build/esm/core/context/Context.js","../node_modules/tone/build/esm/core/context/DummyContext.js","../node_modules/tone/build/esm/core/util/Interface.js","../node_modules/tone/build/esm/core/context/ToneAudioBuffer.js","../node_modules/tone/build/esm/core/context/OfflineContext.js","../node_modules/tone/build/esm/core/Global.js","../node_modules/tone/build/esm/core/type/Conversions.js","../node_modules/tone/build/esm/core/type/TimeBase.js","../node_modules/tone/build/esm/core/type/Time.js","../node_modules/tone/build/esm/core/type/Frequency.js","../node_modules/tone/build/esm/core/type/TransportTime.js","../node_modules/tone/build/esm/core/context/ToneWithContext.js","../node_modules/tone/build/esm/core/util/StateTimeline.js","../node_modules/tone/build/esm/core/context/Param.js","../node_modules/tone/build/esm/core/context/ToneAudioNode.js","../node_modules/tone/build/esm/core/context/Gain.js","../node_modules/tone/build/esm/source/OneShotSource.js","../node_modules/tone/build/esm/signal/ToneConstantSource.js","../node_modules/tone/build/esm/signal/Signal.js","../node_modules/tone/build/esm/core/clock/TickParam.js","../node_modules/tone/build/esm/core/clock/TickSignal.js","../node_modules/tone/build/esm/core/clock/TickSource.js","../node_modules/tone/build/esm/core/clock/Clock.js","../node_modules/tone/build/esm/component/channel/Volume.js","../node_modules/tone/build/esm/core/context/Destination.js","../node_modules/tone/build/esm/core/context/Listener.js","../node_modules/tone/build/esm/core/context/ToneAudioBuffers.js","../node_modules/tone/build/esm/core/type/Ticks.js","../node_modules/tone/build/esm/core/util/Draw.js","../node_modules/tone/build/esm/core/util/IntervalTimeline.js","../node_modules/tone/build/esm/core/util/TimelineValue.js","../node_modules/tone/build/esm/signal/SignalOperator.js","../node_modules/tone/build/esm/signal/WaveShaper.js","../node_modules/tone/build/esm/signal/Pow.js","../node_modules/tone/build/esm/core/clock/TransportEvent.js","../node_modules/tone/build/esm/core/clock/TransportRepeatEvent.js","../node_modules/tone/build/esm/core/clock/Transport.js","../node_modules/tone/build/esm/source/Source.js","../node_modules/tone/build/esm/source/buffer/ToneBufferSource.js","../node_modules/tone/build/esm/source/oscillator/OscillatorInterface.js","../node_modules/tone/build/esm/source/oscillator/ToneOscillatorNode.js","../node_modules/tone/build/esm/source/oscillator/Oscillator.js","../node_modules/tone/build/esm/signal/AudioToGain.js","../node_modules/tone/build/esm/signal/Multiply.js","../node_modules/tone/build/esm/source/oscillator/AMOscillator.js","../node_modules/tone/build/esm/source/oscillator/FMOscillator.js","../node_modules/tone/build/esm/source/oscillator/PulseOscillator.js","../node_modules/tone/build/esm/source/oscillator/FatOscillator.js","../node_modules/tone/build/esm/source/oscillator/PWMOscillator.js","../node_modules/tone/build/esm/source/oscillator/OmniOscillator.js","../node_modules/tone/build/esm/core/util/Decorator.js","../node_modules/tone/build/esm/source/buffer/Player.js","../node_modules/tone/build/esm/component/envelope/Envelope.js","../node_modules/tone/build/esm/instrument/Instrument.js","../node_modules/tone/build/esm/instrument/Monophonic.js","../node_modules/tone/build/esm/component/envelope/AmplitudeEnvelope.js","../node_modules/tone/build/esm/instrument/Synth.js","../node_modules/tone/build/esm/instrument/MembraneSynth.js","../node_modules/tone/build/esm/core/worklet/WorkletGlobalScope.js","../node_modules/tone/build/esm/core/worklet/ToneAudioWorkletProcessor.worklet.js","../node_modules/tone/build/esm/core/worklet/SingleIOProcessor.worklet.js","../node_modules/tone/build/esm/core/worklet/DelayLine.worklet.js","../node_modules/tone/build/esm/component/filter/FeedbackCombFilter.worklet.js","../node_modules/tone/build/esm/instrument/Sampler.js","../node_modules/tone/build/esm/component/channel/Panner.js","../node_modules/tone/build/esm/effect/BitCrusher.worklet.js","../node_modules/tone/build/esm/component/channel/Solo.js","../node_modules/tone/build/esm/component/channel/PanVol.js","../node_modules/tone/build/esm/component/channel/Channel.js","../node_modules/tone/build/esm/index.js","../src/advanced/PitchShifter.ts","../src/utils/MusicTheory.ts","../src/index.ts"],"sourcesContent":["/**\n * Library version information\n * Auto-synced with package.json during build\n */\nexport const VERSION = '1.3.1';;\n\n/**\n * Version display string for debug logs\n */\nexport const VERSION_STRING = `PitchPro v${VERSION}`;\n\n/**\n * Build timestamp (will be replaced during build)\n */\nexport const BUILD_TIMESTAMP = new Date().toISOString();","/**\n * DeviceDetection - Cross-platform device detection and optimization\n * \n * Detects device types, capabilities, and provides optimized settings\n * Handles iPadOS 13+ detection issues and provides device-specific configurations\n */\n\nimport type { DeviceSpecs } from '../types';\n\nexport class DeviceDetection {\n  private static cachedSpecs: DeviceSpecs | null = null;\n\n  /**\n   * Detect current device and return optimized specifications\n   */\n  static getDeviceSpecs(): DeviceSpecs {\n    // Return cached result if available\n    if (DeviceDetection.cachedSpecs) {\n      return DeviceDetection.cachedSpecs;\n    }\n\n    // SSR compatibility\n    if (typeof window === 'undefined' || typeof navigator === 'undefined') {\n      return DeviceDetection.getDefaultSpecs();\n    }\n\n    const userAgent = navigator.userAgent;\n    const deviceSpecs = DeviceDetection.analyzeUserAgent(userAgent);\n    \n    // Cache the result\n    DeviceDetection.cachedSpecs = deviceSpecs;\n    \n    console.log('📱 [DeviceDetection] Device analysis:', {\n      userAgent: userAgent.substring(0, 100) + '...',\n      deviceType: deviceSpecs.deviceType,\n      isIOS: deviceSpecs.isIOS,\n      sensitivity: deviceSpecs.sensitivity,\n      divisor: deviceSpecs.divisor\n    });\n\n    return deviceSpecs;\n  }\n\n  /**\n   * Analyze user agent string and determine device specifications\n   */\n  private static analyzeUserAgent(userAgent: string): DeviceSpecs {\n    // iOS device detection (including iPadOS 13+ workaround)\n    const isIPhone = /iPhone/.test(userAgent);\n    const isIPad = /iPad/.test(userAgent);\n    \n    // iPadOS 13+ reports as \\\"Macintosh\\\" but has touch support\n    const isIPadOS = /Macintosh/.test(userAgent) && 'ontouchend' in document;\n    \n    // Additional iOS detection methods\n    const hasIOSNavigator = /iPad|iPhone|iPod/.test(userAgent);\n    const hasIOSPlatform = /iPad|iPhone|iPod/.test((navigator as any).platform || '');\n    \n    // Combined iOS detection\n    const isIOS = isIPhone || isIPad || isIPadOS || hasIOSNavigator || hasIOSPlatform;\n    \n    // More specific device type detection\n    let deviceType: 'iPhone' | 'iPad' | 'PC' = 'PC';\n    \n    if (isIPhone) {\n      deviceType = 'iPhone';\n    } else if (isIPad || isIPadOS) {\n      deviceType = 'iPad';\n    } else if (isIOS) {\n      // Fallback iOS device - could be iPhone or iPad\n      deviceType = DeviceDetection.detectIOSDeviceType();\n    }\n\n    // Get device-specific optimizations\n    const optimizations = DeviceDetection.getDeviceOptimizations(deviceType, isIOS);\n\n    return {\n      deviceType,\n      isIOS,\n      sensitivity: optimizations.sensitivity,\n      noiseGate: optimizations.noiseGate,\n      volumeMultiplier: optimizations.volumeMultiplier,\n      smoothingFactor: optimizations.smoothingFactor,\n      // 後方互換性のため残す（将来的に削除予定）\n      divisor: 6.0,\n      gainCompensation: 1.0,\n      noiseThreshold: 7.0\n    };\n  }\n\n  /**\n   * Detect iOS device type when specific detection fails\n   */\n  private static detectIOSDeviceType(): 'iPhone' | 'iPad' {\n    // Use screen size as a heuristic\n    const screenWidth = window.screen.width;\n    const screenHeight = window.screen.height;\n    const maxDimension = Math.max(screenWidth, screenHeight);\n    const minDimension = Math.min(screenWidth, screenHeight);\n    \n    // iPad generally has larger screens\n    // iPhone 6 Plus and newer have screens around 414x736 or similar\n    // iPad screens are typically 768+ in at least one dimension\n    if (maxDimension >= 768 || (maxDimension >= 700 && minDimension >= 500)) {\n      return 'iPad';\n    }\n    \n    return 'iPhone';\n  }\n\n  /**\n   * Get device-specific optimization parameters\n   */\n  private static getDeviceOptimizations(deviceType: 'iPhone' | 'iPad' | 'PC', _isIOS: boolean) {\n    switch (deviceType) {\n      case 'iPad':\n        return {\n          sensitivity: 4.0,           // 🎤 マイク感度 (PitchDetector用)\n          noiseGate: 0.023,           // 🚪 ノイズゲート閾値 (2.3%設定で低周波数検出感度向上)\n          volumeMultiplier: 4.0,      // 🔊 表示音量補正 (13.0→4.0 大幅削減で適切レベル)\n          smoothingFactor: 0.25       // 📊 平滑化係数\n        };\n        \n      case 'iPhone':\n        return {\n          sensitivity: 3.5,           // 🎤 マイク感度 (iPhone最適化値)\n          noiseGate: 0.028,           // 🚪 ノイズゲート閾値 (2.8%設定でiPadとの中間値)\n          volumeMultiplier: 3.0,      // 🔊 表示音量補正 (9.0→3.0 大幅削減で適切レベル)\n          smoothingFactor: 0.25       // 📊 平滑化係数\n        };\n        \n      case 'PC':\n      default:\n        return {\n          sensitivity: 1.7,           // 🎤 マイク感度 (PC環境安定性重視)\n          noiseGate: 0.023,           // 🚪 ノイズゲート閾値 (2.3%設定で低周波数検出最適化)\n          volumeMultiplier: 2.5,      // 🔊 表示音量補正 (7.5→2.5 大幅削減で適切レベル)\n          smoothingFactor: 0.25       // 📊 平滑化係数\n        };\n    }\n  }\n\n  /**\n   * Get default specifications for SSR or fallback\n   */\n  private static getDefaultSpecs(): DeviceSpecs {\n    // SSR環境などでデフォルトとして使用される値\n    // getDeviceOptimizationsのPC設定と完全に一致させる\n    return {\n      deviceType: 'PC',\n      isIOS: false,\n      sensitivity: 1.7,           // 🎤 PC最適化値と統一\n      noiseGate: 0.060,           // 🚪 PC最適化値と統一 (6.0%) - getDeviceOptimizationsと完全一致\n      volumeMultiplier: 3.0,      // 🔊 PC最適化値と統一\n      smoothingFactor: 0.25,      // 📊 PC最適化値と統一\n      // 後方互換性のため残す（将来的に削除予定）\n      divisor: 6.0,\n      gainCompensation: 1.0,\n      noiseThreshold: 7.0\n    };\n  }\n\n  /**\n   * Check if device supports Web Audio API\n   */\n  static supportsWebAudio(): boolean {\n    return typeof window !== 'undefined' && \n           (typeof window.AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined');\n  }\n\n  /**\n   * Check if device supports MediaDevices API\n   */\n  static supportsMediaDevices(): boolean {\n    return typeof navigator !== 'undefined' && \n           typeof navigator.mediaDevices !== 'undefined' && \n           typeof navigator.mediaDevices.getUserMedia !== 'undefined';\n  }\n\n  /**\n   * Check if device supports MediaRecorder API\n   */\n  static supportsMediaRecorder(): boolean {\n    return typeof window !== 'undefined' && typeof (window as any).MediaRecorder !== 'undefined';\n  }\n\n  /**\n   * Get comprehensive device capabilities\n   */\n  static getDeviceCapabilities() {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    return {\n      deviceSpecs: specs,\n      webAudioSupport: DeviceDetection.supportsWebAudio(),\n      mediaDevicesSupport: DeviceDetection.supportsMediaDevices(),\n      mediaRecorderSupport: DeviceDetection.supportsMediaRecorder(),\n      touchSupport: 'ontouchend' in document,\n      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'Unknown',\n      screenSize: typeof window !== 'undefined' ? {\n        width: window.screen.width,\n        height: window.screen.height,\n        pixelRatio: window.devicePixelRatio\n      } : null,\n      language: typeof navigator !== 'undefined' ? navigator.language : 'Unknown',\n      platform: typeof navigator !== 'undefined' ? (navigator as any).platform || 'Unknown' : 'Unknown'\n    };\n  }\n\n  /**\n   * Check if current device is mobile\n   */\n  static isMobile(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    return specs.isIOS || /Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(navigator?.userAgent || '');\n  }\n\n  /**\n   * Check if current device is tablet\n   */\n  static isTablet(): boolean {\n    const specs = DeviceDetection.getDeviceSpecs();\n    if (specs.deviceType === 'iPad') return true;\n    \n    // Android tablet detection\n    const userAgent = navigator?.userAgent || '';\n    return /Android/i.test(userAgent) && !/Mobile/i.test(userAgent);\n  }\n\n  /**\n   * Check if current device is desktop\n   */\n  static isDesktop(): boolean {\n    return !DeviceDetection.isMobile() && !DeviceDetection.isTablet();\n  }\n\n  /**\n   * Get recommended audio constraints for current device\n   */\n  static getOptimalAudioConstraints(): MediaStreamConstraints {\n    const specs = DeviceDetection.getDeviceSpecs();\n    \n    const baseConstraints: MediaStreamConstraints = {\n      audio: {\n        echoCancellation: false,\n        noiseSuppression: false,\n        autoGainControl: false,\n        sampleRate: 44100,\n        channelCount: 1,\n        sampleSize: 16,\n        // latency: 0.1, // Not supported in MediaTrackConstraints\n        // volume: 1.0, // Not supported in MediaTrackConstraints\n        deviceId: { ideal: 'default' }\n      }\n    };\n\n    // Add iOS-specific optimizations\n    if (specs.isIOS && baseConstraints.audio && typeof baseConstraints.audio === 'object') {\n      (baseConstraints.audio as any) = {\n        ...baseConstraints.audio,\n        // Disable all browser-level processing for iOS\n        googAutoGainControl: false,\n        googNoiseSuppression: false,\n        googEchoCancellation: false,\n        googHighpassFilter: false,\n        googTypingNoiseDetection: false,\n        googBeamforming: false,\n        mozAutoGainControl: false,\n        mozNoiseSuppression: false\n      };\n    }\n\n    return baseConstraints;\n  }\n\n  /**\n   * Clear cached device specifications (for testing)\n   */\n  static clearCache(): void {\n    DeviceDetection.cachedSpecs = null;\n  }\n\n  /**\n   * Get device-specific debugging information\n   */\n  static getDebugInfo() {\n    const capabilities = DeviceDetection.getDeviceCapabilities();\n    \n    return {\n      ...capabilities,\n      detectionMethods: {\n        userAgentIPhone: /iPhone/.test(navigator?.userAgent || ''),\n        userAgentIPad: /iPad/.test(navigator?.userAgent || ''),\n        userAgentMacintosh: /Macintosh/.test(navigator?.userAgent || ''),\n        touchSupport: 'ontouchend' in document,\n        navigatorPlatform: (navigator as any)?.platform || 'Unknown',\n        screenAspectRatio: typeof window !== 'undefined' ? \n          (window.screen.width / window.screen.height).toFixed(2) : 'Unknown'\n      }\n    };\n  }\n}","export enum ErrorCode {\n  AUDIO_CONTEXT_ERROR = 'AUDIO_CONTEXT_ERROR',\n  MICROPHONE_ACCESS_DENIED = 'MICROPHONE_ACCESS_DENIED',\n  PITCH_DETECTION_ERROR = 'PITCH_DETECTION_ERROR',\n  BUFFER_OVERFLOW = 'BUFFER_OVERFLOW',\n  INVALID_SAMPLE_RATE = 'INVALID_SAMPLE_RATE',\n  DEVICE_NOT_SUPPORTED = 'DEVICE_NOT_SUPPORTED',\n  PROCESSING_TIMEOUT = 'PROCESSING_TIMEOUT'\n}\n\nexport class PitchProError extends Error {\n  public readonly code: ErrorCode;\n  public readonly timestamp: Date;\n  public readonly context?: Record<string, any>;\n\n  constructor(\n    message: string,\n    code: ErrorCode,\n    context?: Record<string, any>\n  ) {\n    super(message);\n    this.name = 'PitchProError';\n    this.code = code;\n    this.timestamp = new Date();\n    this.context = context;\n    \n    // Maintain proper stack trace for where our error was thrown\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, PitchProError);\n    }\n  }\n\n  toJSON() {\n    return {\n      name: this.name,\n      message: this.message,\n      code: this.code,\n      timestamp: this.timestamp,\n      context: this.context,\n      stack: this.stack\n    };\n  }\n}\n\nexport class AudioContextError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.AUDIO_CONTEXT_ERROR, context);\n    this.name = 'AudioContextError';\n  }\n}\n\nexport class MicrophoneAccessError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.MICROPHONE_ACCESS_DENIED, context);\n    this.name = 'MicrophoneAccessError';\n  }\n}\n\nexport class MicrophoneHealthError extends PitchProError {\n  constructor(\n    message: string, \n    healthStatus: any, \n    recoveryAttempts: number,\n    context?: Record<string, any>\n  ) {\n    super(\n      message, \n      ErrorCode.MICROPHONE_ACCESS_DENIED, \n      { \n        healthStatus, \n        recoveryAttempts,\n        timestamp: Date.now(),\n        ...context \n      }\n    );\n    this.name = 'MicrophoneHealthError';\n  }\n\n  getHealthStatus() {\n    return this.context?.healthStatus;\n  }\n\n  getRecoveryAttempts() {\n    return this.context?.recoveryAttempts;\n  }\n}\n\nexport class PitchDetectionError extends PitchProError {\n  constructor(message: string, context?: Record<string, any>) {\n    super(message, ErrorCode.PITCH_DETECTION_ERROR, context);\n    this.name = 'PitchDetectionError';\n  }\n}\n\nexport function handleError(error: unknown): PitchProError {\n  if (error instanceof PitchProError) {\n    return error;\n  }\n  \n  if (error instanceof Error) {\n    return new PitchProError(\n      error.message,\n      ErrorCode.PITCH_DETECTION_ERROR,\n      { originalError: error.name }\n    );\n  }\n  \n  return new PitchProError(\n    'An unknown error occurred',\n    ErrorCode.PITCH_DETECTION_ERROR,\n    { error: String(error) }\n  );\n}\n\nexport function isRecoverableError(error: PitchProError): boolean {\n  const recoverableErrors = [\n    ErrorCode.BUFFER_OVERFLOW,\n    ErrorCode.PROCESSING_TIMEOUT,\n    ErrorCode.PITCH_DETECTION_ERROR\n  ];\n  \n  return recoverableErrors.includes(error.code);\n}\n\n/**\n * User-friendly error message generator for different error types\n * \n * @description Converts technical error messages into user-friendly Japanese messages\n * with actionable guidance for resolution.\n */\nexport class ErrorMessageBuilder {\n  /**\n   * Generates user-friendly error messages with resolution steps\n   * \n   * @param error - PitchProError instance\n   * @returns Object containing user message and suggested actions\n   */\n  static getUserFriendlyMessage(error: PitchProError): {\n    title: string;\n    message: string;\n    actions: string[];\n    severity: 'low' | 'medium' | 'high' | 'critical';\n    canRetry: boolean;\n  } {\n    switch (error.code) {\n      case ErrorCode.MICROPHONE_ACCESS_DENIED:\n        return {\n          title: 'マイクアクセスが拒否されました',\n          message: 'ピッチ検出を行うには、マイクへのアクセス許可が必要です。',\n          actions: [\n            'ブラウザのアドレスバーにあるマイクアイコンをクリック',\n            '「このサイトでマイクを許可する」を選択',\n            'ページを再読み込みしてもう一度試す',\n            'プライベートブラウジングモードを無効にする（Safariの場合）'\n          ],\n          severity: 'high',\n          canRetry: true\n        };\n\n      case ErrorCode.AUDIO_CONTEXT_ERROR:\n        return {\n          title: 'オーディオシステムエラー',\n          message: 'オーディオの初期化に失敗しました。デバイスの音響設定を確認してください。',\n          actions: [\n            '他のアプリケーションでマイクが使用中でないか確認',\n            'ブラウザを再起動してもう一度試す',\n            'システムの音響設定でマイクが有効になっているか確認',\n            '外部マイクを使用している場合は接続を確認'\n          ],\n          severity: 'high',\n          canRetry: true\n        };\n\n      case ErrorCode.PITCH_DETECTION_ERROR:\n        return {\n          title: 'ピッチ検出エラー',\n          message: '音程の検出中に一時的な問題が発生しました。',\n          actions: [\n            'マイクに向かって明確に歌ってみる',\n            '周囲のノイズを減らす',\n            '感度設定を調整する',\n            '数秒待ってからもう一度試す'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.BUFFER_OVERFLOW:\n        return {\n          title: 'バッファオーバーフロー',\n          message: 'オーディオデータの処理が追いついていません。',\n          actions: [\n            '他のタブやアプリケーションを閉じる',\n            'ブラウザのハードウェアアクセラレーションを有効にする',\n            'より高性能なデバイスを使用する',\n            'ページを再読み込みする'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.PROCESSING_TIMEOUT:\n        return {\n          title: '処理タイムアウト',\n          message: 'オーディオ処理の応答時間が長すぎます。',\n          actions: [\n            'デバイスの負荷を減らす（他のアプリを閉じる）',\n            'ネットワーク接続を確認する',\n            'ブラウザを再起動する',\n            'しばらく待ってからもう一度試す'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n\n      case ErrorCode.INVALID_SAMPLE_RATE:\n        return {\n          title: 'サンプリングレート不適合',\n          message: 'お使いのデバイスのサンプリングレートがサポートされていません。',\n          actions: [\n            'システムの音響設定で44.1kHz または 48kHzに設定',\n            '外部オーディオインターフェースの設定を確認',\n            'デバイスドライバを更新',\n            '別のマイクを試す'\n          ],\n          severity: 'high',\n          canRetry: false\n        };\n\n      case ErrorCode.DEVICE_NOT_SUPPORTED:\n        return {\n          title: 'デバイス非対応',\n          message: 'お使いのデバイスまたはブラウザはサポートされていません。',\n          actions: [\n            'Chrome、Firefox、Safari の最新版を使用',\n            'より新しいデバイスを使用',\n            'ブラウザの互換性情報を確認',\n            '技術サポートにお問い合わせ'\n          ],\n          severity: 'critical',\n          canRetry: false\n        };\n\n      default:\n        return {\n          title: '予期しないエラー',\n          message: 'システムで予期しない問題が発生しました。',\n          actions: [\n            'ページを再読み込み',\n            'ブラウザを再起動',\n            'しばらく時間をおいて再試行',\n            '問題が続く場合はサポートへ連絡'\n          ],\n          severity: 'medium',\n          canRetry: true\n        };\n    }\n  }\n\n  /**\n   * Generates detailed technical error information for developers\n   * \n   * @param error - PitchProError instance\n   * @returns Formatted technical error details\n   */\n  static getTechnicalDetails(error: PitchProError): {\n    errorCode: string;\n    timestamp: string;\n    context: Record<string, any>;\n    stackTrace?: string;\n    diagnosticInfo: Record<string, any>;\n  } {\n    return {\n      errorCode: error.code,\n      timestamp: error.timestamp.toISOString(),\n      context: error.context || {},\n      stackTrace: error.stack,\n      diagnosticInfo: {\n        userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown',\n        timestamp: Date.now(),\n        url: typeof window !== 'undefined' ? window.location.href : 'unknown',\n        isRecoverable: isRecoverableError(error)\n      }\n    };\n  }\n\n  /**\n   * Creates formatted console error messages for development\n   * \n   * @param error - PitchProError instance\n   * @param context - Additional context information\n   */\n  static logError(error: PitchProError, context?: string): void {\n    const friendlyMessage = this.getUserFriendlyMessage(error);\n    const technicalDetails = this.getTechnicalDetails(error);\n\n    console.group(`🚨 [PitchPro Error] ${friendlyMessage.title}`);\n    \n    // User-friendly information\n    console.log('👤 User Message:', friendlyMessage.message);\n    console.log('📋 Suggested Actions:', friendlyMessage.actions);\n    console.log('⚠️ Severity:', friendlyMessage.severity);\n    console.log('🔄 Can Retry:', friendlyMessage.canRetry);\n    \n    // Technical details\n    console.log('🔧 Error Code:', technicalDetails.errorCode);\n    console.log('⏰ Timestamp:', technicalDetails.timestamp);\n    \n    if (context) {\n      console.log('📍 Context:', context);\n    }\n    \n    if (technicalDetails.context && Object.keys(technicalDetails.context).length > 0) {\n      console.log('🔍 Additional Context:', technicalDetails.context);\n    }\n    \n    if (technicalDetails.stackTrace) {\n      console.log('📜 Stack Trace:', technicalDetails.stackTrace);\n    }\n    \n    console.groupEnd();\n  }\n\n  /**\n   * Creates recovery suggestions based on error type and context\n   * \n   * @param error - PitchProError instance\n   * @param deviceType - Device type for specific recommendations\n   * @returns Recovery strategy object\n   */\n  static getRecoveryStrategy(error: PitchProError, deviceType?: string): {\n    immediate: string[];\n    fallback: string[];\n    preventive: string[];\n  } {\n    const base = this.getUserFriendlyMessage(error);\n    \n    const immediate = base.actions.slice(0, 2);\n    const fallback = base.actions.slice(2);\n    \n    // Device-specific preventive measures\n    let preventive: string[] = [];\n    \n    if (deviceType === 'iPhone' || deviceType === 'iPad') {\n      preventive = [\n        '感度を高めに設定（7.0x推奨）',\n        'Safari使用を推奨',\n        'iOS 14以上で使用',\n        '低電力モードを無効にする'\n      ];\n    } else if (deviceType === 'Android') {\n      preventive = [\n        'Chrome使用を推奨',\n        'バックグラウンドアプリを制限',\n        '省電力モードを無効にする',\n        'マイク権限を常に許可に設定'\n      ];\n    } else {\n      preventive = [\n        '安定したネットワーク環境で使用',\n        'ブラウザを最新版に更新',\n        'ハードウェアアクセラレーションを有効化',\n        '外部ノイズの少ない環境で使用'\n      ];\n    }\n    \n    return {\n      immediate,\n      fallback,\n      preventive\n    };\n  }\n}","/**\n * AudioManager - Framework-agnostic Global Audio Resource Management System\n * \n * @description Provides centralized management of Web Audio API resources with automatic\n * device optimization, reference counting, and health monitoring. Solves common issues\n * with AudioContext sharing and MediaStream lifecycle management.\n * \n * @example\n * ```typescript\n * const audioManager = new AudioManager({\n *   sampleRate: 44100,\n *   echoCancellation: false,\n *   autoGainControl: false\n * });\n * \n * const resources = await audioManager.initialize();\n * const analyser = audioManager.createAnalyser('pitch-detection');\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { \n  AudioManagerConfig, \n  MediaStreamResources, \n  HealthStatus, \n  TrackState,\n  DeviceSpecs\n} from '../types';\nimport { DeviceDetection } from '../utils/DeviceDetection';\nimport { \n  AudioContextError, \n  MicrophoneAccessError, \n  PitchProError, \n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class AudioManager {\n  /** @private Global AudioContext instance shared across the application */\n  private audioContext: AudioContext | null = null;\n  \n  /** @private MediaStream from user's microphone */\n  private mediaStream: MediaStream | null = null;\n  \n  /** @private Source node for audio processing pipeline */\n  private sourceNode: MediaStreamAudioSourceNode | null = null;\n  \n  /** @private Gain node for microphone sensitivity adjustment */\n  private gainNode: GainNode | null = null;\n  \n  /** @private Map of analyser nodes by identifier for reuse */\n  private analysers = new Map<string, AnalyserNode>();\n  \n  /** @private Map of filter chains for noise reduction */\n  private filters = new Map<string, { highpass: BiquadFilterNode; lowpass: BiquadFilterNode; notch: BiquadFilterNode }>();\n  \n  /** @private Reference count for safe resource sharing */\n  private refCount = 0;\n  \n  /** @private Promise to prevent duplicate initialization */\n  private initPromise: Promise<MediaStreamResources> | null = null;\n  \n  /** @private Initialization state flag */\n  private isInitialized = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Current microphone sensitivity multiplier */\n  private currentSensitivity: number;\n  \n  /** @private Interval ID for gain monitoring (hotfix v1.1.3) */\n  private gainMonitorInterval: number | null = null;\n  \n  /** @private Microphone mute state flag */\n  private isMuted = false;\n  \n  /** @private AudioManager configuration */\n  private config: AudioManagerConfig;\n\n  /**\n   * Creates a new AudioManager instance with device-optimized configuration\n   * \n   * @param config - Optional configuration to override defaults\n   * @param config.sampleRate - Audio sample rate in Hz (default: 44100)\n   * @param config.channelCount - Number of audio channels (default: 1)\n   * @param config.echoCancellation - Enable echo cancellation (default: false)\n   * @param config.noiseSuppression - Enable noise suppression (default: false)\n   * @param config.autoGainControl - Enable auto gain control (default: false)\n   * @param config.latency - Target latency in seconds (default: 0.1)\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with defaults\n   * const audioManager = new AudioManager();\n   * \n   * // Custom configuration\n   * const audioManager = new AudioManager({\n   *   sampleRate: 48000,\n   *   echoCancellation: true,\n   *   latency: 0.05\n   * });\n   * ```\n   */\n  constructor(config: AudioManagerConfig = {}) {\n    // DIAGNOSTIC: Track configuration flow\n    console.log('🔍 [DIAGNOSTIC] AudioManager constructor - input config:', config);\n    \n    this.config = {\n      sampleRate: 44100,\n      channelCount: 1,\n      echoCancellation: false,\n      noiseSuppression: false,\n      autoGainControl: false,\n      latency: 0.1,\n      ...config\n    };\n    \n    // DIAGNOSTIC: Verify final configuration\n    console.log('🔍 [DIAGNOSTIC] AudioManager constructor - final config:', this.config);\n    console.log('🔍 [DIAGNOSTIC] autoGainControl value after merge:', this.config.autoGainControl);\n    \n    this.currentSensitivity = this._getDefaultSensitivity();\n  }\n\n  /**\n   * Gets device-specific default sensitivity multiplier\n   * \n   * @private\n   * @returns Device-optimized sensitivity value (PC: 1.0x, iPhone: 3.0x, iPad: 7.0x)\n   */\n  private _getDefaultSensitivity(): number {\n    const deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    console.log(`🔧 [AudioManager] ${deviceSpecs.deviceType} detected - setting default sensitivity ${deviceSpecs.sensitivity}x`);\n    return deviceSpecs.sensitivity;\n  }\n\n  /**\n   * Initializes audio resources including AudioContext and MediaStream\n   * \n   * @description Safe to call multiple times - uses reference counting and health checks.\n   * Automatically handles browser-specific quirks and device optimization.\n   * \n   * @returns Promise resolving to audio resources\n   * @throws {Error} If microphone permission is denied or AudioContext creation fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   const { audioContext, mediaStream, sourceNode } = await audioManager.initialize();\n   *   console.log('Audio initialized:', audioContext.state);\n   * } catch (error) {\n   *   console.error('Failed to initialize audio:', error.message);\n   * }\n   * ```\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    // If already initializing, wait for completion\n    if (this.initPromise) {\n      return this.initPromise;\n    }\n\n    // If already initialized - perform MediaStream health check\n    if (this.isInitialized && this.audioContext && this.mediaStream) {\n      const healthCheck = this.checkMediaStreamHealth();\n      \n      if (healthCheck.healthy) {\n        this.refCount++;\n        return {\n          audioContext: this.audioContext,\n          mediaStream: this.mediaStream,\n          sourceNode: this.sourceNode!\n        };\n      } else {\n        // Force re-initialization if MediaStream is unhealthy\n        console.warn('⚠️ [AudioManager] Unhealthy MediaStream detected - force re-initialization:', healthCheck);\n        console.log('🔄 [AudioManager] Unhealthy MediaStream details:', {\n          mediaStreamActive: this.mediaStream?.active,\n          trackCount: this.mediaStream?.getTracks().length,\n          trackStates: this.mediaStream?.getTracks().map(t => ({\n            kind: t.kind,\n            readyState: t.readyState,\n            enabled: t.enabled,\n            muted: t.muted\n          }))\n        });\n        \n        // Perform safe cleanup\n        this._cleanup();\n        this.isInitialized = false;\n        this.refCount = 0;\n        \n        // Short wait to ensure resource release\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        console.log('🔄 [AudioManager] Cleanup complete - starting re-initialization');\n        // Continue to next block for re-initialization\n      }\n    }\n\n    // Execute initialization\n    this.initPromise = this._doInitialize();\n    \n    try {\n      const result = await this.initPromise;\n      this.initPromise = null;\n      return result;\n    } catch (error) {\n      this.initPromise = null;\n      throw error;\n    }\n  }\n\n  /**\n   * Performs the actual initialization process\n   * \n   * @private\n   * @returns Promise resolving to initialized audio resources\n   * @throws {Error} If any step of initialization fails\n   */\n  private async _doInitialize(): Promise<MediaStreamResources> {\n    try {\n      console.log('🎤 [AudioManager] Starting initialization');\n\n      // Create AudioContext (single instance)\n      if (!this.audioContext) {\n        this.audioContext = new (window.AudioContext || (window as any).webkitAudioContext)();\n        console.log('✅ [AudioManager] AudioContext creation complete');\n      }\n\n      // Resume AudioContext if suspended\n      if (this.audioContext.state === 'suspended') {\n        await this.audioContext.resume();\n        console.log('✅ [AudioManager] AudioContext resume complete');\n      }\n\n      // Get MediaStream (single instance)\n      if (!this.mediaStream) {\n        const deviceSpecs = this.getPlatformSpecs();\n        \n        console.log(`🔍 [AudioManager] Device detection: ${deviceSpecs.deviceType}`, navigator.userAgent);\n        console.log(`🔍 [AudioManager] Touch support: ${'ontouchend' in document}`);\n        \n        // DIAGNOSTIC: Check if DeviceDetection affects autoGainControl\n        console.log('🔍 [DIAGNOSTIC] Device specs from getPlatformSpecs():', deviceSpecs);\n        console.log('🔍 [DIAGNOSTIC] Current this.config before constraints creation:', this.config);\n        \n        // Safari WebKit compatibility: Maximum compatibility audio settings\n        const audioConstraints: MediaStreamConstraints = {\n          audio: {\n            // Basic settings: Safari WebKit stability focused\n            echoCancellation: this.config.echoCancellation,\n            noiseSuppression: this.config.noiseSuppression,  // ✅ 設定値を尊重\n            autoGainControl: this.config.autoGainControl,\n            \n            // ブラウザ固有制御: noiseSuppression設定に基づく条件付き適用\n            ...(window as any).chrome && {\n              googAutoGainControl: false,     // AGCは常に無効（音量問題回避）\n              googNoiseSuppression: this.config.noiseSuppression,  // ✅ 設定値に従う\n              googEchoCancellation: this.config.echoCancellation,  // ✅ 設定値に従う\n              googHighpassFilter: false,      // ハイパスフィルターは独自実装を使用\n              googTypingNoiseDetection: this.config.noiseSuppression, // ノイズ抑制と連動\n              googBeamforming: this.config.noiseSuppression,          // ノイズ抑制と連動\n            },\n            \n            // Mozilla-specific constraints\n            ...(navigator.userAgent.includes('Firefox')) && {\n              mozAutoGainControl: false,      // AGCは常に無効\n              mozNoiseSuppression: this.config.noiseSuppression,  // ✅ 設定値に従う\n            },\n            \n            // Safari compatibility: Explicit quality settings  \n            sampleRate: this.config.sampleRate,\n            channelCount: this.config.channelCount,\n            sampleSize: 16,\n            \n            // Flexible device selection (Safari compatibility)\n            deviceId: { ideal: 'default' }\n          }\n        };\n        \n        console.log('🎤 [AudioManager] Getting MediaStream with noiseSuppression settings:', {\n          noiseSuppression: this.config.noiseSuppression,\n          constraints: audioConstraints\n        });\n        this.mediaStream = await navigator.mediaDevices.getUserMedia(audioConstraints);\n        console.log('✅ [AudioManager] MediaStream acquisition complete');\n        \n        // DIAGNOSTIC: Check actual constraints applied by browser (production only)\n        const audioTrack = this.mediaStream.getAudioTracks()[0];\n        if (audioTrack && typeof audioTrack.getConstraints === 'function' && typeof audioTrack.getSettings === 'function') {\n          try {\n            const actualConstraints = audioTrack.getConstraints();\n            const actualSettings = audioTrack.getSettings();\n            \n            console.log('🔍 [DIAGNOSTIC] Requested noiseSuppression:', this.config.noiseSuppression);\n            console.log('🔍 [DIAGNOSTIC] Actually applied constraints:', actualConstraints);\n            console.log('🔍 [DIAGNOSTIC] Actual MediaStream settings:', actualSettings);\n            \n            // Critical check: Verify noiseSuppression was applied as requested\n            if (actualSettings.noiseSuppression !== this.config.noiseSuppression) {\n              console.warn('⚠️ [DIAGNOSTIC] noiseSuppression setting mismatch!');\n              console.warn(`⚠️ [DIAGNOSTIC] Requested: ${this.config.noiseSuppression}, Applied: ${actualSettings.noiseSuppression}`);\n            } else {\n              console.log('✅ [DIAGNOSTIC] noiseSuppression successfully applied by browser');\n            }\n            \n            // Check autoGainControl status\n            if (actualSettings.autoGainControl === true) {\n              console.warn('⚠️ [DIAGNOSTIC] CRITICAL: Browser ignored autoGainControl: false setting!');\n              console.warn('⚠️ [DIAGNOSTIC] This explains the gain drift issues - browser is automatically adjusting gain');\n            } else {\n              console.log('✅ [DIAGNOSTIC] autoGainControl successfully disabled by browser');\n            }\n          } catch (error) {\n            console.log('ℹ️ [DIAGNOSTIC] MediaTrack constraint inspection not available in this environment');\n          }\n        } else {\n          console.log('ℹ️ [DIAGNOSTIC] MediaTrack constraint inspection not supported in this environment');\n        }\n      }\n\n      // Create SourceNode (single instance)\n      if (!this.sourceNode) {\n        this.sourceNode = this.audioContext.createMediaStreamSource(this.mediaStream);\n        console.log('✅ [AudioManager] SourceNode creation complete');\n        \n        // MediaStream state check\n        const tracks = this.mediaStream.getTracks();\n        console.log('🎤 [AudioManager] MediaStream tracks:', tracks.map(t => ({\n          kind: t.kind,\n          label: t.label,\n          enabled: t.enabled,\n          readyState: t.readyState,\n          muted: t.muted\n        })));\n      }\n\n      // Create GainNode (for microphone sensitivity adjustment)\n      if (!this.gainNode) {\n        this.gainNode = this.audioContext.createGain();\n        this.gainNode.gain.setValueAtTime(this.currentSensitivity, this.audioContext.currentTime);\n        \n        // Connect SourceNode -> GainNode\n        this.sourceNode.connect(this.gainNode);\n        console.log(`✅ [AudioManager] GainNode creation complete (sensitivity: ${this.currentSensitivity}x)`);\n        \n        // HOTFIX: Temporarily disabled gain monitoring due to persistent drift issues\n        // Will be re-enabled in future version with proper browser compatibility\n        // this.startGainMonitoring();\n      }\n\n      this.isInitialized = true;\n      this.refCount++;\n      this.lastError = null;\n\n      console.log(`🎤 [AudioManager] Initialization complete (refCount: ${this.refCount})`);\n\n      return {\n        audioContext: this.audioContext,\n        mediaStream: this.mediaStream,\n        sourceNode: this.sourceNode\n      };\n\n    } catch (error) {\n      // Convert to structured error with context\n      const structuredError = this._createStructuredError(error as Error, 'initialization');\n      \n      // Enhanced error logging with user-friendly information\n      ErrorMessageBuilder.logError(structuredError, 'AudioManager initialization');\n      \n      this.lastError = structuredError;\n      this.isInitialized = false;\n      \n      // Cleanup on error\n      this._cleanup();\n      \n      throw structuredError;\n    }\n  }\n\n  /**\n   * Create dedicated AnalyserNode\n   * @param id - Analyser identifier\n   * @param options - Option settings\n   */\n  createAnalyser(id: string, options: {\n    fftSize?: number;\n    smoothingTimeConstant?: number;\n    minDecibels?: number;\n    maxDecibels?: number;\n    useFilters?: boolean;\n  } = {}): AnalyserNode {\n    if (!this.isInitialized || !this.audioContext || !this.sourceNode) {\n      const error = new AudioContextError(\n        'AudioManagerが初期化されていません。initialize()メソッドを最初に呼び出してください。',\n        {\n          operation: 'createAnalyser',\n          analyserId: id,\n          currentState: {\n            isInitialized: this.isInitialized,\n            hasAudioContext: !!this.audioContext,\n            hasSourceNode: !!this.sourceNode\n          }\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Analyser creation');\n      throw error;\n    }\n\n    // Remove existing analyser if present\n    this.removeAnalyser(id);\n\n    const {\n      fftSize = 2048,\n      smoothingTimeConstant = 0.8,\n      minDecibels = -90,\n      maxDecibels = -10,\n      useFilters = true\n    } = options;\n\n    // Create Analyser (Safari WebKit optimized)\n    const analyser = this.audioContext.createAnalyser();\n    \n    // Safari load reduction settings\n    analyser.fftSize = Math.min(fftSize, 2048); // Safari upper limit restriction\n    analyser.smoothingTimeConstant = Math.max(smoothingTimeConstant, 0.7); // Safari stabilization\n    analyser.minDecibels = Math.max(minDecibels, -80); // Safari range optimization\n    analyser.maxDecibels = Math.min(maxDecibels, -10);\n\n    let finalNode: AudioNode = this.gainNode || this.sourceNode;\n\n    // Create filter chain (optional)\n    if (useFilters) {\n      const filterChain = this._createFilterChain();\n      this.filters.set(id, filterChain);\n      \n      // Connect filter chain (starting from GainNode)\n      finalNode.connect(filterChain.highpass);\n      filterChain.highpass.connect(filterChain.lowpass);\n      filterChain.lowpass.connect(filterChain.notch);\n      filterChain.notch.connect(analyser);\n      \n      console.log(`🔧 [AudioManager] Filtered Analyser created: ${id}`);\n    } else {\n      // Direct connection (signal from GainNode)\n      finalNode.connect(analyser);\n      console.log(`🔧 [AudioManager] Raw signal Analyser created: ${id}`);\n    }\n    \n    // Important: Analyser only passes audio through, don't connect to destination\n    // (prevents microphone feedback)\n\n    this.analysers.set(id, analyser);\n    return analyser;\n  }\n\n  /**\n   * Create 3-stage noise reduction filter chain\n   */\n  private _createFilterChain() {\n    if (!this.audioContext) {\n      const error = new AudioContextError(\n        'AudioContextが利用できません。ブラウザでオーディオ機能が無効になっているか、デバイスがサポートされていません。',\n        {\n          operation: '_createFilterChain',\n          audioContextState: 'null'\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Filter chain creation');\n      throw error;\n    }\n\n    // 1. Highpass filter (remove low frequency noise: cut below 50Hz, 深い男性の声を保護)\n    const highpass = this.audioContext.createBiquadFilter();\n    highpass.type = 'highpass';\n    highpass.frequency.setValueAtTime(50, this.audioContext.currentTime);\n    highpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n    const lowpass = this.audioContext.createBiquadFilter();\n    lowpass.type = 'lowpass';\n    lowpass.frequency.setValueAtTime(800, this.audioContext.currentTime);\n    lowpass.Q.setValueAtTime(0.7, this.audioContext.currentTime);\n\n    // 3. Notch filter (remove power noise: 50Hz) - 🔧 日本の電源周波数に合わせて調整\n    const notch = this.audioContext.createBiquadFilter();\n    notch.type = 'notch';\n    notch.frequency.setValueAtTime(50, this.audioContext.currentTime);\n    notch.Q.setValueAtTime(10, this.audioContext.currentTime);\n\n    return { highpass, lowpass, notch };\n  }\n\n  /**\n   * Removes a specific analyser and its associated filter chain\n   * \n   * @param id - Unique identifier for the analyser to remove\n   * \n   * @example\n   * ```typescript\n   * audioManager.removeAnalyser('pitch-detection');\n   * ```\n   */\n  removeAnalyser(id: string): void {\n    if (this.analysers.has(id)) {\n      const analyser = this.analysers.get(id)!;\n      analyser.disconnect();\n      this.analysers.delete(id);\n      console.log(`🗑️ [AudioManager] Analyser removed: ${id}`);\n    }\n\n    if (this.filters.has(id)) {\n      const filterChain = this.filters.get(id)!;\n      filterChain.highpass.disconnect();\n      filterChain.lowpass.disconnect();\n      filterChain.notch.disconnect();\n      this.filters.delete(id);\n      console.log(`🗑️ [AudioManager] Filter chain removed: ${id}`);\n    }\n  }\n\n  /**\n   * Adjusts microphone sensitivity with automatic gain monitoring\n   * \n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   * - 0.1-1.0: Reduced sensitivity for loud environments\n   * - 1.0: Standard sensitivity (PC default)\n   * - 3.0: iPhone optimized sensitivity\n   * - 7.0: iPad optimized sensitivity\n   * - 10.0: Maximum sensitivity for quiet environments\n   * \n   * @example\n   * ```typescript\n   * // Set sensitivity for iPad\n   * audioManager.setSensitivity(7.0);\n   * \n   * // Reduce for loud environment\n   * audioManager.setSensitivity(0.5);\n   * ```\n   */\n  private async _verifyGainChange(expectedGain: number, timeout = 200, interval = 20): Promise<boolean> {\n    const startTime = Date.now();\n    while (Date.now() - startTime < timeout) {\n      if (this.gainNode && Math.abs(this.gainNode.gain.value - expectedGain) <= 0.1) {\n        return true; // 許容誤差内で一致したので成功\n      }\n      // 指定された間隔で待機\n      await new Promise(resolve => setTimeout(resolve, interval));\n    }\n    return false; // タイムアウトまでに一致しなかったので失敗\n  }\n\n  setSensitivity(sensitivity: number): void {\n    // Range limit (extended to 10.0x for iPad real device support)\n    const clampedSensitivity = Math.max(0.1, Math.min(10.0, sensitivity));\n    \n    if (this.gainNode) {\n      // ENHANCED: Robust gain setting with immediate verification\n      this.gainNode.gain.setValueAtTime(clampedSensitivity, this.audioContext?.currentTime || 0);\n      this.currentSensitivity = clampedSensitivity;\n      \n      // 非同期検証による堅牢なゲイン設定確認\n      (async () => {\n        const verified = await this._verifyGainChange(clampedSensitivity);\n\n        if (verified) {\n          console.log(`✅ [AudioManager] Gain setting verified: ${this.gainNode?.gain.value.toFixed(1)}x (expected: ${clampedSensitivity.toFixed(1)}x)`);\n        } else if (this.gainNode) { // ゲイン設定の検証失敗（警告レベル・機能継続）\n          const actualGain = this.gainNode.gain.value;\n          console.warn(`⚠️ [AudioManager] ゲイン検証失敗 (機能継続):`, {\n            期待値: `${clampedSensitivity}x`,\n            実際値: `${actualGain}x`,\n            差分: Math.abs(actualGain - clampedSensitivity).toFixed(2),\n            理由: 'ブラウザのautoGainControl制御による制限',\n            影響: '音量計算には影響なし（動的SCALING_FACTOR使用）',\n            状態: '正常動作中'\n          });\n          // エラーを投げずに機能を継続（音量計算に影響なし）\n        }\n      })();\n      \n      console.log(`🎤 [AudioManager] Microphone sensitivity updated: ${clampedSensitivity.toFixed(1)}x`);\n    } else {\n      // If GainNode not initialized, save setting only\n      this.currentSensitivity = clampedSensitivity;\n      console.log(`🎤 [AudioManager] Microphone sensitivity set (awaiting initialization): ${clampedSensitivity.toFixed(1)}x`);\n    }\n  }\n\n  /**\n   * Get current microphone sensitivity\n   */\n  getSensitivity(): number {\n    return this.currentSensitivity;\n  }\n\n  /**\n   * Mutes the microphone by disabling audio tracks\n   * \n   * @description Disables all audio tracks in the MediaStream while maintaining \n   * the connection. This provides instant mute functionality without requiring \n   * MediaStream reinitialization.\n   * \n   * @example\n   * ```typescript\n   * audioManager.mute();\n   * console.log('Microphone muted');\n   * ```\n   */\n  mute(): void {\n    if (!this.mediaStream) {\n      console.warn('⚠️ [AudioManager] Cannot mute, MediaStream is not available.');\n      return;\n    }\n\n    this.mediaStream.getAudioTracks().forEach(track => {\n      track.enabled = false; // Disable audio track (core mute functionality)\n    });\n    this.isMuted = true;\n    console.log('🔇 [AudioManager] Microphone muted.');\n  }\n\n  /**\n   * Unmutes the microphone by enabling audio tracks\n   * \n   * @description Re-enables all audio tracks in the MediaStream. The audio \n   * input resumes immediately without any initialization delays.\n   * \n   * @example\n   * ```typescript\n   * audioManager.unmute();\n   * console.log('Microphone unmuted');\n   * ```\n   */\n  unmute(): void {\n    if (!this.mediaStream) {\n      console.warn('⚠️ [AudioManager] Cannot unmute, MediaStream is not available.');\n      return;\n    }\n\n    this.mediaStream.getAudioTracks().forEach(track => {\n      track.enabled = true; // Re-enable audio track\n    });\n    this.isMuted = false;\n    console.log('🔊 [AudioManager] Microphone unmuted.');\n  }\n\n  /**\n   * Gets the current mute state\n   * \n   * @returns True if microphone is muted, false otherwise\n   * \n   * @example\n   * ```typescript\n   * if (audioManager.getIsMuted()) {\n   *   console.log('Microphone is currently muted');\n   * }\n   * ```\n   */\n  getIsMuted(): boolean {\n    return this.isMuted;\n  }\n\n  /**\n   * HOTFIX: Start gain monitoring to prevent level drops\n   * @deprecated Temporarily disabled in v1.1.4 due to browser compatibility issues\n   * \n   * This method is preserved for future re-implementation with proper browser compatibility.\n   * The gain monitoring caused 60% drift errors every 2 seconds in some environments.\n   * Will be re-enabled once a more robust solution is developed.\n   */\n  /* private startGainMonitoring(): void {\n    if (this.gainMonitorInterval) {\n      clearInterval(this.gainMonitorInterval);\n    }\n    \n    this.gainMonitorInterval = window.setInterval(() => {\n      if (this.gainNode && this.audioContext) {\n        const currentGainValue = this.gainNode.gain.value;\n        const expectedGain = this.currentSensitivity;\n        \n        // Check for significant drift (more than 50% difference) - relaxed threshold\n        if (Math.abs(currentGainValue - expectedGain) > expectedGain * 0.5) {\n          const monitorError = new PitchProError(\n            `ゲインモニタリングでドリフト検出: 期待値 ${expectedGain}, 現在値 ${currentGainValue}`,\n            ErrorCode.AUDIO_CONTEXT_ERROR,\n            {\n              operation: 'gainMonitoring',\n              expectedGain,\n              currentGain: currentGainValue,\n              driftPercentage: ((Math.abs(currentGainValue - expectedGain) / expectedGain) * 100).toFixed(1)\n            }\n          );\n          \n          ErrorMessageBuilder.logError(monitorError, 'Automatic gain monitoring');\n          \n          // Force reset to expected value\n          this.gainNode.gain.setValueAtTime(expectedGain, this.audioContext.currentTime);\n          console.log(`🔧 [AudioManager] Gain reset to: ${expectedGain}`);\n        }\n      }\n    }, 2000); // Check every 2 seconds\n  } */\n\n  /**\n   * HOTFIX: Stop gain monitoring\n   */\n  private stopGainMonitoring(): void {\n    if (this.gainMonitorInterval) {\n      clearInterval(this.gainMonitorInterval);\n      this.gainMonitorInterval = null;\n    }\n  }\n\n  /**\n   * Get platform-specific settings according to specification\n   * Complies with MICROPHONE_PLATFORM_SPECIFICATIONS.md\n   */\n  getPlatformSpecs(): DeviceSpecs {\n    // Use DeviceDetection utility for consistent device detection\n    const deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    // Add AudioManager-specific properties\n    return {\n      ...deviceSpecs,\n      sensitivity: this.currentSensitivity || deviceSpecs.sensitivity\n    };\n  }\n\n  /**\n   * Decrement reference count and cleanup\n   */\n  release(analyserIds: string[] = []): void {\n    // Remove specified analysers\n    analyserIds.forEach(id => this.removeAnalyser(id));\n\n    this.refCount = Math.max(0, this.refCount - 1);\n    console.log(`📉 [AudioManager] Reference count decremented: ${this.refCount}`);\n\n    // Full cleanup only when no one is using it\n    if (this.refCount <= 0) {\n      console.log('🧹 [AudioManager] Starting full resource cleanup');\n      this._cleanup();\n    }\n  }\n\n  /**\n   * Force cleanup (for emergency use)\n   */\n  forceCleanup(): void {\n    console.log('🚨 [AudioManager] Force cleanup executed');\n    this._cleanup();\n  }\n\n  /**\n   * Internal cleanup process\n   */\n  private _cleanup(): void {\n    console.log('🧹 [AudioManager] Starting cleanup');\n    \n    // HOTFIX: Stop gain monitoring\n    this.stopGainMonitoring();\n    \n    // Remove all analysers\n    for (const id of this.analysers.keys()) {\n      this.removeAnalyser(id);\n    }\n\n    // Stop MediaStream (health check compatible)\n    if (this.mediaStream) {\n      const tracks = this.mediaStream.getTracks();\n      console.log(`🛑 [AudioManager] Stopping MediaStream: ${tracks.length} tracks`);\n      \n      tracks.forEach((track, index) => {\n        try {\n          if (track.readyState !== 'ended') {\n            track.stop();\n            console.log(`🛑 [AudioManager] Track ${index} stop complete`);\n          } else {\n            console.log(`⚠️ [AudioManager] Track ${index} already ended`);\n          }\n        } catch (error) {\n          const trackError = new PitchProError(\n            `メディアトラック ${index} の停止中にエラーが発生しました: ${(error as Error).message}`,\n            ErrorCode.AUDIO_CONTEXT_ERROR,\n            {\n              operation: 'track_cleanup',\n              trackIndex: index,\n              originalError: (error as Error).message,\n              trackState: track.readyState\n            }\n          );\n          \n          ErrorMessageBuilder.logError(trackError, 'Media track cleanup');\n        }\n      });\n      \n      this.mediaStream = null;\n    }\n\n    // Close AudioContext\n    if (this.audioContext && this.audioContext.state !== 'closed') {\n      try {\n        this.audioContext.close();\n        console.log('🛑 [AudioManager] AudioContext close complete');\n      } catch (error) {\n        const contextError = new AudioContextError(\n          `AudioContextの終了中にエラーが発生しました: ${(error as Error).message}`,\n          {\n            operation: 'audioContext_cleanup',\n            contextState: this.audioContext?.state,\n            originalError: (error as Error).message\n          }\n        );\n        \n        ErrorMessageBuilder.logError(contextError, 'AudioContext cleanup');\n      }\n      this.audioContext = null;\n    }\n\n    // Remove GainNode\n    if (this.gainNode) {\n      this.gainNode.disconnect();\n      this.gainNode = null;\n    }\n\n    // Remove SourceNode\n    if (this.sourceNode) {\n      this.sourceNode.disconnect();\n      this.sourceNode = null;\n    }\n\n    // Reset state\n    this.isInitialized = false;\n    this.refCount = 0;\n    this.initPromise = null;\n    this.currentSensitivity = this._getDefaultSensitivity(); // Reset to device-dependent default sensitivity\n\n    console.log('✅ [AudioManager] Cleanup complete');\n  }\n\n  /**\n   * Creates structured error with enhanced context information\n   * \n   * @private\n   * @param error - Original error\n   * @param operation - Operation that failed\n   * @returns Structured PitchProError with context\n   */\n  private _createStructuredError(error: Error, operation: string): PitchProError {\n    // Determine error type based on error message patterns\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.getPlatformSpecs(),\n          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('context')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          audioContextState: this.audioContext?.state || 'none',\n          sampleRate: this.audioContext?.sampleRate || 'unknown',\n          deviceSpecs: this.getPlatformSpecs()\n        }\n      );\n    }\n    \n    // Default to generic PitchPro error\n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.AUDIO_CONTEXT_ERROR,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        currentState: {\n          isInitialized: this.isInitialized,\n          refCount: this.refCount,\n          hasResources: !!(this.audioContext && this.mediaStream && this.sourceNode)\n        }\n      }\n    );\n  }\n\n  /**\n   * Gets current AudioManager status for debugging and monitoring\n   * \n   * @returns Status object containing initialization state, reference count, and resource states\n   * \n   * @example\n   * ```typescript\n   * const status = audioManager.getStatus();\n   * console.log('AudioManager Status:', status);\n   * console.log('Active analysers:', status.activeAnalysers);\n   * ```\n   */\n  getStatus() {\n    return {\n      isInitialized: this.isInitialized,\n      refCount: this.refCount,\n      audioContextState: this.audioContext?.state || 'none',\n      mediaStreamActive: this.mediaStream?.active || false,\n      activeAnalysers: Array.from(this.analysers.keys()),\n      activeFilters: Array.from(this.filters.keys()),\n      lastError: this.lastError,\n      currentSensitivity: this.currentSensitivity\n    };\n  }\n\n  /**\n   * Performs comprehensive health check on MediaStream and tracks\n   * \n   * @returns Health status object with detailed track information\n   * \n   * @example\n   * ```typescript\n   * const health = audioManager.checkMediaStreamHealth();\n   * if (!health.healthy) {\n   *   console.warn('MediaStream health issue detected:', health);\n   *   // Perform recovery actions\n   * }\n   * ```\n   */\n  checkMediaStreamHealth(): HealthStatus {\n    if (!this.mediaStream) {\n      return { \n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    // MediaStream state check (Safari compatibility enhanced)\n    if (!this.mediaStream.active) {\n      return {\n        mediaStreamActive: false,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const tracks = this.mediaStream.getTracks();\n    if (tracks.length === 0) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: [],\n        healthy: false\n      };\n    }\n\n    const audioTrack = tracks.find(track => track.kind === 'audio');\n    if (!audioTrack) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates: tracks.map(track => ({\n          kind: track.kind,\n          enabled: track.enabled,\n          readyState: track.readyState,\n          muted: track.muted\n        })),\n        healthy: false\n      };\n    }\n\n    const trackStates: TrackState[] = tracks.map(track => ({\n      kind: track.kind,\n      enabled: track.enabled,\n      readyState: track.readyState,\n      muted: track.muted\n    }));\n\n    // AudioTrack detailed state check (Safari WebKit compatibility)\n    if (audioTrack.readyState === 'ended') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // 🔧 Note: audioTrack.enabled=false (muted state) is NOT considered unhealthy\n    // Mute/unmute operations are normal user actions and should not trigger health check failures\n    // Only check readyState and muted property for actual hardware/system issues\n    // if (!audioTrack.enabled) {\n    //   return {\n    //     mediaStreamActive: this.mediaStream.active,\n    //     audioContextState: this.audioContext?.state || 'none',\n    //     trackStates,\n    //     healthy: false\n    //   };\n    // }\n\n    // Safari-specific muted state check\n    if (audioTrack.muted) {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    // Additional check: MediaStream and Track consistency verification\n    if (this.mediaStream.active && audioTrack.readyState !== 'live') {\n      return {\n        mediaStreamActive: this.mediaStream.active,\n        audioContextState: this.audioContext?.state || 'none',\n        trackStates,\n        healthy: false\n      };\n    }\n\n    return {\n      mediaStreamActive: this.mediaStream.active,\n      audioContextState: this.audioContext?.state || 'none',\n      trackStates,\n      healthy: true,\n      refCount: this.refCount\n    };\n  }\n}","'use strict';\n\nfunction FFT(size) {\n  this.size = size | 0;\n  if (this.size <= 1 || (this.size & (this.size - 1)) !== 0)\n    throw new Error('FFT size must be a power of two and bigger than 1');\n\n  this._csize = size << 1;\n\n  // NOTE: Use of `var` is intentional for old V8 versions\n  var table = new Array(this.size * 2);\n  for (var i = 0; i < table.length; i += 2) {\n    const angle = Math.PI * i / this.size;\n    table[i] = Math.cos(angle);\n    table[i + 1] = -Math.sin(angle);\n  }\n  this.table = table;\n\n  // Find size's power of two\n  var power = 0;\n  for (var t = 1; this.size > t; t <<= 1)\n    power++;\n\n  // Calculate initial step's width:\n  //   * If we are full radix-4 - it is 2x smaller to give inital len=8\n  //   * Otherwise it is the same as `power` to give len=4\n  this._width = power % 2 === 0 ? power - 1 : power;\n\n  // Pre-compute bit-reversal patterns\n  this._bitrev = new Array(1 << this._width);\n  for (var j = 0; j < this._bitrev.length; j++) {\n    this._bitrev[j] = 0;\n    for (var shift = 0; shift < this._width; shift += 2) {\n      var revShift = this._width - shift - 2;\n      this._bitrev[j] |= ((j >>> shift) & 3) << revShift;\n    }\n  }\n\n  this._out = null;\n  this._data = null;\n  this._inv = 0;\n}\nmodule.exports = FFT;\n\nFFT.prototype.fromComplexArray = function fromComplexArray(complex, storage) {\n  var res = storage || new Array(complex.length >>> 1);\n  for (var i = 0; i < complex.length; i += 2)\n    res[i >>> 1] = complex[i];\n  return res;\n};\n\nFFT.prototype.createComplexArray = function createComplexArray() {\n  const res = new Array(this._csize);\n  for (var i = 0; i < res.length; i++)\n    res[i] = 0;\n  return res;\n};\n\nFFT.prototype.toComplexArray = function toComplexArray(input, storage) {\n  var res = storage || this.createComplexArray();\n  for (var i = 0; i < res.length; i += 2) {\n    res[i] = input[i >>> 1];\n    res[i + 1] = 0;\n  }\n  return res;\n};\n\nFFT.prototype.completeSpectrum = function completeSpectrum(spectrum) {\n  var size = this._csize;\n  var half = size >>> 1;\n  for (var i = 2; i < half; i += 2) {\n    spectrum[size - i] = spectrum[i];\n    spectrum[size - i + 1] = -spectrum[i + 1];\n  }\n};\n\nFFT.prototype.transform = function transform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._transform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.realTransform = function realTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 0;\n  this._realTransform4();\n  this._out = null;\n  this._data = null;\n};\n\nFFT.prototype.inverseTransform = function inverseTransform(out, data) {\n  if (out === data)\n    throw new Error('Input and output buffers must be different');\n\n  this._out = out;\n  this._data = data;\n  this._inv = 1;\n  this._transform4();\n  for (var i = 0; i < out.length; i++)\n    out[i] /= this.size;\n  this._out = null;\n  this._data = null;\n};\n\n// radix-4 implementation\n//\n// NOTE: Uses of `var` are intentional for older V8 version that do not\n// support both `let compound assignments` and `const phi`\nFFT.prototype._transform4 = function _transform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform2(outOff, off, step);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleTransform4(outOff, off, step);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var quarterLen = len >>> 2;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      // Full case\n      var limit = outOff + quarterLen;\n      for (var i = outOff, k = 0; i < limit; i += 2, k += step) {\n        const A = i;\n        const B = A + quarterLen;\n        const C = B + quarterLen;\n        const D = C + quarterLen;\n\n        // Original values\n        const Ar = out[A];\n        const Ai = out[A + 1];\n        const Br = out[B];\n        const Bi = out[B + 1];\n        const Cr = out[C];\n        const Ci = out[C + 1];\n        const Dr = out[D];\n        const Di = out[D + 1];\n\n        // Middle values\n        const MAr = Ar;\n        const MAi = Ai;\n\n        const tableBr = table[k];\n        const tableBi = inv * table[k + 1];\n        const MBr = Br * tableBr - Bi * tableBi;\n        const MBi = Br * tableBi + Bi * tableBr;\n\n        const tableCr = table[2 * k];\n        const tableCi = inv * table[2 * k + 1];\n        const MCr = Cr * tableCr - Ci * tableCi;\n        const MCi = Cr * tableCi + Ci * tableCr;\n\n        const tableDr = table[3 * k];\n        const tableDi = inv * table[3 * k + 1];\n        const MDr = Dr * tableDr - Di * tableDi;\n        const MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        const T0r = MAr + MCr;\n        const T0i = MAi + MCi;\n        const T1r = MAr - MCr;\n        const T1i = MAi - MCi;\n        const T2r = MBr + MDr;\n        const T2i = MBi + MDi;\n        const T3r = inv * (MBr - MDr);\n        const T3i = inv * (MBi - MDi);\n\n        // Final values\n        const FAr = T0r + T2r;\n        const FAi = T0i + T2i;\n\n        const FCr = T0r - T2r;\n        const FCi = T0i - T2i;\n\n        const FBr = T1r + T3i;\n        const FBi = T1i - T3r;\n\n        const FDr = T1r - T3i;\n        const FDi = T1i + T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n        out[C] = FCr;\n        out[C + 1] = FCi;\n        out[D] = FDr;\n        out[D + 1] = FDi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleTransform2 = function _singleTransform2(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const evenI = data[off + 1];\n  const oddR = data[off + step];\n  const oddI = data[off + step + 1];\n\n  const leftR = evenR + oddR;\n  const leftI = evenI + oddI;\n  const rightR = evenR - oddR;\n  const rightI = evenI - oddI;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = leftI;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = rightI;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleTransform4 = function _singleTransform4(outOff, off,\n                                                             step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Ai = data[off + 1];\n  const Br = data[off + step];\n  const Bi = data[off + step + 1];\n  const Cr = data[off + step2];\n  const Ci = data[off + step2 + 1];\n  const Dr = data[off + step3];\n  const Di = data[off + step3 + 1];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T0i = Ai + Ci;\n  const T1r = Ar - Cr;\n  const T1i = Ai - Ci;\n  const T2r = Br + Dr;\n  const T2i = Bi + Di;\n  const T3r = inv * (Br - Dr);\n  const T3i = inv * (Bi - Di);\n\n  // Final values\n  const FAr = T0r + T2r;\n  const FAi = T0i + T2i;\n\n  const FBr = T1r + T3i;\n  const FBi = T1i - T3r;\n\n  const FCr = T0r - T2r;\n  const FCi = T0i - T2i;\n\n  const FDr = T1r - T3i;\n  const FDi = T1i + T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = FAi;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = FCi;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n\n// Real input radix-4 implementation\nFFT.prototype._realTransform4 = function _realTransform4() {\n  var out = this._out;\n  var size = this._csize;\n\n  // Initial step (permute and transform)\n  var width = this._width;\n  var step = 1 << width;\n  var len = (size / step) << 1;\n\n  var outOff;\n  var t;\n  var bitrev = this._bitrev;\n  if (len === 4) {\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform2(outOff, off >>> 1, step >>> 1);\n    }\n  } else {\n    // len === 8\n    for (outOff = 0, t = 0; outOff < size; outOff += len, t++) {\n      const off = bitrev[t];\n      this._singleRealTransform4(outOff, off >>> 1, step >>> 1);\n    }\n  }\n\n  // Loop through steps in decreasing order\n  var inv = this._inv ? -1 : 1;\n  var table = this.table;\n  for (step >>= 2; step >= 2; step >>= 2) {\n    len = (size / step) << 1;\n    var halfLen = len >>> 1;\n    var quarterLen = halfLen >>> 1;\n    var hquarterLen = quarterLen >>> 1;\n\n    // Loop through offsets in the data\n    for (outOff = 0; outOff < size; outOff += len) {\n      for (var i = 0, k = 0; i <= hquarterLen; i += 2, k += step) {\n        var A = outOff + i;\n        var B = A + quarterLen;\n        var C = B + quarterLen;\n        var D = C + quarterLen;\n\n        // Original values\n        var Ar = out[A];\n        var Ai = out[A + 1];\n        var Br = out[B];\n        var Bi = out[B + 1];\n        var Cr = out[C];\n        var Ci = out[C + 1];\n        var Dr = out[D];\n        var Di = out[D + 1];\n\n        // Middle values\n        var MAr = Ar;\n        var MAi = Ai;\n\n        var tableBr = table[k];\n        var tableBi = inv * table[k + 1];\n        var MBr = Br * tableBr - Bi * tableBi;\n        var MBi = Br * tableBi + Bi * tableBr;\n\n        var tableCr = table[2 * k];\n        var tableCi = inv * table[2 * k + 1];\n        var MCr = Cr * tableCr - Ci * tableCi;\n        var MCi = Cr * tableCi + Ci * tableCr;\n\n        var tableDr = table[3 * k];\n        var tableDi = inv * table[3 * k + 1];\n        var MDr = Dr * tableDr - Di * tableDi;\n        var MDi = Dr * tableDi + Di * tableDr;\n\n        // Pre-Final values\n        var T0r = MAr + MCr;\n        var T0i = MAi + MCi;\n        var T1r = MAr - MCr;\n        var T1i = MAi - MCi;\n        var T2r = MBr + MDr;\n        var T2i = MBi + MDi;\n        var T3r = inv * (MBr - MDr);\n        var T3i = inv * (MBi - MDi);\n\n        // Final values\n        var FAr = T0r + T2r;\n        var FAi = T0i + T2i;\n\n        var FBr = T1r + T3i;\n        var FBi = T1i - T3r;\n\n        out[A] = FAr;\n        out[A + 1] = FAi;\n        out[B] = FBr;\n        out[B + 1] = FBi;\n\n        // Output final middle point\n        if (i === 0) {\n          var FCr = T0r - T2r;\n          var FCi = T0i - T2i;\n          out[C] = FCr;\n          out[C + 1] = FCi;\n          continue;\n        }\n\n        // Do not overwrite ourselves\n        if (i === hquarterLen)\n          continue;\n\n        // In the flipped case:\n        // MAi = -MAi\n        // MBr=-MBi, MBi=-MBr\n        // MCr=-MCr\n        // MDr=MDi, MDi=MDr\n        var ST0r = T1r;\n        var ST0i = -T1i;\n        var ST1r = T0r;\n        var ST1i = -T0i;\n        var ST2r = -inv * T3i;\n        var ST2i = -inv * T3r;\n        var ST3r = -inv * T2i;\n        var ST3i = -inv * T2r;\n\n        var SFAr = ST0r + ST2r;\n        var SFAi = ST0i + ST2i;\n\n        var SFBr = ST1r + ST3i;\n        var SFBi = ST1i - ST3r;\n\n        var SA = outOff + quarterLen - i;\n        var SB = outOff + halfLen - i;\n\n        out[SA] = SFAr;\n        out[SA + 1] = SFAi;\n        out[SB] = SFBr;\n        out[SB + 1] = SFBi;\n      }\n    }\n  }\n};\n\n// radix-2 implementation\n//\n// NOTE: Only called for len=4\nFFT.prototype._singleRealTransform2 = function _singleRealTransform2(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n\n  const evenR = data[off];\n  const oddR = data[off + step];\n\n  const leftR = evenR + oddR;\n  const rightR = evenR - oddR;\n\n  out[outOff] = leftR;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = rightR;\n  out[outOff + 3] = 0;\n};\n\n// radix-4\n//\n// NOTE: Only called for len=8\nFFT.prototype._singleRealTransform4 = function _singleRealTransform4(outOff,\n                                                                     off,\n                                                                     step) {\n  const out = this._out;\n  const data = this._data;\n  const inv = this._inv ? -1 : 1;\n  const step2 = step * 2;\n  const step3 = step * 3;\n\n  // Original values\n  const Ar = data[off];\n  const Br = data[off + step];\n  const Cr = data[off + step2];\n  const Dr = data[off + step3];\n\n  // Pre-Final values\n  const T0r = Ar + Cr;\n  const T1r = Ar - Cr;\n  const T2r = Br + Dr;\n  const T3r = inv * (Br - Dr);\n\n  // Final values\n  const FAr = T0r + T2r;\n\n  const FBr = T1r;\n  const FBi = -T3r;\n\n  const FCr = T0r - T2r;\n\n  const FDr = T1r;\n  const FDi = T3r;\n\n  out[outOff] = FAr;\n  out[outOff + 1] = 0;\n  out[outOff + 2] = FBr;\n  out[outOff + 3] = FBi;\n  out[outOff + 4] = FCr;\n  out[outOff + 5] = 0;\n  out[outOff + 6] = FDr;\n  out[outOff + 7] = FDi;\n};\n","import FFT from \"fft.js\";\n\n/**\n * @typedef {Float32Array | Float64Array | number[]} Buffer One of the supported\n * buffer types. Other numeric array types may not work correctly.\n */\n\n/**\n * A class that can perform autocorrelation on input arrays of a given size.\n *\n * The class holds internal buffers so that no additional allocations are\n * necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use. While inputs to the\n * autocorrelation process can be any array-like type, the output buffer\n * (whether provided explicitly or using a fresh buffer) is always of this type.\n */\nexport class Autocorrelator {\n  /** @private @readonly @type {number} */\n  _inputLength;\n  /** @private @type {FFT} */\n  _fft;\n  /** @private @type {(size: number) => T} */\n  _bufferSupplier;\n  /** @private @type {T} */\n  _paddedInputBuffer;\n  /** @private @type {T} */\n  _transformBuffer;\n  /** @private @type {T} */\n  _inverseBuffer;\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float32Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using\n   * {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new Autocorrelator(\n      inputLength,\n      (length) => new Float64Array(length),\n    );\n  }\n\n  /**\n   * A helper method to create an {@link Autocorrelator} using `number[]`\n   * buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {Autocorrelator<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new Autocorrelator(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link Autocorrelator} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `Autocorrelator` will only support operation on arrays of this length.\n   * @param bufferSupplier {(length: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    if (inputLength < 1) {\n      throw new Error(`Input length must be at least one`);\n    }\n    this._inputLength = inputLength;\n    // We need to double the input length to get correct results, and the FFT\n    // algorithm we use requires a length that's a power of 2\n    this._fft = new FFT(ceilPow2(2 * inputLength));\n    this._bufferSupplier = bufferSupplier;\n    this._paddedInputBuffer = this._bufferSupplier(this._fft.size);\n    this._transformBuffer = this._bufferSupplier(2 * this._fft.size);\n    this._inverseBuffer = this._bufferSupplier(2 * this._fft.size);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._inputLength;\n  }\n\n  /**\n   * Autocorrelates the given input data.\n   *\n   * @param input {ArrayLike<number>} the input data to autocorrelate\n   * @param output {T} the output buffer into which to write the autocorrelated\n   * data. If not provided, a new buffer will be created.\n   * @returns {T} `output`\n   */\n  autocorrelate(input, output = this._bufferSupplier(input.length)) {\n    if (input.length !== this._inputLength) {\n      throw new Error(\n        `Input must have length ${this._inputLength} but had length ${input.length}`,\n      );\n    }\n    // Step 0: pad the input array with zeros\n    for (let i = 0; i < input.length; i++) {\n      this._paddedInputBuffer[i] = input[i];\n    }\n    for (let i = input.length; i < this._paddedInputBuffer.length; i++) {\n      this._paddedInputBuffer[i] = 0;\n    }\n\n    // Step 1: get the DFT of the input array\n    this._fft.realTransform(this._transformBuffer, this._paddedInputBuffer);\n    // We need to fill in the right half of the array too\n    this._fft.completeSpectrum(this._transformBuffer);\n    // Step 2: multiply each entry by its conjugate\n    const tb = this._transformBuffer;\n    for (let i = 0; i < tb.length; i += 2) {\n      tb[i] = tb[i] * tb[i] + tb[i + 1] * tb[i + 1];\n      tb[i + 1] = 0;\n    }\n    // Step 3: perform the inverse transform\n    this._fft.inverseTransform(this._inverseBuffer, this._transformBuffer);\n\n    // This last result (the inverse transform) contains the autocorrelation\n    // data, which is completely real\n    for (let i = 0; i < input.length; i++) {\n      output[i] = this._inverseBuffer[2 * i];\n    }\n    return output;\n  }\n}\n\n/**\n * Returns an array of all the key maximum positions in the given input array.\n *\n * In McLeod's paper, a key maximum is the highest maximum between a positively\n * sloped zero crossing and a negatively sloped one.\n *\n * TODO: it may be more efficient not to construct a new output array each time,\n * but that would also make the code more complicated (more so than the changes\n * that were needed to remove the other allocations).\n *\n * @param input {ArrayLike<number>}\n * @returns {number[]}\n */\nfunction getKeyMaximumIndices(input) {\n  // The indices of the key maxima\n  /** @type {number[]} */ const keyIndices = [];\n  // Whether the last zero crossing found was positively sloped; equivalently,\n  // whether we're looking for a key maximum\n  let lookingForMaximum = false;\n  // The largest local maximum found so far\n  let max = -Infinity;\n  // The index of the largest local maximum so far\n  let maxIndex = -1;\n\n  for (let i = 1; i < input.length - 1; i++) {\n    if (input[i - 1] <= 0 && input[i] > 0) {\n      // Positively sloped zero crossing\n      lookingForMaximum = true;\n      maxIndex = i;\n      max = input[i];\n    } else if (input[i - 1] > 0 && input[i] <= 0) {\n      // Negatively sloped zero crossing\n      lookingForMaximum = false;\n      if (maxIndex !== -1) {\n        keyIndices.push(maxIndex);\n      }\n    } else if (lookingForMaximum && input[i] > max) {\n      max = input[i];\n      maxIndex = i;\n    }\n  }\n\n  return keyIndices;\n}\n\n/**\n * Refines the chosen key maximum index chosen from the given data by\n * interpolating a parabola using the key maximum index and its two neighbors\n * and finding the position of that parabola's maximum value.\n *\n * This is described in section 5 of the MPM paper as a way to refine the\n * position of the maximum.\n *\n * @param index {number} the chosen key maximum index. This must be between `1`\n * and `data.length - 2`, inclusive, since it and its two neighbors need to be\n * valid indexes of `data`.\n * @param data {ArrayLike<number>} the input array from which `index` was chosen\n * @returns {[number, number]} a pair consisting of the refined key maximum index and the\n * interpolated value of `data` at that index (the latter of which is used as a\n * measure of clarity)\n */\nfunction refineResultIndex(index, data) {\n  const [x0, x1, x2] = [index - 1, index, index + 1];\n  const [y0, y1, y2] = [data[x0], data[x1], data[x2]];\n\n  // The parabola going through the three data points can be written as\n  // y = y0(x - x1)(x - x2)/(x0 - x1)(x0 - x2)\n  //   + y1(x - x0)(x - x2)/(x1 - x0)(x1 - x2)\n  //   + y2(x - x0)(x - x1)/(x2 - x0)(x2 - x1)\n  // Given the definitions of x0, x1, and x2, we can simplify the denominators:\n  // y = y0(x - x1)(x - x2)/2\n  //   - y1(x - x0)(x - x2)\n  //   + y2(x - x0)(x - x1)/2\n  // We can expand this out and get the coefficients in standard form:\n  // a = y0/2 - y1 + y2/2\n  // b = -(y0/2)(x1 + x2) + y1(x0 + x2) - (y2/2)(x0 + x1)\n  // c = y0x1x2/2 - y1x0x2 + y2x0x1/2\n  // The index of the maximum is -b / 2a (by solving for x where the derivative\n  // is 0).\n\n  const a = y0 / 2 - y1 + y2 / 2;\n  const b = -(y0 / 2) * (x1 + x2) + y1 * (x0 + x2) - (y2 / 2) * (x0 + x1);\n  const c = (y0 * x1 * x2) / 2 - y1 * x0 * x2 + (y2 * x0 * x1) / 2;\n\n  const xMax = -b / (2 * a);\n  const yMax = a * xMax * xMax + b * xMax + c;\n  return [xMax, yMax];\n}\n\n/**\n * A class that can detect the pitch of a note from a time-domain input array.\n *\n * This class uses the McLeod pitch method (MPM) to detect pitches. MPM is\n * described in the paper 'A Smarter Way to Find Pitch' by Philip McLeod and\n * Geoff Wyvill\n * (http://miracle.otago.ac.nz/tartini/papers/A_Smarter_Way_to_Find_Pitch.pdf).\n *\n * The class holds internal buffers so that a minimal number of additional\n * allocations are necessary while performing the operation.\n *\n * @template {Buffer} T the buffer type to use internally. Inputs to the\n * pitch-detection process can be any numeric array type.\n */\nexport class PitchDetector {\n  /** @private @type {Autocorrelator<T>} */\n  _autocorrelator;\n  /** @private @type {T} */\n  _nsdfBuffer;\n  /** @private @type {number} */\n  _clarityThreshold = 0.9;\n  /** @private @type {number} */\n  _minVolumeAbsolute = 0.0;\n  /** @private @type {number} */\n  _maxInputAmplitude = 1.0;\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float32Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float32Array>}\n   */\n  static forFloat32Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float32Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using {@link Float64Array} buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<Float64Array>}\n   */\n  static forFloat64Array(inputLength) {\n    return new PitchDetector(inputLength, (length) => new Float64Array(length));\n  }\n\n  /**\n   * A helper method to create an {@link PitchDetector} using `number[]` buffers.\n   *\n   * @param inputLength {number} the input array length to support\n   * @returns {PitchDetector<number[]>}\n   */\n  static forNumberArray(inputLength) {\n    return new PitchDetector(inputLength, (length) => Array(length));\n  }\n\n  /**\n   * Constructs a new {@link PitchDetector} able to handle input arrays of the\n   * given length.\n   *\n   * @param inputLength {number} the input array length to support. This\n   * `PitchDetector` will only support operation on arrays of this length.\n   * @param bufferSupplier {(inputLength: number) => T} the function to use for\n   * creating buffers, accepting the length of the buffer to create and\n   * returning a new buffer of that length. The values of the returned buffer\n   * need not be initialized in any particular way.\n   */\n  constructor(inputLength, bufferSupplier) {\n    this._autocorrelator = new Autocorrelator(inputLength, bufferSupplier);\n    this._nsdfBuffer = bufferSupplier(inputLength);\n  }\n\n  /**\n   * Returns the supported input length.\n   *\n   * @returns {number} the supported input length\n   */\n  get inputLength() {\n    return this._autocorrelator.inputLength;\n  }\n\n  /**\n   * Sets the clarity threshold used when identifying the correct pitch (the constant\n   * `k` from the MPM paper). The value must be between 0 (exclusive) and 1\n   * (inclusive), with the most suitable range being between 0.8 and 1.\n   *\n   * @param threshold {number} the clarity threshold\n   */\n  set clarityThreshold(threshold) {\n    if (!Number.isFinite(threshold) || threshold <= 0 || threshold > 1) {\n      throw new Error(\"clarityThreshold must be a number in the range (0, 1]\");\n    }\n    this._clarityThreshold = threshold;\n  }\n\n  /**\n   * Sets the minimum detectable volume, as an absolute number between 0 and\n   * `maxInputAmplitude`, inclusive, to consider in a sample when detecting the\n   * pitch. If a sample fails to meet this minimum volume, `findPitch` will\n   * return a clarity of 0.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param volume {number} the minimum volume as an absolute amplitude value\n   */\n  set minVolumeAbsolute(volume) {\n    if (\n      !Number.isFinite(volume) ||\n      volume < 0 ||\n      volume > this._maxInputAmplitude\n    ) {\n      throw new Error(\n        `minVolumeAbsolute must be a number in the range [0, ${this._maxInputAmplitude}]`,\n      );\n    }\n    this._minVolumeAbsolute = volume;\n  }\n\n  /**\n   * Sets the minimum volume using a decibel measurement. Must be less than or\n   * equal to 0: 0 indicates the loudest possible sound (see\n   * `maxInputAmplitude`), -10 is a sound with a tenth of the volume of the\n   * loudest possible sound, etc.\n   *\n   * Volume is calculated as the RMS (root mean square) of the input samples.\n   *\n   * @param db {number} the minimum volume in decibels, with 0 being the loudest\n   * sound\n   */\n  set minVolumeDecibels(db) {\n    if (!Number.isFinite(db) || db > 0) {\n      throw new Error(\"minVolumeDecibels must be a number <= 0\");\n    }\n    this._minVolumeAbsolute = this._maxInputAmplitude * 10 ** (db / 10);\n  }\n\n  /**\n   * Sets the maximum amplitude of an input reading. Must be greater than 0.\n   *\n   * @param amplitude {number} the maximum amplitude (absolute value) of an input reading\n   */\n  set maxInputAmplitude(amplitude) {\n    if (!Number.isFinite(amplitude) || amplitude <= 0) {\n      throw new Error(\"maxInputAmplitude must be a number > 0\");\n    }\n    this._maxInputAmplitude = amplitude;\n  }\n\n  /**\n   * Returns the pitch detected using McLeod Pitch Method (MPM) along with a\n   * measure of its clarity.\n   *\n   * The clarity is a value between 0 and 1 (potentially inclusive) that\n   * represents how \"clear\" the pitch was. A clarity value of 1 indicates that\n   * the pitch was very distinct, while lower clarity values indicate less\n   * definite pitches.\n   *\n   * @param input {ArrayLike<number>} the time-domain input data\n   * @param sampleRate {number} the sample rate at which the input data was\n   * collected\n   * @returns {[number, number]} the detected pitch, in Hz, followed by the\n   * clarity. If a pitch cannot be determined from the input, such as if the\n   * volume is too low (see `minVolumeAbsolute` and `minVolumeDecibels`), this\n   * will be `[0, 0]`.\n   */\n  findPitch(input, sampleRate) {\n    // If the highest key maximum is less than the minimum volume, we don't need\n    // to bother detecting the pitch, as the sample is too quiet.\n    if (this._belowMinimumVolume(input)) return [0, 0];\n    this._nsdf(input);\n    const keyMaximumIndices = getKeyMaximumIndices(this._nsdfBuffer);\n    if (keyMaximumIndices.length === 0) {\n      // No key maxima means that we either don't have enough data to analyze or\n      // that the data was flawed (such as an input array of zeroes)\n      return [0, 0];\n    }\n    // The highest key maximum\n    const nMax = Math.max(...keyMaximumIndices.map((i) => this._nsdfBuffer[i]));\n    // Following the paper, we return the pitch corresponding to the first key\n    // maximum higher than K * nMax. This is guaranteed not to be undefined, since\n    // we know of at least one key maximum satisfying this condition (whichever\n    // key maximum gave us nMax).\n    const resultIndex = keyMaximumIndices.find(\n      (i) => this._nsdfBuffer[i] >= this._clarityThreshold * nMax,\n    );\n    const [refinedResultIndex, clarity] = refineResultIndex(\n      // @ts-expect-error resultIndex is guaranteed to be defined\n      resultIndex,\n      this._nsdfBuffer,\n    );\n\n    // Due to floating point errors, the clarity may occasionally come out to be\n    // slightly over 1.0. We can avoid incorrect results by clamping the value.\n    return [sampleRate / refinedResultIndex, Math.min(clarity, 1.0)];\n  }\n\n  /**\n   * Returns whether the input audio data is below the minimum volume allowed by\n   * the pitch detector.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   * @returns {boolean}\n   */\n  _belowMinimumVolume(input) {\n    if (this._minVolumeAbsolute === 0) return false;\n    let squareSum = 0;\n    for (let i = 0; i < input.length; i++) {\n      squareSum += input[i] ** 2;\n    }\n    return Math.sqrt(squareSum / input.length) < this._minVolumeAbsolute;\n  }\n\n  /**\n   * Computes the NSDF of the input and stores it in the internal buffer. This\n   * is equation (9) in the McLeod pitch method paper.\n   *\n   * @private\n   * @param input {ArrayLike<number>}\n   */\n  _nsdf(input) {\n    // The function r'(tau) is the autocorrelation\n    this._autocorrelator.autocorrelate(input, this._nsdfBuffer);\n    // The function m'(tau) (defined in equation (6)) can be computed starting\n    // with m'(0), which is equal to 2r'(0), and then iteratively modified to\n    // get m'(1), m'(2), etc. For example, to get m'(1), we take m'(0) and\n    // subtract x_0^2 and x_{W-1}^2. Then, to get m'(2), we take m'(1) and\n    // subtract x_1^2 and x_{W-2}^2, and further values are similar (see the\n    // note at the end of section 6 in the MPM paper).\n    //\n    // The resulting array values are 2 * r'(tau) / m'(tau). We use m below as\n    // the incremental value of m'.\n    let m = 2 * this._nsdfBuffer[0];\n    /** @type {number} */ let i;\n    // As pointed out by issuefiler on GitHub, we can take advantage of the fact\n    // that m will never increase to avoid division by zero by ending this loop\n    // once m === 0. The rest of the array values after m becomes 0 will just be\n    // set to 0 themselves. We actually check for m > 0 rather than m === 0\n    // because there may be small floating-point errors that cause m to become\n    // negative rather than exactly 0.\n    for (i = 0; i < this._nsdfBuffer.length && m > 0; i++) {\n      this._nsdfBuffer[i] = (2 * this._nsdfBuffer[i]) / m;\n      m -= input[i] ** 2 + input[input.length - i - 1] ** 2;\n    }\n    // If there are any array values remaining, it means m === 0 for those\n    // values of tau, so we can just set them to 0\n    for (; i < this._nsdfBuffer.length; i++) {\n      this._nsdfBuffer[i] = 0;\n    }\n  }\n}\n\n/**\n * Rounds up the input to the next power of 2.\n *\n * @param {number} v\n * @returns {number} the next power of 2 at least as large as `v`\n */\nfunction ceilPow2(v) {\n  // https://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2\n  v--;\n  v |= v >> 1;\n  v |= v >> 2;\n  v |= v >> 4;\n  v |= v >> 8;\n  v |= v >> 16;\n  v++;\n  return v;\n}\n","/**\n * 音響処理に最適化されたパフォーマンス制御\n * 音質を維持しながらCPU負荷を削減\n */\n\nexport class AdaptiveFrameRateLimiter {\n  private lastFrameTime = 0;\n  private nextFrameTime = 0;\n  private targetFPS: number;\n  private frameInterval: number;\n  private frameDrops = 0;\n  \n  // 音楽用途に適した範囲\n  private readonly MIN_FPS = 30;  // 最低30FPS（33ms以下のレイテンシー）\n  private readonly MAX_FPS = 60;  // 最高60FPS（ブラウザ標準）\n  private readonly OPTIMAL_FPS = 45; // 推奨45FPS（22ms、音楽演奏に適切）\n  \n  constructor(initialFPS = 45) {\n    this.targetFPS = Math.max(this.MIN_FPS, Math.min(initialFPS, this.MAX_FPS));\n    this.frameInterval = 1000 / this.targetFPS;\n  }\n  \n  shouldProcess(): boolean {\n    const now = performance.now();\n    \n    // 初回実行時の初期化\n    if (this.nextFrameTime === 0) {\n      this.nextFrameTime = now + this.frameInterval;\n      this.lastFrameTime = now;\n      return true;\n    }\n    \n    // 次フレーム時刻に到達したかチェック\n    if (now >= this.nextFrameTime) {\n      const actualElapsed = now - this.lastFrameTime;\n      \n      // フレーム落ちを検出（期待間隔の1.5倍を超過）\n      if (actualElapsed > this.frameInterval * 1.5) {\n        this.frameDrops++;\n        this.adjustFrameRate();\n      }\n      \n      // 次フレーム時刻を絶対時刻で設定（累積誤差を回避）\n      this.nextFrameTime = now + this.frameInterval;\n      this.lastFrameTime = now;\n      \n      return true;\n    }\n    \n    return false;\n  }\n  \n  // CPU負荷に応じて動的にFPSを調整\n  private adjustFrameRate(): void {\n    if (this.frameDrops > 5 && this.targetFPS > this.MIN_FPS) {\n      // 負荷が高い場合はFPSを下げる\n      this.targetFPS = Math.max(this.MIN_FPS, this.targetFPS - 5);\n      this.frameInterval = 1000 / this.targetFPS;\n      this.frameDrops = 0;\n      \n      // 次フレーム時刻を新しい間隔で再計算\n      const now = performance.now();\n      this.nextFrameTime = now + this.frameInterval;\n      \n      console.log(`Adjusted FPS to ${this.targetFPS} due to high load`);\n    }\n  }\n  \n  // パフォーマンス回復時にFPSを戻す\n  recoverPerformance(): void {\n    if (this.frameDrops === 0 && this.targetFPS < this.OPTIMAL_FPS) {\n      this.targetFPS = Math.min(this.OPTIMAL_FPS, this.targetFPS + 5);\n      this.frameInterval = 1000 / this.targetFPS;\n      \n      // 次フレーム時刻を新しい間隔で再計算\n      const now = performance.now();\n      this.nextFrameTime = now + this.frameInterval;\n    }\n  }\n  \n  reset(): void {\n    this.lastFrameTime = 0;\n    this.nextFrameTime = 0;\n    this.frameDrops = 0;\n    this.targetFPS = this.OPTIMAL_FPS;\n    this.frameInterval = 1000 / this.targetFPS;\n  }\n  \n  getStats() {\n    return {\n      currentFPS: this.targetFPS,\n      frameDrops: this.frameDrops,\n      latency: this.frameInterval\n    };\n  }\n}\n\n/**\n * 音響処理専用のスロットリング\n * 視覚更新と音声処理を分離\n */\nexport class AudioProcessingThrottle {\n  private visualUpdateThrottle: number;\n  private audioProcessingThrottle: number;\n  \n  constructor() {\n    // 視覚更新は30FPS（33ms）で十分\n    this.visualUpdateThrottle = 33;\n    \n    // 音声処理は高頻度を維持（60FPS相当）\n    this.audioProcessingThrottle = 16;\n  }\n  \n  // UI更新用（メーター、グラフなど）\n  throttleVisual<T extends (...args: any[]) => any>(\n    func: T,\n    customWait?: number\n  ): (...args: Parameters<T>) => void {\n    const wait = customWait || this.visualUpdateThrottle;\n    return throttle(func, wait, { leading: true, trailing: true });\n  }\n  \n  // 音声処理用（ピッチ検出など）\n  throttleAudio<T extends (...args: any[]) => any>(\n    func: T,\n    customWait?: number\n  ): (...args: Parameters<T>) => void {\n    const wait = customWait || this.audioProcessingThrottle;\n    return throttle(func, wait, { leading: true, trailing: false });\n  }\n}\n\n// 既存のthrottle関数を再利用\nfunction throttle<T extends (...args: any[]) => any>(\n  func: T,\n  wait: number,\n  options: { leading?: boolean; trailing?: boolean } = {}\n): (...args: Parameters<T>) => void {\n  let timeout: NodeJS.Timeout | null = null;\n  let previous = 0;\n  let lastArgs: Parameters<T> | null = null;\n  \n  const { leading = true, trailing = true } = options;\n  \n  return function throttled(...args: Parameters<T>) {\n    const now = Date.now();\n    \n    if (!previous && !leading) {\n      previous = now;\n    }\n    \n    const remaining = wait - (now - previous);\n    lastArgs = args;\n    \n    if (remaining <= 0 || remaining > wait) {\n      if (timeout) {\n        clearTimeout(timeout);\n        timeout = null;\n      }\n      previous = now;\n      func.apply(null, args);\n      lastArgs = null;\n    } else if (!timeout && trailing) {\n      timeout = setTimeout(() => {\n        previous = leading ? Date.now() : 0;\n        timeout = null;\n        if (lastArgs) {\n          func.apply(null, lastArgs);\n          lastArgs = null;\n        }\n      }, remaining);\n    }\n  };\n}","/**\n * PitchDetector - Framework-agnostic High-precision Pitch Detection Engine\n * \n * @description Provides real-time pitch detection using the McLeod Pitch Method (Pitchy library)\n * with advanced features including configurable harmonic correction, adaptive frame rate control,\n * noise filtering, TypedArray-optimized volume history, and device-specific optimization for\n * consistent cross-platform performance. Supports development-mode debug logging and comprehensive\n * performance monitoring.\n * \n * @features\n * - **McLeod Pitch Method**: Industry-standard pitch detection algorithm\n * - **Harmonic Correction**: Configurable octave jump detection and correction\n * - **Adaptive Performance**: Dynamic frame rate adjustment (30-60 FPS)\n * - **TypedArray Optimization**: High-performance buffer operations\n * - **Device Optimization**: Platform-specific sensitivity adjustments\n * - **Silence Detection**: Configurable timeout and warning system\n * - **Development Debug**: Conditional debug logging for development builds\n * \n * @example\n * ```typescript\n * // Basic usage with default configuration\n * const pitchDetector = new PitchDetector(audioManager);\n * \n * // Advanced configuration with custom settings\n * const pitchDetector = new PitchDetector(audioManager, {\n *   fftSize: 4096,\n *   clarityThreshold: 0.4,\n *   minVolumeAbsolute: 0.003,\n *   harmonicCorrection: {\n *     enabled: true,\n *     confidenceThreshold: 0.7,\n *     historyWindow: 1000,\n *     frequencyThreshold: 0.1\n *   },\n *   volumeHistory: {\n *     historyLength: 5,\n *     useTypedArray: true\n *   },\n *   silenceDetection: {\n *     enabled: true,\n *     warningThreshold: 15000,\n *     timeoutThreshold: 30000\n *   }\n * });\n * \n * await pitchDetector.initialize();\n * \n * pitchDetector.setCallbacks({\n *   onPitchUpdate: (result) => {\n *     console.log(`Detected: ${result.note} (${result.frequency.toFixed(1)}Hz)`);\n *     console.log(`Clarity: ${(result.clarity * 100).toFixed(1)}%, Volume: ${result.volume.toFixed(1)}%`);\n *   },\n *   onError: (error) => {\n *     console.error('Detection error:', error.message);\n *   },\n *   onStateChange: (state) => {\n *     console.log('Detection state:', state);\n *   }\n * });\n * \n * pitchDetector.startDetection();\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport { PitchDetector as PitchyDetector } from 'pitchy';\nimport type { \n  PitchDetectorConfig, \n  PitchDetectionResult, \n  PitchCallback,\n  ErrorCallback,\n  StateChangeCallback,\n  DeviceSpecs,\n  SilenceDetectionConfig\n} from '../types';\n\n/**\n * Configuration for harmonic correction system\n * @interface HarmonicCorrectionConfig\n */\nexport interface HarmonicCorrectionConfig {\n  /** @description Enable/disable harmonic correction (default: true) */\n  enabled?: boolean;\n  /** @description Confidence threshold for corrections (0-1, default: 0.7) */\n  confidenceThreshold?: number;\n  /** @description Time window for harmonic history in ms (default: 1000) */\n  historyWindow?: number;\n  /** @description Frequency difference threshold for octave detection (0-1, default: 0.1) */\n  frequencyThreshold?: number;\n}\n\n/**\n * Configuration for volume history optimization\n * @interface VolumeHistoryConfig\n */\nexport interface VolumeHistoryConfig {\n  /** @description Number of frames to keep in volume history (default: 5) */\n  historyLength?: number;\n  /** @description Use optimized TypedArray buffer (default: false) */\n  useTypedArray?: boolean;\n}\nimport { AudioManager } from './AudioManager';\nimport { AdaptiveFrameRateLimiter } from '../utils/performance-optimized';\nimport { VERSION_STRING } from '../utils/version';\nimport { \n  PitchProError, \n  AudioContextError, \n  PitchDetectionError, \n  isRecoverableError,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class PitchDetector {\n  /** @private AudioManager instance for resource management */\n  private audioManager: AudioManager;\n  \n  /** @private Pitchy library detector instance for McLeod Pitch Method */\n  private pitchDetector: PitchyDetector<Float32Array> | null = null;\n  \n  /** @private AnalyserNode with noise filtering applied */\n  private analyser: AnalyserNode | null = null;\n  \n  /** @private Raw AnalyserNode for unfiltered volume measurement */\n  private rawAnalyser: AnalyserNode | null = null;\n  \n  /** @private RequestAnimationFrame ID for detection loop */\n  private animationFrame: number | null = null;\n  \n  /** @private Adaptive frame rate controller for optimal performance */\n  private frameRateLimiter: AdaptiveFrameRateLimiter;\n  \n  /** @private Current component state for lifecycle management */\n  private componentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'error' = 'uninitialized';\n  \n  /** @private Initialization completion flag */\n  private isInitialized = false;\n  \n  /** @private Detection active flag */\n  private isDetecting = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Array of analyser IDs for cleanup management */\n  private analyserIds: string[] = [];\n  \n  /** @private Current processed volume level (0-100) */\n  private currentVolume = 0;\n  \n  /** @private Raw volume level before processing (0-100) */\n  private rawVolume = 0;\n  \n  /** @private Currently detected frequency in Hz (preserves decimal precision) */\n  private currentFrequency = 0;\n  \n  /** @private Detected musical note name */\n  private detectedNote = '--';\n  \n  /** @private Detected octave number */\n  private detectedOctave: number | null = null;\n  \n  /** @private Pitch detection clarity/confidence (0-1) */\n  private pitchClarity = 0;\n  \n  // 削除: volumeHistory, stableVolume（統合音量処理でAudioDetectionComponentに移管）\n  \n  /** @private Previous frequency for harmonic correction */\n  // @ts-ignore - Used in correctHarmonic method for frequency tracking\n  private previousFrequency = 0;\n  \n  /** @private History buffer for harmonic analysis */\n  private harmonicHistory: Array<{frequency: number, confidence: number, timestamp: number}> = [];\n  \n  /** @private PitchDetector configuration with defaults applied */\n  private config: Required<Omit<PitchDetectorConfig, 'silenceDetection'>> & { \n    silenceDetection?: SilenceDetectionConfig \n  };\n  \n  /** @private Harmonic correction configuration */\n  private harmonicConfig: Required<HarmonicCorrectionConfig>;\n  \n  /** @private Volume history configuration */\n  private volumeHistoryConfig: Required<VolumeHistoryConfig>;\n  \n  /** @private Flag to disable harmonic correction */\n  private disableHarmonicCorrection = false;\n  \n  /** @private Callback functions for events */\n  private callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  } = {};\n  \n  /** @private Device-specific optimization parameters */\n  private deviceSpecs: DeviceSpecs | null = null;\n  \n  /** @private Silence detection configuration */\n  private silenceDetectionConfig: SilenceDetectionConfig;\n  \n  /** @private Timestamp when silence started */\n  private silenceStartTime: number | null = null;\n  \n  /** @private Timer ID for silence warning */\n  private silenceWarningTimer: number | null = null;\n  \n  /** @private Timer ID for silence timeout */\n  private silenceTimeoutTimer: number | null = null;\n  \n  /** @private Current silence state flag */\n  private isSilent = false;\n  \n  /** @private Silence warning already issued flag */\n  private hasWarned = false;\n\n  /**\n   * Creates a new PitchDetector instance with comprehensive configuration options\n   * \n   * @description Initializes a high-performance pitch detection engine with configurable\n   * harmonic correction, optimized volume history buffers, and device-specific optimizations.\n   * The constructor applies sensible defaults while allowing fine-grained control over all\n   * detection parameters and performance characteristics.\n   * \n   * @param audioManager - AudioManager instance for resource management and audio context access\n   * @param config - Optional configuration object to customize detection behavior\n   * @param config.fftSize - FFT size for frequency analysis (default: 4096, recommended: 2048-8192)\n   * @param config.smoothing - Smoothing factor for AnalyserNode (default: 0.1, range: 0-1)\n   * @param config.clarityThreshold - Minimum clarity for valid detection (default: 0.4, range: 0-1)\n   * @param config.minVolumeAbsolute - Minimum volume threshold (default: 0.003, range: 0.001-0.01)\n   * @param config.harmonicCorrection - Harmonic correction configuration\n   * @param config.harmonicCorrection.enabled - Enable octave jump correction (default: true)\n   * @param config.harmonicCorrection.confidenceThreshold - Confidence required for correction (default: 0.7)\n   * @param config.harmonicCorrection.historyWindow - Time window for harmonic analysis in ms (default: 1000)\n   * @param config.harmonicCorrection.frequencyThreshold - Frequency difference threshold (default: 0.1)\n   * @param config.volumeHistory - Volume history buffer configuration\n   * @param config.volumeHistory.historyLength - Number of frames to average (default: 10)\n   * @param config.volumeHistory.useTypedArray - Use TypedArray for better performance (default: true)\n   * @param config.silenceDetection - Silence detection and timeout configuration\n   * @param config.silenceDetection.enabled - Enable silence detection (default: false)\n   * @param config.silenceDetection.warningThreshold - Warning timeout in ms (default: 15000)\n   * @param config.silenceDetection.timeoutThreshold - Hard timeout in ms (default: 30000)\n   * \n   * @example\n   * ```typescript\n   * // Minimal configuration (uses optimized defaults)\n   * const pitchDetector = new PitchDetector(audioManager);\n   * \n   * // Performance-optimized configuration for music applications\n   * const pitchDetector = new PitchDetector(audioManager, {\n   *   fftSize: 4096,           // Good balance of accuracy and performance\n   *   clarityThreshold: 0.5,   // Higher threshold for cleaner detection\n   *   minVolumeAbsolute: 0.002, // Sensitive to quiet sounds\n   *   harmonicCorrection: {\n   *     enabled: true,\n   *     confidenceThreshold: 0.8, // Conservative octave correction\n   *     historyWindow: 1500,       // Longer analysis window\n   *     frequencyThreshold: 0.08   // Tighter frequency matching\n   *   },\n   *   volumeHistory: {\n   *     historyLength: 7,      // More smoothing\n   *     useTypedArray: true    // Maximum performance\n   *   }\n   * });\n   * \n   * // Educational/debugging configuration\n   * const pitchDetector = new PitchDetector(audioManager, {\n   *   fftSize: 8192,           // High resolution for analysis\n   *   clarityThreshold: 0.3,   // Lower threshold to see more detections\n   *   harmonicCorrection: {\n   *     enabled: false         // Disable to see raw algorithm output\n   *   },\n   *   volumeHistory: {\n   *     historyLength: 3,      // Less smoothing for immediate response\n   *     useTypedArray: false   // Standard arrays for easier debugging\n   *   },\n   *   silenceDetection: {\n   *     enabled: true,\n   *     warningThreshold: 10000, // 10 second warning\n   *     timeoutThreshold: 20000  // 20 second timeout\n   *   }\n   * });\n   * ```\n   */\n  constructor(\n    audioManager: AudioManager, \n    config: PitchDetectorConfig & {\n      harmonicCorrection?: Partial<HarmonicCorrectionConfig>;\n      volumeHistory?: Partial<VolumeHistoryConfig>;\n    } = {}\n  ) {\n    this.audioManager = audioManager;\n    \n    \n    this.config = {\n      fftSize: 4096,\n      smoothing: 0.9, // 揺れ防止のため強化 (0.1 → 0.9)\n      clarityThreshold: 0.4,    // 0.8から0.4に現実的な値に変更\n      // ⬇️ 固定のデフォルト値を削除し、configから渡される値を優先する\n      minVolumeAbsolute: config.minVolumeAbsolute ?? 0.015, // 安全なフォールバック値\n      // 🔧 noiseGate削除: minVolumeAbsoluteと重複のため不要\n      deviceOptimization: true, // v1.1.8: デバイス最適化デフォルト有効\n      ...config  // 🎯 外部設定で上書き\n    };\n    \n    // Initialize harmonic correction configuration\n    this.harmonicConfig = {\n      enabled: true,\n      confidenceThreshold: 0.7,\n      historyWindow: 1000,\n      frequencyThreshold: 0.1,\n      ...config.harmonicCorrection\n    };\n    \n    // Initialize volume history configuration (prefer TypedArray for better performance)\n    this.volumeHistoryConfig = {\n      historyLength: 10, // 音程変化対応のため大幅短縮 (12 -> 10) - 高応答性重視\n      useTypedArray: true, // Enable by default for better performance\n      ...config.volumeHistory\n    };\n    \n    // 削除: initializeVolumeHistory (統合音量処理でAudioDetectionComponentに移管)\n    \n    // Set disableHarmonicCorrection based on harmonic config\n    this.disableHarmonicCorrection = !this.harmonicConfig.enabled;\n    \n    // Initialize silence detection configuration\n    this.silenceDetectionConfig = {\n      enabled: false,\n      warningThreshold: 15000,  // 15秒で警告\n      timeoutThreshold: 30000,  // 30秒でタイムアウト\n      minVolumeThreshold: 0.01, // 消音判定の音量閾値\n      ...config.silenceDetection\n    };\n    \n    // Note: getPlatformSpecs() will be called during initialize() to avoid timing issues\n    \n    // Initialize performance optimization\n    this.frameRateLimiter = new AdaptiveFrameRateLimiter(45); // 45FPS optimal for music\n\n    // Debug log with version information\n    console.log(`${VERSION_STRING} PitchDetector created with config:`, this.config);\n  }\n\n  /**\n   * Sets callback functions for pitch detection events\n   * \n   * @description Configures event handlers for real-time pitch detection results,\n   * errors, and state changes. Callbacks are called at the adaptive frame rate\n   * (typically 30-60 FPS) during active detection.\n   * \n   * @param callbacks - Object containing callback functions\n   * @param callbacks.onPitchUpdate - Called when valid pitch is detected with frequency, note, clarity, and volume data\n   * @param callbacks.onError - Called when recoverable or non-recoverable errors occur during detection\n   * @param callbacks.onStateChange - Called when component transitions between states (uninitialized/ready/detecting/error)\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     // Real-time pitch data (30-60 times per second)\n   *     console.log(`Pitch: ${result.frequency.toFixed(2)}Hz`);\n   *     console.log(`Note: ${result.note}, Octave: ${result.octave}`);\n   *     console.log(`Clarity: ${(result.clarity * 100).toFixed(1)}%`);\n   *     console.log(`Volume: ${result.volume.toFixed(1)}%`);\n   *     \n   *     // Cents deviation from perfect tuning\n   *     if (result.cents !== undefined) {\n   *       console.log(`Tuning: ${result.cents > 0 ? '+' : ''}${result.cents} cents`);\n   *     }\n   *   },\n   *   onError: (error) => {\n   *     console.error('Detection error:', error.message);\n   *     \n   *     // Handle specific error types\n   *     if (error instanceof PitchDetectionError) {\n   *       console.log('Pitch detection algorithm error - may be recoverable');\n   *     } else if (error instanceof AudioContextError) {\n   *       console.log('Audio system error - requires reinitialization');\n   *     }\n   *   },\n   *   onStateChange: (state) => {\n   *     console.log('Detection state changed to:', state);\n   *     \n   *     // React to state changes\n   *     switch (state) {\n   *       case 'ready':\n   *         console.log('PitchDetector initialized and ready');\n   *         break;\n   *       case 'detecting':\n   *         console.log('Active pitch detection started');\n   *         break;\n   *       case 'error':\n   *         console.log('Error state - check error callback for details');\n   *         break;\n   *     }\n   *   }\n   * });\n   * ```\n   */\n  setCallbacks(callbacks: {\n    onPitchUpdate?: PitchCallback;\n    onError?: ErrorCallback;\n    onStateChange?: StateChangeCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Initializes the pitch detector with audio resources and Pitchy engine\n   * \n   * @description Sets up audio analysers, creates Pitchy detector instance, and initializes\n   * device-specific configurations. Must be called before starting detection.\n   * \n   * @returns Promise that resolves when initialization is complete\n   * @throws {AudioContextError} If AudioManager initialization fails\n   * @throws {PitchDetectionError} If Pitchy detector creation fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   await pitchDetector.initialize();\n   *   console.log('Pitch detector ready');\n   * } catch (error) {\n   *   console.error('Initialization failed:', error);\n   * }\n   * ```\n   */\n  async initialize(): Promise<void> {\n    try {\n      this.componentState = 'initializing';\n      this.lastError = null;\n      \n      \n      // Get shared resources from AudioManager\n      await this.audioManager.initialize();\n      \n      // Initialize device specifications after AudioManager is ready\n      this.deviceSpecs = this.audioManager.getPlatformSpecs();\n      \n      \n      // Create dedicated Analyser (with filters)\n      const filteredAnalyserId = `pitch-detector-filtered-${Date.now()}`;\n      this.analyser = this.audioManager.createAnalyser(filteredAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: true\n      });\n      this.analyserIds.push(filteredAnalyserId);\n      \n      // Create raw signal Analyser (for comparison)\n      const rawAnalyserId = `pitch-detector-raw-${Date.now()}`;\n      this.rawAnalyser = this.audioManager.createAnalyser(rawAnalyserId, {\n        fftSize: this.config.fftSize,\n        smoothingTimeConstant: this.config.smoothing,\n        minDecibels: -90,\n        maxDecibels: -10,\n        useFilters: false\n      });\n      this.analyserIds.push(rawAnalyserId);\n      \n      \n      // Initialize PitchDetector\n      this.pitchDetector = PitchyDetector.forFloat32Array(this.analyser.fftSize);\n      \n      // Development-only Pitchy instance debug logging\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n        console.log(`[Debug] Pitchyインスタンス作成: ${!!this.pitchDetector}, FFTサイズ: ${this.analyser.fftSize}`);\n      }\n      \n      // Initialization complete\n      this.componentState = 'ready';\n      this.isInitialized = true;\n      \n      // Notify state change\n      this.callbacks.onStateChange?.(this.componentState);\n      \n      \n    } catch (error) {\n      // Convert to structured error\n      const pitchError = error instanceof PitchProError \n        ? error \n        : new AudioContextError(\n            'PitchDetector initialization failed',\n            {\n              originalError: error instanceof Error ? error.message : String(error),\n              audioContextState: this.audioManager.getStatus().audioContextState,\n              deviceSpecs: this.deviceSpecs\n            }\n          );\n          \n      console.error('❌ [PitchDetector] Initialization error:', pitchError.toJSON());\n      this.componentState = 'error';\n      this.lastError = pitchError;\n      this.isInitialized = false;\n      \n      // Notify with structured error\n      this.callbacks.onError?.(pitchError);\n      \n      throw error;\n    }\n  }\n\n  /**\n   * Starts real-time pitch detection with adaptive frame rate control\n   * \n   * @description Begins the pitch detection loop using requestAnimationFrame.\n   * Automatically manages performance optimization and device-specific adjustments.\n   * \n   * @returns True if detection started successfully, false otherwise\n   * \n   * @example\n   * ```typescript\n   * if (pitchDetector.startDetection()) {\n   *   console.log('Pitch detection started');\n   * } else {\n   *   console.error('Failed to start detection');\n   * }\n   * ```\n   */\n  startDetection(): boolean {\n    if (this.componentState !== 'ready') {\n      const error = new Error(`Cannot start detection: component state is ${this.componentState}`);\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    if (!this.analyser || !this.pitchDetector) {\n      const error = new PitchDetectionError(\n        'ピッチ検出に必要なコンポーネントが初期化されていません。initialize()メソッドを先に呼び出してください。',\n        {\n          operation: 'startDetection',\n          hasAnalyser: !!this.analyser,\n          hasPitchDetector: !!this.pitchDetector,\n          componentState: this.componentState,\n          isInitialized: this.isInitialized\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'Pitch detection startup');\n      this.componentState = 'error';\n      this.callbacks.onError?.(error);\n      return false;\n    }\n    \n    this.componentState = 'detecting';\n    this.isDetecting = true;\n    this.callbacks.onStateChange?.(this.componentState);\n    this.detectPitch();\n    return true;\n  }\n\n  /**\n   * Stops pitch detection and cleans up detection loop\n   * \n   * @description Cancels the detection loop, resets frame rate limiter,\n   * and clears silence detection timers. Safe to call multiple times.\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.stopDetection();\n   * console.log('Pitch detection stopped');\n   * ```\n   */\n  stopDetection(): void {\n    this.isDetecting = false;\n    if (this.animationFrame) {\n      cancelAnimationFrame(this.animationFrame);\n      this.animationFrame = null;\n    }\n    \n    // Reset frame rate limiter\n    this.frameRateLimiter.reset();\n    \n    // Reset silence detection\n    this.resetSilenceTracking();\n    \n    // Return state to ready (if initialized)\n    if (this.componentState === 'detecting' && this.isInitialized) {\n      this.componentState = 'ready';\n      this.callbacks.onStateChange?.(this.componentState);\n    }\n  }\n\n  /**\n   * Real-time pitch detection loop with adaptive frame rate\n   * @private\n   * @description Main detection loop optimized for performance with minimal\n   * redundant calculations and efficient buffer operations\n   */\n  private detectPitch(): void {\n    // Batch timestamp retrieval for performance\n    const frameStartTime = performance.now();\n    \n    // Check if we should process this frame based on adaptive FPS\n    if (!this.frameRateLimiter.shouldProcess()) {\n      // Skip this frame but schedule next\n      this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n      return;\n    }\n    \n    if (!this.isDetecting || !this.analyser || !this.rawAnalyser || !this.pitchDetector || !this.deviceSpecs) return;\n    \n    const bufferLength = this.analyser.fftSize;\n    const buffer = new Float32Array(bufferLength);\n    const rawBuffer = new Float32Array(this.rawAnalyser.fftSize);\n    \n    this.analyser.getFloatTimeDomainData(buffer);\n    this.rawAnalyser.getFloatTimeDomainData(rawBuffer);\n    \n    // Volume calculation (filtered)\n    let sum = 0;\n    for (let i = 0; i < bufferLength; i++) {\n      sum += Math.abs(buffer[i]);\n    }\n    const rms = Math.sqrt(sum / bufferLength);\n\n    // ⭐ リファクタリング: 生のRMS値をそのまま使用（音量処理はAudioDetectionComponentで一元化）\n    const volumePercent = rms; // 生のRMS値を直接volume として扱う\n\n    // 🔧 削除: SCALING_FACTOR, ノイズゲート処理はAudioDetectionComponentに移管\n    // 常にピッチ検出を実行（ノイズゲート判定を除去）\n\n    this.currentVolume = volumePercent;\n    this.rawVolume = volumePercent;\n\n    // Pitch detection (using PitchDetector) with error handling\n    // AudioContextから実際のサンプルレートを動的に取得する\n    const sampleRate = this.analyser.context?.sampleRate || 44100; // フォールバック値\n    let pitch = 0;\n    let clarity = 0;\n    \n    try {\n      const pitchResult = this.pitchDetector.findPitch(buffer, sampleRate);\n      pitch = pitchResult[0] || 0;\n      clarity = pitchResult[1] || 0;\n    } catch (error) {\n      // Handle pitch detection errors gracefully\n      const pitchError = new PitchDetectionError(\n        'Pitch detection algorithm failed',\n        {\n          bufferLength: buffer.length,\n          sampleRate,\n          volume: this.currentVolume,\n          originalError: error instanceof Error ? error.message : String(error)\n        }\n      );\n      \n      console.warn('⚠️ [PitchDetector] Pitch detection error (recoverable):', pitchError.toJSON());\n      \n      // For recoverable errors, continue with zero values\n      if (isRecoverableError(pitchError)) {\n        pitch = 0;\n        clarity = 0;\n      } else {\n        // For non-recoverable errors, notify callback\n        this.callbacks.onError?.(pitchError);\n        return;\n      }\n    }\n    \n    // Human vocal range filtering (practical adjustment)\n    // Optimized for actual human voice range:\n    // - Low range: 30Hz and above (extended for low bass instruments and voices)\n    // - High range: 1200Hz and below (practical singing range)\n    // - Exclude extreme low frequency noise while preserving deep male voices and low bass\n    const isValidVocalRange = pitch >= 30 && pitch <= 1200;\n    \n    if (pitch && clarity > this.config.clarityThreshold && this.currentVolume > this.config.minVolumeAbsolute && isValidVocalRange) {\n      let finalFreq = pitch;\n      \n      // Harmonic correction control\n      if (!this.disableHarmonicCorrection) {\n        // Apply unified harmonic correction system (pass volume information)\n        const normalizedVolume = Math.min(this.currentVolume / 100, 1.0); // Normalize to 0-1\n        finalFreq = this.correctHarmonic(pitch, normalizedVolume);\n      }\n      \n      // Update frequency display (preserve decimal precision)\n      this.currentFrequency = finalFreq;\n      const noteInfo = this.frequencyToNoteAndOctave(this.currentFrequency);\n      this.detectedNote = noteInfo.note;\n      this.detectedOctave = noteInfo.octave;\n      this.pitchClarity = clarity;\n      \n    } else {\n      // Clear harmonic correction history when signal is weak\n      if (this.currentFrequency === 0) {\n        this.resetHarmonicHistory();\n      }\n      \n      // Clear frequency display\n      this.currentFrequency = 0;\n      this.detectedNote = '--';\n      this.detectedOctave = null;\n      this.pitchClarity = 0;\n      }\n\n    // Process silence detection\n    this.processSilenceDetection(this.currentVolume);\n\n    // Send data to callback with raw volume data\n    const result: PitchDetectionResult = {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      octave: this.detectedOctave || undefined,\n      clarity: this.pitchClarity,\n      volume: volumePercent, // 生のRMS値を送信（AudioDetectionComponentで処理）\n      cents: this.currentFrequency > 0 ? this.frequencyToCents(this.currentFrequency) : undefined\n    };\n    \n    // Separate visual updates from audio processing\n    this.processAudioData(result);\n    this.updateVisuals(result);\n    \n    // Performance optimization: batch timing operations\n    const frameEndTime = performance.now();\n    const frameProcessTime = frameEndTime - frameStartTime;\n    \n    // Check performance and adjust frame rate if needed\n    const stats = this.frameRateLimiter.getStats();\n    if (stats.frameDrops === 0) {\n      this.frameRateLimiter.recoverPerformance();\n    }\n    \n    // Performance monitoring (development only)\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development' && frameProcessTime > 16.67) { // > 60fps threshold\n      console.warn(`[PitchDetector] Frame processing took ${frameProcessTime.toFixed(2)}ms (>16.67ms threshold)`);\n    }\n    \n    this.animationFrame = requestAnimationFrame(() => this.detectPitch());\n  }\n\n  /**\n   * Harmonic correction system with configurable parameters\n   * \n   * @private\n   * @description Analyzes frequency history to detect and correct harmonic errors\n   * like octave jumping. Uses configurable confidence thresholds and time windows\n   * to balance correction accuracy with responsiveness.\n   * \n   * @param frequency - The detected frequency to potentially correct\n   * @param volume - The current volume level for confidence calculation\n   * @returns The corrected frequency or original if no correction needed\n   */\n  private correctHarmonic(frequency: number, volume: number): number {\n    if (!this.harmonicConfig.enabled) {\n      this.previousFrequency = frequency;\n      return frequency;\n    }\n\n    const now = performance.now();\n\n    // 履歴から古いデータを削除\n    this.harmonicHistory = this.harmonicHistory.filter(\n      h => now - h.timestamp < this.harmonicConfig.historyWindow\n    );\n\n    // ★【重要】履歴には補正前の「生の周波数」のみを追加する\n    this.harmonicHistory.push({ frequency: frequency, confidence: volume, timestamp: now });\n\n    if (this.harmonicHistory.length < 8) { // 十分な履歴が溜まるまで補正しない（5→8に厳格化）\n      this.previousFrequency = frequency;\n      return frequency;\n    }\n\n    // 履歴内の平均周波数を計算\n    const avgFrequency = this.harmonicHistory.reduce((sum, h) => sum + h.frequency, 0) / this.harmonicHistory.length;\n\n    const octaveUp = frequency * 2;\n    const octaveDown = frequency / 2;\n    const diffCurrent = Math.abs(frequency - avgFrequency);\n    const diffUp = Math.abs(octaveUp - avgFrequency);\n    const diffDown = Math.abs(octaveDown - avgFrequency);\n\n    let correctedFrequency = frequency;\n\n    // 現在の周波数よりも、オクターブ下のほうが履歴の平均に近い場合、オクターブ下と判断\n    if (diffDown < diffCurrent && diffDown < diffUp) {\n      correctedFrequency = octaveDown;\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      }\n    } \n    // 現在の周波数よりも、オクターブ上のほうが履歴の平均に近い場合、オクターブ上と判断\n    else if (diffUp < diffCurrent && diffUp < diffDown) {\n      correctedFrequency = octaveUp;\n      if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n      }\n    }\n\n    // 補正後の周波数をpreviousFrequencyとして保持\n    this.previousFrequency = correctedFrequency;\n    return correctedFrequency;\n  }\n\n  /**\n   * Reset harmonic correction history and frequency tracking\n   * \n   * @private\n   * @description Clears the frequency history buffer used for harmonic correction\n   * and resets the previous frequency reference. Called when signal quality is poor\n   * or when restarting detection to prevent incorrect corrections.\n   */\n  private resetHarmonicHistory(): void {\n    this.harmonicHistory = [];\n    this.previousFrequency = 0;\n  }\n\n  /**\n   * Convert frequency to musical note name and octave number\n   * \n   * @private\n   * @description Converts a frequency in Hz to standard musical notation using\n   * equal temperament tuning (A4 = 440Hz). Calculates semitone distances\n   * and maps to chromatic scale positions.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Object containing note name (C, C#, D, etc.) and octave number\n   * \n   * @example\n   * ```typescript\n   * frequencyToNoteAndOctave(440) // { note: 'A', octave: 4 }\n   * frequencyToNoteAndOctave(261.63) // { note: 'C', octave: 4 }\n   * ```\n   */\n  private frequencyToNoteAndOctave(frequency: number): { note: string; octave: number | null } {\n    const noteNames = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n    const A4 = 440;\n    \n    if (frequency <= 0) return { note: '--', octave: null };\n    \n    const semitonesFromA4 = Math.round(12 * Math.log2(frequency / A4));\n    const noteIndex = (semitonesFromA4 + 9 + 120) % 12;\n    const octave = Math.floor((semitonesFromA4 + 9) / 12) + 4;\n    \n    return { note: noteNames[noteIndex], octave };\n  }\n  \n\n  /**\n   * Convert frequency to cents deviation from the nearest semitone\n   * \n   * @private\n   * @description Calculates the pitch deviation in cents (1/100th of a semitone)\n   * from the nearest equal temperament note. Positive values indicate sharp,\n   * negative values indicate flat.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Cents deviation (-50 to +50 cents from nearest note)\n   * \n   * @example\n   * ```typescript\n   * frequencyToCents(440) // 0 (exactly A4)\n   * frequencyToCents(446) // ~25 cents sharp\n   * frequencyToCents(435) // ~-20 cents flat\n   * ```\n   */\n  private frequencyToCents(frequency: number): number {\n    const A4 = 440;\n    const semitonesFromA4 = 12 * Math.log2(frequency / A4);\n    const nearestSemitone = Math.round(semitonesFromA4);\n    const centsDeviation = (semitonesFromA4 - nearestSemitone) * 100;\n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Process silence detection logic and manage timeout handlers\n   * \n   * @private\n   * @description Monitors volume levels to detect periods of silence and triggers\n   * appropriate warnings and timeouts. Manages silence detection state and timers\n   * to provide automatic recovery from idle states.\n   * \n   * @param currentVolume - Current volume level to evaluate for silence\n   */\n  private processSilenceDetection(currentVolume: number): void {\n    if (!this.silenceDetectionConfig.enabled) {\n      return;\n    }\n    \n    const now = Date.now();\n    const volumeThreshold = this.silenceDetectionConfig.minVolumeThreshold || 0.01;\n    const isCurrentlySilent = currentVolume < volumeThreshold;\n    \n    if (isCurrentlySilent) {\n      // Start tracking silence if not already doing so\n      if (!this.isSilent) {\n        this.isSilent = true;\n        this.silenceStartTime = now;\n        this.hasWarned = false;\n        \n        \n        // Schedule warning\n        if (this.silenceDetectionConfig.warningThreshold) {\n          this.silenceWarningTimer = window.setTimeout(() => {\n            this.handleSilenceWarning();\n          }, this.silenceDetectionConfig.warningThreshold);\n        }\n        \n        // Schedule timeout\n        if (this.silenceDetectionConfig.timeoutThreshold) {\n          this.silenceTimeoutTimer = window.setTimeout(() => {\n            this.handleSilenceTimeout();\n          }, this.silenceDetectionConfig.timeoutThreshold);\n        }\n      }\n    } else {\n      // Voice detected - reset silence tracking\n      if (this.isSilent) {\n        this.resetSilenceTracking();\n        \n        // Notify recovery\n        if (this.silenceDetectionConfig.onSilenceRecovered) {\n          this.silenceDetectionConfig.onSilenceRecovered();\n        }\n      }\n    }\n  }\n  \n  /**\n   * Handle silence warning\n   */\n  private handleSilenceWarning(): void {\n    if (!this.hasWarned && this.silenceStartTime) {\n      const duration = Date.now() - this.silenceStartTime;\n      this.hasWarned = true;\n      \n      \n      if (this.silenceDetectionConfig.onSilenceWarning) {\n        this.silenceDetectionConfig.onSilenceWarning(duration);\n      }\n    }\n  }\n  \n  /**\n   * Handle silence timeout\n   */\n  private handleSilenceTimeout(): void {\n    \n    if (this.silenceDetectionConfig.onSilenceTimeout) {\n      this.silenceDetectionConfig.onSilenceTimeout();\n    }\n    \n    // Optionally stop detection on timeout\n    this.stopDetection();\n    this.resetSilenceTracking();\n  }\n  \n  /**\n   * Reset silence tracking state\n   */\n  private resetSilenceTracking(): void {\n    this.isSilent = false;\n    this.silenceStartTime = null;\n    this.hasWarned = false;\n    \n    // Clear timers\n    if (this.silenceWarningTimer) {\n      clearTimeout(this.silenceWarningTimer);\n      this.silenceWarningTimer = null;\n    }\n    \n    if (this.silenceTimeoutTimer) {\n      clearTimeout(this.silenceTimeoutTimer);\n      this.silenceTimeoutTimer = null;\n    }\n  }\n\n  /**\n   * Reset display state and immediately update UI elements\n   */\n  resetDisplayState(): void {\n    this.currentVolume = 0;\n    this.rawVolume = 0;\n    this.currentFrequency = 0;\n    this.detectedNote = '--';\n    this.detectedOctave = null;\n    this.pitchClarity = 0;\n\n    // 削除: stableVolume, initializeVolumeHistory (統合音量処理でAudioDetectionComponentに移管)\n    \n    // Reset harmonic correction\n    this.resetHarmonicHistory();\n    \n    // Reset silence detection\n    this.resetSilenceTracking();\n    \n    \n    // Immediately update UI to reflect reset state by forcing a manual update\n    this.forceUIUpdate();\n  }\n\n  /**\n   * Force UI update with current internal state (reset values)\n   * @private\n   */\n  private forceUIUpdate(): void {\n    try {\n      // Reset common volume bar selectors\n      const volumeBarSelectors = [\n        '#volume-bar', '#mic-volume-bar', '#range-volume-bar', '#practice-volume-bar',\n        '[id*=\"volume-bar\"]', '.volume-bar'\n      ];\n      \n      volumeBarSelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          if (element instanceof HTMLProgressElement) {\n            element.value = 0;\n          } else {\n            (element as HTMLElement).style.width = '0%';\n          }\n        }\n      });\n\n      // Reset common volume text selectors\n      const volumeTextSelectors = [\n        '#volume-text', '#mic-volume-text', '#range-volume-text', '#practice-volume-text',\n        '[id*=\"volume-text\"]', '.volume-text'\n      ];\n      \n      volumeTextSelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          element.textContent = '0.0%';\n        }\n      });\n\n      // Reset common frequency selectors\n      const frequencySelectors = [\n        '#frequency', '#mic-frequency', '#range-frequency', '#practice-frequency',\n        '[id*=\"frequency\"]', '.frequency', '#freq-1', '#freq-2', '#freq-3'\n      ];\n      \n      frequencySelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          element.textContent = '0.0 Hz';\n        }\n      });\n\n      // Reset common note selectors\n      const noteSelectors = [\n        '#note', '#note-display', '#mic-note', '#range-note', '#practice-note',\n        '[id*=\"note\"]', '.note', '.note-display'\n      ];\n      \n      noteSelectors.forEach(selector => {\n        const element = document.querySelector(selector);\n        if (element) {\n          element.textContent = '--';\n        }\n      });\n    } catch (error) {\n      console.warn('⚠️ [PitchDetector] Error in forceUIUpdate:', (error as Error).message);\n    }\n  }\n\n  /**\n   * Enable/disable harmonic correction\n   */\n  setHarmonicCorrectionEnabled(enabled: boolean): void {\n    this.disableHarmonicCorrection = !enabled;\n    if (!enabled) {\n      this.resetHarmonicHistory();\n    }\n  }\n  \n  /**\n   * Update silence detection configuration\n   */\n  setSilenceDetectionConfig(config: Partial<SilenceDetectionConfig>): void {\n    this.silenceDetectionConfig = {\n      ...this.silenceDetectionConfig,\n      ...config\n    };\n    \n    // Reset tracking if disabled\n    if (!this.silenceDetectionConfig.enabled) {\n      this.resetSilenceTracking();\n    }\n    \n  }\n  \n  /**\n   * Get current silence detection status\n   */\n  getSilenceStatus(): {\n    isEnabled: boolean;\n    isSilent: boolean;\n    silenceDuration: number | null;\n    hasWarned: boolean;\n  } {\n    const silenceDuration = this.silenceStartTime && this.isSilent \n      ? Date.now() - this.silenceStartTime \n      : null;\n      \n    return {\n      isEnabled: this.silenceDetectionConfig.enabled || false,\n      isSilent: this.isSilent,\n      silenceDuration,\n      hasWarned: this.hasWarned\n    };\n  }\n\n  /**\n   * Get initialization status\n   */\n  getIsInitialized(): boolean {\n    return this.isInitialized && this.componentState === 'ready';\n  }\n\n  /**\n   * Get current state\n   */\n  getState() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      lastError: this.lastError,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector)\n    };\n  }\n\n  /**\n   * Get current detection result\n   */\n  getCurrentResult(): PitchDetectionResult {\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      clarity: this.pitchClarity,\n      volume: this.currentFrequency > 0 ? this.rawVolume : 0\n    };\n  }\n\n  /**\n   * Process audio data with high priority for real-time callback delivery\n   * \n   * @private\n   * @description Handles critical audio processing that requires low latency.\n   * Runs at the full adaptive frame rate (30-60 FPS) to ensure responsive\n   * pitch detection callbacks for real-time applications.\n   * \n   * @param result - Complete pitch detection result to process\n   */\n  private processAudioData(result: PitchDetectionResult): void {\n    // Critical audio processing that needs low latency\n    // This runs at the full adaptive frame rate (30-60 FPS)\n    \n    // Callback for real-time audio processing\n    this.callbacks.onPitchUpdate?.(result);\n  }\n  \n  /**\n   * Update visual elements with lower priority rendering\n   * \n   * @private\n   * @description Handles visual updates that can be throttled to maintain performance.\n   * Visual rendering can be limited to 30 FPS without affecting audio processing quality.\n   * The underscore prefix indicates intentional parameter non-use.\n   * \n   * @param _result - Pitch detection result (unused, handled by UI layer)\n   */\n  private updateVisuals(_result: PitchDetectionResult): void {\n    // Visual updates can be throttled to 30 FPS\n    // This is handled by the UI layer if needed\n    \n    // The callback can decide to throttle visual updates\n    // For now, we pass through all updates\n    // Note: result parameter prefixed with _ to indicate intentional non-use\n  }\n  \n  /**\n   * Get current performance statistics\n   */\n  getPerformanceStats(): {\n    currentFPS: number;\n    frameDrops: number;\n    latency: number;\n  } {\n    return this.frameRateLimiter.getStats();\n  }\n  \n  /**\n   * Reinitialize detector\n   */\n  async reinitialize(): Promise<void> {\n    \n    // Cleanup current state\n    this.cleanup();\n    \n    // Short wait to ensure resource release\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    // Execute reinitialization\n    await this.initialize();\n    \n  }\n\n  /**\n   * Cleanup resources\n   */\n  cleanup(): void {\n    \n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n    this.rawAnalyser = null;\n    this.pitchDetector = null;\n    \n    // 削除: initializeVolumeHistory (統合音量処理でAudioDetectionComponentに移管)\n    this.resetHarmonicHistory();\n    \n  }\n\n  /**\n   * Gets the latest pitch detection result without triggering new analysis\n   * \n   * @description Returns the most recent detection result from the ongoing analysis.\n   * Useful for UI updates and external monitoring without affecting detection performance.\n   * \n   * @returns Latest pitch detection result or null if no detection is active\n   * \n   * @example\n   * ```typescript\n   * const result = pitchDetector.getLatestResult();\n   * if (result) {\n   *   console.log(`Latest: ${result.note} - ${result.frequency.toFixed(1)}Hz`);\n   *   console.log(`Volume: ${result.volume.toFixed(1)}%, Clarity: ${result.clarity.toFixed(2)}`);\n   * }\n   * ```\n   */\n  getLatestResult(): PitchDetectionResult | null {\n    if (!this.isDetecting || this.componentState !== 'detecting') {\n      return null;\n    }\n\n    return {\n      frequency: this.currentFrequency,\n      note: this.detectedNote,\n      octave: this.detectedOctave ?? 0,\n      volume: this.currentVolume,\n      rawVolume: this.rawVolume,\n      clarity: this.pitchClarity,\n      timestamp: Date.now()\n    };\n  }\n\n  /**\n   * Destroys the PitchDetector and cleans up all resources\n   * \n   * @example\n   * ```typescript\n   * pitchDetector.destroy();\n   * console.log('PitchDetector destroyed and resources cleaned up');\n   * ```\n   */\n  destroy(): void {\n    this.stopDetection();\n    \n    // Notify AudioManager to release created Analysers\n    if (this.analyserIds.length > 0) {\n      this.audioManager.release(this.analyserIds);\n      this.analyserIds = [];\n    }\n    \n    // Reset state\n    this.componentState = 'uninitialized';\n    this.isInitialized = false;\n    this.lastError = null;\n    \n    // Clear references (actual resources managed by AudioManager)\n    this.analyser = null;\n  }\n\n  /**\n   * Gets current PitchDetector status for debugging and monitoring\n   * \n   * @returns Status object with component state and performance metrics\n   */\n  getStatus() {\n    return {\n      componentState: this.componentState,\n      isInitialized: this.isInitialized,\n      isDetecting: this.isDetecting,\n      isRunning: this.isDetecting,\n      currentVolume: this.currentVolume,\n      rawVolume: this.rawVolume,\n      currentFrequency: this.currentFrequency,\n      detectedNote: this.detectedNote,\n      detectedOctave: this.detectedOctave,\n      currentClarity: this.pitchClarity,\n      lastError: this.lastError,\n      frameRateStatus: this.frameRateLimiter?.getStats(),\n      deviceSpecs: this.deviceSpecs,\n      hasRequiredComponents: !!(this.analyser && this.pitchDetector),\n      harmonicConfig: this.harmonicConfig,\n      volumeHistoryConfig: this.volumeHistoryConfig\n    };\n  }\n\n  // 削除: initializeVolumeHistory, updateVolumeHistoryConfig（統合音量処理でAudioDetectionComponentに移管）\n\n  /**\n   * Update harmonic correction configuration\n   *\n   * @param config - Partial harmonic correction configuration to update\n   */\n  updateHarmonicConfig(config: Partial<HarmonicCorrectionConfig>): void {\n    this.harmonicConfig = { ...this.harmonicConfig, ...config };\n\n    // Reset harmonic history when configuration changes\n    this.resetHarmonicHistory();\n\n    if (typeof process !== 'undefined' && process.env?.NODE_ENV === 'development') {\n    }\n  }\n}","/**\n * NoiseFilter - Advanced 3-Stage Noise Reduction Filter Chain\n * \n * @description Implements sophisticated cascade filtering optimized for voice detection\n * and pitch analysis. Removes environmental noise while preserving vocal frequencies\n * essential for accurate pitch detection.\n * \n * **Filter Stages:**\n * 1. **Highpass Filter** (80Hz) - Removes low-frequency environmental noise, breathing sounds\n * 2. **Lowpass Filter** (800Hz) - Removes high-frequency noise while preserving vocal harmonics  \n * 3. **Notch Filter** (60Hz) - Eliminates electrical power line interference\n * \n * @example\n * ```typescript\n * const noiseFilter = new NoiseFilter(audioContext, {\n *   highpassFreq: 100,  // More aggressive low-cut\n *   lowpassFreq: 1000,  // Extended high-frequency range\n *   useFilters: true\n * });\n * \n * // Connect in audio chain\n * sourceNode.connect(noiseFilter.connect(inputNode, analyserNode));\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { NoiseFilterConfig } from '../types';\nimport { \n  AudioContextError,\n  PitchProError,\n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\n\nexport class NoiseFilter {\n  /** @private AudioContext for creating filter nodes */\n  private audioContext: AudioContext;\n  \n  /** @private Complete filter configuration with defaults applied */\n  private config: Required<NoiseFilterConfig>;\n  \n  /** @private Highpass filter node for low-frequency noise removal */\n  private highpassFilter: BiquadFilterNode | null = null;\n  \n  /** @private Lowpass filter node for high-frequency noise removal */\n  private lowpassFilter: BiquadFilterNode | null = null;\n  \n  /** @private Notch filter node for power line noise elimination */\n  private notchFilter: BiquadFilterNode | null = null;\n  \n  /** @private Filter chain connection state */\n  private isConnected = false;\n  \n  /** @private Input node reference for disconnection */\n  private inputNode: AudioNode | null = null;\n  \n  /** @private Output node reference for disconnection */\n  private outputNode: AudioNode | null = null;\n\n  /**\n   * Creates a new NoiseFilter with configurable 3-stage filtering\n   * \n   * @param audioContext - Web Audio API AudioContext instance\n   * @param config - Optional filter configuration to override defaults\n   * @param config.highpassFreq - Highpass cutoff frequency in Hz (default: 80)\n   * @param config.lowpassFreq - Lowpass cutoff frequency in Hz (default: 800)  \n   * @param config.notchFreq - Notch filter center frequency in Hz (default: 60)\n   * @param config.highpassQ - Highpass filter Q factor (default: 0.7)\n   * @param config.lowpassQ - Lowpass filter Q factor (default: 0.7)\n   * @param config.notchQ - Notch filter Q factor (default: 10.0)\n   * @param config.useFilters - Enable/disable entire filter chain (default: true)\n   * \n   * @example\n   * ```typescript\n   * // Standard voice filtering\n   * const voiceFilter = new NoiseFilter(audioContext);\n   * \n   * // Custom instrument filtering  \n   * const instrumentFilter = new NoiseFilter(audioContext, {\n   *   highpassFreq: 60,   // Allow deeper frequencies\n   *   lowpassFreq: 2000,  // Extended harmonic range\n   *   notchQ: 20.0        // Sharper power line rejection\n   * });\n   * \n   * // Bypass filtering\n   * const bypassFilter = new NoiseFilter(audioContext, {\n   *   useFilters: false\n   * });\n   * ```\n   */\n  constructor(audioContext: AudioContext, config: NoiseFilterConfig = {}) {\n    this.audioContext = audioContext;\n    this.config = {\n      highpassFreq: 50,  // 深い男性の声に対応（G1 49Hzまで）\n      lowpassFreq: 800,\n      notchFreq: 50,      // 🔧 日本の電源周波数50Hzに合わせて電源ハムノイズを除去\n      highpassQ: 0.7,\n      lowpassQ: 0.7,\n      notchQ: 10.0,\n      useFilters: true,\n      ...config\n    };\n    \n    this.createFilterChain();\n  }\n\n  /**\n   * Create the 3-stage filter chain\n   */\n  private createFilterChain(): void {\n    if (!this.config.useFilters) {\n      console.log('🔇 [NoiseFilter] Filters disabled - bypassing filter chain');\n      return;\n    }\n\n    try {\n      // 1. Highpass filter (remove low frequency noise: cut below 50Hz, 深い男性の声を保護)\n      this.highpassFilter = this.audioContext.createBiquadFilter();\n      this.highpassFilter.type = 'highpass';\n      this.highpassFilter.frequency.setValueAtTime(this.config.highpassFreq, this.audioContext.currentTime);\n      this.highpassFilter.Q.setValueAtTime(this.config.highpassQ, this.audioContext.currentTime);\n\n      // 2. Lowpass filter (remove high frequency noise: cut above 800Hz)\n      this.lowpassFilter = this.audioContext.createBiquadFilter();\n      this.lowpassFilter.type = 'lowpass';\n      this.lowpassFilter.frequency.setValueAtTime(this.config.lowpassFreq, this.audioContext.currentTime);\n      this.lowpassFilter.Q.setValueAtTime(this.config.lowpassQ, this.audioContext.currentTime);\n\n      // 3. Notch filter (remove power line noise: 60Hz)\n      this.notchFilter = this.audioContext.createBiquadFilter();\n      this.notchFilter.type = 'notch';\n      this.notchFilter.frequency.setValueAtTime(this.config.notchFreq, this.audioContext.currentTime);\n      this.notchFilter.Q.setValueAtTime(this.config.notchQ, this.audioContext.currentTime);\n\n      console.log('✅ [NoiseFilter] 3-stage filter chain created', {\n        highpass: `${this.config.highpassFreq}Hz (Q=${this.config.highpassQ})`,\n        lowpass: `${this.config.lowpassFreq}Hz (Q=${this.config.lowpassQ})`,\n        notch: `${this.config.notchFreq}Hz (Q=${this.config.notchQ})`\n      });\n\n    } catch (error) {\n      const structuredError = new AudioContextError(\n        'ノイズフィルターチェーンの初期化に失敗しました。オーディオシステムのサポート状況を確認してください。',\n        {\n          operation: 'createFilterChain',\n          originalError: (error as Error).message,\n          filterConfig: this.config,\n          audioContextState: this.audioContext.state,\n          sampleRate: this.audioContext.sampleRate\n        }\n      );\n      \n      ErrorMessageBuilder.logError(structuredError, 'NoiseFilter initialization');\n      console.error('❌ [NoiseFilter] Failed to create filter chain:', structuredError.toJSON());\n      throw structuredError;\n    }\n  }\n\n  /**\n   * Connects the filter chain between input and output nodes in audio processing pipeline\n   * \n   * @description Creates audio connections through the 3-stage filter chain or bypasses\n   * if filtering is disabled. Handles both inline filtering and return-node patterns.\n   * \n   * @param inputNode - Source audio node (e.g., MediaStreamAudioSourceNode)\n   * @param outputNode - Optional destination node (e.g., AnalyserNode)\n   * @returns The final output node in the chain for further connections\n   * \n   * @example\n   * ```typescript\n   * // Direct connection pattern\n   * sourceNode.connect(noiseFilter.connect(inputNode, analyserNode));\n   * \n   * // Chain connection pattern\n   * const filteredNode = noiseFilter.connect(sourceNode);\n   * filteredNode.connect(analyserNode);\n   * \n   * // Bypass mode (useFilters: false)\n   * const passthroughNode = noiseFilter.connect(sourceNode, analyserNode);\n   * ```\n   */\n  connect(inputNode: AudioNode, outputNode?: AudioNode): AudioNode {\n    if (!this.config.useFilters) {\n      // Bypass filtering - direct connection\n      if (outputNode) {\n        inputNode.connect(outputNode);\n      }\n      return inputNode;\n    }\n\n    if (!this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      const error = new PitchProError(\n        'ノイズフィルターが正しく初期化されていません。コンストラクタでuseFilters: trueで初期化してください。',\n        ErrorCode.AUDIO_CONTEXT_ERROR,\n        {\n          operation: 'connect',\n          useFilters: this.config.useFilters,\n          hasHighpassFilter: !!this.highpassFilter,\n          hasLowpassFilter: !!this.lowpassFilter,\n          hasNotchFilter: !!this.notchFilter\n        }\n      );\n      \n      ErrorMessageBuilder.logError(error, 'NoiseFilter connection');\n      throw error;\n    }\n\n    try {\n      // Disconnect any existing connections\n      this.disconnect();\n\n      // Store references\n      this.inputNode = inputNode;\n      this.outputNode = outputNode || null;\n\n      // Create filter chain: input → highpass → lowpass → notch → output\n      inputNode.connect(this.highpassFilter);\n      this.highpassFilter.connect(this.lowpassFilter);\n      this.lowpassFilter.connect(this.notchFilter);\n      \n      if (outputNode) {\n        this.notchFilter.connect(outputNode);\n      }\n\n      this.isConnected = true;\n\n      console.log('🔗 [NoiseFilter] Filter chain connected');\n      \n      // Return the final node in the chain (notch filter) for further connections\n      return this.notchFilter!;\n\n    } catch (error) {\n      const connectionError = new AudioContextError(\n        'ノイズフィルターの接続に失敗しました。オーディオノードの接続状態を確認してください。',\n        {\n          operation: 'connect',\n          originalError: (error as Error).message,\n          hasInputNode: !!this.inputNode,\n          hasOutputNode: !!this.outputNode,\n          isConnected: this.isConnected,\n          filterConfig: this.config\n        }\n      );\n      \n      ErrorMessageBuilder.logError(connectionError, 'NoiseFilter audio connection');\n      console.error('❌ [NoiseFilter] Connection failed:', connectionError.toJSON());\n      throw connectionError;\n    }\n  }\n\n  /**\n   * Disconnects all filter nodes and cleans up audio connections\n   * \n   * @description Safely disconnects all filter nodes in the chain and resets\n   * connection state. Safe to call multiple times.\n   * \n   * @example\n   * ```typescript\n   * // Clean up when finished\n   * noiseFilter.disconnect();\n   * console.log('Filter chain disconnected');\n   * ```\n   */\n  disconnect(): void {\n    try {\n      if (this.highpassFilter) {\n        this.highpassFilter.disconnect();\n      }\n      if (this.lowpassFilter) {\n        this.lowpassFilter.disconnect();\n      }\n      if (this.notchFilter) {\n        this.notchFilter.disconnect();\n      }\n      \n      this.isConnected = false;\n      this.inputNode = null;\n      this.outputNode = null;\n\n      console.log('🔌 [NoiseFilter] Filter chain disconnected');\n\n    } catch (error) {\n      console.warn('⚠️ [NoiseFilter] Disconnect warning:', error);\n    }\n  }\n\n  /**\n   * Updates filter parameters dynamically during runtime\n   * \n   * @param params - Object containing new filter parameters\n   * @param params.highpassFreq - New highpass cutoff frequency in Hz\n   * @param params.lowpassFreq - New lowpass cutoff frequency in Hz\n   * @param params.notchFreq - New notch filter center frequency in Hz\n   * @param params.highpassQ - New highpass filter Q factor\n   * @param params.lowpassQ - New lowpass filter Q factor  \n   * @param params.notchQ - New notch filter Q factor\n   * \n   * @example\n   * ```typescript\n   * // Adapt filtering for different content\n   * noiseFilter.updateFrequencies({\n   *   highpassFreq: 100,  // More aggressive low-cut\n   *   lowpassFreq: 1200   // Extended high-frequency range\n   * });\n   * \n   * // Adjust power line rejection\n   * noiseFilter.updateFrequencies({\n   *   notchFreq: 50,      // 50Hz power line (Europe)\n   *   notchQ: 15.0        // Sharper notch\n   * });\n   * ```\n   */\n  updateFrequencies(params: {\n    highpassFreq?: number;\n    lowpassFreq?: number;\n    notchFreq?: number;\n    highpassQ?: number;\n    lowpassQ?: number;\n    notchQ?: number;\n  }): void {\n    const currentTime = this.audioContext.currentTime;\n\n    try {\n      if (params.highpassFreq !== undefined && this.highpassFilter) {\n        this.highpassFilter.frequency.setValueAtTime(params.highpassFreq, currentTime);\n        this.config.highpassFreq = params.highpassFreq;\n      }\n\n      if (params.lowpassFreq !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.frequency.setValueAtTime(params.lowpassFreq, currentTime);\n        this.config.lowpassFreq = params.lowpassFreq;\n      }\n\n      if (params.notchFreq !== undefined && this.notchFilter) {\n        this.notchFilter.frequency.setValueAtTime(params.notchFreq, currentTime);\n        this.config.notchFreq = params.notchFreq;\n      }\n\n      if (params.highpassQ !== undefined && this.highpassFilter) {\n        this.highpassFilter.Q.setValueAtTime(params.highpassQ, currentTime);\n        this.config.highpassQ = params.highpassQ;\n      }\n\n      if (params.lowpassQ !== undefined && this.lowpassFilter) {\n        this.lowpassFilter.Q.setValueAtTime(params.lowpassQ, currentTime);\n        this.config.lowpassQ = params.lowpassQ;\n      }\n\n      if (params.notchQ !== undefined && this.notchFilter) {\n        this.notchFilter.Q.setValueAtTime(params.notchQ, currentTime);\n        this.config.notchQ = params.notchQ;\n      }\n\n      console.log('🔧 [NoiseFilter] Filter parameters updated:', params);\n\n    } catch (error) {\n      const updateError = new PitchProError(\n        'フィルターパラメータの更新に失敗しました。指定した値が範囲外であるか、フィルターが無効になっている可能性があります。',\n        ErrorCode.INVALID_SAMPLE_RATE,\n        {\n          operation: 'updateFrequencies',\n          originalError: (error as Error).message,\n          requestedParams: params,\n          currentConfig: this.config,\n          audioContextTime: this.audioContext.currentTime\n        }\n      );\n      \n      ErrorMessageBuilder.logError(updateError, 'NoiseFilter parameter update');\n      console.error('❌ [NoiseFilter] Parameter update failed:', updateError.toJSON());\n      throw updateError;\n    }\n  }\n\n  /**\n   * Enable or disable the entire filter chain\n   */\n  setEnabled(enabled: boolean): void {\n    if (enabled === this.config.useFilters) {\n      return; // No change needed\n    }\n\n    this.config.useFilters = enabled;\n\n    if (this.isConnected && this.inputNode) {\n      // Reconnect with new settings\n      const savedOutputNode = this.outputNode;\n      this.disconnect();\n      \n      if (enabled) {\n        // Recreate filters if they were destroyed\n        if (!this.highpassFilter) {\n          this.createFilterChain();\n        }\n      }\n      \n      this.connect(this.inputNode, savedOutputNode || undefined);\n    }\n\n    console.log(`🔘 [NoiseFilter] Filters ${enabled ? 'enabled' : 'disabled'}`);\n  }\n\n  /**\n   * Get filter response at specific frequency (for visualization)\n   */\n  getFilterResponse(frequency: number): { magnitude: number; phase: number } {\n    if (!this.config.useFilters || !this.highpassFilter || !this.lowpassFilter || !this.notchFilter) {\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n\n    try {\n      // Create frequency array for single frequency\n      const frequencyArray = new Float32Array([frequency]);\n      const magnitudeArray = new Float32Array(1);\n      const phaseArray = new Float32Array(1);\n\n      // Calculate combined response (simplified - in practice you'd need to chain the calculations)\n      this.highpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const highpassMagnitude = magnitudeArray[0];\n      \n      this.lowpassFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const lowpassMagnitude = magnitudeArray[0];\n      \n      this.notchFilter.getFrequencyResponse(frequencyArray, magnitudeArray, phaseArray);\n      const notchMagnitude = magnitudeArray[0];\n\n      // Combined magnitude (multiply individual filter responses)\n      const combinedMagnitude = highpassMagnitude * lowpassMagnitude * notchMagnitude;\n      \n      return { \n        magnitude: combinedMagnitude, \n        phase: phaseArray[0] \n      };\n\n    } catch (error) {\n      const responseError = new PitchProError(\n        'フィルター応答の計算に失敗しました。デフォルト値を返します。',\n        ErrorCode.PROCESSING_TIMEOUT,\n        {\n          operation: 'getFilterResponse',\n          frequency,\n          originalError: (error as Error).message,\n          useFilters: this.config.useFilters\n        }\n      );\n      \n      ErrorMessageBuilder.logError(responseError, 'Filter response calculation');\n      console.warn('⚠️ [NoiseFilter] Filter response calculation failed:', responseError.toJSON());\n      return { magnitude: 1.0, phase: 0.0 };\n    }\n  }\n\n  /**\n   * Get current filter configuration\n   */\n  getConfig(): Required<NoiseFilterConfig> {\n    return { ...this.config };\n  }\n\n  /**\n   * Get filter chain status\n   */\n  getStatus() {\n    return {\n      isConnected: this.isConnected,\n      useFilters: this.config.useFilters,\n      hasFilters: !!(this.highpassFilter && this.lowpassFilter && this.notchFilter),\n      filterTypes: this.config.useFilters ? ['highpass', 'lowpass', 'notch'] : [],\n      frequencies: {\n        highpass: this.config.highpassFreq,\n        lowpass: this.config.lowpassFreq,\n        notch: this.config.notchFreq\n      },\n      qFactors: {\n        highpass: this.config.highpassQ,\n        lowpass: this.config.lowpassQ,\n        notch: this.config.notchQ\n      }\n    };\n  }\n\n  /**\n   * Get the final output node (for chaining)\n   */\n  getOutputNode(): AudioNode | null {\n    if (!this.config.useFilters || !this.notchFilter) {\n      return this.inputNode || null; // Bypass mode\n    }\n    return this.notchFilter;\n  }\n\n  /**\n   * Cleanup and destroy filter nodes\n   */\n  destroy(): void {\n    console.log('🗑️ [NoiseFilter] Destroying filter chain');\n    \n    this.disconnect();\n    \n    // Note: Filter nodes are automatically garbage collected\n    // when disconnected and no longer referenced\n    this.highpassFilter = null;\n    this.lowpassFilter = null;\n    this.notchFilter = null;\n    \n    console.log('✅ [NoiseFilter] Cleanup complete');\n  }\n\n  /**\n   * Create a preset configuration for different scenarios\n   */\n  static getPresetConfig(preset: 'voice' | 'instrument' | 'wide' | 'minimal'): NoiseFilterConfig {\n    switch (preset) {\n      case 'voice':\n        return {\n          highpassFreq: 80,   // Remove breath noise\n          lowpassFreq: 800,   // Focus on vocal fundamentals\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.7,\n          lowpassQ: 0.7,\n          notchQ: 10.0,\n          useFilters: true\n        };\n        \n      case 'instrument':\n        return {\n          highpassFreq: 40,   // Preserve low fundamentals\n          lowpassFreq: 2000,  // Allow more harmonics\n          notchFreq: 60,      // Remove power line hum\n          highpassQ: 0.5,\n          lowpassQ: 0.5,\n          notchQ: 8.0,\n          useFilters: true\n        };\n        \n      case 'wide':\n        return {\n          highpassFreq: 20,   // Minimal low cut\n          lowpassFreq: 5000,  // Minimal high cut\n          notchFreq: 60,      // Only power line filtering\n          highpassQ: 0.3,\n          lowpassQ: 0.3,\n          notchQ: 5.0,\n          useFilters: true\n        };\n        \n      case 'minimal':\n        return {\n          highpassFreq: 60,   // Just power line region\n          lowpassFreq: 8000,  // Very high cutoff\n          notchFreq: 60,      // Power line only\n          highpassQ: 0.1,\n          lowpassQ: 0.1,\n          notchQ: 3.0,\n          useFilters: true\n        };\n        \n      default:\n        return {\n          useFilters: false\n        };\n    }\n  }\n}","/**\n * PitchPro Logger - Structured logging with levels and context\n * \n * Provides structured logging functionality with different levels,\n * prefixes, and context information for better debugging and monitoring.\n */\n\nexport enum LogLevel {\n  DEBUG = 0,\n  INFO = 1,\n  WARN = 2,\n  ERROR = 3,\n  SILENT = 4\n}\n\nexport interface LogContext {\n  component?: string;\n  operation?: string;\n  userId?: string;\n  sessionId?: string;\n  timestamp?: number;\n  [key: string]: any;\n}\n\nexport interface LogEntry {\n  level: LogLevel;\n  message: string;\n  context?: LogContext;\n  timestamp: number;\n  prefix?: string;\n}\n\nexport class Logger {\n  private level: LogLevel;\n  private prefix: string;\n  private context: LogContext;\n  private listeners: ((entry: LogEntry) => void)[] = [];\n\n  constructor(\n    level: LogLevel = LogLevel.INFO,\n    prefix: string = '',\n    defaultContext: LogContext = {}\n  ) {\n    this.level = level;\n    this.prefix = prefix;\n    this.context = defaultContext;\n  }\n\n  /**\n   * Set the minimum log level\n   */\n  setLevel(level: LogLevel): void {\n    this.level = level;\n  }\n\n  /**\n   * Add a log listener for custom handling\n   */\n  addListener(listener: (entry: LogEntry) => void): void {\n    this.listeners.push(listener);\n  }\n\n  /**\n   * Remove a log listener\n   */\n  removeListener(listener: (entry: LogEntry) => void): void {\n    const index = this.listeners.indexOf(listener);\n    if (index !== -1) {\n      this.listeners.splice(index, 1);\n    }\n  }\n\n  /**\n   * Create a child logger with additional context\n   */\n  child(prefix: string, additionalContext: LogContext = {}): Logger {\n    const childPrefix = this.prefix ? `${this.prefix}:${prefix}` : prefix;\n    const childContext = { ...this.context, ...additionalContext };\n    const child = new Logger(this.level, childPrefix, childContext);\n    \n    // Forward entries to parent listeners\n    child.addListener((entry) => {\n      this.listeners.forEach(listener => listener(entry));\n    });\n    \n    return child;\n  }\n\n  /**\n   * Log a debug message\n   */\n  debug(message: string, context?: LogContext): void {\n    this.log(LogLevel.DEBUG, message, context);\n  }\n\n  /**\n   * Log an info message\n   */\n  info(message: string, context?: LogContext): void {\n    this.log(LogLevel.INFO, message, context);\n  }\n\n  /**\n   * Log a warning message\n   */\n  warn(message: string, context?: LogContext): void {\n    this.log(LogLevel.WARN, message, context);\n  }\n\n  /**\n   * Log an error message\n   */\n  error(message: string, error?: Error, context?: LogContext): void {\n    const errorContext = error ? {\n      errorName: error.name,\n      errorMessage: error.message,\n      stack: error.stack,\n      ...context\n    } : context;\n\n    this.log(LogLevel.ERROR, message, errorContext);\n  }\n\n  /**\n   * Core logging method\n   */\n  private log(level: LogLevel, message: string, additionalContext?: LogContext): void {\n    if (level < this.level) {\n      return;\n    }\n\n    const entry: LogEntry = {\n      level,\n      message,\n      context: { ...this.context, ...additionalContext },\n      timestamp: Date.now(),\n      prefix: this.prefix\n    };\n\n    // Send to console\n    this.logToConsole(entry);\n\n    // Send to listeners\n    this.listeners.forEach(listener => {\n      try {\n        listener(entry);\n      } catch (error) {\n        // Prevent listener errors from breaking logging\n        console.error('Logger listener error:', error);\n      }\n    });\n  }\n\n  /**\n   * Format and output to console\n   */\n  private logToConsole(entry: LogEntry): void {\n    const timestamp = new Date(entry.timestamp).toISOString();\n    const levelStr = LogLevel[entry.level];\n    const prefix = entry.prefix ? `[${entry.prefix}]` : '';\n    const baseMessage = `${timestamp} ${levelStr} ${prefix} ${entry.message}`;\n\n    const consoleMethod = this.getConsoleMethod(entry.level);\n\n    if (entry.context && Object.keys(entry.context).length > 0) {\n      consoleMethod(baseMessage, entry.context);\n    } else {\n      consoleMethod(baseMessage);\n    }\n  }\n\n  /**\n   * Get appropriate console method for log level\n   */\n  private getConsoleMethod(level: LogLevel): (...args: any[]) => void {\n    switch (level) {\n      case LogLevel.DEBUG:\n        return console.debug;\n      case LogLevel.INFO:\n        return console.info;\n      case LogLevel.WARN:\n        return console.warn;\n      case LogLevel.ERROR:\n        return console.error;\n      default:\n        return console.log;\n    }\n  }\n\n  /**\n   * Get current log level\n   */\n  getLevel(): LogLevel {\n    return this.level;\n  }\n\n  /**\n   * Check if a level is enabled\n   */\n  isLevelEnabled(level: LogLevel): boolean {\n    return level >= this.level;\n  }\n}\n\n// Default logger instance\nexport const defaultLogger = new Logger(LogLevel.INFO, 'PitchPro');\n\n// Convenience functions using default logger\nexport const debug = (message: string, context?: LogContext) => \n  defaultLogger.debug(message, context);\n\nexport const info = (message: string, context?: LogContext) => \n  defaultLogger.info(message, context);\n\nexport const warn = (message: string, context?: LogContext) => \n  defaultLogger.warn(message, context);\n\nexport const error = (message: string, err?: Error, context?: LogContext) => \n  defaultLogger.error(message, err, context);","/**\n * MicrophoneLifecycleManager - Page transition and idle detection microphone control\n * \n * Manages microphone lifecycle across page transitions, idle periods, and redirects\n * Implements reference counting for safe resource management\n * Handles SSR compatibility and automatic recovery\n */\n\nimport type { \n  MediaStreamResources, \n  HealthStatus,\n  LifecycleEvents,\n  StateChangeCallback,\n  ErrorCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { Logger, LogLevel } from '../utils/Logger';\nimport { MicrophoneHealthError } from '../utils/errors';\n\nexport interface LifecycleManagerConfig {\n  healthCheckIntervalMs?: number;\n  idleTimeoutMs?: number;\n  autoRecoveryDelayMs?: number;\n  maxIdleTimeBeforeRelease?: number;\n  maxAutoRecoveryAttempts?: number;\n  logLevel?: LogLevel;\n  enableDetailedLogging?: boolean;\n}\n\nexport class MicrophoneLifecycleManager {\n  private audioManager: AudioManager;\n  private refCount = 0;\n  private isActive = false;\n  private lastHealthCheck: HealthStatus | null = null;\n  private logger: Logger;\n  \n  // Monitoring intervals\n  private healthCheckInterval: number | null = null;\n  private idleCheckInterval: number | null = null;\n  private visibilityCheckInterval: number | null = null;\n  \n  // State tracking\n  private lastActivityTime = Date.now();\n  private isPageVisible = true;\n  private isUserActive = true;\n  private autoRecoveryAttempts = 0;\n  \n  // Event listeners storage for cleanup\n  private eventListeners = new Map<string, { target: EventTarget; listener: EventListener; eventName: string }>();\n  \n  // Configuration\n  private config: Required<LifecycleManagerConfig>;\n  \n  // Callbacks\n  private callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  } = {};\n\n  constructor(audioManager: AudioManager, userConfig: LifecycleManagerConfig = {}) {\n    this.audioManager = audioManager;\n    \n    // Apply configuration with defaults\n    this.config = {\n      healthCheckIntervalMs: userConfig.healthCheckIntervalMs ?? 5000,     // 5 seconds\n      idleTimeoutMs: userConfig.idleTimeoutMs ?? 300000,                   // 5 minutes\n      autoRecoveryDelayMs: userConfig.autoRecoveryDelayMs ?? 2000,         // 2 seconds\n      maxIdleTimeBeforeRelease: userConfig.maxIdleTimeBeforeRelease ?? 600000, // 10 minutes\n      maxAutoRecoveryAttempts: userConfig.maxAutoRecoveryAttempts ?? 3,\n      logLevel: userConfig.logLevel ?? LogLevel.INFO,\n      enableDetailedLogging: userConfig.enableDetailedLogging ?? false\n    };\n\n    // Initialize logger\n    this.logger = new Logger(\n      this.config.logLevel,\n      'MicrophoneLifecycleManager',\n      {\n        component: 'MicrophoneLifecycleManager',\n        enableDetailedLogging: this.config.enableDetailedLogging\n      }\n    );\n    \n    // SSR compatibility check\n    if (typeof window === 'undefined') {\n      this.logger.info('SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.logger.debug('Initializing MicrophoneLifecycleManager', {\n      config: this.config\n    });\n    \n    this.setupEventListeners();\n  }\n\n  /**\n   * Set callback functions\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n  }): void {\n    this.callbacks = { ...this.callbacks, ...callbacks };\n  }\n\n  /**\n   * Helper method to add event listener with automatic tracking for cleanup\n   * Currently not used but available for future event listener management improvements\n   */\n  /* private addTrackedEventListener(\n    target: EventTarget,\n    eventName: string, \n    listener: EventListener,\n    options?: AddEventListenerOptions\n  ): void {\n    const key = `${eventName}-${Date.now()}-${Math.random()}`;\n    \n    target.addEventListener(eventName, listener, options);\n    this.eventListeners.set(key, { target, listener, eventName });\n    \n    this.logger.debug('Event listener added', {\n      eventName,\n      target: target.constructor.name,\n      totalListeners: this.eventListeners.size\n    });\n  } */\n\n  /**\n   * Helper method to remove all tracked event listeners\n   */\n  private removeAllTrackedEventListeners(): void {\n    this.logger.debug('Removing all tracked event listeners', {\n      count: this.eventListeners.size\n    });\n\n    this.eventListeners.forEach(({ target, listener, eventName }, key) => {\n      try {\n        target.removeEventListener(eventName, listener);\n      } catch (error) {\n        this.logger.warn('Failed to remove event listener', {\n          eventName,\n          key,\n          error: (error as Error).message\n        });\n      }\n    });\n    \n    this.eventListeners.clear();\n    this.logger.debug('All event listeners removed');\n  }\n\n  /**\n   * Acquire microphone resources (with reference counting)\n   */\n  async acquire(): Promise<MediaStreamResources> {\n    this.refCount++;\n    \n    console.log(`🎤 [MicrophoneLifecycleManager] Acquiring resources (refCount: ${this.refCount})`);\n    \n    try {\n      // Initialize AudioManager if not already active\n      if (!this.isActive) {\n        const resources = await this.audioManager.initialize();\n        this.isActive = true;\n        this.lastActivityTime = Date.now();\n        this.autoRecoveryAttempts = 0;\n        \n        // Start monitoring\n        this.startHealthMonitoring();\n        this.startIdleMonitoring();\n        this.startVisibilityMonitoring();\n        \n        this.callbacks.onStateChange?.('active');\n        \n        console.log('🟢 [MicrophoneLifecycleManager] Microphone activated');\n        return resources;\n      }\n      \n      // Already active - just update activity and return existing resources\n      this.updateActivity();\n      const resources = await this.audioManager.initialize();\n      return resources;\n      \n    } catch (error) {\n      console.error('❌ [MicrophoneLifecycleManager] Failed to acquire resources:', error);\n      this.refCount = Math.max(0, this.refCount - 1);\n      this.callbacks.onError?.(error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Release microphone resources (with reference counting)\n   */\n  release(): void {\n    this.refCount = Math.max(0, this.refCount - 1);\n    \n    console.log(`📉 [MicrophoneLifecycleManager] Releasing resources (refCount: ${this.refCount})`);\n    \n    // Only stop monitoring and cleanup when no references remain\n    if (this.refCount <= 0) {\n      this.stopAllMonitoring();\n      this.audioManager.release();\n      this.isActive = false;\n      \n      this.callbacks.onStateChange?.('inactive');\n      \n      console.log('🔴 [MicrophoneLifecycleManager] Microphone deactivated');\n    }\n  }\n\n  /**\n   * Force release all resources (emergency cleanup)\n   */\n  forceRelease(): void {\n    console.log('🚨 [MicrophoneLifecycleManager] Force release - cleaning up all resources');\n    \n    this.refCount = 0;\n    this.stopAllMonitoring();\n    this.audioManager.forceCleanup();\n    this.isActive = false;\n    \n    this.callbacks.onStateChange?.('inactive');\n  }\n\n  /**\n   * Setup page lifecycle event listeners\n   */\n  private setupEventListeners(): void {\n    // Page visibility change\n    const visibilityChangeHandler = () => {\n      this.isPageVisible = !document.hidden;\n      this.handleVisibilityChange();\n    };\n    \n    // User activity tracking\n    const activityHandler = () => {\n      this.updateActivity();\n    };\n    \n    // Page unload / beforeunload\n    const unloadHandler = () => {\n      this.forceRelease();\n    };\n    \n    // Page focus / blur\n    const focusHandler = () => {\n      this.isPageVisible = true;\n      this.handleVisibilityChange();\n    };\n    \n    const blurHandler = () => {\n      this.isPageVisible = false;\n      this.handleVisibilityChange();\n    };\n    \n    // Add event listeners\n    document.addEventListener('visibilitychange', visibilityChangeHandler);\n    document.addEventListener('mousemove', activityHandler);\n    document.addEventListener('keydown', activityHandler);\n    document.addEventListener('click', activityHandler);\n    document.addEventListener('scroll', activityHandler);\n    document.addEventListener('touchstart', activityHandler);\n    window.addEventListener('beforeunload', unloadHandler);\n    window.addEventListener('unload', unloadHandler);\n    window.addEventListener('focus', focusHandler);\n    window.addEventListener('blur', blurHandler);\n    \n    // Store references for cleanup\n    this.eventListeners.set('visibilitychange', { target: document, listener: visibilityChangeHandler, eventName: 'visibilitychange' });\n    this.eventListeners.set('mousemove', { target: document, listener: activityHandler, eventName: 'mousemove' });\n    this.eventListeners.set('keydown', { target: document, listener: activityHandler, eventName: 'keydown' });\n    this.eventListeners.set('click', { target: document, listener: activityHandler, eventName: 'click' });\n    this.eventListeners.set('scroll', { target: document, listener: activityHandler, eventName: 'scroll' });\n    this.eventListeners.set('touchstart', { target: document, listener: activityHandler, eventName: 'touchstart' });\n    this.eventListeners.set('beforeunload', { target: window, listener: unloadHandler, eventName: 'beforeunload' });\n    this.eventListeners.set('unload', { target: window, listener: unloadHandler, eventName: 'unload' });\n    this.eventListeners.set('focus', { target: window, listener: focusHandler, eventName: 'focus' });\n    this.eventListeners.set('blur', { target: window, listener: blurHandler, eventName: 'blur' });\n    \n    console.log('👂 [MicrophoneLifecycleManager] Event listeners setup complete');\n  }\n\n  /**\n   * Handle page visibility changes\n   */\n  private handleVisibilityChange(): void {\n    if (!this.isActive) return;\n    \n    if (this.isPageVisible) {\n      console.log('👁️ [MicrophoneLifecycleManager] Page became visible - resuming monitoring');\n      this.updateActivity();\n      \n      // Check microphone health after page becomes visible\n      setTimeout(() => {\n        this.performHealthCheck();\n      }, 1000);\n      \n    } else {\n      console.log('🙈 [MicrophoneLifecycleManager] Page became hidden - reducing monitoring frequency');\n      \n      // Consider releasing resources if page stays hidden for too long\n      setTimeout(() => {\n        if (!this.isPageVisible && this.isActive) {\n          const timeSinceActivity = Date.now() - this.lastActivityTime;\n          if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n            console.log('⏰ [MicrophoneLifecycleManager] Long inactivity detected - releasing resources');\n            this.forceRelease();\n          }\n        }\n      }, this.config.maxIdleTimeBeforeRelease);\n    }\n  }\n\n  /**\n   * Update user activity timestamp\n   */\n  private updateActivity(): void {\n    this.lastActivityTime = Date.now();\n    this.isUserActive = true;\n  }\n\n  /**\n   * Start health monitoring\n   */\n  private startHealthMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n    }\n    \n    this.healthCheckInterval = window.setInterval(() => {\n      this.performHealthCheck();\n    }, this.config.healthCheckIntervalMs);\n    \n    console.log(`💓 [MicrophoneLifecycleManager] Health monitoring started (${this.config.healthCheckIntervalMs}ms interval)`);\n  }\n\n  /**\n   * Start idle monitoring\n   */\n  private startIdleMonitoring(): void {\n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n    }\n    \n    this.idleCheckInterval = window.setInterval(() => {\n      this.checkIdleTimeout();\n    }, 30000); // Check every 30 seconds\n    \n    console.log('😴 [MicrophoneLifecycleManager] Idle monitoring started');\n  }\n\n  /**\n   * Start visibility monitoring\n   */\n  private startVisibilityMonitoring(): void {\n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n    }\n    \n    this.visibilityCheckInterval = window.setInterval(() => {\n      // Additional visibility-based health checks\n      if (this.isPageVisible && this.isActive) {\n        this.performHealthCheck();\n      }\n    }, 10000); // Check every 10 seconds when visible\n    \n    console.log('👁️ [MicrophoneLifecycleManager] Visibility monitoring started');\n  }\n\n  /**\n   * Perform comprehensive health check\n   */\n  private async performHealthCheck(): Promise<void> {\n    if (!this.isActive) return;\n    \n    try {\n      const healthStatus = this.audioManager.checkMediaStreamHealth();\n      this.lastHealthCheck = healthStatus;\n      \n      if (!healthStatus.healthy) {\n        this.logger.warn('Unhealthy microphone state detected', { healthStatus });\n        \n        // Attempt automatic recovery\n        if (this.autoRecoveryAttempts < this.config.maxAutoRecoveryAttempts) {\n          this.autoRecoveryAttempts++;\n          \n          this.logger.warn('Attempting automatic recovery', {\n            attempt: this.autoRecoveryAttempts,\n            maxAttempts: this.config.maxAutoRecoveryAttempts,\n            healthStatus\n          });\n          \n          setTimeout(async () => {\n            try {\n              await this.audioManager.initialize(); // This will trigger re-initialization if needed\n              this.logger.info('Automatic recovery successful', {\n                attempt: this.autoRecoveryAttempts,\n                totalAttempts: this.autoRecoveryAttempts\n              });\n              \n              // Reset recovery attempts on success\n              this.autoRecoveryAttempts = 0;\n              \n              // Dispatch success event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoverySuccess', {});\n              \n            } catch (error) {\n              this.logger.error('Automatic recovery failed', error as Error, {\n                attempt: this.autoRecoveryAttempts,\n                maxAttempts: this.config.maxAutoRecoveryAttempts\n              });\n              this.callbacks.onError?.(error as Error);\n              \n              // Dispatch failure event\n              this.dispatchCustomEvent('pitchpro:lifecycle:autoRecoveryFailed', { error });\n            }\n          }, this.config.autoRecoveryDelayMs);\n          \n        } else {\n          // Create detailed error with health status context\n          const healthError = new MicrophoneHealthError(\n            `Microphone health check failed after ${this.autoRecoveryAttempts} recovery attempts. Monitoring stopped to prevent infinite error loop.`,\n            healthStatus,\n            this.autoRecoveryAttempts,\n            {\n              operation: 'performHealthCheck',\n              maxAttemptsReached: true,\n              monitoringStopped: true\n            }\n          );\n\n          this.logger.error('Maximum recovery attempts reached - stopping health checks', healthError, {\n            attempts: this.autoRecoveryAttempts,\n            maxAttempts: this.config.maxAutoRecoveryAttempts,\n            healthStatus\n          });\n          \n          // Stop all monitoring to prevent infinite error loop\n          // Reason: After maxAutoRecoveryAttempts, we assume the microphone is permanently unavailable\n          // and continued monitoring would only generate more errors without resolution\n          this.stopAllMonitoring();\n          \n          // Mark as inactive to prevent further health checks\n          // This ensures that the lifecycle manager stops consuming resources\n          this.isActive = false;\n          \n          this.callbacks.onError?.(healthError);\n          \n          // Dispatch final error event for external monitoring\n          this.dispatchCustomEvent('pitchpro:lifecycle:maxRecoveryAttemptsReached', { \n            attempts: this.autoRecoveryAttempts,\n            lastHealthStatus: healthStatus \n          });\n        }\n      } else {\n        // Reset recovery attempts on healthy status\n        if (this.autoRecoveryAttempts > 0) {\n          this.logger.info('Microphone health restored, resetting recovery attempts', {\n            previousAttempts: this.autoRecoveryAttempts,\n            healthStatus\n          });\n          this.autoRecoveryAttempts = 0;\n        }\n      }\n      \n    } catch (error) {\n      this.logger.error('Health check failed', error as Error, {\n        operation: 'performHealthCheck',\n        isActive: this.isActive,\n        attempts: this.autoRecoveryAttempts\n      });\n      this.callbacks.onError?.(error as Error);\n    }\n  }\n\n  /**\n   * Check for idle timeout\n   */\n  private checkIdleTimeout(): void {\n    if (!this.isActive) return;\n    \n    const timeSinceActivity = Date.now() - this.lastActivityTime;\n    const isIdle = timeSinceActivity > this.config.idleTimeoutMs;\n    \n    if (isIdle && this.isUserActive) {\n      console.log('😴 [MicrophoneLifecycleManager] User idle detected');\n      this.isUserActive = false;\n      \n      // Optionally reduce monitoring frequency during idle\n      // But don't automatically release - let the application decide\n    }\n    \n    // Check for extreme idle (auto-release)\n    if (timeSinceActivity > this.config.maxIdleTimeBeforeRelease) {\n      console.log('⏰ [MicrophoneLifecycleManager] Extreme idle detected - auto-releasing resources');\n      this.forceRelease();\n    }\n  }\n\n  /**\n   * Stop all monitoring intervals\n   */\n  private stopAllMonitoring(): void {\n    if (this.healthCheckInterval) {\n      clearInterval(this.healthCheckInterval);\n      this.healthCheckInterval = null;\n    }\n    \n    if (this.idleCheckInterval) {\n      clearInterval(this.idleCheckInterval);\n      this.idleCheckInterval = null;\n    }\n    \n    if (this.visibilityCheckInterval) {\n      clearInterval(this.visibilityCheckInterval);\n      this.visibilityCheckInterval = null;\n    }\n    \n    console.log('⏹️ [MicrophoneLifecycleManager] All monitoring stopped');\n  }\n\n  /**\n   * Dispatch custom event\n   */\n  private dispatchCustomEvent(eventName: keyof LifecycleEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Get current status\n   */\n  getStatus() {\n    return {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      isPageVisible: this.isPageVisible,\n      isUserActive: this.isUserActive,\n      lastActivityTime: this.lastActivityTime,\n      timeSinceActivity: Date.now() - this.lastActivityTime,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      lastHealthCheck: this.lastHealthCheck,\n      audioManagerStatus: this.audioManager.getStatus()\n    };\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n    \n    // Restart monitoring with new intervals if active\n    if (this.isActive) {\n      this.stopAllMonitoring();\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n    }\n    \n    console.log('🔧 [MicrophoneLifecycleManager] Configuration updated:', newConfig);\n  }\n\n  /**\n   * Reset recovery attempts and restart monitoring if needed\n   * This method provides manual intervention capability for max recovery attempts errors\n   */\n  resetRecoveryAttempts(): void {\n    const previousAttempts = this.autoRecoveryAttempts;\n    this.autoRecoveryAttempts = 0;\n    \n    this.logger.info('Recovery attempts reset manually', {\n      previousAttempts,\n      refCount: this.refCount,\n      wasActive: this.isActive,\n      hasMonitoring: !!this.healthCheckInterval\n    });\n    \n    // If monitoring was stopped due to max attempts, restart it\n    // This only happens when refCount > 0 (someone still needs the microphone)\n    if (!this.healthCheckInterval && this.refCount > 0) {\n      this.logger.info('Restarting monitoring after manual reset', {\n        refCount: this.refCount,\n        reason: 'Manual recovery reset with active references'\n      });\n      \n      this.isActive = true;\n      this.startHealthMonitoring();\n      this.startIdleMonitoring();\n      this.startVisibilityMonitoring();\n      \n      // Dispatch event to notify listeners of monitoring restart\n      this.dispatchCustomEvent('pitchpro:lifecycle:monitoringRestarted', {\n        reason: 'Manual recovery reset',\n        refCount: this.refCount\n      });\n    }\n  }\n\n  /**\n   * Cleanup and destroy\n   */\n  destroy(): void {\n    this.logger.info('Destroying MicrophoneLifecycleManager', {\n      refCount: this.refCount,\n      isActive: this.isActive,\n      autoRecoveryAttempts: this.autoRecoveryAttempts,\n      listenerCount: this.eventListeners.size\n    });\n    \n    // Stop all monitoring\n    this.stopAllMonitoring();\n    \n    // Force release resources\n    // This ensures all microphone streams are properly closed\n    this.forceRelease();\n    \n    // Remove all tracked event listeners using the helper method\n    this.removeAllTrackedEventListeners();\n    \n    // Reset state\n    this.isActive = false;\n    this.refCount = 0;\n    this.autoRecoveryAttempts = 0;\n    \n    this.logger.info('MicrophoneLifecycleManager cleanup complete');\n  }\n}","/**\n * ErrorNotificationSystem - Framework-agnostic Error Display and Notification\n * \n * Provides error messaging functionality that can be displayed on any page\n * Includes different notification types, auto-hide functionality, and priority management\n * Framework-agnostic implementation using vanilla DOM manipulation\n */\n\nimport type { NotificationConfig, NotificationElement } from '../types';\n\nexport class ErrorNotificationSystem {\n  private container: HTMLElement | null = null;\n  private notifications = new Map<string, NotificationElement>();\n  private notificationCounter = 0;\n  private defaultDuration = 5000; // 5 seconds\n  private maxNotifications = 0; // 初期実装: 制限なし\n  \n  // CSS classes for styling\n  private cssClasses = {\n    container: 'pitchpro-notifications',\n    notification: 'pitchpro-notification',\n    title: 'pitchpro-notification-title',\n    message: 'pitchpro-notification-message',\n    details: 'pitchpro-notification-details',\n    solution: 'pitchpro-notification-solution',\n    closeButton: 'pitchpro-notification-close',\n    error: 'pitchpro-notification-error',\n    warning: 'pitchpro-notification-warning',\n    success: 'pitchpro-notification-success',\n    info: 'pitchpro-notification-info',\n    high: 'pitchpro-notification-priority-high',\n    medium: 'pitchpro-notification-priority-medium',\n    low: 'pitchpro-notification-priority-low'\n  };\n\n  constructor() {\n    // SSR compatibility\n    if (typeof window === 'undefined') {\n      console.log('🔇 [ErrorNotificationSystem] SSR environment detected - skipping initialization');\n      return;\n    }\n    \n    this.initializeContainer();\n    this.injectCSS();\n  }\n\n  /**\n   * Create and inject the notification container into the DOM\n   */\n  private initializeContainer(): void {\n    // Check if container already exists\n    let existingContainer = document.querySelector(`.${this.cssClasses.container}`);\n    \n    if (!existingContainer) {\n      this.container = document.createElement('div');\n      this.container.className = this.cssClasses.container;\n      this.container.setAttribute('role', 'alert');\n      this.container.setAttribute('aria-live', 'polite');\n      \n      // Add to document body\n      document.body.appendChild(this.container);\n      \n      console.log('📋 [ErrorNotificationSystem] Notification container created');\n    } else {\n      this.container = existingContainer as HTMLElement;\n      console.log('📋 [ErrorNotificationSystem] Using existing notification container');\n    }\n  }\n\n  /**\n   * Inject default CSS styles\n   */\n  private injectCSS(): void {\n    // Check if styles already exist\n    if (document.querySelector('#pitchpro-notifications-styles')) {\n      return;\n    }\n\n    const css = `\n      .${this.cssClasses.container} {\n        position: fixed;\n        top: 20px;\n        right: 20px;\n        z-index: 10000;\n        max-width: 400px;\n        pointer-events: none;\n      }\n\n      .${this.cssClasses.notification} {\n        background: white;\n        border: 1px solid #e2e8f0;\n        border-radius: 8px;\n        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n        margin-bottom: 12px;\n        padding: 16px;\n        pointer-events: auto;\n        position: relative;\n        animation: slideIn 0.3s ease-out;\n        transition: opacity 0.3s ease-in-out, transform 0.3s ease-in-out;\n      }\n\n      .${this.cssClasses.notification}.removing {\n        opacity: 0;\n        transform: translateX(100%);\n      }\n\n      @keyframes slideIn {\n        from {\n          opacity: 0;\n          transform: translateX(100%);\n        }\n        to {\n          opacity: 1;\n          transform: translateX(0);\n        }\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.error} {\n        border-left: 4px solid #ef4444;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.warning} {\n        border-left: 4px solid #f59e0b;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.success} {\n        border-left: 4px solid #10b981;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.info} {\n        border-left: 4px solid #3b82f6;\n      }\n\n      .${this.cssClasses.title} {\n        font-weight: 600;\n        font-size: 14px;\n        color: #1f2937;\n        margin-bottom: 4px;\n        padding-right: 24px;\n      }\n\n      .${this.cssClasses.message} {\n        font-size: 13px;\n        color: #4b5563;\n        margin-bottom: 8px;\n        line-height: 1.4;\n      }\n\n      .${this.cssClasses.details} {\n        font-size: 12px;\n        color: #6b7280;\n        margin-bottom: 8px;\n        padding-left: 12px;\n        border-left: 2px solid #e5e7eb;\n      }\n\n      .${this.cssClasses.details} li {\n        margin-bottom: 2px;\n      }\n\n      .${this.cssClasses.solution} {\n        font-size: 12px;\n        color: #059669;\n        background: #ecfdf5;\n        border: 1px solid #a7f3d0;\n        border-radius: 4px;\n        padding: 8px;\n        margin-top: 8px;\n      }\n\n      .${this.cssClasses.closeButton} {\n        position: absolute;\n        top: 12px;\n        right: 12px;\n        background: none;\n        border: none;\n        font-size: 18px;\n        color: #9ca3af;\n        cursor: pointer;\n        padding: 0;\n        width: 20px;\n        height: 20px;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n      }\n\n      .${this.cssClasses.closeButton}:hover {\n        color: #6b7280;\n      }\n\n      .${this.cssClasses.notification}.${this.cssClasses.high} {\n        border-width: 2px;\n        box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);\n      }\n\n      @media (max-width: 640px) {\n        .${this.cssClasses.container} {\n          top: 10px;\n          left: 10px;\n          right: 10px;\n          max-width: none;\n        }\n      }\n    `;\n\n    const style = document.createElement('style');\n    style.id = 'pitchpro-notifications-styles';\n    style.textContent = css;\n    document.head.appendChild(style);\n  }\n\n  /**\n   * Show a notification\n   */\n  show(config: NotificationConfig): string {\n    if (!this.container) {\n      console.warn('⚠️ [ErrorNotificationSystem] Container not available - cannot show notification');\n      return '';\n    }\n\n    // Generate unique ID\n    const id = `notification-${++this.notificationCounter}`;\n\n    // Create notification element\n    const notification = this.createNotificationElement(id, config);\n\n    // Remove oldest notification if we're at the limit\n    if (this.notifications.size >= this.maxNotifications) {\n      const oldestId = Array.from(this.notifications.keys())[0];\n      this.remove(oldestId);\n    }\n\n    // Add to container and tracking\n    this.container.appendChild(notification);\n    this.notifications.set(id, notification);\n\n    // Auto-hide if configured\n    if (config.autoHide !== false) {\n      const duration = config.duration || this.defaultDuration;\n      setTimeout(() => {\n        this.remove(id);\n      }, duration);\n    }\n\n    console.log(`📢 [ErrorNotificationSystem] Notification shown: ${config.type} - ${config.title}`);\n    \n    return id;\n  }\n\n  /**\n   * Create notification DOM element\n   */\n  private createNotificationElement(id: string, config: NotificationConfig): NotificationElement {\n    const notification = document.createElement('div') as unknown as NotificationElement;\n    notification.className = [\n      this.cssClasses.notification,\n      this.cssClasses[config.type],\n      config.priority ? this.cssClasses[config.priority] : ''\n    ].filter(Boolean).join(' ');\n    notification['data-notification-id'] = id;\n\n    // Title\n    const title = document.createElement('div');\n    title.className = this.cssClasses.title;\n    title.textContent = config.title;\n    notification.appendChild(title);\n\n    // Message\n    const message = document.createElement('div');\n    message.className = this.cssClasses.message;\n    message.textContent = config.message;\n    notification.appendChild(message);\n\n    // Details (if provided)\n    if (config.details && config.details.length > 0) {\n      const details = document.createElement('div');\n      details.className = this.cssClasses.details;\n      \n      const list = document.createElement('ul');\n      list.style.margin = '0';\n      list.style.paddingLeft = '16px';\n      \n      config.details.forEach(detail => {\n        const item = document.createElement('li');\n        item.textContent = detail;\n        list.appendChild(item);\n      });\n      \n      details.appendChild(list);\n      notification.appendChild(details);\n    }\n\n    // Solution (if provided)\n    if (config.solution) {\n      const solution = document.createElement('div');\n      solution.className = this.cssClasses.solution;\n      solution.textContent = config.solution;\n      notification.appendChild(solution);\n    }\n\n    // Close button\n    const closeButton = document.createElement('button');\n    closeButton.className = this.cssClasses.closeButton;\n    closeButton.innerHTML = '×';\n    closeButton.setAttribute('aria-label', 'Close notification');\n    closeButton.addEventListener('click', () => {\n      this.remove(id);\n    });\n    notification.appendChild(closeButton);\n\n    return notification;\n  }\n\n  /**\n   * Remove a specific notification\n   */\n  remove(id: string): void {\n    const notification = this.notifications.get(id);\n    if (!notification) {\n      return;\n    }\n\n    // Add removing class for exit animation\n    notification.classList.add('removing');\n\n    // Remove from DOM after animation\n    setTimeout(() => {\n      if (notification.parentNode) {\n        notification.parentNode.removeChild(notification);\n      }\n      this.notifications.delete(id);\n    }, 300);\n\n    console.log(`🗑️ [ErrorNotificationSystem] Notification removed: ${id}`);\n  }\n\n  /**\n   * Clear all notifications\n   */\n  clearAll(): void {\n    const ids = Array.from(this.notifications.keys());\n    ids.forEach(id => this.remove(id));\n    \n    console.log('🧹 [ErrorNotificationSystem] All notifications cleared');\n  }\n\n  /**\n   * Show error notification (convenience method)\n   */\n  showError(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'error',\n      title,\n      message,\n      priority: 'high',\n      autoHide: false, // Errors should be manually dismissed\n      ...options\n    });\n  }\n\n  /**\n   * Show warning notification (convenience method)\n   */\n  showWarning(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'warning',\n      title,\n      message,\n      priority: 'medium',\n      duration: 8000, // Longer duration for warnings\n      ...options\n    });\n  }\n\n  /**\n   * Show success notification (convenience method)\n   */\n  showSuccess(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'success',\n      title,\n      message,\n      priority: 'low',\n      duration: 3000, // Shorter duration for success messages\n      ...options\n    });\n  }\n\n  /**\n   * Show info notification (convenience method)\n   */\n  showInfo(title: string, message: string, options: Partial<NotificationConfig> = {}): string {\n    return this.show({\n      type: 'info',\n      title,\n      message,\n      priority: 'low',\n      ...options\n    });\n  }\n\n  /**\n   * Show microphone error with common solutions\n   */\n  showMicrophoneError(error: Error, context?: string): string {\n    // Common solutions for microphone errors\n    // const commonSolutions = [\n    //   'ブラウザにマイクアクセスを許可してください',\n    //   'マイクが他のアプリケーションで使用されていないか確認してください',\n    //   'ブラウザを再起動して再度お試しください',\n    //   'デバイスの設定でマイクが有効になっていることを確認してください'\n    // ];\n\n    return this.showError(\n      'マイクロフォンエラー',\n      `マイクの初期化に失敗しました: ${error.message}`,\n      {\n        details: context ? [`発生箇所: ${context}`, `エラー詳細: ${error.name}`] : [`エラー詳細: ${error.name}`],\n        solution: 'マイクの設定を確認し、ブラウザにマイクアクセスを許可してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show audio context error\n   */\n  showAudioContextError(error: Error): string {\n    return this.showError(\n      'オーディオシステムエラー',\n      `音声処理システムの初期化に失敗しました: ${error.message}`,\n      {\n        details: [\n          'ブラウザがWeb Audio APIに対応していない可能性があります',\n          'または、音声デバイスに問題が発生しています'\n        ],\n        solution: 'ブラウザを最新版に更新するか、別のブラウザで試してください。',\n        priority: 'high'\n      }\n    );\n  }\n\n  /**\n   * Show network/loading error\n   */\n  showLoadingError(resource: string, error: Error): string {\n    return this.showError(\n      '読み込みエラー',\n      `${resource}の読み込みに失敗しました: ${error.message}`,\n      {\n        details: [\n          'ネットワーク接続を確認してください',\n          'ブラウザのキャッシュをクリアしてみてください'\n        ],\n        solution: 'ページを再読み込みするか、しばらく待ってから再度お試しください。',\n        priority: 'medium'\n      }\n    );\n  }\n\n  /**\n   * Get current notification count\n   */\n  getNotificationCount(): number {\n    return this.notifications.size;\n  }\n\n  /**\n   * Get all notification IDs\n   */\n  getNotificationIds(): string[] {\n    return Array.from(this.notifications.keys());\n  }\n\n  /**\n   * Check if a specific notification exists\n   */\n  hasNotification(id: string): boolean {\n    return this.notifications.has(id);\n  }\n\n  /**\n   * Update configuration\n   */\n  updateConfig(config: {\n    defaultDuration?: number;\n    maxNotifications?: number;\n  }): void {\n    if (config.defaultDuration !== undefined) {\n      this.defaultDuration = config.defaultDuration;\n    }\n    if (config.maxNotifications !== undefined) {\n      this.maxNotifications = config.maxNotifications;\n    }\n    \n    console.log('🔧 [ErrorNotificationSystem] Configuration updated:', config);\n  }\n\n  /**\n   * Destroy the notification system\n   */\n  destroy(): void {\n    console.log('🗑️ [ErrorNotificationSystem] Destroying notification system');\n    \n    this.clearAll();\n    \n    if (this.container && this.container.parentNode) {\n      this.container.parentNode.removeChild(this.container);\n    }\n    \n    // Remove injected CSS\n    const styleElement = document.querySelector('#pitchpro-notifications-styles');\n    if (styleElement && styleElement.parentNode) {\n      styleElement.parentNode.removeChild(styleElement);\n    }\n    \n    this.container = null;\n    this.notifications.clear();\n    \n    console.log('✅ [ErrorNotificationSystem] Cleanup complete');\n  }\n}","/**\n * MicrophoneController - High-level Unified Microphone Management Interface\n * \n * @description Provides a comprehensive, easy-to-use API that combines AudioManager,\n * MicrophoneLifecycleManager, and ErrorNotificationSystem into a single interface.\n * Handles device detection, permission management, sensitivity adjustment, and\n * automatic error recovery with user-friendly notifications.\n * \n * @example\n * ```typescript\n * const micController = new MicrophoneController();\n * \n * // Set up event callbacks\n * micController.setCallbacks({\n *   onStateChange: (state) => console.log('State:', state),\n *   onError: (error) => console.error('Error:', error.message),\n *   onDeviceChange: (specs) => console.log('Device:', specs.deviceType)\n * });\n * \n * // Initialize and start\n * const resources = await micController.initialize();\n * console.log('Microphone ready:', resources.mediaStream.active);\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { \n  DeviceSpecs,\n  MediaStreamResources,\n  MicrophoneControllerEvents,\n  ErrorCallback,\n  StateChangeCallback\n} from '../types';\nimport { AudioManager } from './AudioManager';\nimport { MicrophoneLifecycleManager } from './MicrophoneLifecycleManager';\nimport { ErrorNotificationSystem } from './ErrorNotificationSystem';\nimport { PitchDetector } from './PitchDetector';\nimport { \n  MicrophoneAccessError,\n  AudioContextError,\n  PitchProError,\n  ErrorCode,\n  ErrorMessageBuilder\n} from '../utils/errors';\nimport type { LifecycleManagerConfig } from './MicrophoneLifecycleManager';\nimport { Logger, LogLevel } from '../utils/Logger';\n\nexport interface MicrophoneControllerConfig {\n  /** Audio manager configuration */\n  audioManager?: {\n    sampleRate?: number;\n    echoCancellation?: boolean;\n    noiseSuppression?: boolean;\n    autoGainControl?: boolean;\n  };\n  \n  /** Lifecycle manager configuration */\n  lifecycle?: LifecycleManagerConfig;\n  \n  /** Audio constraint defaults for permission checks */\n  audioConstraints?: {\n    echoCancellation?: boolean;\n    noiseSuppression?: boolean; \n    autoGainControl?: boolean;\n  };\n  \n  /** Error notification settings */\n  notifications?: {\n    enabled?: boolean;\n    position?: 'top-right' | 'top-left' | 'bottom-right' | 'bottom-left';\n  };\n  \n  /** Logging configuration */\n  logging?: {\n    level?: LogLevel;\n    prefix?: string;\n  };\n}\n\nexport class MicrophoneController {\n  /** @readonly AudioManager instance for low-level audio resource management */\n  public readonly audioManager: AudioManager;\n  \n  /** @private Lifecycle manager for safe resource handling */\n  private lifecycleManager: MicrophoneLifecycleManager;\n  \n  /** @private Error notification system for user feedback */\n  private errorSystem: ErrorNotificationSystem;\n  \n  /** @private Logger for structured logging */\n  private logger: Logger;\n  \n  /** @private Configuration object with defaults */\n  private config: Required<MicrophoneControllerConfig>;\n  \n  /** @private Current controller state */\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'active' | 'error' = 'uninitialized';\n  \n  /** @private Microphone permission granted flag */\n  private isPermissionGranted = false;\n  \n  /** @private Last error encountered during operations */\n  private lastError: Error | null = null;\n  \n  /** @private Event callback functions */\n  private eventCallbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  } = {};\n  \n  /** @private Device-specific optimization specifications */\n  private deviceSpecs: DeviceSpecs | null = null;\n  \n  /** @private PitchDetector instance management for unified control */\n  private pitchDetector: PitchDetector | null = null;\n  \n  /** @private AudioDetectionComponent instance management for UI control */\n  private audioDetectionComponent: any | null = null;\n\n  /**\n   * Creates a new MicrophoneController with integrated management systems\n   * \n   * @param audioManagerConfig - Configuration for AudioManager (optional)\n   * @param audioManagerConfig.sampleRate - Audio sample rate (default: 44100)\n   * @param audioManagerConfig.echoCancellation - Enable echo cancellation (default: false)\n   * @param audioManagerConfig.autoGainControl - Enable auto gain control (default: false)\n   * @param lifecycleConfig - Configuration for lifecycle management (optional)\n   * @param lifecycleConfig.maxRetries - Maximum retry attempts (default: 3)\n   * @param lifecycleConfig.retryDelayMs - Delay between retries (default: 1000)\n   * @param showErrorNotifications - Enable visual error notifications (default: true)\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with defaults\n   * const micController = new MicrophoneController();\n   * \n   * // Custom configuration\n   * const micController = new MicrophoneController(\n   *   { sampleRate: 48000, echoCancellation: true },\n   *   { maxRetries: 5, retryDelayMs: 2000 },\n   *   false  // Disable error notifications\n   * );\n   * ```\n   */\n  constructor(config: MicrophoneControllerConfig = {}) {\n    // Apply configuration with defaults\n    this.config = {\n      audioManager: {\n        sampleRate: config.audioManager?.sampleRate ?? 44100,\n        echoCancellation: config.audioManager?.echoCancellation ?? false,\n        noiseSuppression: config.audioManager?.noiseSuppression ?? false,\n        autoGainControl: config.audioManager?.autoGainControl ?? false\n      },\n      lifecycle: config.lifecycle ?? {},\n      audioConstraints: {\n        echoCancellation: config.audioConstraints?.echoCancellation ?? false,\n        noiseSuppression: config.audioConstraints?.noiseSuppression ?? false,\n        autoGainControl: config.audioConstraints?.autoGainControl ?? false\n      },\n      notifications: {\n        enabled: config.notifications?.enabled ?? true,\n        position: config.notifications?.position ?? 'top-right'\n      },\n      logging: {\n        level: config.logging?.level ?? LogLevel.INFO,\n        prefix: config.logging?.prefix ?? 'MicrophoneController'\n      }\n    };\n\n    // Initialize logger first\n    this.logger = new Logger(\n      this.config.logging.level,\n      this.config.logging.prefix,\n      { component: 'MicrophoneController' }\n    );\n\n    this.logger.debug('Initializing MicrophoneController', { config: this.config });\n\n    // Initialize components with proper configuration\n    this.audioManager = new AudioManager(this.config.audioManager);\n    this.lifecycleManager = new MicrophoneLifecycleManager(this.audioManager, this.config.lifecycle);\n    this.errorSystem = this.config.notifications.enabled \n      ? new ErrorNotificationSystem() \n      : null as any;\n    \n    this.setupEventHandlers();\n    this.detectDevice();\n  }\n\n  /**\n   * Sets callback functions for microphone controller events\n   * \n   * @param callbacks - Object containing event callback functions\n   * @param callbacks.onStateChange - Called when controller state changes\n   * @param callbacks.onError - Called when errors occur\n   * @param callbacks.onPermissionChange - Called when microphone permission changes\n   * @param callbacks.onSensitivityChange - Called when sensitivity is adjusted\n   * @param callbacks.onDeviceChange - Called when device specifications are detected\n   * \n   * @example\n   * ```typescript\n   * micController.setCallbacks({\n   *   onStateChange: (state) => {\n   *     console.log('Controller state:', state);\n   *   },\n   *   onError: (error) => {\n   *     console.error('Microphone error:', error.message);\n   *   },\n   *   onDeviceChange: (specs) => {\n   *     console.log(`Device: ${specs.deviceType}, Sensitivity: ${specs.sensitivity}x`);\n   *   }\n   * });\n   * ```\n   */\n  setCallbacks(callbacks: {\n    onStateChange?: StateChangeCallback;\n    onError?: ErrorCallback;\n    onPermissionChange?: (granted: boolean) => void;\n    onSensitivityChange?: (sensitivity: number) => void;\n    onDeviceChange?: (specs: DeviceSpecs) => void;\n  }): void {\n    this.eventCallbacks = { ...this.eventCallbacks, ...callbacks };\n  }\n\n  /**\n   * Reset lifecycle manager recovery attempts\n   * Provides safe access to lifecycle recovery reset without exposing internal state\n   */\n  resetRecoveryAttempts(): void {\n    this.logger.info('Resetting recovery attempts via public API');\n    \n    try {\n      this.lifecycleManager.resetRecoveryAttempts();\n      this.logger.info('Recovery attempts reset successfully');\n    } catch (error) {\n      this.logger.error('Failed to reset recovery attempts', error as Error);\n      throw error;\n    }\n  }\n\n  /**\n   * Check if controller is in active state\n   */\n  isActive(): boolean {\n    return this.currentState === 'active';\n  }\n\n  /**\n   * Check if controller is ready for use\n   */\n  isReady(): boolean {\n    return this.currentState === 'ready' || this.currentState === 'active';\n  }\n\n  /**\n   * Check if controller is initialized\n   */\n  isInitialized(): boolean {\n    return this.currentState !== 'uninitialized';\n  }\n\n  /**\n   * Setup internal event handlers\n   */\n  private setupEventHandlers(): void {\n    // Lifecycle manager callbacks\n    this.lifecycleManager.setCallbacks({\n      onStateChange: (state) => {\n        this.updateState(state === 'active' ? 'active' : 'ready');\n      },\n      onError: (error) => {\n        this.handleError(error, 'lifecycle');\n      }\n    });\n  }\n\n  /**\n   * Detect device specifications\n   */\n  private detectDevice(): void {\n    this.deviceSpecs = this.audioManager.getPlatformSpecs();\n    console.log('📱 [MicrophoneController] Device detected:', this.deviceSpecs);\n    \n    // Notify callback\n    this.eventCallbacks.onDeviceChange?.(this.deviceSpecs);\n    \n    // Dispatch custom event\n    this.dispatchCustomEvent('pitchpro:deviceDetected', { specs: this.deviceSpecs });\n  }\n\n  /**\n   * Initializes microphone access with automatic device detection and permissions\n   * \n   * @description Handles the complete initialization flow including device detection,\n   * permission requests, resource acquisition, and error recovery. Automatically\n   * applies device-specific optimizations and sets up monitoring systems.\n   * \n   * @returns Promise resolving to audio resources (AudioContext, MediaStream, SourceNode)\n   * @throws {Error} If microphone permission is denied or initialization fails\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   const resources = await micController.initialize();\n   *   console.log('Microphone ready:', resources.mediaStream.active);\n   *   console.log('AudioContext state:', resources.audioContext.state);\n   * } catch (error) {\n   *   console.error('Failed to initialize microphone:', error.message);\n   * }\n   * ```\n   */\n  async initialize(): Promise<MediaStreamResources> {\n    try {\n      this.updateState('initializing');\n      console.log('🎤 [MicrophoneController] Starting initialization');\n\n      // Acquire resources through lifecycle manager\n      const resources = await this.lifecycleManager.acquire();\n      \n      // Update state and permissions\n      this.isPermissionGranted = true;\n      this.updateState('ready');\n      this.lastError = null;\n\n      // Notify permission change\n      this.eventCallbacks.onPermissionChange?.(true);\n      this.dispatchCustomEvent('pitchpro:microphoneGranted', { stream: resources.mediaStream });\n\n      console.log('✅ [MicrophoneController] Initialization complete');\n      return resources;\n\n    } catch (error) {\n      this.logger.error('Initialization failed', error as Error, {\n        operation: 'initialize',\n        currentState: this.currentState\n      });\n      \n      // Update internal state\n      this.isPermissionGranted = false;\n      \n      // Handle error (this will update state, show notifications, and call callbacks)\n      this.handleError(error as Error, 'initialization');\n      \n      // Notify permission denial\n      this.eventCallbacks.onPermissionChange?.(false);\n      this.dispatchCustomEvent('pitchpro:microphoneDenied', { error: error as Error });\n\n      throw error;\n    }\n  }\n\n  /**\n   * Request microphone permission (alias for initialize)\n   */\n  async requestPermission(): Promise<boolean> {\n    try {\n      await this.initialize();\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * Check if microphone permission is granted\n   */\n  async checkPermissionStatus(): Promise<'granted' | 'denied' | 'prompt'> {\n    if (typeof navigator === 'undefined' || !navigator.mediaDevices) {\n      return 'denied';\n    }\n\n    try {\n      const result = await navigator.permissions.query({ name: 'microphone' as PermissionName });\n      return result.state as 'granted' | 'denied' | 'prompt';\n    } catch {\n      // Fallback: try to access microphone with configured constraints\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({ \n          audio: this.config.audioConstraints\n        });\n        stream.getTracks().forEach(track => track.stop());\n        return 'granted';\n      } catch {\n        return 'denied';\n      }\n    }\n  }\n\n  /**\n   * Stop microphone and release resources\n   */\n  stop(): void {\n    console.log('🛑 [MicrophoneController] Stopping microphone');\n    \n    this.lifecycleManager.release();\n    this.updateState('ready');\n    \n    // Dispatch stop event\n    this.dispatchCustomEvent('pitchpro:microphoneStopped', {});\n    \n    console.log('✅ [MicrophoneController] Microphone stopped');\n  }\n\n  /**\n   * Forcefully stops microphone with complete resource cleanup\n   * \n   * @description Performs immediate and complete cleanup of all microphone resources,\n   * resets permission state, and returns controller to uninitialized state.\n   * Use when normal stop() is not sufficient or emergency cleanup is needed.\n   * \n   * @example\n   * ```typescript\n   * // Emergency cleanup\n   * micController.forceStop();\n   * console.log('All microphone resources cleaned up');\n   * ```\n   */\n  forceStop(): void {\n    console.log('🚨 [MicrophoneController] Force stopping microphone');\n    \n    this.lifecycleManager.forceRelease();\n    this.updateState('uninitialized');\n    this.isPermissionGranted = false;\n    \n    console.log('✅ [MicrophoneController] Force stop complete');\n  }\n\n  /**\n   * Sets microphone sensitivity with automatic validation and event notification\n   * \n   * @param sensitivity - Sensitivity multiplier (0.1 ~ 10.0)\n   * - 0.1-1.0: Reduced sensitivity for loud environments\n   * - 1.0: Standard PC sensitivity\n   * - 3.0: iPhone optimized\n   * - 7.0: iPad optimized  \n   * - 10.0: Maximum sensitivity for quiet environments\n   * \n   * @example\n   * ```typescript\n   * // Set device-optimized sensitivity\n   * micController.setSensitivity(7.0);  // iPad optimization\n   * \n   * // Adjust for environment\n   * micController.setSensitivity(0.5);  // Reduce for loud room\n   * ```\n   */\n  setSensitivity(sensitivity: number): void {\n    const oldSensitivity = this.audioManager.getSensitivity();\n    this.audioManager.setSensitivity(sensitivity);\n    const newSensitivity = this.audioManager.getSensitivity();\n    \n    if (oldSensitivity !== newSensitivity) {\n      console.log(`🔧 [MicrophoneController] Sensitivity changed: ${oldSensitivity}x → ${newSensitivity}x`);\n      \n      // Notify callbacks\n      this.eventCallbacks.onSensitivityChange?.(newSensitivity);\n      this.dispatchCustomEvent('pitchpro:sensitivityChanged', { sensitivity: newSensitivity });\n    }\n  }\n\n  /**\n   * Gets current microphone sensitivity multiplier\n   * \n   * @returns Current sensitivity value (0.1 ~ 10.0)\n   * \n   * @example\n   * ```typescript\n   * const currentSensitivity = micController.getSensitivity();\n   * console.log(`Current sensitivity: ${currentSensitivity}x`);\n   * ```\n   */\n  getSensitivity(): number {\n    return this.audioManager.getSensitivity();\n  }\n\n  /**\n   * Mutes the microphone by disabling audio tracks\n   * \n   * @description Provides instant mute functionality by disabling MediaStream \n   * audio tracks without requiring resource reinitialization. Maintains stream \n   * connection for quick unmute operations. Ideal for UI switching and temporary \n   * audio interruptions.\n   * \n   * @example\n   * ```typescript\n   * micController.mute();\n   * console.log('Microphone muted');\n   * ```\n   */\n  mute(): void {\n    this.logger.info('Muting microphone via controller');\n    this.audioManager.mute();\n    \n    // Dispatch mute event\n    this.dispatchCustomEvent('pitchpro:microphoneMuted', {\n      timestamp: Date.now(),\n      controllerState: this.currentState\n    });\n  }\n\n  /**\n   * Unmutes the microphone by enabling audio tracks\n   * \n   * @description Re-enables audio input immediately without initialization delays.\n   * Complements the mute() method for seamless audio control during UI operations.\n   * \n   * @example\n   * ```typescript\n   * micController.unmute();\n   * console.log('Microphone unmuted');\n   * ```\n   */\n  unmute(): void {\n    this.logger.info('Unmuting microphone via controller');\n    this.audioManager.unmute();\n    \n    // Dispatch unmute event\n    this.dispatchCustomEvent('pitchpro:microphoneUnmuted', {\n      timestamp: Date.now(),\n      controllerState: this.currentState\n    });\n  }\n\n  /**\n   * Toggles microphone mute state\n   * \n   * @description Convenience method that automatically mutes or unmutes based on \n   * current state. Useful for implementing mute buttons and keyboard shortcuts.\n   * \n   * @returns The new mute state (true if now muted, false if now unmuted)\n   * \n   * @example\n   * ```typescript\n   * const isMuted = micController.toggleMute();\n   * console.log(`Microphone is now ${isMuted ? 'muted' : 'unmuted'}`);\n   * ```\n   */\n  toggleMute(): boolean {\n    if (this.audioManager.getIsMuted()) {\n      this.unmute();\n      return false;\n    } else {\n      this.mute();\n      return true;\n    }\n  }\n\n  /**\n   * Checks if microphone is currently muted\n   * \n   * @returns True if microphone is muted, false otherwise\n   * \n   * @example\n   * ```typescript\n   * if (micController.isMuted()) {\n   *   console.log('Microphone is currently muted');\n   * }\n   * ```\n   */\n  isMuted(): boolean {\n    return this.audioManager.getIsMuted();\n  }\n\n  /**\n   * Registers an AudioDetectionComponent instance with this controller for UI management\n   * \n   * @description Enables the MicrophoneController to control AudioDetectionComponent UI\n   * reset operations for complete system reset including comprehensive UI cleanup.\n   * \n   * @param component - The AudioDetectionComponent instance to register\n   * \n   * @example\n   * ```typescript\n   * const audioDetector = new AudioDetectionComponent();\n   * const micController = audioDetector.microphoneController;\n   * \n   * // Register component for UI control\n   * micController.registerAudioDetectionComponent(audioDetector);\n   * \n   * // Now reset() includes comprehensive UI reset\n   * micController.reset(); // Includes AudioDetectionComponent UI reset\n   * ```\n   */\n  registerAudioDetectionComponent(component: any): void {\n    this.audioDetectionComponent = component;\n    this.logger.info('AudioDetectionComponent registered for UI control');\n    console.log('🎛️ [MicrophoneController] AudioDetectionComponent registered for UI management');\n  }\n\n  /**\n   * Registers a PitchDetector instance with this controller for unified management\n   * \n   * @description Enables the MicrophoneController to act as the central coordinator\n   * for the entire PitchPro library by managing PitchDetector instances. This allows\n   * unified control over detection, display, and audio management operations.\n   * \n   * @param detector - The PitchDetector instance to register\n   * \n   * @example\n   * ```typescript\n   * const micController = new MicrophoneController();\n   * const pitchDetector = new PitchDetector(micController.audioManager);\n   * \n   * // Register detector for unified control\n   * micController.registerDetector(pitchDetector);\n   * \n   * // Now controller can manage both audio and detection\n   * micController.reset(); // Stops detection, resets display, mutes mic\n   * ```\n   */\n  registerDetector(detector: PitchDetector): void {\n    this.pitchDetector = detector;\n    this.logger.info('PitchDetector instance has been registered to the controller.');\n    console.log('🎯 [MicrophoneController] PitchDetector registered for unified management');\n  }\n\n  /**\n   * Starts microphone and pitch detection systems\n   * \n   * @description Unmutes the microphone and starts pitch detection if a PitchDetector\n   * is registered. This method complements the reset() method for complete system\n   * lifecycle management. Provides one-click start functionality for the entire\n   * PitchPro library ecosystem.\n   * \n   * @returns True if both unmute and detection start succeeded, false otherwise\n   * \n   * @example\n   * ```typescript\n   * // Start system - unmutes mic and begins detection\n   * const success = micController.start();\n   * if (success) {\n   *   console.log('System started successfully');\n   * }\n   * \n   * // Typical usage pattern\n   * micController.reset(); // Stop everything\n   * micController.start(); // Resume everything\n   * ```\n   */\n  start(): boolean {\n    this.logger.info('Starting microphone and pitch detection systems...');\n    console.log('▶️ [MicrophoneController] Starting comprehensive system startup');\n\n    // 1. Unmute the microphone\n    try {\n      this.unmute();\n      console.log('✅ [MicrophoneController] Microphone unmuted');\n    } catch (error) {\n      this.logger.error('Error during microphone unmute', error as Error);\n      console.warn('⚠️ [MicrophoneController] Microphone unmute failed:', (error as Error).message);\n      return false;\n    }\n\n    // 2. Start PitchDetector if registered\n    if (this.pitchDetector) {\n      try {\n        const started = this.pitchDetector.startDetection();\n        if (started) {\n          this.logger.info('PitchDetector detection started successfully');\n          console.log('✅ [MicrophoneController] Pitch detection started');\n          console.log('🎉 [MicrophoneController] System startup completed successfully');\n          return true;\n        } else {\n          this.logger.warn('PitchDetector failed to start detection');\n          console.warn('⚠️ [MicrophoneController] Pitch detection failed to start');\n          return false;\n        }\n      } catch (error) {\n        this.logger.error('Error during PitchDetector start', error as Error);\n        console.warn('⚠️ [MicrophoneController] PitchDetector start encountered error:', (error as Error).message);\n        return false;\n      }\n    } else {\n      this.logger.warn('No PitchDetector registered, cannot start detection');\n      console.log('⚠️ [MicrophoneController] No PitchDetector registered - skipping detection start');\n      console.log('ℹ️ [MicrophoneController] Only microphone unmuted, detection not available');\n      return false; // Cannot start detection without registered detector\n    }\n  }\n\n  /**\n   * Performs comprehensive system reset across all managed components\n   * \n   * @description Executes a complete system reset by stopping pitch detection,\n   * clearing all UI display elements, muting the microphone, and resetting\n   * internal states. Provides one-click reset functionality for the entire\n   * PitchPro library ecosystem when used as the central coordinator.\n   * \n   * @example\n   * ```typescript\n   * // Complete system reset - stops everything and clears UI\n   * micController.reset();\n   * console.log('All systems reset and ready for next operation');\n   * \n   * // Ideal for UI reset buttons\n   * function handleResetButtonClick() {\n   *   micController.reset(); // One call handles everything\n   * }\n   * ```\n   */\n  reset(): void {\n    this.logger.info('Performing full system reset...');\n    console.log('🔄 [MicrophoneController] Starting comprehensive system reset');\n\n    // 1. Stop and reset PitchDetector if registered\n    if (this.pitchDetector) {\n      try {\n        // Stop detection processing\n        this.pitchDetector.stopDetection();\n        console.log('✅ [MicrophoneController] PitchDetector stopped');\n        \n        // Reset display state to clear all UI elements\n        this.pitchDetector.resetDisplayState();\n        console.log('✅ [MicrophoneController] Display state reset');\n      } catch (error) {\n        this.logger.error('Error during PitchDetector reset', error as Error);\n        console.warn('⚠️ [MicrophoneController] PitchDetector reset encountered error:', (error as Error).message);\n      }\n    } else {\n      this.logger.warn('No PitchDetector registered, skipping detector reset.');\n      console.log('⚠️ [MicrophoneController] No PitchDetector registered - skipping detection reset');\n    }\n\n    // 1.5. Reset AudioDetectionComponent UI if registered\n    if (this.audioDetectionComponent) {\n      try {\n        if (typeof this.audioDetectionComponent.resetDisplayElements === 'function') {\n          this.audioDetectionComponent.resetDisplayElements();\n          console.log('✅ [MicrophoneController] AudioDetectionComponent UI reset');\n        } else {\n          console.warn('⚠️ [MicrophoneController] AudioDetectionComponent does not have resetDisplayElements method');\n        }\n      } catch (error) {\n        this.logger.error('Error during AudioDetectionComponent UI reset', error as Error);\n        console.warn('⚠️ [MicrophoneController] AudioDetectionComponent UI reset encountered error:', (error as Error).message);\n      }\n    } else {\n      console.log('ℹ️ [MicrophoneController] No AudioDetectionComponent registered - skipping comprehensive UI reset');\n    }\n\n    // 2. Mute microphone to ensure audio input is disabled\n    try {\n      this.mute();\n      console.log('✅ [MicrophoneController] Microphone muted');\n    } catch (error) {\n      this.logger.error('Error during microphone mute', error as Error);\n      console.warn('⚠️ [MicrophoneController] Microphone mute encountered error:', (error as Error).message);\n    }\n\n    // 3. Reset recovery attempts for clean state (this also clears error states)\n    try {\n      this.resetRecoveryAttempts();\n      console.log('✅ [MicrophoneController] Recovery attempts reset');\n    } catch (error) {\n      this.logger.error('Error during recovery reset', error as Error);\n      console.warn('⚠️ [MicrophoneController] Recovery reset encountered error:', (error as Error).message);\n    }\n\n    this.logger.info('System reset complete.');\n    console.log('🎉 [MicrophoneController] Comprehensive system reset completed');\n    console.log('ℹ️ [MicrophoneController] Note: Muted state is normal and will not trigger health check errors');\n  }\n\n  /**\n   * Get device specifications\n   */\n  getDeviceSpecs(): DeviceSpecs | null {\n    return this.deviceSpecs;\n  }\n\n  /**\n   * Get current state\n   */\n  getState(): string {\n    return this.currentState;\n  }\n\n\n  /**\n   * Check if permission is granted\n   */\n  hasPermission(): boolean {\n    return this.isPermissionGranted;\n  }\n\n  /**\n   * Get comprehensive status\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isPermissionGranted: this.isPermissionGranted,\n      isActive: this.isActive(),\n      isReady: this.isReady(),\n      sensitivity: this.getSensitivity(),\n      deviceSpecs: this.deviceSpecs,\n      lastError: this.lastError,\n      audioManagerStatus: this.audioManager.getStatus(),\n      lifecycleStatus: this.lifecycleManager.getStatus()\n    };\n  }\n\n  /**\n   * Perform health check\n   */\n  checkHealth() {\n    return this.audioManager.checkMediaStreamHealth();\n  }\n\n  /**\n   * Test microphone functionality\n   */\n  async testMicrophone(durationMs = 2000): Promise<{\n    success: boolean;\n    volume: number;\n    frequency: number | null;\n    duration: number;\n    error?: Error;\n  }> {\n    const startTime = Date.now();\n    \n    try {\n      // Ensure we have resources\n      if (!this.isReady() && !this.isActive()) {\n        await this.initialize();\n      }\n      \n      // Create temporary analyser for testing\n      const analyser = this.audioManager.createAnalyser('microphone-test', {\n        fftSize: 1024,\n        smoothingTimeConstant: 0.8\n      });\n      \n      // Collect audio data for specified duration\n      let maxVolume = 0;\n      let detectedFrequency: number | null = null as number | null;\n      const endTime = startTime + durationMs;\n      \n      await new Promise<void>((resolve) => {\n        const checkAudio = () => {\n          if (Date.now() >= endTime) {\n            resolve();\n            return;\n          }\n          \n          // Analyze current audio\n          const bufferLength = analyser.fftSize;\n          const dataArray = new Float32Array(bufferLength);\n          analyser.getFloatTimeDomainData(dataArray);\n          \n          // Calculate RMS volume\n          let sum = 0;\n          for (let i = 0; i < bufferLength; i++) {\n            sum += Math.abs(dataArray[i]);\n          }\n          const rms = Math.sqrt(sum / bufferLength);\n          const volume = rms * 100;\n          \n          if (volume > maxVolume) {\n            maxVolume = volume;\n          }\n          \n          // Simple peak detection for frequency\n          if (volume > 5) { // Only check frequency if there's significant volume\n            let maxIndex = 0;\n            let maxValue = 0;\n            for (let i = 1; i < bufferLength / 2; i++) {\n              const value = Math.abs(dataArray[i]);\n              if (value > maxValue) {\n                maxValue = value;\n                maxIndex = i;\n              }\n            }\n            if (maxIndex > 0) {\n              detectedFrequency = (maxIndex * 44100) / bufferLength;\n            }\n          }\n          \n          requestAnimationFrame(checkAudio);\n        };\n        \n        checkAudio();\n      });\n      \n      // Cleanup test analyser\n      this.audioManager.removeAnalyser('microphone-test');\n      \n      const duration = Date.now() - startTime;\n      const success = maxVolume > 1; // Consider success if we detected some audio\n      \n      const frequencyDisplay = detectedFrequency ? detectedFrequency.toFixed(0) : 'none';\n      console.log(`🧪 [MicrophoneController] Microphone test complete: volume=${maxVolume.toFixed(2)}, frequency=${frequencyDisplay}, duration=${duration}ms`);\n      \n      return {\n        success,\n        volume: maxVolume,\n        frequency: detectedFrequency,\n        duration\n      };\n      \n    } catch (error) {\n      const duration = Date.now() - startTime;\n      const testError = this._createStructuredError(error as Error, 'microphone_test');\n      ErrorMessageBuilder.logError(testError, 'Microphone functionality test');\n      console.error('❌ [MicrophoneController] Microphone test failed:', testError.toJSON());\n      \n      return {\n        success: false,\n        volume: 0,\n        frequency: null,\n        duration,\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Update internal state and notify\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      console.log(`🔄 [MicrophoneController] State changed: ${oldState} → ${newState}`);\n      \n      // Notify callback\n      this.eventCallbacks.onStateChange?.(newState);\n    }\n  }\n\n  /**\n   * Handle errors with notification system\n   */\n  private handleError(error: Error, context: string): void {\n    const structuredError = error instanceof PitchProError ? error : this._createStructuredError(error, context);\n    ErrorMessageBuilder.logError(structuredError, `MicrophoneController ${context}`);\n    console.error(`❌ [MicrophoneController] Error in ${context}:`, structuredError.toJSON());\n    \n    this.lastError = error;\n    this.updateState('error');\n    \n    // Show error notification if system is available\n    if (this.errorSystem) {\n      if (context === 'initialization' || context === 'lifecycle') {\n        this.errorSystem.showMicrophoneError(error, context);\n      } else {\n        this.errorSystem.showError(\n          'マイクエラー',\n          `${context}でエラーが発生しました: ${error.message}`,\n          { priority: 'medium' }\n        );\n      }\n    }\n    \n    // Notify error callback\n    this.eventCallbacks.onError?.(error);\n  }\n\n  /**\n   * Dispatch custom DOM event\n   */\n  private dispatchCustomEvent(eventName: keyof MicrophoneControllerEvents, detail: any): void {\n    if (typeof window === 'undefined') return;\n    \n    const event = new CustomEvent(eventName, { detail });\n    window.dispatchEvent(event);\n  }\n\n  /**\n   * Add event listener for microphone events\n   */\n  addEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.addEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Remove event listener for microphone events\n   */\n  removeEventListener<K extends keyof MicrophoneControllerEvents>(\n    type: K,\n    listener: (event: MicrophoneControllerEvents[K]) => void\n  ): void {\n    if (typeof window === 'undefined') return;\n    \n    window.removeEventListener(type, listener as EventListener);\n  }\n\n  /**\n   * Cleanup and destroy all resources\n   */\n  destroy(): void {\n    console.log('🗑️ [MicrophoneController] Destroying controller');\n    \n    // Force stop to ensure cleanup\n    this.forceStop();\n    \n    // Destroy managed components\n    this.lifecycleManager.destroy();\n    this.errorSystem?.destroy();\n    \n    // Clear callbacks\n    this.eventCallbacks = {};\n    \n    // Reset state\n    this.currentState = 'uninitialized';\n    this.isPermissionGranted = false;\n    this.lastError = null;\n    this.deviceSpecs = null;\n    \n    console.log('✅ [MicrophoneController] Cleanup complete');\n  }\n\n  /**\n   * Creates structured error with enhanced context information\n   * \n   * @private\n   * @param error - Original error\n   * @param operation - Operation that failed\n   * @returns Structured PitchProError with context\n   */\n  private _createStructuredError(error: Error, operation: string): PitchProError {\n    // Determine error type based on error message patterns\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission') ||\n        error.message.includes('denied')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.deviceSpecs,\n          permissionState: this.isPermissionGranted,\n          controllerState: this.currentState,\n          userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'unknown'\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('context') ||\n        error.message.includes('initialization')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          controllerState: this.currentState,\n          audioManagerStatus: this.audioManager.getStatus(),\n          deviceSpecs: this.deviceSpecs\n        }\n      );\n    }\n    \n    // Default to generic PitchPro error\n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.MICROPHONE_ACCESS_DENIED,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        currentState: {\n          controllerState: this.currentState,\n          isPermissionGranted: this.isPermissionGranted,\n          isActive: this.isActive(),\n          isReady: this.isReady(),\n          deviceSpecs: this.deviceSpecs\n        }\n      }\n    );\n  }\n}","/**\n * FrequencyUtils - Comprehensive Frequency Conversion and Musical Analysis Utilities\n * \n * @description Provides essential utilities for converting between frequencies, musical notes,\n * cents deviation, and MIDI values. Includes advanced musical interval calculations and\n * frequency analysis functions optimized for pitch detection and music applications.\n * \n * **Key Features:**\n * - Frequency ↔ MIDI note conversion with A4=440Hz reference\n * - Musical note name resolution with enharmonic support\n * - Cents deviation calculation for pitch accuracy\n * - Musical interval analysis and recognition\n * - Octave detection and normalization\n * \n * @example\n * ```typescript\n * // Basic frequency conversion\n * const note = FrequencyUtils.frequencyToNote(440);\n * console.log(note); // { name: 'A', octave: 4, midi: 69, frequency: 440 }\n * \n * // Pitch accuracy analysis\n * const cents = FrequencyUtils.frequencyToCents(445, 440);\n * console.log(cents); // +19.56 cents sharp\n * \n * // Musical interval calculation\n * const interval = FrequencyUtils.getInterval(523.25, 261.63);\n * console.log(interval); // Perfect octave\n * ```\n * \n * @version 1.1.3\n * @since 1.0.0\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\n\nexport class FrequencyUtils {\n  /** Standard reference frequency for A4 note (440 Hz) */\n  static readonly A4_FREQUENCY = 440;\n  \n  /** MIDI note number for A4 (69) */\n  static readonly A4_MIDI_NUMBER = 69;\n  \n  /** Sharp note names in chromatic order */\n  static readonly NOTE_NAMES = ['C', 'C#', 'D', 'D#', 'E', 'F', 'F#', 'G', 'G#', 'A', 'A#', 'B'];\n  \n  /** Flat note names in chromatic order */\n  static readonly FLAT_NOTE_NAMES = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\n  \n  /** Common musical intervals mapped to semitone values */\n  static readonly INTERVALS = {\n    unison: 0,\n    minorSecond: 1,\n    majorSecond: 2,\n    minorThird: 3,\n    majorThird: 4,\n    perfectFourth: 5,\n    tritone: 6,\n    perfectFifth: 7,\n    minorSixth: 8,\n    majorSixth: 9,\n    minorSeventh: 10,\n    majorSeventh: 11,\n    octave: 12\n  };\n\n  /**\n   * Converts frequency in Hz to MIDI note number\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns MIDI note number (0-127, where 69 = A4 = 440Hz)\n   * \n   * @example\n   * ```typescript\n   * const midiNote = FrequencyUtils.frequencyToMidi(440);\n   * console.log(midiNote); // 69 (A4)\n   * \n   * const midiNote2 = FrequencyUtils.frequencyToMidi(261.63);\n   * console.log(midiNote2); // 60 (C4)\n   * ```\n   */\n  static frequencyToMidi(frequency: number): number {\n    if (frequency <= 0) return 0;\n    return Math.round(12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER);\n  }\n\n  /**\n   * Converts MIDI note number to frequency in Hz\n   * \n   * @param midiNumber - MIDI note number (0-127)\n   * @returns Frequency in Hz\n   * \n   * @example\n   * ```typescript\n   * const frequency = FrequencyUtils.midiToFrequency(69);\n   * console.log(frequency); // 440 (A4)\n   * \n   * const frequency2 = FrequencyUtils.midiToFrequency(60);\n   * console.log(frequency2); // 261.63 (C4)\n   * ```\n   */\n  static midiToFrequency(midiNumber: number): number {\n    return FrequencyUtils.A4_FREQUENCY * Math.pow(2, (midiNumber - FrequencyUtils.A4_MIDI_NUMBER) / 12);\n  }\n\n  /**\n   * Converts frequency to musical note with octave detection and enharmonic support\n   * \n   * @param frequency - Input frequency in Hz\n   * @param useFlats - Use flat notation instead of sharps (default: false)\n   * @returns Musical note object with name, octave, MIDI number, and exact frequency\n   * \n   * @example\n   * ```typescript\n   * const note1 = FrequencyUtils.frequencyToNote(440);\n   * console.log(note1); // { name: 'A4', octave: 4, midi: 69, frequency: 440 }\n   * \n   * const note2 = FrequencyUtils.frequencyToNote(466.16, true);\n   * console.log(note2); // { name: 'Bb4', octave: 4, midi: 70, frequency: 466.164... }\n   * \n   * // Invalid frequency handling\n   * const invalid = FrequencyUtils.frequencyToNote(-10);\n   * console.log(invalid); // { name: '--', octave: 0, midi: 0, frequency: 0 }\n   * ```\n   */\n  static frequencyToNote(frequency: number, useFlats = false): MusicalNote {\n    if (frequency <= 0) {\n      return {\n        name: '--',\n        octave: 0,\n        midi: 0,\n        frequency: 0\n      };\n    }\n\n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    const noteNames = useFlats ? FrequencyUtils.FLAT_NOTE_NAMES : FrequencyUtils.NOTE_NAMES;\n    \n    const noteIndex = (midiNumber - 12) % 12; // C0 = MIDI 12\n    const octave = Math.floor((midiNumber - 12) / 12);\n    const noteName = noteNames[noteIndex];\n    \n    return {\n      name: noteName + octave,\n      octave,\n      midi: midiNumber,\n      frequency: FrequencyUtils.midiToFrequency(midiNumber)\n    };\n  }\n\n  /**\n   * Calculates cents deviation from the nearest semitone for pitch accuracy analysis\n   * \n   * @description Converts frequency to cents deviation, where 100 cents = 1 semitone.\n   * Positive values indicate sharp pitch, negative values indicate flat pitch.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Cents deviation from nearest semitone (-50 to +50 cents)\n   * \n   * @example\n   * ```typescript\n   * const cents1 = FrequencyUtils.frequencyToCents(440);\n   * console.log(cents1); // 0 (A4 is perfectly in tune)\n   * \n   * const cents2 = FrequencyUtils.frequencyToCents(445);\n   * console.log(cents2); // +20 (20 cents sharp)\n   * \n   * const cents3 = FrequencyUtils.frequencyToCents(435);\n   * console.log(cents3); // -20 (20 cents flat)\n   * ```\n   */\n  static frequencyToCents(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = 12 * Math.log2(frequency / FrequencyUtils.A4_FREQUENCY) + FrequencyUtils.A4_MIDI_NUMBER;\n    const nearestMidi = Math.round(midiNumber);\n    const centsDeviation = (midiNumber - nearestMidi) * 100;\n    \n    return Math.round(centsDeviation);\n  }\n\n  /**\n   * Converts cents to frequency ratio for interval calculations\n   * \n   * @description Calculates the frequency multiplier for a given cent value.\n   * Useful for transposition and interval calculations.\n   * \n   * @param cents - Cents value (100 cents = 1 semitone)\n   * @returns Frequency ratio multiplier\n   * \n   * @example\n   * ```typescript\n   * const ratio1 = FrequencyUtils.centsToRatio(1200);\n   * console.log(ratio1); // 2.0 (1200 cents = 1 octave = 2x frequency)\n   * \n   * const ratio2 = FrequencyUtils.centsToRatio(700);\n   * console.log(ratio2); // ~1.498 (700 cents ≈ perfect fifth)\n   * \n   * // Apply ratio to transpose frequency\n   * const newFreq = 440 * FrequencyUtils.centsToRatio(100); // 440 * semitone ratio\n   * console.log(newFreq); // ~466.16 (A# above A4)\n   * ```\n   */\n  static centsToRatio(cents: number): number {\n    return Math.pow(2, cents / 1200);\n  }\n\n  /**\n   * Converts frequency ratio to cents for interval analysis\n   * \n   * @description Calculates the cent value for a given frequency ratio.\n   * Useful for analyzing musical intervals and pitch relationships.\n   * \n   * @param ratio - Frequency ratio (higher frequency / lower frequency)\n   * @returns Cents value (positive for ascending intervals)\n   * \n   * @example\n   * ```typescript\n   * const cents1 = FrequencyUtils.ratioToCents(2.0);\n   * console.log(cents1); // 1200 (octave)\n   * \n   * const cents2 = FrequencyUtils.ratioToCents(1.5);\n   * console.log(cents2); // 702 (perfect fifth)\n   * \n   * const cents3 = FrequencyUtils.ratioToCents(880 / 440);\n   * console.log(cents3); // 1200 (A4 to A5 = octave)\n   * ```\n   */\n  static ratioToCents(ratio: number): number {\n    if (ratio <= 0) return 0;\n    return Math.round(1200 * Math.log2(ratio));\n  }\n\n  /**\n   * Finds the exact frequency of the closest equal temperament note\n   * \n   * @description Rounds the input frequency to the nearest semitone frequency\n   * in equal temperament tuning. Useful for pitch correction and reference.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns Exact frequency of the closest note in Hz\n   * \n   * @example\n   * ```typescript\n   * const closest1 = FrequencyUtils.getClosestNoteFrequency(445);\n   * console.log(closest1); // 440 (closest to A4)\n   * \n   * const closest2 = FrequencyUtils.getClosestNoteFrequency(470);\n   * console.log(closest2); // 466.16 (closest to A#4/Bb4)\n   * \n   * const closest3 = FrequencyUtils.getClosestNoteFrequency(260);\n   * console.log(closest3); // 261.63 (closest to C4)\n   * ```\n   */\n  static getClosestNoteFrequency(frequency: number): number {\n    if (frequency <= 0) return 0;\n    \n    const midiNumber = FrequencyUtils.frequencyToMidi(frequency);\n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Calculates the absolute interval between two frequencies in semitones\n   * \n   * @description Determines the musical interval size between two frequencies,\n   * always returning a positive value regardless of frequency order.\n   * \n   * @param frequency1 - First frequency in Hz\n   * @param frequency2 - Second frequency in Hz\n   * @returns Absolute interval in semitones (always positive)\n   * \n   * @example\n   * ```typescript\n   * const interval1 = FrequencyUtils.getInterval(440, 880);\n   * console.log(interval1); // 12 (octave)\n   * \n   * const interval2 = FrequencyUtils.getInterval(880, 440);\n   * console.log(interval2); // 12 (same interval, order doesn't matter)\n   * \n   * const interval3 = FrequencyUtils.getInterval(440, 659.25);\n   * console.log(interval3); // 7 (perfect fifth)\n   * ```\n   */\n  static getInterval(frequency1: number, frequency2: number): number {\n    if (frequency1 <= 0 || frequency2 <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(frequency1);\n    const midi2 = FrequencyUtils.frequencyToMidi(frequency2);\n    \n    return Math.abs(midi2 - midi1);\n  }\n\n  /**\n   * Calculates the signed interval between two frequencies with direction\n   * \n   * @description Determines the musical interval with direction information.\n   * Positive values indicate ascending intervals, negative values indicate descending.\n   * \n   * @param fromFrequency - Starting frequency in Hz\n   * @param toFrequency - Target frequency in Hz\n   * @returns Signed interval in semitones (positive = ascending, negative = descending)\n   * \n   * @example\n   * ```typescript\n   * const interval1 = FrequencyUtils.getSignedInterval(440, 880);\n   * console.log(interval1); // +12 (ascending octave)\n   * \n   * const interval2 = FrequencyUtils.getSignedInterval(880, 440);\n   * console.log(interval2); // -12 (descending octave)\n   * \n   * const interval3 = FrequencyUtils.getSignedInterval(261.63, 392);\n   * console.log(interval3); // +7 (ascending perfect fifth)\n   * ```\n   */\n  static getSignedInterval(fromFrequency: number, toFrequency: number): number {\n    if (fromFrequency <= 0 || toFrequency <= 0) return 0;\n    \n    const midi1 = FrequencyUtils.frequencyToMidi(fromFrequency);\n    const midi2 = FrequencyUtils.frequencyToMidi(toFrequency);\n    \n    return midi2 - midi1;\n  }\n\n  /**\n   * Provides comprehensive musical interval information and analysis\n   * \n   * @description Converts semitone count to detailed interval information including\n   * name, cents value, and frequency ratio. Handles compound intervals with octaves.\n   * \n   * @param semitones - Interval size in semitones\n   * @returns Musical interval object with name, semitones, cents, and ratio\n   * \n   * @example\n   * ```typescript\n   * const fifth = FrequencyUtils.getIntervalInfo(7);\n   * console.log(fifth);\n   * // { name: 'Perfect Fifth', semitones: 7, cents: 700, ratio: 1.498... }\n   * \n   * const compound = FrequencyUtils.getIntervalInfo(19);\n   * console.log(compound);\n   * // { name: 'Perfect Fifth + 1 octave(s)', semitones: 19, cents: 1900, ratio: 2.996... }\n   * \n   * const unison = FrequencyUtils.getIntervalInfo(0);\n   * console.log(unison);\n   * // { name: 'Perfect Unison', semitones: 0, cents: 0, ratio: 1.0 }\n   * ```\n   */\n  static getIntervalInfo(semitones: number): MusicalInterval {\n    const intervalNames = {\n      0: 'Perfect Unison',\n      1: 'Minor Second',\n      2: 'Major Second',\n      3: 'Minor Third',\n      4: 'Major Third',\n      5: 'Perfect Fourth',\n      6: 'Tritone',\n      7: 'Perfect Fifth',\n      8: 'Minor Sixth',\n      9: 'Major Sixth',\n      10: 'Minor Seventh',\n      11: 'Major Seventh',\n      12: 'Perfect Octave'\n    };\n\n    const normalizedSemitones = ((semitones % 12) + 12) % 12;\n    const octaves = Math.floor(semitones / 12);\n    \n    const baseName = intervalNames[normalizedSemitones as keyof typeof intervalNames] || 'Unknown';\n    const name = octaves > 0 ? `${baseName} + ${octaves} octave(s)` : baseName;\n    \n    return {\n      name,\n      semitones,\n      cents: semitones * 100,\n      ratio: Math.pow(2, semitones / 12)\n    };\n  }\n\n  /**\n   * Checks if frequency falls within typical human vocal range\n   * \n   * @description Tests whether a frequency is within the fundamental vocal range\n   * of approximately 80Hz to 1100Hz, covering bass to soprano voices.\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns True if frequency is within vocal range, false otherwise\n   * \n   * @example\n   * ```typescript\n   * const isVocal1 = FrequencyUtils.isInVocalRange(220);\n   * console.log(isVocal1); // true (A3, typical male voice)\n   * \n   * const isVocal2 = FrequencyUtils.isInVocalRange(50);\n   * console.log(isVocal2); // false (below vocal range)\n   * \n   * const isVocal3 = FrequencyUtils.isInVocalRange(2000);\n   * console.log(isVocal3); // false (above fundamental vocal range)\n   * ```\n   */\n  static isInVocalRange(frequency: number): boolean {\n    // Human vocal range roughly 80Hz to 1100Hz\n    return frequency >= 80 && frequency <= 1100;\n  }\n\n  /**\n   * Checks if frequency falls within standard piano key range\n   * \n   * @description Tests whether a frequency is within the range of a standard\n   * 88-key piano, from A0 (27.5Hz) to C8 (4186Hz).\n   * \n   * @param frequency - Input frequency in Hz\n   * @returns True if frequency is within piano range, false otherwise\n   * \n   * @example\n   * ```typescript\n   * const isPiano1 = FrequencyUtils.isInPianoRange(440);\n   * console.log(isPiano1); // true (A4, middle of piano range)\n   * \n   * const isPiano2 = FrequencyUtils.isInPianoRange(20);\n   * console.log(isPiano2); // false (below piano range)\n   * \n   * const isPiano3 = FrequencyUtils.isInPianoRange(5000);\n   * console.log(isPiano3); // false (above piano range)\n   * ```\n   */\n  static isInPianoRange(frequency: number): boolean {\n    // Piano range A0 (27.5Hz) to C8 (4186Hz)\n    return frequency >= 27.5 && frequency <= 4186;\n  }\n\n  /**\n   * Retrieves frequency range specifications for common instruments\n   * \n   * @description Returns the typical fundamental frequency range for various\n   * instruments and voice types. Useful for instrument-specific audio processing.\n   * \n   * @param instrument - Instrument name (piano, guitar, violin, cello, voice_bass, voice_tenor, voice_alto, voice_soprano)\n   * @returns Object with min/max frequencies in Hz, or null if instrument not found\n   * \n   * @example\n   * ```typescript\n   * const guitarRange = FrequencyUtils.getInstrumentRange('guitar');\n   * console.log(guitarRange); // { min: 82.4, max: 1397 } (E2 to F6)\n   * \n   * const bassRange = FrequencyUtils.getInstrumentRange('voice_bass');\n   * console.log(bassRange); // { min: 87.3, max: 349 } (F2 to F4)\n   * \n   * const unknown = FrequencyUtils.getInstrumentRange('kazoo');\n   * console.log(unknown); // null (instrument not in database)\n   * ```\n   */\n  static getInstrumentRange(instrument: string): { min: number; max: number } | null {\n    const ranges = {\n      piano: { min: 27.5, max: 4186 },\n      guitar: { min: 82.4, max: 1397 }, // E2 to F6\n      violin: { min: 196, max: 3520 },  // G3 to A7\n      cello: { min: 65.4, max: 1397 },  // C2 to F6\n      voice_bass: { min: 87.3, max: 349 }, // F2 to F4\n      voice_tenor: { min: 131, max: 523 }, // C3 to C5\n      voice_alto: { min: 175, max: 698 },  // F3 to F5\n      voice_soprano: { min: 262, max: 1047 } // C4 to C6\n    };\n\n    return ranges[instrument as keyof typeof ranges] || null;\n  }\n\n  /**\n   * Generates chromatic scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a chromatic scale\n   * (all 12 semitones) starting from the given base frequency.\n   * \n   * @param baseFrequency - Starting frequency in Hz\n   * @param octaves - Number of octaves to generate (default: 1)\n   * @returns Array of frequencies representing the chromatic scale\n   * \n   * @example\n   * ```typescript\n   * const chromaticC4 = FrequencyUtils.generateChromaticScale(261.63, 1);\n   * console.log(chromaticC4);\n   * // [261.63, 277.18, 293.66, 311.13, 329.63, 349.23, 369.99, 392.00, 415.30, 440.00, 466.16, 493.88, 523.25]\n   * \n   * const chromatic2Oct = FrequencyUtils.generateChromaticScale(440, 2);\n   * console.log(chromatic2Oct.length); // 24 (2 octaves × 12 semitones)\n   * ```\n   */\n  static generateChromaticScale(baseFrequency: number, octaves = 1): number[] {\n    const frequencies: number[] = [];\n    \n    for (let i = 0; i < 12 * octaves; i++) {\n      const frequency = baseFrequency * Math.pow(2, i / 12);\n      frequencies.push(frequency);\n    }\n    \n    return frequencies;\n  }\n\n  /**\n   * Generates major scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a major scale\n   * using the pattern W-W-H-W-W-W-H (whole step, half step intervals).\n   * \n   * @param baseFrequency - Starting frequency in Hz (tonic note)\n   * @returns Array of 8 frequencies representing the major scale (including octave)\n   * \n   * @example\n   * ```typescript\n   * const cMajor = FrequencyUtils.generateMajorScale(261.63); // C4 major\n   * console.log(cMajor);\n   * // [261.63, 293.66, 329.63, 349.23, 392.00, 440.00, 493.88, 523.25]\n   * // [C4,     D4,     E4,     F4,     G4,     A4,     B4,     C5]\n   * \n   * const gMajor = FrequencyUtils.generateMajorScale(392); // G4 major\n   * console.log(gMajor.length); // 8 notes (including octave)\n   * ```\n   */\n  static generateMajorScale(baseFrequency: number): number[] {\n    // Major scale pattern: W-W-H-W-W-W-H (W=whole step=2 semitones, H=half step=1 semitone)\n    const pattern = [0, 2, 4, 5, 7, 9, 11, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Generates natural minor scale frequencies from a base frequency\n   * \n   * @description Creates an array of frequencies representing a natural minor scale\n   * using the pattern W-H-W-W-H-W-W (whole step, half step intervals).\n   * \n   * @param baseFrequency - Starting frequency in Hz (tonic note)\n   * @returns Array of 8 frequencies representing the natural minor scale (including octave)\n   * \n   * @example\n   * ```typescript\n   * const aMinor = FrequencyUtils.generateMinorScale(440); // A4 minor\n   * console.log(aMinor);\n   * // [440.00, 493.88, 523.25, 587.33, 659.25, 698.46, 783.99, 880.00]\n   * // [A4,     B4,     C5,     D5,     E5,     F5,     G5,     A5]\n   * \n   * const dMinor = FrequencyUtils.generateMinorScale(293.66); // D4 minor\n   * console.log(dMinor.length); // 8 notes (including octave)\n   * ```\n   */\n  static generateMinorScale(baseFrequency: number): number[] {\n    // Natural minor scale pattern: W-H-W-W-H-W-W\n    const pattern = [0, 2, 3, 5, 7, 8, 10, 12];\n    \n    return pattern.map(semitones => baseFrequency * Math.pow(2, semitones / 12));\n  }\n\n  /**\n   * Calculates harmonic series frequencies for a given fundamental\n   * \n   * @description Generates the harmonic series by multiplying the fundamental\n   * frequency by integer values. Essential for understanding timbre and overtones.\n   * \n   * @param fundamental - Fundamental frequency in Hz\n   * @param maxHarmonic - Maximum harmonic number to calculate (default: 8)\n   * @returns Array of harmonic frequencies including the fundamental\n   * \n   * @example\n   * ```typescript\n   * const harmonics = FrequencyUtils.findHarmonics(220, 5); // A3 harmonics\n   * console.log(harmonics);\n   * // [220, 440, 660, 880, 1100] (A3, A4, E5, A5, C#6)\n   * \n   * const allHarmonics = FrequencyUtils.findHarmonics(100, 8);\n   * console.log(allHarmonics.length); // 8 harmonics\n   * ```\n   */\n  static findHarmonics(fundamental: number, maxHarmonic = 8): number[] {\n    const harmonics: number[] = [];\n    \n    for (let i = 1; i <= maxHarmonic; i++) {\n      harmonics.push(fundamental * i);\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Analyzes whether a frequency is a harmonic of a fundamental frequency\n   * \n   * @description Tests if the given frequency matches a harmonic of the fundamental\n   * within the specified tolerance. Returns detailed harmonic analysis.\n   * \n   * @param frequency - Frequency to test in Hz\n   * @param fundamental - Fundamental frequency in Hz\n   * @param tolerance - Tolerance for harmonic matching (default: 0.05 = 5%)\n   * @returns Object containing harmonic analysis results\n   * \n   * @example\n   * ```typescript\n   * const result1 = FrequencyUtils.isHarmonic(440, 220);\n   * console.log(result1);\n   * // { isHarmonic: true, harmonicNumber: 2, exactFrequency: 440 }\n   * \n   * const result2 = FrequencyUtils.isHarmonic(665, 220, 0.1);\n   * console.log(result2);\n   * // { isHarmonic: true, harmonicNumber: 3, exactFrequency: 660 } (within 10% tolerance)\n   * \n   * const result3 = FrequencyUtils.isHarmonic(450, 220);\n   * console.log(result3);\n   * // { isHarmonic: false, harmonicNumber: null, exactFrequency: null }\n   * ```\n   */\n  static isHarmonic(frequency: number, fundamental: number, tolerance = 0.05): {\n    isHarmonic: boolean;\n    harmonicNumber: number | null;\n    exactFrequency: number | null;\n  } {\n    if (fundamental <= 0 || frequency <= 0) {\n      return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n    }\n\n    const ratio = frequency / fundamental;\n    const nearestInteger = Math.round(ratio);\n    \n    // Check if the ratio is close to an integer (within tolerance)\n    if (nearestInteger >= 1 && Math.abs(ratio - nearestInteger) <= tolerance) {\n      return {\n        isHarmonic: true,\n        harmonicNumber: nearestInteger,\n        exactFrequency: fundamental * nearestInteger\n      };\n    }\n\n    return { isHarmonic: false, harmonicNumber: null, exactFrequency: null };\n  }\n\n  /**\n   * Calculate the fundamental frequency from a suspected harmonic\n   */\n  static calculateFundamental(harmonicFrequency: number, harmonicNumber: number): number {\n    if (harmonicNumber <= 0 || harmonicFrequency <= 0) return 0;\n    return harmonicFrequency / harmonicNumber;\n  }\n\n  /**\n   * Convert frequency to scientific pitch notation\n   */\n  static frequencyToScientificPitch(frequency: number): string {\n    const note = FrequencyUtils.frequencyToNote(frequency);\n    return note.name;\n  }\n\n  /**\n   * Convert scientific pitch notation to frequency\n   */\n  static scientificPitchToFrequency(scientificPitch: string): number {\n    const match = scientificPitch.match(/^([A-G][#b]?)(-?\\d+)$/);\n    if (!match) return 0;\n\n    const [, noteName, octaveStr] = match;\n    const octave = parseInt(octaveStr, 10);\n    \n    // Convert note name to semitone offset from C\n    let semitoneOffset = 0;\n    const baseNote = noteName[0];\n    const accidental = noteName.slice(1);\n    \n    const baseOffsets: { [key: string]: number } = {\n      'C': 0, 'D': 2, 'E': 4, 'F': 5, 'G': 7, 'A': 9, 'B': 11\n    };\n    \n    semitoneOffset = baseOffsets[baseNote] || 0;\n    \n    if (accidental === '#') {\n      semitoneOffset += 1;\n    } else if (accidental === 'b') {\n      semitoneOffset -= 1;\n    }\n    \n    // Calculate MIDI number (C4 = MIDI 60)\n    const midiNumber = (octave + 1) * 12 + semitoneOffset;\n    \n    return FrequencyUtils.midiToFrequency(midiNumber);\n  }\n\n  /**\n   * Format frequency display with appropriate precision\n   */\n  static formatFrequency(frequency: number, decimalPlaces = 1): string {\n    if (frequency === 0) return '0 Hz';\n    if (frequency < 0.1) return '<0.1 Hz';\n    if (frequency >= 10000) return `${Math.round(frequency / 1000)}k Hz`;\n    \n    return `${frequency.toFixed(decimalPlaces)} Hz`;\n  }\n\n  /**\n   * Format cents display with sign\n   */\n  static formatCents(cents: number): string {\n    if (cents === 0) return '0¢';\n    const sign = cents > 0 ? '+' : '';\n    return `${sign}${cents}¢`;\n  }\n}","/**\n * AudioDetectionComponent - Unified Audio Detection with Automatic UI Updates\n * \n * @description High-level integration component that combines PitchDetector functionality\n * with automatic UI updates, device optimization, and comprehensive error handling.\n * Designed to simplify audio detection integration in relative pitch training applications.\n * \n * @example\n * ```typescript\n * const audioDetector = new AudioDetectionComponent({\n *   volumeBarSelector: '#volume-bar',\n *   frequencySelector: '#frequency-display',\n *   clarityThreshold: 0.4,\n *   minVolumeAbsolute: 0.003  // ノイズゲート閾値（デバイス自動最適化される）\n * });\n *\n * await audioDetector.initialize();\n *\n * audioDetector.setCallbacks({\n *   onPitchUpdate: (result) => {\n *     console.log('音程検出:', result);\n *     // result.volume は既にデバイス固有補正済み（0-100%）\n *     // PC: 生音量 × 3.0, iPhone: 生音量 × 7.5, iPad: 生音量 × 20.0\n *     // { frequency: 261.6, note: 'C4', volume: 45.2 }\n *   },\n *   onError: (error) => {\n *     console.error('検出エラー:', error);\n *   }\n * });\n *\n * audioDetector.startDetection();\n * ```\n *\n * @remarks\n * **音量調整について（v1.3.0）**:\n * - デフォルトでは音量値は自動的にデバイス最適化が適用されます\n * - PC/iPhone/iPad の違いを意識する必要はありません\n * - 最終的な音量値は常に 0-100% の範囲で統一されています\n *\n * **カスタム音量処理が必要な場合**:\n * ```typescript\n * // deviceOptimization: false で生の音量値を取得\n * const audioDetector = new AudioDetectionComponent({\n *   deviceOptimization: false,  // 自動補正を無効化\n *   volumeBarSelector: '#volume-bar'\n * });\n *\n * audioDetector.setCallbacks({\n *   onPitchUpdate: (result) => {\n *     // result.volume は生の値（通常5-15%）\n *     const customVolume = result.volume * yourCustomMultiplier;\n *   }\n * });\n * ```\n * \n * @version 1.0.0\n * @since 1.0.0\n */\n\nimport { AudioManager } from '../core/AudioManager';\nimport { PitchDetector } from '../core/PitchDetector';\nimport { MicrophoneController } from '../core/MicrophoneController';\nimport { DeviceDetection } from '../utils/DeviceDetection';\nimport { FrequencyUtils } from '../utils/FrequencyUtils';\nimport { VERSION_STRING } from '../utils/version';\nimport { \n  PitchProError, \n  ErrorMessageBuilder, \n  AudioContextError,\n  MicrophoneAccessError,\n  ErrorCode\n} from '../utils/errors';\nimport type { PitchDetectionResult, DeviceSpecs } from '../types';\n\n/**\n * Configuration interface for AudioDetectionComponent\n */\nexport interface AudioDetectionConfig {\n  // UI Element Selectors\n  /**\n   * CSS selector for volume bar element.\n   * @warning When this selector is used with autoUpdateUI=true, the UI will be updated automatically.\n   * The value applied includes device-specific multipliers and may NOT be identical\n   * to the `result.volume` in the onPitchUpdate callback. For direct control,\n   * omit this selector and update the UI manually within the callback.\n   * @example\n   * // Manual control (recommended for precise values)\n   * { autoUpdateUI: false } // Handle UI in onPitchUpdate callback\n   * \n   * // Automatic control (convenient but may apply multipliers)\n   * { autoUpdateUI: true, volumeBarSelector: '#volume' }\n   */\n  volumeBarSelector?: string;\n  \n  /**\n   * CSS selector for volume text element.\n   * @warning Same considerations as volumeBarSelector apply.\n   */\n  volumeTextSelector?: string;\n  \n  /**\n   * CSS selector for frequency display element.\n   * @warning Same considerations as volumeBarSelector apply.\n   */\n  frequencySelector?: string;\n  \n  /**\n   * CSS selector for note display element.\n   * @warning Same considerations as volumeBarSelector apply.\n   */\n  noteSelector?: string;\n  \n  // PitchDetector Settings\n  clarityThreshold?: number;\n  minVolumeAbsolute?: number;\n  fftSize?: number;\n  smoothing?: number;\n  \n  // Device Optimization\n  /**\n   * デバイス固有の音量最適化を有効にするかどうか\n   *\n   * @remarks\n   * **デバイス最適化の効果**:\n   * - `true` (推奨): デバイス別の音量補正が自動適用\n   *   - PC: volumeMultiplier 3.0x\n   *   - iPhone: volumeMultiplier 7.5x\n   *   - iPad: volumeMultiplier 20.0x\n   * - `false`: 音量補正なし（生の音量値をそのまま使用）\n   *\n   * **オフにする場合の用途**:\n   * - 独自の音量処理を実装したい場合\n   * - デバッグ時に生の音量値を確認したい場合\n   * - 特定のデバイスで異なる動作を実装したい場合\n   *\n   * @default true\n   * @since v1.2.0\n   *\n   * @example\n   * ```typescript\n   * // デバイス最適化を無効にして生の音量値を取得\n   * const audioDetector = new AudioDetectionComponent({\n   *   deviceOptimization: false,  // 音量補正を無効化\n   *   volumeBarSelector: '#volume-bar'\n   * });\n   *\n   * audioDetector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     // result.volume は生の値（通常5-15%程度）\n   *     console.log(`生音量: ${result.volume}%`);\n   *\n   *     // 独自の音量処理\n   *     const customVolume = result.volume * myCustomMultiplier;\n   *     updateMyUI(customVolume);\n   *   }\n   * });\n   * ```\n   */\n  deviceOptimization?: boolean;\n  \n  // UI Update Settings\n  uiUpdateInterval?: number;\n  \n  /**\n   * Controls automatic UI updates using provided selectors.\n   * @default true (for backward compatibility)\n   * @description When true, UI elements specified by selectors will be updated automatically\n   * with device-specific multipliers applied. When false, no automatic updates occur\n   * and you should handle UI updates manually in the onPitchUpdate callback.\n   * @example\n   * // Recommended: Manual control for precise values\n   * const detector = new AudioDetectionComponent({\n   *   autoUpdateUI: false,\n   *   // Don't provide selectors when using manual mode\n   * });\n   * detector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     // Handle UI updates with exact result.volume values\n   *     volumeBar.style.width = `${result.volume}%`;\n   *   }\n   * });\n   * \n   * // Alternative: Automatic control (may apply multipliers)\n   * const detector = new AudioDetectionComponent({\n   *   autoUpdateUI: true,\n   *   volumeBarSelector: '#volume-bar'\n   * });\n   */\n  autoUpdateUI?: boolean;\n  \n  // Callback Settings (for convenience)\n  /**\n   * Callback function called on each pitch detection update.\n   * @param result - The processed pitch detection result including rawVolume and clarity.\n   */\n  onPitchUpdate?: (result: PitchDetectionResult) => void;\n  \n  // Debug Settings\n  debug?: boolean;\n  logPrefix?: string;\n}\n\n/**\n * Callback functions for AudioDetectionComponent events\n */\nexport interface AudioDetectionCallbacks {\n  onPitchUpdate?: (result: PitchDetectionResult) => void;\n  onVolumeUpdate?: (volume: number) => void;\n  onStateChange?: (state: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'stopped' | 'error') => void;\n  onError?: (error: PitchProError) => void;\n  onDeviceDetected?: (deviceSpecs: DeviceSpecs) => void;\n}\n\n/**\n * Device-specific optimization settings\n */\ninterface DeviceSettings {\n  volumeMultiplier: number;\n  sensitivityMultiplier: number;\n  minVolumeAbsolute: number;\n}\n\n/**\n * PitchPro Audio Processing Library\n * High-precision pitch detection and audio processing for web applications\n * \n * @description A comprehensive audio detection component that provides real-time pitch detection,\n * volume analysis, and frequency display with automatic device optimization and UI management.\n * \n * Supports unified management through MicrophoneController for centralized system control.\n * \n * @version 1.3.0 (自動同期)\n * @author PitchPro Team\n * @license MIT\n * \n * @example\n * ```typescript\n * // Basic usage with automatic device optimization\n * const audioDetector = new AudioDetectionComponent({\n *   volumeBarSelector: '#volume-bar',\n *   frequencySelector: '#frequency-display'\n * });\n * \n * // Initialize the component\n * await audioDetector.initialize();\n * \n * // Start pitch detection (v1.3.0 API)\n * const success = await audioDetector.startDetection();\n * if (success) {\n *   console.log('Detection started successfully');\n * }\n * \n * // Stop detection but preserve UI state\n * audioDetector.stopDetection();\n * \n * // Complete reset including UI (recommended)\n * audioDetector.microphoneController?.reset();\n * \n * // Clean up when done\n * audioDetector.destroy();\n * ```\n * \n * @example\n * ```typescript\n * // Advanced configuration for custom processing\n * const audioDetector = new AudioDetectionComponent({\n *   clarityThreshold: 0.3,\n *   minVolumeAbsolute: 0.001,\n *   deviceOptimization: true,\n *   autoUpdateUI: false, // Manual UI control\n *   onPitchUpdate: (result) => {\n *     // Custom processing with device-optimized results\n *     console.log(`Frequency: ${result.frequency}Hz, Volume: ${result.volume}%`);\n *   }\n * });\n * \n * await audioDetector.initialize();\n * await audioDetector.startDetection();\n * ```\n * \n * @example\n * ```typescript\n * // Using MicrophoneController for unified system management\n * const audioDetector = new AudioDetectionComponent({\n *   volumeBarSelector: '#volume-bar',\n *   frequencySelector: '#frequency-display'\n * });\n * \n * await audioDetector.initialize();\n * const micController = audioDetector.microphoneController;\n * \n * if (micController) {\n *   // Unified system control\n *   micController.start();     // Start detection\n *   micController.toggleMute(); // Mute/unmute\n *   micController.reset();      // Complete reset\n * }\n * ```\n */\n\nexport interface AudioDetectionConfig {\n  /**\n   * CSS selector for volume bar element (progress or div with width style)\n   * @example '#volume-bar', '.volume-display progress'\n   */\n  volumeBarSelector?: string;\n  \n  /**\n   * CSS selector for volume text display element\n   * @example '#volume-text', '.volume-percentage'\n   */\n  volumeTextSelector?: string;\n  \n  /**\n   * CSS selector for frequency display element  \n   * @example '#frequency-display', '.frequency-value'\n   */\n  frequencySelector?: string;\n  \n  /**\n   * CSS selector for musical note display element\n   * @example '#note-display', '.musical-note'\n   */\n  noteSelector?: string;\n  \n  // Audio processing parameters\n  clarityThreshold?: number;\n  minVolumeAbsolute?: number;\n  fftSize?: number;\n  smoothing?: number;\n  \n  /**\n   * Enable device-specific volume optimization\n   * \n   * @description When enabled, applies device-specific volume multipliers:\n   * - PC: 7.5x (v1.3.0確定)\n   * - iPhone: 9.0x (v1.3.0確定)\n   * - iPad: 13.0x (v1.3.0確定)\n   * \n   * When disabled, returns raw volume values for custom processing.\n   * @default true\n   */\n  deviceOptimization?: boolean;\n  \n  // UI configuration\n  uiUpdateInterval?: number;\n  \n  /**\n   * Enable automatic UI updates using cached DOM elements\n   * \n   * @description When true, automatically updates UI elements specified by selectors.\n   * When false, UI updates must be handled manually in onPitchUpdate callback.\n   * \n   * @default true\n   */\n  autoUpdateUI?: boolean;\n  \n  // Event callbacks\n  onPitchUpdate?: (result: PitchDetectionResult) => void;\n  \n  // Debug configuration\n  debug?: boolean;\n  logPrefix?: string;\n}\n\n/**\n * Event callbacks for AudioDetectionComponent\n */\nexport interface AudioDetectionCallbacks {\n  onPitchUpdate?: (result: PitchDetectionResult) => void;\n  onVolumeUpdate?: (volume: number) => void;\n  onStateChange?: (state: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'stopped' | 'error') => void;\n  onError?: (error: PitchProError) => void;\n  onDeviceDetected?: (specs: DeviceSpecs) => void;\n}\n\n/**\n * Device-specific settings for audio processing\n */\ninterface DeviceSettings {\n  volumeMultiplier: number;\n  sensitivityMultiplier: number;\n  minVolumeAbsolute: number;\n}\n\nexport class AudioDetectionComponent {\n  /** @private UI timing constants */\n  private static readonly NOTE_RESET_DELAY_MS = 300;\n  private static readonly SELECTOR_UPDATE_DELAY_MS = 50;\n  private static readonly UI_RESTART_DELAY_MS = 200;\n\n  /** @private Configuration with applied defaults */\n  private config: Required<Omit<AudioDetectionConfig, 'volumeBarSelector' | 'volumeTextSelector' | 'frequencySelector' | 'noteSelector' | 'onPitchUpdate' | 'minVolumeAbsolute'>> & {\n    volumeBarSelector?: string;\n    volumeTextSelector?: string;\n    frequencySelector?: string;\n    noteSelector?: string;\n    minVolumeAbsolute?: number;\n    onPitchUpdate?: (result: PitchDetectionResult) => void;\n  };\n  \n  /** @private AudioManager instance for resource management (initialized from MicrophoneController) */\n  private audioManager!: AudioManager;\n  \n  /** @private PitchDetector instance for pitch detection */\n  private pitchDetector: PitchDetector | null = null;\n  \n  /** @private MicrophoneController for high-level microphone management */\n  private micController: MicrophoneController | null = null;\n  \n  /** @private Current component state */\n  private currentState: 'uninitialized' | 'initializing' | 'ready' | 'detecting' | 'stopped' | 'error' = 'uninitialized';\n  \n  /** @private Event callbacks */\n  private callbacks: AudioDetectionCallbacks = {};\n  \n  /** @private Device specifications */\n  private deviceSpecs: DeviceSpecs | null = null;\n  \n  /** @private Device-specific settings */\n  private deviceSettings: DeviceSettings | null = null;\n  \n  /** @private UI update interval ID */\n  private uiUpdateTimer: number | null = null;\n  \n  /** @private Flag to prevent UI updates during selector changes */\n  private isUpdatingSelectors: boolean = false;\n  \n  /** @private UI elements cache */\n  private uiElements: {\n    volumeBar?: HTMLElement;\n    volumeText?: HTMLElement;\n    frequency?: HTMLElement;\n    note?: HTMLElement;\n  } = {};\n  \n  /** @private Last error encountered */\n  private lastError: PitchProError | null = null;\n  \n  /** @private Initialization state */\n  private isInitialized = false;\n\n  /** @private Note display persistence timer */\n  private noteResetTimer: number | null = null;\n\n  /** @private Helper method for creating delays */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Creates a new AudioDetectionComponent with automatic device optimization\n   * \n   * @param config - Configuration options for the component\n   * @param config.volumeBarSelector - CSS selector for volume bar element\n   * @param config.volumeTextSelector - CSS selector for volume text element  \n   * @param config.frequencySelector - CSS selector for frequency display element\n   * @param config.noteSelector - CSS selector for note display element\n   * @param config.clarityThreshold - Minimum clarity for pitch detection (0-1, default: 0.4)\n   * @param config.minVolumeAbsolute - Minimum volume threshold (default: 0.003)\n   * @param config.fftSize - FFT size for analysis (default: 4096)\n   * @param config.smoothing - Smoothing factor (default: 0.1)\n   * @param config.deviceOptimization - デバイス固有の音量最適化を有効にする (default: true)\n   *   - true: 自動音量補正 (PC: 7.5x, iPhone: 11.5x, iPad: 13.0x)\n   *   - false: 生音量値を使用（独自処理向け）\n   * @param config.uiUpdateInterval - UI update interval in ms (default: 50)\n   * @param config.autoUpdateUI - Enable automatic UI updates (default: true)\n   * @param config.debug - Enable debug logging (default: false)\n   * @param config.logPrefix - Prefix for log messages (default: '🎵 AudioDetection')\n   * \n   * @example\n   * ```typescript\n   * // Basic usage with automatic device optimization\n   * const audioDetector = new AudioDetectionComponent({\n   *   volumeBarSelector: '#volume-bar',\n   *   frequencySelector: '#frequency-display'\n   * });\n   * \n   * // Advanced configuration for range testing\n   * const audioDetector = new AudioDetectionComponent({\n   *   volumeBarSelector: '#range-test-volume-bar',\n   *   volumeTextSelector: '#range-test-volume-text', \n   *   frequencySelector: '#range-test-frequency-value',\n   *   clarityThreshold: 0.3,\n   *   minVolumeAbsolute: 0.001,\n   *   deviceOptimization: true,\n   *   debug: true\n   * });\n   * ```\n   */\n  constructor(config: AudioDetectionConfig = {}) {\n    // Apply default configuration\n    this.config = {\n      volumeBarSelector: config.volumeBarSelector,\n      volumeTextSelector: config.volumeTextSelector,\n      frequencySelector: config.frequencySelector,\n      noteSelector: config.noteSelector,\n      \n      clarityThreshold: config.clarityThreshold ?? 0.4,\n      minVolumeAbsolute: config.minVolumeAbsolute, // 🔧 DeviceDetectionの値を優先（デフォルト値削除）\n      fftSize: config.fftSize ?? 4096,\n      smoothing: config.smoothing ?? 0.1,\n      \n      deviceOptimization: config.deviceOptimization ?? true,\n      \n      uiUpdateInterval: config.uiUpdateInterval ?? 50, // 20fps\n      autoUpdateUI: config.autoUpdateUI ?? true,\n      \n      onPitchUpdate: config.onPitchUpdate, // コールバック関数はオプショナル\n      \n      debug: config.debug ?? false,\n      logPrefix: config.logPrefix ?? '🎵 AudioDetection'\n    };\n\n    // 🔧 FIX: AudioManager will be obtained from MicrophoneController during initialization\n    // this.audioManager = null; // Will be set in initialize()\n\n    // Detect device and apply optimization\n    if (this.config.deviceOptimization) {\n      this.detectAndOptimizeDevice();\n    }\n\n    // UI自動更新機能の警告メッセージ\n    this.checkAutoUpdateUIWarnings();\n    \n    this.debugLog(`${VERSION_STRING} AudioDetectionComponent created with config:`, this.config);\n  }\n\n  /**\n   * 自動UI更新機能に関する警告をチェックして表示\n   */\n  private checkAutoUpdateUIWarnings(): void {\n    const hasUISelectors = !!(\n      this.config.volumeBarSelector || \n      this.config.volumeTextSelector || \n      this.config.frequencySelector || \n      this.config.noteSelector\n    );\n    \n    if (hasUISelectors && !this.config.autoUpdateUI) {\n      console.warn(\n        '⚠️ [PitchPro v1.1.9] UI selectors provided without autoUpdateUI=true. ' +\n        'Set autoUpdateUI=true to enable automatic updates, ' +\n        'or remove selectors for manual control in onPitchUpdate callback.'\n      );\n    }\n    \n    if (hasUISelectors && this.config.autoUpdateUI) {\n      console.info(\n        'ℹ️ [PitchPro] Automatic UI updates enabled. ' +\n        'Note: Values applied may include device-specific multipliers and may differ from callback result.volume. ' +\n        'For precise control, set autoUpdateUI=false and handle UI manually.'\n      );\n    }\n  }\n\n  /**\n   * Initializes the audio detection system with device optimization\n   * \n   * @description Performs complete initialization including microphone permissions,\n   * audio context setup, device detection, and UI element binding.\n   * \n   * @returns Promise resolving when initialization is complete\n   * @throws {AudioContextError} If audio system initialization fails\n   * @throws {MicrophoneAccessError} If microphone permission is denied\n   * \n   * @example\n   * ```typescript\n   * try {\n   *   await audioDetector.initialize();\n   *   console.log('Audio detection ready!');\n   * } catch (error) {\n   *   console.error('Initialization failed:', error.message);\n   *   // Handle specific error types\n   *   if (error instanceof MicrophoneAccessError) {\n   *     // Show permission guidance\n   *   }\n   * }\n   * ```\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      this.debugLog('Already initialized');\n      return;\n    }\n\n    try {\n      this.updateState('initializing');\n      this.debugLog(`${VERSION_STRING} Starting initialization...`);\n\n      // Initialize MicrophoneController\n      this.micController = new MicrophoneController({\n        audioManager: {\n          sampleRate: 44100,\n          echoCancellation: false,\n          autoGainControl: false\n        },\n        lifecycle: {\n          maxAutoRecoveryAttempts: 3,\n          healthCheckIntervalMs: 1000\n        },\n        notifications: {\n          enabled: this.config.debug\n        }\n      });\n\n      // Set up MicrophoneController callbacks\n      this.micController.setCallbacks({\n        onStateChange: (state) => {\n          this.debugLog('MicrophoneController state:', state);\n        },\n        onError: (error) => {\n          this.handleError(error, 'microphone_controller');\n        },\n        onDeviceChange: (specs) => {\n          this.deviceSpecs = specs;\n          this.callbacks.onDeviceDetected?.(specs);\n        }\n      });\n\n      // Initialize microphone and get AudioManager reference\n      await this.micController.initialize();\n      \n      // 🔧 FIX: Get AudioManager from MicrophoneController instead of creating new one\n      this.audioManager = this.micController.audioManager;\n      this.debugLog('✅ AudioManager reference obtained from MicrophoneController');\n\n      // Log DeviceDetection values when debug is enabled\n      this.debugLog('DeviceDetection values:', {\n        device: this.deviceSpecs?.deviceType,\n        noiseGate: this.deviceSpecs?.noiseGate,\n        volumeMultiplier: this.deviceSpecs?.volumeMultiplier,\n        smoothingFactor: this.deviceSpecs?.smoothingFactor\n      });\n\n      // Initialize PitchDetector with DeviceDetection settings as Single Source of Truth\n      // DeviceDetectionからPC向けのデフォルト値を取得（getDeviceSpecsはPC用のフォールバック値を含む）\n      const fallbackSpecs = DeviceDetection.getDeviceSpecs(); // PC設定がフォールバック\n\n      const pitchDetectorConfig = {\n        clarityThreshold: this.config.clarityThreshold,\n        // 🔧 DeviceDetectionを完全信頼：deviceSpecsがnullでも安全なPC設定を保証\n        minVolumeAbsolute: this.deviceSpecs?.noiseGate ?? fallbackSpecs.noiseGate,\n        fftSize: this.config.fftSize,\n        smoothing: this.deviceSpecs?.smoothingFactor ?? fallbackSpecs.smoothingFactor,\n        deviceOptimization: this.config.deviceOptimization\n      };\n\n      this.debugLog('PitchDetector config object:', pitchDetectorConfig);\n\n      // 🔧 FIX: Now using the correct AudioManager reference from MicrophoneController\n      this.pitchDetector = new PitchDetector(this.audioManager, pitchDetectorConfig);\n\n      // Set up PitchDetector callbacks\n      this.pitchDetector.setCallbacks({\n        onPitchUpdate: (result) => {\n          this.handlePitchUpdate(result);\n        },\n        onError: (error) => {\n          this.handleError(error, 'pitch_detector');\n        },\n        onStateChange: (state) => {\n          this.debugLog('PitchDetector state:', state);\n          // 🎯 Start UI updates when detection begins\n          if (state === 'detecting' && this.config.autoUpdateUI) {\n            this.debugLog('🔄 Starting UI updates (state: detecting)');\n            this.startUIUpdates();\n          } else if (state !== 'detecting' && this.uiUpdateTimer) {\n            this.debugLog('⏹️ Stopping UI updates (state: ' + state + ')');\n            clearInterval(this.uiUpdateTimer);\n            this.uiUpdateTimer = null;\n          }\n        }\n      });\n\n      await this.pitchDetector.initialize();\n\n      // Verify PitchDetector's actual status after initialization\n      const pitchDetectorStatus = this.pitchDetector.getStatus();\n      this.debugLog('After PitchDetector initialization:', {\n        status: pitchDetectorStatus,\n        componentState: pitchDetectorStatus.componentState,\n        isInitialized: pitchDetectorStatus.isInitialized\n      });\n\n      // ⭐ Register PitchDetector and AudioDetectionComponent with MicrophoneController for unified management\n      if (this.micController && this.pitchDetector) {\n        this.micController.registerDetector(this.pitchDetector);\n        this.micController.registerAudioDetectionComponent(this);\n        this.debugLog('✅ PitchDetector and AudioDetectionComponent registered with MicrophoneController for unified management');\n      }\n\n      // Cache UI elements\n      this.cacheUIElements();\n\n      // Apply device-specific sensitivity from DeviceDetection\n      if (this.deviceSpecs && this.micController) {\n        this.micController.setSensitivity(this.deviceSpecs.sensitivity);\n        this.debugLog('Applied DeviceDetection sensitivity:', this.deviceSpecs.sensitivity);\n      }\n\n      this.isInitialized = true;\n      this.updateState('ready');\n      this.debugLog('Initialization complete');\n\n    } catch (error) {\n      const structuredError = this.createStructuredError(error as Error, 'initialization');\n      ErrorMessageBuilder.logError(structuredError, 'AudioDetectionComponent initialization');\n      \n      this.lastError = structuredError;\n      this.updateState('error');\n      \n      throw structuredError;\n    }\n  }\n\n  /**\n   * Manually updates UI elements with current audio data\n   * \n   * @param result - Pitch detection result to display\n   * \n   * @example\n   * ```typescript\n   * const result = {\n   *   frequency: 440,\n   *   note: 'A4',\n   *   volume: 75.5,\n   *   clarity: 0.8\n   * };\n   * audioDetector.updateUI(result);\n   * ```\n   */\n  updateUI(result: PitchDetectionResult): void {\n    // Skip UI updates if autoUpdateUI is disabled\n    if (!this.config.autoUpdateUI) {\n      return;\n    }\n    \n    // Skip UI updates if selectors are being updated\n    if (this.isUpdatingSelectors) {\n      this.debugLog('UI update skipped - selectors are being updated');\n      return;\n    }\n    \n    try {\n      // Update volume bar - verify element matches current selector to prevent cross-mode updates\n      if (this.uiElements.volumeBar && this.config.volumeBarSelector) {\n        const currentElement = document.querySelector(this.config.volumeBarSelector);\n        if (currentElement && currentElement === this.uiElements.volumeBar) {\n          // result.volume は既に補正済みの値（_getProcessedResultで処理済み）\n          const volumePercent = Math.min(100, Math.max(0, result.volume));\n          if (this.uiElements.volumeBar instanceof HTMLProgressElement) {\n            this.uiElements.volumeBar.value = volumePercent;\n          } else {\n            // Assume it's a div with a width style\n            (this.uiElements.volumeBar as HTMLElement).style.width = `${volumePercent}%`;\n          }\n        }\n      }\n\n      // Update volume text - verify element matches current selector to prevent cross-mode updates\n      if (this.uiElements.volumeText && this.config.volumeTextSelector) {\n        const currentElement = document.querySelector(this.config.volumeTextSelector);\n        if (currentElement && currentElement === this.uiElements.volumeText) {\n          // result.volume は既に補正済みの値（_getProcessedResultで処理済み）\n          const volumePercent = Math.min(100, Math.max(0, result.volume));\n          this.uiElements.volumeText.textContent = `${volumePercent.toFixed(1)}%`;\n        }\n      }\n\n      // Update frequency display - verify element matches current selector to prevent cross-mode updates\n      if (this.uiElements.frequency && this.config.frequencySelector) {\n        const currentElement = document.querySelector(this.config.frequencySelector);\n        if (currentElement && currentElement === this.uiElements.frequency) {\n          if (result.frequency && result.frequency > 0) {\n            this.uiElements.frequency.textContent = FrequencyUtils.formatFrequency(result.frequency);\n          } else {\n            // Reset frequency display when no pitch is detected\n            this.uiElements.frequency.textContent = '0.0 Hz';\n          }\n        }\n      }\n\n      // Update note display with persistence - only if noteSelector is configured and matches current cached element\n      if (this.uiElements.note && this.config.noteSelector && this.config.noteSelector !== '#note-display') {\n        // Verify that cached element matches current selector to prevent cross-mode updates\n        const currentElement = document.querySelector(this.config.noteSelector);\n        if (currentElement && currentElement === this.uiElements.note) {\n          if (result.frequency && result.frequency > 0) {\n            // Clear any pending reset timer\n            if (this.noteResetTimer) {\n              clearTimeout(this.noteResetTimer);\n              this.noteResetTimer = null;\n            }\n            \n            const noteInfo = FrequencyUtils.frequencyToNote(result.frequency);\n            this.debugLog(`Updating note display: ${this.uiElements.note.id || 'unknown-id'} with note: ${noteInfo.name} (selector: ${this.config.noteSelector})`);\n            this.uiElements.note.textContent = noteInfo.name;\n          } else {\n            // Only reset after a short delay to avoid flickering\n            if (!this.noteResetTimer) {\n              this.noteResetTimer = window.setTimeout(() => {\n                if (this.uiElements.note) {\n                  this.debugLog(`Resetting note display: ${this.uiElements.note.id || 'unknown-id'} to \"-\" (delayed, selector: ${this.config.noteSelector})`);\n                  this.uiElements.note.textContent = '-';\n                }\n                this.noteResetTimer = null;\n              }, AudioDetectionComponent.NOTE_RESET_DELAY_MS);\n            }\n          }\n        } else {\n          this.debugLog(`Note element mismatch: cached element does not match current selector ${this.config.noteSelector} - skipping update to prevent cross-mode interference`);\n        }\n      } else {\n        if (!this.config.noteSelector) {\n          this.debugLog('Note updates skipped - no noteSelector configured');\n        } else {\n          this.debugLog('Note element not found in uiElements.note - check selector caching');\n        }\n      }\n    } catch (error) {\n      this.debugLog('UI update error:', error);\n    }\n  }\n\n  /**\n   * Updates UI element selectors and re-caches DOM elements\n   * \n   * @param selectors - Object containing new selector strings\n   * @param selectors.volumeBarSelector - New selector for volume bar element\n   * @param selectors.volumeTextSelector - New selector for volume text element\n   * @param selectors.frequencySelector - New selector for frequency display element\n   * @param selectors.noteSelector - New selector for note display element (if not provided, will be cleared to prevent cross-mode interference)\n   * \n   * @example\n   * ```typescript\n   * // Switch volume bar to different element (e.g., range test mode)\n   * audioDetector.updateSelectors({\n   *   volumeBarSelector: '#range-test-volume-bar',\n   *   volumeTextSelector: '#range-test-volume-text',\n   *   frequencySelector: '#range-test-frequency-value'\n   * });\n   * ```\n   */\n  async updateSelectors(selectors: Partial<Pick<AudioDetectionConfig, \n    'volumeBarSelector' | 'volumeTextSelector' | 'frequencySelector' | 'noteSelector'>>): Promise<void> {\n    \n    this.debugLog('Updating selectors:', selectors);\n    \n    // Set flag to prevent UI updates during selector changes\n    this.isUpdatingSelectors = true;\n    \n    // Temporarily stop UI updates to prevent overwriting reset values\n    const wasUIUpdating = this.uiUpdateTimer !== null;\n    if (wasUIUpdating) {\n      this.stopUIUpdates();\n    }\n    \n    // Wait a moment to ensure any pending UI updates are processed\n    await this.delay(AudioDetectionComponent.SELECTOR_UPDATE_DELAY_MS);\n    \n    // Reset all existing UI elements to initial state before switching\n    this.resetAllUIElements();\n    \n    // Update configuration with new selectors\n    if (selectors.volumeBarSelector !== undefined) {\n      this.config.volumeBarSelector = selectors.volumeBarSelector;\n    }\n    if (selectors.volumeTextSelector !== undefined) {\n      this.config.volumeTextSelector = selectors.volumeTextSelector;\n    }\n    if (selectors.frequencySelector !== undefined) {\n      this.config.frequencySelector = selectors.frequencySelector;\n    }\n    \n    // Handle noteSelector: if explicitly provided, use it; if not provided in a mode switch, clear it to prevent cross-mode interference\n    if (selectors.noteSelector !== undefined) {\n      this.config.noteSelector = selectors.noteSelector;\n    } else {\n      // When switching modes without specifying noteSelector, clear it to prevent old note elements from updating\n      this.config.noteSelector = '';\n      this.debugLog('noteSelector cleared automatically to prevent cross-mode interference');\n    }\n    \n    // Re-cache UI elements with new selectors\n    this.cacheUIElements();\n    \n    // Wait for DOM updates\n    await this.delay(AudioDetectionComponent.SELECTOR_UPDATE_DELAY_MS);\n    \n    // Reset the new UI elements as well to ensure they start clean\n    this.resetAllUIElements();\n    \n    // Clear the flag and resume UI updates if they were running\n    this.isUpdatingSelectors = false;\n    \n    if (wasUIUpdating) {\n      // Add longer delay to ensure reset values are visible\n      await this.delay(AudioDetectionComponent.UI_RESTART_DELAY_MS);\n      this.startUIUpdates();\n    }\n    \n    this.debugLog('Selectors updated, all elements reset, and UI elements re-cached:', Object.keys(this.uiElements));\n  }\n\n  /**\n   * コールバック関数を設定\n   * \n   * @param callbacks - 設定するコールバック関数\n   * \n   * @example\n   * ```typescript\n   * audioDetector.setCallbacks({\n   *   onPitchUpdate: (result) => {\n   *     console.log('音程検出:', result);\n   *     // result.volume は既にデバイス固有補正済み（0-100%）\n   *     // PC: 生音量 × 3.0, iPhone: 生音量 × 7.5, iPad: 生音量 × 20.0\n   *   },\n   *   onError: (error) => {\n   *     console.error('検出エラー:', error);\n   *   }\n   * });\n   * ```\n   */\n  setCallbacks(callbacks: AudioDetectionCallbacks): void {\n    this.debugLog('Setting callbacks:', Object.keys(callbacks));\n    this.callbacks = { ...this.callbacks, ...callbacks };\n    \n    // コールバックが設定された場合、既存のPitchDetectorにも設定を伝播\n    if (this.pitchDetector) {\n      this.pitchDetector.setCallbacks({\n        onPitchUpdate: callbacks.onPitchUpdate,\n        // PitchDetectorのErrorCallbackは標準Errorを期待するため、PitchProErrorをErrorにラップ\n        onError: callbacks.onError ? (error: Error) => {\n          // PitchProErrorの場合はそのまま、標準Errorの場合は構造化エラーに変換\n          const structuredError = error instanceof Error && 'code' in error\n            ? error as any // Already a PitchProError\n            : this.createStructuredError(error, 'pitch_detector');\n          callbacks.onError?.(structuredError);\n        } : undefined\n      });\n    }\n  }\n\n  /**\n   * Destroys the component and cleans up all resources\n   * \n   * @example\n   * ```typescript\n   * // Clean up when component is no longer needed\n   * audioDetector.destroy();\n   * ```\n   */\n  \n  /**\n   * Reset recovery attempts and restart monitoring if needed\n   * This method can be used to recover from \"Maximum recovery attempts reached\" errors\n   */\n  resetRecoveryAttempts(): void {\n    this.debugLog('Resetting recovery attempts...');\n    \n    try {\n      if (this.micController) {\n        this.micController.resetRecoveryAttempts();\n        this.debugLog('Recovery attempts reset successfully');\n      } else {\n        this.debugLog('No microphone controller available to reset');\n      }\n    } catch (error) {\n      this.debugLog('Error resetting recovery attempts:', error);\n      throw error;\n    }\n  }\n\n  destroy(): void {\n    this.debugLog('Destroying AudioDetectionComponent...');\n    \n    try {\n      // Stop detection and UI updates\n      this.stopUIUpdates();\n      \n      // Clear note reset timer\n      if (this.noteResetTimer) {\n        clearTimeout(this.noteResetTimer);\n        this.noteResetTimer = null;\n      }\n      \n      // Cleanup components\n      if (this.pitchDetector) {\n        this.pitchDetector.destroy();\n        this.pitchDetector = null;\n      }\n      \n      if (this.micController) {\n        this.micController.destroy();\n        this.micController = null;\n      }\n      \n      // Clear UI elements cache\n      this.uiElements = {};\n      \n      // Reset state\n      this.isInitialized = false;\n      this.currentState = 'uninitialized';\n      this.callbacks = {};\n      this.lastError = null;\n      \n      this.debugLog('AudioDetectionComponent destroyed');\n    } catch (error) {\n      console.error('Error during AudioDetectionComponent destruction:', error);\n    }\n  }\n\n  /**\n   * Gets current component status for debugging\n   * \n   * @returns Status object with current state information\n   */\n  getStatus() {\n    return {\n      state: this.currentState,\n      isInitialized: this.isInitialized,\n      deviceSpecs: this.deviceSpecs,\n      deviceSettings: this.deviceSettings,\n      config: this.config,\n      lastError: this.lastError,\n      pitchDetectorStatus: this.pitchDetector?.getStatus(),\n      micControllerStatus: this.micController?.getStatus()\n    };\n  }\n\n  /**\n   * Provides access to the MicrophoneController for unified system management\n   * \n   * @description Exposes the MicrophoneController instance to enable external access\n   * to unified reset operations, mute/unmute functionality, and centralized control\n   * of the entire PitchPro system. This is the primary interface for system-wide operations.\n   * \n   * @returns The MicrophoneController instance, or null if not initialized\n   * \n   * @example\n   * ```typescript\n   * const micController = audioDetector.microphoneController;\n   * if (micController) {\n   *   // Perform unified system reset\n   *   micController.reset(); // Stops detection, clears UI, mutes mic\n   *   \n   *   // Control microphone state\n   *   micController.toggleMute();\n   * }\n   * ```\n   */\n  get microphoneController(): MicrophoneController | null {\n    return this.micController;\n  }\n\n  // Private methods implementation continues...\n  // (Will be implemented in the next part)\n\n  /**\n   * Detects device type and applies optimization settings\n   * @private\n   */\n  private detectAndOptimizeDevice(): void {\n    this.deviceSpecs = DeviceDetection.getDeviceSpecs();\n    \n    // ⬇️ 独自のdeviceSettingsMapを削除し、deviceSpecsを直接利用するように変更\n    // DeviceDetection.ts が唯一の情報源となる\n    \n    this.debugLog('Using DeviceDetection values directly:', {\n      device: this.deviceSpecs.deviceType,\n      noiseGate: `${this.deviceSpecs.noiseGate} (${(this.deviceSpecs.noiseGate * 100).toFixed(2)}% threshold)`,\n      volumeMultiplier: this.deviceSpecs.volumeMultiplier,\n      sensitivity: this.deviceSpecs.sensitivity,\n      smoothingFactor: this.deviceSpecs.smoothingFactor\n    });\n    \n    this.debugLog('Device optimization applied:', {\n      device: this.deviceSpecs.deviceType,\n      settings: this.deviceSpecs // ⬅️ deviceSettingsではなくdeviceSpecsを参照\n    });\n  }    // ⬇️ 独自のdeviceSettingsMapを削除し、deviceSpecsを直接利用するように変更\\n    // DeviceDetection.ts が唯一の情報源となる\\n    \\n    console.log(`🔧 [DeviceOptimization] Using DeviceDetection values directly:`);\\n    console.log(`📱 Device: ${this.deviceSpecs.deviceType}`);\\n    console.log(`🎯 noiseGate: ${this.deviceSpecs.noiseGate} (${(this.deviceSpecs.noiseGate * 100).toFixed(2)}% threshold)`);\\n    console.log(`🔊 volumeMultiplier: ${this.deviceSpecs.volumeMultiplier}`);\\n    console.log(`🎤 sensitivity: ${this.deviceSpecs.sensitivity}`);\\n    console.log(`📊 smoothingFactor: ${this.deviceSpecs.smoothingFactor}`);\\n    \\n    this.debugLog('Device optimization applied:', {\\n      device: this.deviceSpecs.deviceType,\\n      settings: this.deviceSpecs // ⬅️ deviceSettingsではなくdeviceSpecsを参照\\n    });\\n  }\n\n  /**\n   * Caches UI elements for efficient updates\n   * @private\n   */\n  private cacheUIElements(): void {\n    // Only cache UI elements if autoUpdateUI is enabled\n    if (!this.config.autoUpdateUI) {\n      this.debugLog('UI element caching skipped - autoUpdateUI is disabled');\n      return;\n    }\n    \n    if (this.config.volumeBarSelector) {\n      this.uiElements.volumeBar = document.querySelector(this.config.volumeBarSelector) || undefined;\n    }\n    if (this.config.volumeTextSelector) {\n      this.uiElements.volumeText = document.querySelector(this.config.volumeTextSelector) || undefined;\n    }\n    if (this.config.frequencySelector) {\n      this.uiElements.frequency = document.querySelector(this.config.frequencySelector) || undefined;\n    }\n    if (this.config.noteSelector) {\n      this.uiElements.note = document.querySelector(this.config.noteSelector) || undefined;\n      this.debugLog(`Note element cached: selector=\"${this.config.noteSelector}\", found=${!!this.uiElements.note}, id=\"${this.uiElements.note?.id || 'no-id'}\"`);\n    }\n\n    this.debugLog('UI elements cached:', Object.keys(this.uiElements));\n  }\n\n  /**\n   * Publicly accessible method to reset all UI elements to their initial state\n   * Provides external access to comprehensive UI reset functionality\n   */\n  public resetDisplayElements(): void {\n    this.resetAllUIElements();\n  }\n\n  /**\n   * Starts pitch detection and UI updates\n   * \n   * @description This method starts the pitch detection process and begins UI updates.\n   * It uses the unified MicrophoneController system for centralized management.\n   * \n   * @returns Promise<boolean> - Returns true if detection started successfully, false otherwise\n   * \n   * @example\n   * ```typescript\n   * // Start detection after initialization\n   * const success = await audioDetector.startDetection();\n   * if (success) {\n   *   console.log('Detection started successfully');\n   * } else {\n   *   console.error('Failed to start detection');\n   * }\n   * ```\n   */\n  async startDetection(): Promise<boolean> {\n    this.debugLog('Starting detection via AudioDetectionComponent...');\n    \n    if (!this.isInitialized) {\n      this.debugLog('Cannot start detection - component not initialized');\n      return false;\n    }\n    \n    if (!this.micController) {\n      this.debugLog('Cannot start detection - no MicrophoneController available');\n      return false;\n    }\n    \n    try {\n      // Use the unified MicrophoneController system\n      const started = this.micController.start();\n      \n      if (started) {\n        this.debugLog('✅ Detection started successfully via MicrophoneController');\n        this.updateState('detecting');\n        return true;\n      } else {\n        this.debugLog('❌ Failed to start detection via MicrophoneController');\n        return false;\n      }\n    } catch (error) {\n      const structuredError = this.createStructuredError(error as Error, 'start_detection');\n      this.debugLog('Error starting detection:', structuredError);\n      this.lastError = structuredError;\n      this.updateState('error');\n      return false;\n    }\n  }\n\n  /**\n   * Stops pitch detection but preserves UI state\n   * \n   * @description This method stops the pitch detection process while keeping UI elements\n   * in their current state. For complete reset including UI, use reset() instead.\n   * \n   * @returns boolean - Returns true if detection stopped successfully, false otherwise\n   * \n   * @example\n   * ```typescript\n   * // Stop detection but keep UI values\n   * const stopped = audioDetector.stopDetection();\n   * if (stopped) {\n   *   console.log('Detection stopped, UI preserved');\n   * }\n   * \n   * // For complete reset including UI:\n   * audioDetector.microphoneController?.reset();\n   * ```\n   */\n  /**\n   * Stops pitch detection but preserves UI state\n   * \n   * @description This method stops the pitch detection process while keeping UI elements\n   * in their current state. For complete reset including UI, use reset() instead.\n   * \n   * @returns boolean - Returns true if detection stopped successfully, false otherwise\n   * \n   * @example\n   * ```typescript\n   * // Stop detection but keep UI values\n   * const stopped = audioDetector.stopDetection();\n   * if (stopped) {\n   *   console.log('Detection stopped, UI preserved');\n   * }\n   * \n   * // For complete reset including UI:\n   * audioDetector.microphoneController?.reset();\n   * ```\n   */\n  stopDetection(): boolean {\n    this.debugLog('Stopping detection via AudioDetectionComponent...');\n    \n    if (!this.pitchDetector) {\n      this.debugLog('Cannot stop detection - no PitchDetector available');\n      return false;\n    }\n    \n    try {\n      // Use PitchDetector directly for stopping (preserves UI state)\n      this.pitchDetector.stopDetection(); // void型なので戻り値はチェックしない\n      \n      // 成功と仮定してUI状態を更新\n      this.debugLog('✅ Detection stopped successfully, UI state preserved');\n      this.updateState('ready');\n      return true;\n    } catch (error) {\n      const structuredError = this.createStructuredError(error as Error, 'stop_detection');\n      this.debugLog('Error stopping detection:', structuredError);\n      this.lastError = structuredError;\n      return false;\n    }\n  }\n\n  /**\n   * Resets all UI elements to their initial state (0 values)\n   * @private\n   */\n  private resetAllUIElements(): void {\n    try {\n      // 🎯 Step 1: Reset cached UI elements first (consistent with updateUI logic)\n      if (this.uiElements.volumeBar && this.config.volumeBarSelector) {\n        // Verify element matches current selector to prevent cross-mode updates\n        const currentElement = document.querySelector(this.config.volumeBarSelector);\n        if (currentElement && currentElement === this.uiElements.volumeBar) {\n          if (this.uiElements.volumeBar instanceof HTMLProgressElement) {\n            this.uiElements.volumeBar.value = 0;\n          } else {\n            (this.uiElements.volumeBar as HTMLElement).style.width = '0%';\n          }\n          this.debugLog(`Reset cached volume bar: ${this.config.volumeBarSelector}`);\n        }\n      }\n\n      if (this.uiElements.volumeText && this.config.volumeTextSelector) {\n        const currentElement = document.querySelector(this.config.volumeTextSelector);\n        if (currentElement && currentElement === this.uiElements.volumeText) {\n          this.uiElements.volumeText.textContent = '0.0%';\n          this.debugLog(`Reset cached volume text: ${this.config.volumeTextSelector}`);\n        }\n      }\n\n      if (this.uiElements.frequency && this.config.frequencySelector) {\n        const currentElement = document.querySelector(this.config.frequencySelector);\n        if (currentElement && currentElement === this.uiElements.frequency) {\n          this.uiElements.frequency.textContent = '0.0 Hz';\n          this.debugLog(`Reset cached frequency: ${this.config.frequencySelector}`);\n        }\n      }\n\n      if (this.uiElements.note && this.config.noteSelector) {\n        const currentElement = document.querySelector(this.config.noteSelector);\n        if (currentElement && currentElement === this.uiElements.note) {\n          this.uiElements.note.textContent = '-';\n          this.debugLog(`Reset cached note: ${this.config.noteSelector}`);\n        }\n      }\n\n      // 🎯 Step 2: Reset additional elements that are not in cached elements\n      const additionalSelectors = [\n        // Mic mode selectors (all possible variations)\n        '#mic-volume-bar', '#mic-volume-text', '#mic-frequency', '#mic-frequency-display',\n        // Range mode selectors (all possible variations)\n        '#range-volume-bar', '#range-volume-text', '#range-frequency', '#range-frequency-value', '#range-frequency-display',\n        // Practice mode selectors (always reset note display when switching modes)\n        '#practice-volume-bar', '#practice-volume-text', '#practice-frequency', '#practice-note',\n        // Add common frequency display patterns\n        '#freq-1', '#freq-2', '#freq-3', '#freq-4', '#freq-5',\n        '#frequency-1', '#frequency-2', '#frequency-3',\n        '#pitch-1', '#pitch-2', '#pitch-3'\n      ];\n\n      // Additionally, try to find all elements with frequency-related IDs or classes\n      // But be more selective to avoid breaking UI elements\n      const frequencyElements = document.querySelectorAll('[id*=\"freq\"]:not(.frequency-group):not(.frequency-box), [id*=\"frequency\"]:not(.frequency-group):not(.frequency-box), [id*=\"pitch\"]:not(.frequency-group):not(.frequency-box)');\n      frequencyElements.forEach(element => {\n        // Only reset if it looks like a frequency display (contains Hz or is a known pattern)\n        const text = element.textContent || '';\n        if (text.includes('Hz') || text.match(/^\\d+\\.?\\d*$/)) {\n          // Only update text content, don't change any other properties\n          if (element.classList.contains('frequency-display') || element.id.includes('freq-')) {\n            element.textContent = '0.0 Hz';\n          }\n        }\n      });\n\n      // Reset additional selectors (excluding current cached ones to avoid duplicate processing)\n      additionalSelectors.forEach(selector => {\n        if (selector &&\n            selector !== this.config.volumeBarSelector &&\n            selector !== this.config.volumeTextSelector &&\n            selector !== this.config.frequencySelector &&\n            selector !== this.config.noteSelector) {\n          const element = document.querySelector(selector);\n          if (element) {\n            this.debugLog(`Processing additional selector: ${selector}`);\n            if (selector.includes('volume-bar')) {\n              // Reset volume bar (width style or progress value)\n              if (element instanceof HTMLProgressElement) {\n                element.value = 0;\n              } else {\n                (element as HTMLElement).style.width = '0%';\n              }\n            } else if (selector.includes('volume-text')) {\n              // Reset volume text\n              element.textContent = '0.0%';\n            } else if (selector.includes('frequency')) {\n              // Reset frequency display - use multiple approaches for reliability\n              element.textContent = '0.0 Hz';\n              (element as HTMLElement).innerHTML = '0.0 Hz';\n              (element as HTMLElement).setAttribute('data-frequency', '0');\n              // Force style refresh to ensure visual update (without breaking display property)\n              const originalDisplay = (element as HTMLElement).style.display;\n              if (originalDisplay !== 'none') {\n                // Only force reflow, don't change display property\n                (element as HTMLElement).style.opacity = '0.99';\n                (element as HTMLElement).offsetHeight; // Force reflow\n                (element as HTMLElement).style.opacity = '';\n              }\n            } else if (selector.includes('note')) {\n              // Reset note display - use multiple approaches for reliability\n              const currentText = element.textContent;\n              const currentHTML = (element as HTMLElement).innerHTML;\n              this.debugLog(`Resetting note element: ${selector}, textContent: \"${currentText}\", innerHTML: \"${currentHTML}\"`);\n              element.textContent = '-';\n              (element as HTMLElement).innerHTML = '-';\n              // Force DOM refresh\n              (element as HTMLElement).style.opacity = '0.99';\n              (element as HTMLElement).offsetHeight; // Force reflow\n              (element as HTMLElement).style.opacity = '';\n              this.debugLog(`Note reset complete: ${selector}, new textContent: \"${element.textContent}\", new innerHTML: \"${(element as HTMLElement).innerHTML}\"`);\n            }\n          }\n        }\n      });\n\n      this.debugLog('All UI elements reset to initial state (cached elements processed first)');\n    } catch (error) {\n      this.debugLog('Error resetting UI elements:', error);\n    }\n  }\n\n  /**\n   * Handles pitch update events from PitchDetector\n   * @private\n   */\n  private handlePitchUpdate(rawResult: PitchDetectionResult): void {\n    // 生の結果にデバイス最適化を適用\n    const processedResult = this._getProcessedResult(rawResult);\n    \n    if (processedResult) {\n      // 加工後の結果をコールバックに渡す\n      this.callbacks.onPitchUpdate?.(processedResult);\n      this.callbacks.onVolumeUpdate?.(processedResult.volume);\n    }\n    \n    // UI updates are handled by the timer for consistent frame rate\n  }\n\n  /**\n   * Starts UI update timer\n   * @private\n   */\n  private startUIUpdates(): void {\n    if (this.uiUpdateTimer) {\n      clearInterval(this.uiUpdateTimer);\n    }\n    \n    this.uiUpdateTimer = window.setInterval(() => {\n      // 🎯 修正: PitchDetectorの実際の状態をチェック\n      if (this.pitchDetector && this.pitchDetector.getStatus().componentState === 'detecting') {\n        // Get the latest pitch detection result\n        const rawResult = this.pitchDetector.getLatestResult();\n        \n        // 生の結果にデバイス最適化を適用\n        const processedResult = this._getProcessedResult(rawResult);\n        \n        if (processedResult) {\n          // 🔥 自動UI更新が有効な場合のみupdateUIを呼び出し\n          if (this.config.autoUpdateUI) {\n            this.updateUI(processedResult);\n          }\n          \n          // 🔥 コールバック関数が設定されている場合は常に呼び出し\n          if (this.config.onPitchUpdate) {\n            this.debugLog('Calling onPitchUpdate callback with result:', processedResult);\n            this.config.onPitchUpdate(processedResult);\n          } else {\n            this.debugLog('onPitchUpdate callback not set - skipping callback execution');\n          }\n        } else {\n          // When no result, ensure UI shows reset state\n          const resetResult = {\n            frequency: 0,\n            note: '-',\n            octave: 0,\n            volume: 0,\n            rawVolume: 0,\n            clarity: 0\n          };\n          \n          if (this.config.autoUpdateUI) {\n            this.updateUI(resetResult);\n          }\n          \n          if (this.config.onPitchUpdate) {\n            this.config.onPitchUpdate(resetResult);\n          }\n        }\n      }\n    }, this.config.uiUpdateInterval);\n  }\n\n  /**\n   * Stops UI update timer\n   * @private\n   */\n  private stopUIUpdates(): void {\n    if (this.uiUpdateTimer) {\n      clearInterval(this.uiUpdateTimer);\n      this.uiUpdateTimer = null;\n    }\n  }\n\n  /**\n   * 検出結果にデバイス最適化を適用し、最終的な値を生成します。\n   * コールバック値とUI値の一貫性を保証するための一元管理メソッド。\n   * @param rawResult PitchDetectorからの生の検出結果\n   * @returns デバイス最適化が適用された処理済み結果、またはnull\n   * @private\n   */\n  /**\n   * 生の検出結果にデバイス固有の音量補正を適用します\n   *\n   * @remarks\n   * このメソッドがPitchProの音量調整の核心部分です。以下の処理を行います：\n   *\n   * 1. **デバイス固有の音量補正**: volumeMultiplierによる音量調整\n   *    - PC: 7.5x（v1.3.0確定）\n   *    - iPhone: 9.0x（v1.3.0確定）\n   *    - iPad: 13.0x（v1.3.0確定）\n   *\n   * 2. **範囲制限**: 最終音量を0-100%の範囲に制限\n   *\n   * 3. **デバッグログ**: モバイルデバイスでの音量調整過程を記録\n   *\n   * @param rawResult - PitchDetectorから取得した生の検出結果\n   * @returns 音量補正が適用された最終的な検出結果\n   *\n   * @example\n   * ```typescript\n   * // PitchDetectorからの生結果\n   * const rawResult = { frequency: 440, note: 'A4', volume: 15.2 };\n   *\n   * // iPhone (volumeMultiplier: 11.5) での処理\n   * const processed = this._getProcessedResult(rawResult);\n   * // → { frequency: 440, note: 'A4', volume: 100 } (15.2 * 11.5 = 174.8 → 100に制限)\n   *\n   * // PC (volumeMultiplier: 7.5) での処理\n   * // → { frequency: 440, note: 'A4', volume: 114 } (15.2 * 7.5 = 114 → 100に制限)\n   * ```\n   *\n   * @since v1.2.0 デバイス固有音量調整システム導入\n   * @see {@link detectAndOptimizeDevice} デバイス設定の決定方法\n   */\n  private _getProcessedResult(rawResult: PitchDetectionResult | null): PitchDetectionResult | null {\n    if (!rawResult) return null;\n\n    const processedResult = { ...rawResult };\n\n    // Step 1: 生のRMS値を、扱いやすい0-100の範囲の「初期音量」に変換します。\n    const RMS_TO_PERCENT_FACTOR = 200;\n    const volumeAsPercent = rawResult.volume * RMS_TO_PERCENT_FACTOR;\n\n    // Step 2: DeviceDetectionから、ノイズゲート閾値を取得（環境ノイズ対応で10倍に調整）\n    const baseNoiseGate = this.deviceSpecs?.noiseGate ?? 0.060;\n    const noiseGateThresholdPercent = baseNoiseGate * 100 * 10; // 10倍に調整（環境ノイズ対応）\n\n    // Step 3: ノイズゲートを適用します。\n    if (volumeAsPercent < noiseGateThresholdPercent) {\n        processedResult.volume = 0;\n        processedResult.frequency = 0;\n        processedResult.note = '--';\n        processedResult.rawVolume = rawResult.volume;\n        // デバッグログでブロックされたことを確認\n        if (this.config.debug) {\n            this.debugLog('UnifiedVolumeProcessing: BLOCKED', {\n                device: this.deviceSpecs?.deviceType,\n                volumeAsPercent: volumeAsPercent.toFixed(2),\n                noiseGateThreshold: `${noiseGateThresholdPercent.toFixed(2)}%`,\n                note: 'Environment noise filtering active'\n            });\n        }\n        return processedResult;\n    }\n\n    // Step 4: ノイズゲートを通過した場合、デバイス固有のvolumeMultiplierで最終的な表示音量を計算します。\n    const volumeMultiplier = this.deviceSpecs?.volumeMultiplier ?? 1.0;\n    const finalVolume = volumeAsPercent * volumeMultiplier;\n\n    // 最終的な値を0-100の範囲に丸めて設定します。\n    processedResult.volume = Math.min(100, Math.max(0, finalVolume));\n    processedResult.rawVolume = rawResult.volume;\n\n    // デバッグログ\n    if (this.config.debug) {\n        this.debugLog('UnifiedVolumeProcessing: PASSED', {\n            device: this.deviceSpecs?.deviceType,\n            initialPercent: volumeAsPercent.toFixed(2),\n            noiseGate: `${noiseGateThresholdPercent.toFixed(2)}%`,\n            multiplier: volumeMultiplier,\n            finalVolume: `${processedResult.volume.toFixed(2)}%`,\n            frequency: `${rawResult.frequency?.toFixed(2)}Hz`\n        });\n    }\n\n    return processedResult;\n}\n\n  /**\n   * Updates component state and notifies callbacks\n   * @private\n   */\n  private updateState(newState: typeof this.currentState): void {\n    if (this.currentState !== newState) {\n      const oldState = this.currentState;\n      this.currentState = newState;\n      \n      this.debugLog(`State changed: ${oldState} → ${newState}`);\n      this.callbacks.onStateChange?.(newState);\n    }\n  }\n\n  /**\n   * Handles errors with proper logging and callback notification\n   * @private\n   */\n  private handleError(error: Error | PitchProError, context: string): void {\n    const structuredError = error instanceof PitchProError \n      ? error \n      : this.createStructuredError(error, context);\n\n    this.lastError = structuredError;\n    this.updateState('error');\n    \n    this.callbacks.onError?.(structuredError);\n    this.debugLog('Error handled:', structuredError.toJSON());\n  }\n\n  /**\n   * Creates structured error with context information\n   * @private\n   */\n  private createStructuredError(error: Error, operation: string): PitchProError {\n    if (error.message.includes('Permission denied') || \n        error.message.includes('NotAllowedError') ||\n        error.message.includes('permission')) {\n      return new MicrophoneAccessError(\n        'マイクへのアクセス許可が拒否されました。ブラウザの設定でマイクアクセスを許可してください。',\n        {\n          operation,\n          originalError: error.message,\n          deviceSpecs: this.deviceSpecs,\n          componentState: this.currentState\n        }\n      );\n    }\n    \n    if (error.message.includes('AudioContext') || \n        error.message.includes('audio') ||\n        error.message.includes('initialization')) {\n      return new AudioContextError(\n        'オーディオシステムの初期化に失敗しました。デバイスの音響設定を確認するか、ブラウザを再起動してください。',\n        {\n          operation,\n          originalError: error.message,\n          componentState: this.currentState,\n          deviceSpecs: this.deviceSpecs\n        }\n      );\n    }\n    \n    return new PitchProError(\n      `${operation}中に予期しないエラーが発生しました: ${error.message}`,\n      ErrorCode.PITCH_DETECTION_ERROR,\n      {\n        operation,\n        originalError: error.message,\n        stack: error.stack,\n        componentState: this.currentState,\n        isInitialized: this.isInitialized\n      }\n    );\n  }\n\n  /**\n   * Debug logging utility\n   * @private\n   */\n  private debugLog(message: string, ...args: any[]): void {\n    if (this.config.debug) {\n      console.log(`${this.config.logPrefix} ${message}`, ...args);\n    }\n  }\n}","/**\n * HarmonicCorrection - Advanced harmonic detection and correction\n * \n * Provides sophisticated harmonic analysis and correction algorithms\n * Handles complex harmonic patterns, subharmonics, and frequency drift\n */\n\nimport type { HarmonicCorrectionResult } from '../types';\n\nexport class HarmonicCorrection {\n  private historyBuffer: Array<{\n    frequency: number;\n    confidence: number;\n    timestamp: number;\n    volume: number;\n  }> = [];\n  \n  private config = {\n    historyWindowMs: 2000,\n    minConfidenceThreshold: 0.6,\n    harmonicToleranceCents: 30,\n    maxHarmonicNumber: 8,\n    stabilityWeight: 0.7,\n    volumeWeight: 0.3\n  };\n\n  constructor(config: Partial<typeof HarmonicCorrection.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Apply harmonic correction to detected frequency\n   */\n  correctFrequency(frequency: number, volume: number = 1.0): HarmonicCorrectionResult {\n    const now = Date.now();\n    \n    // Clean old history\n    this.cleanHistory(now);\n    \n    // Add current detection to history\n    this.addToHistory(frequency, volume, now);\n    \n    // Analyze for harmonic patterns\n    const analysis = this.analyzeHarmonics(frequency);\n    \n    // Apply correction if confidence is high enough\n    if (analysis.confidence >= this.config.minConfidenceThreshold) {\n      return {\n        correctedFreq: analysis.correctedFrequency,\n        confidence: analysis.confidence,\n        correctionApplied: Math.abs(analysis.correctedFrequency - frequency) > 1.0\n      };\n    }\n    \n    return {\n      correctedFreq: frequency,\n      confidence: analysis.confidence,\n      correctionApplied: false\n    };\n  }\n\n  /**\n   * Analyze frequency for harmonic patterns\n   */\n  private analyzeHarmonics(frequency: number): {\n    correctedFrequency: number;\n    confidence: number;\n    harmonicNumber?: number;\n    fundamentalCandidate?: number;\n  } {\n    if (this.historyBuffer.length < 3) {\n      return {\n        correctedFrequency: frequency,\n        confidence: 0.1\n      };\n    }\n\n    // Get recent stable frequencies\n    const recentFrequencies = this.historyBuffer\n      .slice(-10)\n      .map(entry => entry.frequency);\n\n    // Look for fundamental candidates\n    const fundamentalCandidates = this.findFundamentalCandidates(frequency);\n    \n    let bestCandidate = {\n      frequency,\n      confidence: 0.1,\n      harmonicNumber: 1\n    };\n\n    // Test each fundamental candidate\n    for (const candidate of fundamentalCandidates) {\n      const confidence = this.calculateHarmonicConfidence(\n        candidate.fundamental,\n        candidate.harmonicNumber,\n        recentFrequencies\n      );\n      \n      if (confidence > bestCandidate.confidence) {\n        bestCandidate = {\n          frequency: candidate.fundamental,\n          confidence,\n          harmonicNumber: candidate.harmonicNumber\n        };\n      }\n    }\n\n    // If we found a likely harmonic, correct to fundamental\n    if (bestCandidate.harmonicNumber > 1 && bestCandidate.confidence > this.config.minConfidenceThreshold) {\n      return {\n        correctedFrequency: bestCandidate.frequency,\n        confidence: bestCandidate.confidence,\n        harmonicNumber: bestCandidate.harmonicNumber,\n        fundamentalCandidate: bestCandidate.frequency\n      };\n    }\n\n    return {\n      correctedFrequency: frequency,\n      confidence: bestCandidate.confidence\n    };\n  }\n\n  /**\n   * Find potential fundamental frequencies for a given detected frequency\n   */\n  private findFundamentalCandidates(frequency: number): Array<{\n    fundamental: number;\n    harmonicNumber: number;\n    likelihood: number;\n  }> {\n    const candidates: Array<{\n      fundamental: number;\n      harmonicNumber: number;\n      likelihood: number;\n    }> = [];\n\n    // Check if this could be a harmonic of a lower fundamental\n    for (let harmonicNum = 2; harmonicNum <= this.config.maxHarmonicNumber; harmonicNum++) {\n      const fundamental = frequency / harmonicNum;\n      \n      // Skip if fundamental is too low for human voice\n      if (fundamental < 60) continue;\n      \n      // Calculate likelihood based on how close it is to exact harmonic ratio\n      const exactHarmonic = fundamental * harmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(frequency / exactHarmonic));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents) {\n        const likelihood = 1.0 - (centDeviation / this.config.harmonicToleranceCents);\n        candidates.push({\n          fundamental,\n          harmonicNumber: harmonicNum,\n          likelihood\n        });\n      }\n    }\n\n    // Also consider the frequency itself as fundamental (no correction)\n    candidates.push({\n      fundamental: frequency,\n      harmonicNumber: 1,\n      likelihood: 0.5\n    });\n\n    return candidates.sort((a, b) => b.likelihood - a.likelihood);\n  }\n\n  /**\n   * Calculate confidence that a frequency pattern represents a harmonic series\n   */\n  private calculateHarmonicConfidence(\n    fundamental: number,\n    _harmonicNumber: number,\n    recentFrequencies: number[]\n  ): number {\n    if (recentFrequencies.length < 3) return 0.1;\n\n    let totalConfidence = 0;\n    let validMeasurements = 0;\n\n    // Check how well recent frequencies fit the harmonic pattern\n    for (const freq of recentFrequencies) {\n      // Find the closest harmonic to this frequency\n      let closestHarmonicNum = Math.round(freq / fundamental);\n      if (closestHarmonicNum < 1) closestHarmonicNum = 1;\n      \n      const expectedFreq = fundamental * closestHarmonicNum;\n      const centDeviation = Math.abs(1200 * Math.log2(freq / expectedFreq));\n      \n      if (centDeviation <= this.config.harmonicToleranceCents * 2) {\n        const confidence = 1.0 - (centDeviation / (this.config.harmonicToleranceCents * 2));\n        totalConfidence += confidence;\n        validMeasurements++;\n      }\n    }\n\n    if (validMeasurements === 0) return 0.1;\n\n    // Average confidence, weighted by stability\n    const avgConfidence = totalConfidence / validMeasurements;\n    \n    // Add stability bonus if we have consistent measurements\n    const stabilityBonus = Math.min(validMeasurements / recentFrequencies.length, 1.0);\n    \n    return Math.min(avgConfidence * this.config.stabilityWeight + stabilityBonus * (1 - this.config.stabilityWeight), 1.0);\n  }\n\n  /**\n   * Add frequency detection to history\n   */\n  private addToHistory(frequency: number, volume: number, timestamp: number): void {\n    // Calculate confidence based on volume and stability\n    const volumeConfidence = Math.min(volume, 1.0);\n    let stabilityConfidence = 0.5;\n    \n    if (this.historyBuffer.length > 0) {\n      const lastFreq = this.historyBuffer[this.historyBuffer.length - 1].frequency;\n      const freqRatio = Math.max(frequency, lastFreq) / Math.min(frequency, lastFreq);\n      stabilityConfidence = Math.max(0, 1.0 - (freqRatio - 1.0) * 5); // Penalty for large jumps\n    }\n    \n    const confidence = volumeConfidence * this.config.volumeWeight + \n                      stabilityConfidence * (1 - this.config.volumeWeight);\n    \n    this.historyBuffer.push({\n      frequency,\n      confidence,\n      timestamp,\n      volume\n    });\n    \n    // Limit buffer size\n    if (this.historyBuffer.length > 50) {\n      this.historyBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old entries from history\n   */\n  private cleanHistory(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.historyWindowMs;\n    this.historyBuffer = this.historyBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset correction history\n   */\n  resetHistory(): void {\n    this.historyBuffer = [];\n  }\n\n  /**\n   * Get current analysis statistics\n   */\n  getAnalysisStats(): {\n    historyLength: number;\n    averageConfidence: number;\n    frequencyRange: { min: number; max: number } | null;\n    stabilityScore: number;\n  } {\n    if (this.historyBuffer.length === 0) {\n      return {\n        historyLength: 0,\n        averageConfidence: 0,\n        frequencyRange: null,\n        stabilityScore: 0\n      };\n    }\n\n    const frequencies = this.historyBuffer.map(entry => entry.frequency);\n    const confidences = this.historyBuffer.map(entry => entry.confidence);\n    \n    const avgConfidence = confidences.reduce((sum, conf) => sum + conf, 0) / confidences.length;\n    const minFreq = Math.min(...frequencies);\n    const maxFreq = Math.max(...frequencies);\n    \n    // Calculate stability as inverse of coefficient of variation\n    const mean = frequencies.reduce((sum, freq) => sum + freq, 0) / frequencies.length;\n    const variance = frequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / frequencies.length;\n    const coefficientOfVariation = Math.sqrt(variance) / mean;\n    const stabilityScore = Math.max(0, 1.0 - coefficientOfVariation);\n\n    return {\n      historyLength: this.historyBuffer.length,\n      averageConfidence: avgConfidence,\n      frequencyRange: { min: minFreq, max: maxFreq },\n      stabilityScore\n    };\n  }\n\n  /**\n   * Configure correction parameters\n   */\n  updateConfig(newConfig: Partial<typeof this.config>): void {\n    this.config = { ...this.config, ...newConfig };\n  }\n}","/**\n * TypeScript type definitions for PitchPro Audio Processing\n */\n\n// AudioManager types\nexport interface AudioManagerConfig {\n  sampleRate?: number;\n  channelCount?: number;\n  echoCancellation?: boolean;\n  noiseSuppression?: boolean;\n  autoGainControl?: boolean;\n  latency?: number;\n}\n\n// PitchDetector types\nexport interface PitchDetectorConfig {\n  fftSize?: number;\n  smoothing?: number;\n  clarityThreshold?: number;\n  minVolumeAbsolute?: number;\n  // 🔧 noiseGate削除: minVolumeAbsoluteと重複のため不要\n  deviceOptimization?: boolean;\n  silenceDetection?: SilenceDetectionConfig;\n}\n\n// Silence detection types\nexport interface SilenceDetectionConfig {\n  enabled?: boolean;\n  warningThreshold?: number;    // 警告までの時間（ms）\n  timeoutThreshold?: number;    // タイムアウトまでの時間（ms）\n  minVolumeThreshold?: number;  // 消音判定の音量閾値\n  onSilenceWarning?: (duration: number) => void;\n  onSilenceTimeout?: () => void;\n  onSilenceRecovered?: () => void;\n}\n\nexport interface PitchDetectionResult {\n  frequency: number;\n  note: string;\n  octave?: number;\n  clarity: number;\n  volume: number;\n  rawVolume?: number;\n  cents?: number;\n  timestamp?: number;\n}\n\n// NoiseFilter types\nexport interface NoiseFilterConfig {\n  highpassFreq?: number;\n  lowpassFreq?: number;\n  notchFreq?: number;\n  highpassQ?: number;\n  lowpassQ?: number;\n  notchQ?: number;\n  useFilters?: boolean;\n}\n\n// HarmonicCorrection types\nexport interface HarmonicCorrectionResult {\n  correctedFreq: number;\n  confidence: number;\n  correctionApplied: boolean;\n}\n\n// ErrorNotification types\nexport interface NotificationConfig {\n  type: 'error' | 'warning' | 'success' | 'info';\n  title: string;\n  message: string;\n  details?: string[];\n  solution?: string;\n  autoHide?: boolean;\n  duration?: number;\n  priority?: 'low' | 'medium' | 'high';\n}\n\nexport interface NotificationElement extends HTMLElement {\n  'data-notification-id': string;\n}\n\n// Music theory types\nexport interface MusicalNote {\n  name: string;\n  octave: number;\n  midi: number;\n  frequency: number;\n}\n\nexport interface MusicalInterval {\n  name: string;\n  semitones: number;\n  cents: number;\n  ratio: number;\n}\n\n// Voice analysis types\nexport interface VoiceAnalysis {\n  quality: VoiceQuality;\n  stability: number;\n  recommendations: string[];\n}\n\nexport const VoiceQuality = {\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type VoiceQuality = typeof VoiceQuality[keyof typeof VoiceQuality];\n\nexport const AccuracyLevel = {\n  PERFECT: 'perfect' as const,\n  EXCELLENT: 'excellent' as const,\n  GOOD: 'good' as const,\n  FAIR: 'fair' as const,\n  POOR: 'poor' as const\n};\n\nexport type AccuracyLevel = typeof AccuracyLevel[keyof typeof AccuracyLevel];\n\nexport interface AccuracyResult {\n  accuracy: AccuracyLevel;\n  centsOff: number;\n  score: number;\n}\n\n// Device detection types\nexport interface DeviceSpecs {\n  deviceType: 'iPhone' | 'iPad' | 'PC';\n  isIOS: boolean;\n  sensitivity: number;\n  noiseGate: number;\n  divisor: number;\n  gainCompensation: number;\n  noiseThreshold: number;\n  smoothingFactor: number;\n  volumeMultiplier: number;\n}\n\n// Lifecycle management types\nexport interface MediaStreamResources {\n  audioContext: AudioContext;\n  mediaStream: MediaStream;\n  sourceNode: MediaStreamAudioSourceNode;\n}\n\nexport interface HealthStatus {\n  mediaStreamActive: boolean;\n  audioContextState: string;\n  trackStates: TrackState[];\n  healthy: boolean;\n  refCount?: number;\n}\n\nexport interface TrackState {\n  kind: string;\n  enabled: boolean;\n  readyState: MediaStreamTrackState;\n  muted: boolean;\n}\n\n// Event types\nexport interface MicrophoneControllerEvents {\n  'pitchpro:microphoneGranted': CustomEvent<{ stream: MediaStream }>;\n  'pitchpro:microphoneDenied': CustomEvent<{ error: Error }>;\n  'pitchpro:microphoneStopped': CustomEvent;\n  'pitchpro:microphoneMuted': CustomEvent<{ timestamp: number; controllerState: string }>;\n  'pitchpro:microphoneUnmuted': CustomEvent<{ timestamp: number; controllerState: string }>;\n  'pitchpro:sensitivityChanged': CustomEvent<{ sensitivity: number }>;\n  'pitchpro:noiseGateChanged': CustomEvent<{ threshold: number }>;\n  'pitchpro:deviceDetected': CustomEvent<{ specs: DeviceSpecs }>;\n}\n\nexport interface LifecycleEvents {\n  'pitchpro:lifecycle:trackEnded': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackMuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:trackUnmuted': CustomEvent<{ track: MediaStreamTrack }>;\n  'pitchpro:lifecycle:autoRecoverySuccess': CustomEvent;\n  'pitchpro:lifecycle:autoRecoveryFailed': CustomEvent<{ error: Error }>;\n  'pitchpro:lifecycle:maxRecoveryAttemptsReached': CustomEvent<{ attempts: number; lastHealthStatus: any }>;\n  'pitchpro:lifecycle:monitoringRestarted': CustomEvent<{ reason: string; refCount: number }>;\n}\n\n// Callback types\nexport type PitchCallback = (result: PitchDetectionResult) => void;\nexport type ErrorCallback = (error: Error) => void;\nexport type StateChangeCallback = (state: string) => void;","/**\n * VoiceAnalyzer - Advanced voice quality and analysis\n * \n * Analyzes voice characteristics, stability, and provides recommendations\n * Includes vibrato detection, breathiness analysis, and vocal health indicators\n */\n\nimport type { VoiceAnalysis } from '../types';\nimport { VoiceQuality } from '../types';\n\nexport class VoiceAnalyzer {\n  private analysisBuffer: Array<{\n    frequency: number;\n    volume: number;\n    clarity: number;\n    timestamp: number;\n  }> = [];\n  \n  private config = {\n    analysisWindowMs: 3000,\n    stabilityThresholdCents: 20,\n    vibratoMinRate: 4.5,\n    vibratoMaxRate: 7.5,\n    vibratoMinDepthCents: 50,\n    breathinessThreshold: 0.3,\n    minAnalysisTime: 1000\n  };\n\n  constructor(config: Partial<typeof VoiceAnalyzer.prototype.config> = {}) {\n    this.config = { ...this.config, ...config };\n  }\n\n  /**\n   * Analyze voice characteristics from audio data\n   */\n  analyzeVoice(\n    frequency: number, \n    volume: number, \n    clarity: number,\n    spectralData?: Float32Array\n  ): VoiceAnalysis {\n    const timestamp = Date.now();\n    \n    // Add to analysis buffer\n    this.addToBuffer(frequency, volume, clarity, timestamp);\n    \n    // Clean old data\n    this.cleanBuffer(timestamp);\n    \n    // Perform comprehensive analysis\n    const stability = this.calculateStability();\n    const vibrato = this.detectVibrato();\n    const breathiness = spectralData ? this.analyzeBreathiness(spectralData) : null;\n    const consistency = this.analyzeConsistency();\n    \n    // Calculate overall quality\n    const quality = this.calculateOverallQuality(stability, vibrato, breathiness, consistency);\n    \n    // Generate recommendations\n    const recommendations = this.generateRecommendations(\n      quality,\n      stability,\n      vibrato,\n      breathiness,\n      consistency\n    );\n\n    return {\n      quality,\n      stability,\n      recommendations\n    };\n  }\n\n  /**\n   * Calculate pitch stability\n   */\n  private calculateStability(): number {\n    if (this.analysisBuffer.length < 10) {\n      return 0.5; // Neutral stability for insufficient data\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency);\n    const validFrequencies = frequencies.filter(freq => freq > 0);\n    \n    if (validFrequencies.length < 5) {\n      return 0.3; // Low stability for sparse data\n    }\n\n    // Calculate coefficient of variation\n    const mean = validFrequencies.reduce((sum, freq) => sum + freq, 0) / validFrequencies.length;\n    const variance = validFrequencies.reduce((sum, freq) => sum + Math.pow(freq - mean, 2), 0) / validFrequencies.length;\n    const standardDeviation = Math.sqrt(variance);\n    const coefficientOfVariation = standardDeviation / mean;\n    \n    // Convert to cents for musical relevance\n    const deviationCents = coefficientOfVariation * 1200;\n    \n    // Map to 0-1 stability score\n    return Math.max(0, Math.min(1, 1 - (deviationCents / 100)));\n  }\n\n  /**\n   * Detect vibrato characteristics\n   */\n  private detectVibrato(): {\n    detected: boolean;\n    rate: number | null;\n    depth: number | null;\n    regularity: number | null;\n  } {\n    if (this.analysisBuffer.length < 30) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    const frequencies = this.analysisBuffer.map(entry => entry.frequency).filter(f => f > 0);\n    if (frequencies.length < 20) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Smooth the frequency data\n    const smoothed = this.smoothFrequencies(frequencies, 3);\n    \n    // Find peaks and valleys\n    const extrema = this.findExtrema(smoothed);\n    \n    if (extrema.length < 4) {\n      return { detected: false, rate: null, depth: null, regularity: null };\n    }\n\n    // Calculate vibrato rate (cycles per second)\n    const timeSpan = (this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - \n                     this.analysisBuffer[0].timestamp) / 1000;\n    const cycles = extrema.length / 2; // pairs of peaks and valleys\n    const rate = cycles / timeSpan;\n\n    // Calculate vibrato depth (in cents)\n    const depths = [];\n    for (let i = 0; i < extrema.length - 1; i++) {\n      const freq1 = smoothed[extrema[i].index];\n      const freq2 = smoothed[extrema[i + 1].index];\n      if (freq1 > 0 && freq2 > 0) {\n        const cents = Math.abs(1200 * Math.log2(freq1 / freq2));\n        depths.push(cents);\n      }\n    }\n\n    const averageDepth = depths.length > 0 ? \n      depths.reduce((sum, depth) => sum + depth, 0) / depths.length : 0;\n\n    // Calculate regularity (consistency of periods)\n    const periods = [];\n    for (let i = 0; i < extrema.length - 2; i += 2) {\n      const period = extrema[i + 2].index - extrema[i].index;\n      periods.push(period);\n    }\n\n    let regularity = 0;\n    if (periods.length > 2) {\n      const periodMean = periods.reduce((sum, p) => sum + p, 0) / periods.length;\n      const periodVariance = periods.reduce((sum, p) => sum + Math.pow(p - periodMean, 2), 0) / periods.length;\n      regularity = Math.max(0, 1 - (Math.sqrt(periodVariance) / periodMean));\n    }\n\n    // Determine if vibrato is detected\n    const detected = rate >= this.config.vibratoMinRate && \n                    rate <= this.config.vibratoMaxRate &&\n                    averageDepth >= this.config.vibratoMinDepthCents;\n\n    return {\n      detected,\n      rate: rate,\n      depth: averageDepth,\n      regularity\n    };\n  }\n\n  /**\n   * Analyze breathiness from spectral data\n   */\n  private analyzeBreathiness(spectralData: Float32Array): number {\n    // Analyze high-frequency noise content relative to fundamental\n    const fundamentalBin = Math.floor(spectralData.length * 0.1); // Rough estimate\n    const noiseBins = spectralData.slice(Math.floor(spectralData.length * 0.7)); // High frequency content\n    \n    const fundamentalEnergy = spectralData.slice(0, fundamentalBin * 2)\n      .reduce((sum, val) => sum + val * val, 0);\n    \n    const noiseEnergy = noiseBins.reduce((sum, val) => sum + val * val, 0);\n    \n    if (fundamentalEnergy === 0) return 1.0; // Maximum breathiness if no fundamental\n    \n    const noiseRatio = noiseEnergy / fundamentalEnergy;\n    return Math.min(1.0, noiseRatio);\n  }\n\n  /**\n   * Analyze consistency over time\n   */\n  private analyzeConsistency(): number {\n    if (this.analysisBuffer.length < 10) return 0.5;\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    \n    // Calculate consistency metrics\n    const volumeConsistency = this.calculateConsistencyScore(volumes);\n    const clarityConsistency = this.calculateConsistencyScore(clarities);\n    \n    return (volumeConsistency + clarityConsistency) / 2;\n  }\n\n  /**\n   * Calculate consistency score for an array of values\n   */\n  private calculateConsistencyScore(values: number[]): number {\n    if (values.length < 3) return 0.5;\n\n    const mean = values.reduce((sum, val) => sum + val, 0) / values.length;\n    const variance = values.reduce((sum, val) => sum + Math.pow(val - mean, 2), 0) / values.length;\n    const coefficientOfVariation = Math.sqrt(variance) / (mean || 1);\n    \n    return Math.max(0, Math.min(1, 1 - coefficientOfVariation));\n  }\n\n  /**\n   * Calculate overall voice quality\n   */\n  private calculateOverallQuality(\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): VoiceQuality {\n    // Weight factors for different aspects\n    const weights = {\n      stability: 0.4,\n      consistency: 0.3,\n      breathiness: 0.2,\n      vibrato: 0.1\n    };\n\n    let score = stability * weights.stability + consistency * weights.consistency;\n    \n    // Breathiness penalty (lower is better for breathiness)\n    if (breathiness !== null) {\n      score += (1 - Math.min(breathiness, 1)) * weights.breathiness;\n    } else {\n      score += 0.7 * weights.breathiness; // Neutral if no data\n    }\n    \n    // Vibrato bonus for controlled vibrato\n    if (vibrato.detected && vibrato.regularity > 0.7) {\n      score += 0.9 * weights.vibrato;\n    } else if (vibrato.detected) {\n      score += 0.6 * weights.vibrato;\n    } else {\n      score += 0.5 * weights.vibrato;\n    }\n\n    // Map score to quality levels\n    if (score >= 0.85) return VoiceQuality.EXCELLENT;\n    if (score >= 0.7) return VoiceQuality.GOOD;\n    if (score >= 0.5) return VoiceQuality.FAIR;\n    return VoiceQuality.POOR;\n  }\n\n  /**\n   * Generate recommendations based on analysis\n   */\n  private generateRecommendations(\n    quality: VoiceQuality,\n    stability: number,\n    vibrato: any,\n    breathiness: number | null,\n    consistency: number\n  ): string[] {\n    const recommendations: string[] = [];\n\n    // Stability recommendations\n    if (stability < 0.5) {\n      recommendations.push('音程の安定性を向上させるため、ゆっくりとした発声練習を行ってください');\n      recommendations.push('腹式呼吸を意識して、息の流れを一定に保つ練習をしてください');\n    } else if (stability < 0.7) {\n      recommendations.push('音程の微調整練習で、より正確なピッチコントロールを目指しましょう');\n    }\n\n    // Consistency recommendations\n    if (consistency < 0.5) {\n      recommendations.push('音量と音質の一貫性を保つため、定期的な発声練習を継続してください');\n      recommendations.push('録音を聞き返して、自分の声の特徴を把握しましょう');\n    }\n\n    // Breathiness recommendations\n    if (breathiness !== null && breathiness > 0.6) {\n      recommendations.push('声の息漏れが気になります。発声時の喉の締まりを意識してください');\n      recommendations.push('ハミング練習で、クリアな声質を目指しましょう');\n    }\n\n    // Vibrato recommendations\n    if (vibrato.detected) {\n      if (vibrato.regularity < 0.5) {\n        recommendations.push('ビブラートの規則性を改善するため、メトロノームに合わせた練習をしてください');\n      } else if (vibrato.rate > 7.5) {\n        recommendations.push('ビブラートの速度が速すぎます。よりゆったりとしたビブラートを練習してください');\n      }\n    } else if (quality === VoiceQuality.GOOD || quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('美しいビブラートの習得に挑戦してみましょう');\n    }\n\n    // General recommendations based on quality\n    if (quality === VoiceQuality.POOR) {\n      recommendations.push('基礎的な発声練習から始めることをお勧めします');\n      recommendations.push('専門的な指導を受けることを検討してください');\n    } else if (quality === VoiceQuality.EXCELLENT) {\n      recommendations.push('素晴らしい声質です。この状態を維持する練習を続けてください');\n    }\n\n    return recommendations;\n  }\n\n  /**\n   * Smooth frequency data using moving average\n   */\n  private smoothFrequencies(frequencies: number[], windowSize: number): number[] {\n    const smoothed: number[] = [];\n    \n    for (let i = 0; i < frequencies.length; i++) {\n      let sum = 0;\n      let count = 0;\n      \n      const start = Math.max(0, i - Math.floor(windowSize / 2));\n      const end = Math.min(frequencies.length, i + Math.floor(windowSize / 2) + 1);\n      \n      for (let j = start; j < end; j++) {\n        sum += frequencies[j];\n        count++;\n      }\n      \n      smoothed.push(sum / count);\n    }\n    \n    return smoothed;\n  }\n\n  /**\n   * Find local extrema (peaks and valleys) in frequency data\n   */\n  private findExtrema(data: number[]): Array<{ index: number; value: number; type: 'peak' | 'valley' }> {\n    const extrema: Array<{ index: number; value: number; type: 'peak' | 'valley' }> = [];\n    \n    for (let i = 1; i < data.length - 1; i++) {\n      const prev = data[i - 1];\n      const curr = data[i];\n      const next = data[i + 1];\n      \n      if (curr > prev && curr > next) {\n        extrema.push({ index: i, value: curr, type: 'peak' });\n      } else if (curr < prev && curr < next) {\n        extrema.push({ index: i, value: curr, type: 'valley' });\n      }\n    }\n    \n    return extrema;\n  }\n\n  /**\n   * Add data to analysis buffer\n   */\n  private addToBuffer(frequency: number, volume: number, clarity: number, timestamp: number): void {\n    this.analysisBuffer.push({ frequency, volume, clarity, timestamp });\n    \n    // Limit buffer size\n    if (this.analysisBuffer.length > 200) {\n      this.analysisBuffer.shift();\n    }\n  }\n\n  /**\n   * Clean old data from buffer\n   */\n  private cleanBuffer(currentTime: number): void {\n    const cutoffTime = currentTime - this.config.analysisWindowMs;\n    this.analysisBuffer = this.analysisBuffer.filter(entry => entry.timestamp > cutoffTime);\n  }\n\n  /**\n   * Reset analysis buffer\n   */\n  reset(): void {\n    this.analysisBuffer = [];\n  }\n\n  /**\n   * Get current buffer statistics\n   */\n  getBufferStats(): {\n    entryCount: number;\n    timeSpanMs: number;\n    averageVolume: number;\n    averageClarity: number;\n  } {\n    if (this.analysisBuffer.length === 0) {\n      return { entryCount: 0, timeSpanMs: 0, averageVolume: 0, averageClarity: 0 };\n    }\n\n    const volumes = this.analysisBuffer.map(entry => entry.volume);\n    const clarities = this.analysisBuffer.map(entry => entry.clarity);\n    const timeSpan = this.analysisBuffer[this.analysisBuffer.length - 1].timestamp - this.analysisBuffer[0].timestamp;\n\n    return {\n      entryCount: this.analysisBuffer.length,\n      timeSpanMs: timeSpan,\n      averageVolume: volumes.reduce((sum, vol) => sum + vol, 0) / volumes.length,\n      averageClarity: clarities.reduce((sum, clarity) => sum + clarity, 0) / clarities.length\n    };\n  }\n}","/**\n * CalibrationSystem - Device-specific audio calibration and optimization\n * \n * Automatically calibrates audio processing parameters based on device capabilities\n * Handles microphone sensitivity, noise characteristics, and frequency response\n */\n\nimport type { DeviceSpecs } from '../types';\nimport { DeviceDetection } from '../utils/DeviceDetection';\n\nexport class CalibrationSystem {\n  private deviceSpecs: DeviceSpecs;\n  private calibrationData: {\n    volumeOffset: number;\n    frequencyResponse: { [frequency: number]: number };\n    noiseProfile: { [frequency: number]: number };\n    optimalSettings: {\n      sensitivity: number;\n      noiseGate: number;\n      filterSettings: any;\n    };\n  } | null = null;\n\n  private isCalibrated = false;\n  private calibrationInProgress = false;\n\n  constructor() {\n    this.deviceSpecs = DeviceDetection.getDeviceSpecs();\n  }\n\n  /**\n   * Perform automatic calibration\n   */\n  async calibrate(audioContext: AudioContext, mediaStream: MediaStream): Promise<{\n    success: boolean;\n    calibrationData: any;\n    recommendedSettings: any;\n    error?: Error;\n  }> {\n    if (this.calibrationInProgress) {\n      throw new Error('Calibration already in progress');\n    }\n\n    this.calibrationInProgress = true;\n\n    try {\n      console.log('🎛️ [CalibrationSystem] Starting device calibration');\n\n      // Step 1: Measure background noise\n      const noiseProfile = await this.measureBackgroundNoise(audioContext, mediaStream);\n\n      // Step 2: Calibrate volume levels\n      const volumeCalibration = await this.calibrateVolumeLevels(audioContext, mediaStream);\n\n      // Step 3: Measure frequency response (simplified)\n      const frequencyResponse = await this.measureFrequencyResponse(audioContext, mediaStream);\n\n      // Step 4: Determine optimal settings\n      const optimalSettings = this.calculateOptimalSettings(\n        noiseProfile,\n        volumeCalibration,\n        frequencyResponse\n      );\n\n      this.calibrationData = {\n        volumeOffset: volumeCalibration.offset,\n        frequencyResponse,\n        noiseProfile,\n        optimalSettings\n      };\n\n      this.isCalibrated = true;\n      this.calibrationInProgress = false;\n\n      console.log('✅ [CalibrationSystem] Calibration completed successfully');\n\n      return {\n        success: true,\n        calibrationData: this.calibrationData,\n        recommendedSettings: optimalSettings\n      };\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Calibration failed:', error);\n      this.calibrationInProgress = false;\n      \n      return {\n        success: false,\n        calibrationData: null,\n        recommendedSettings: this.getDefaultSettings(),\n        error: error as Error\n      };\n    }\n  }\n\n  /**\n   * Measure background noise levels\n   */\n  private async measureBackgroundNoise(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 2000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 2048;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const measurements: Float32Array[] = [];\n\n      const startTime = Date.now();\n\n      const measureNoise = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average noise profile\n          const avgNoise: { [frequency: number]: number } = {};\n          \n          for (let bin = 0; bin < bufferLength; bin++) {\n            const frequency = (bin * audioContext.sampleRate) / (analyser.fftSize);\n            let sum = 0;\n            \n            for (const measurement of measurements) {\n              sum += measurement[bin];\n            }\n            \n            avgNoise[Math.round(frequency)] = sum / measurements.length;\n          }\n\n          source.disconnect();\n          resolve(avgNoise);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        measurements.push(new Float32Array(dataArray));\n        \n        setTimeout(measureNoise, 100);\n      };\n\n      measureNoise();\n    });\n  }\n\n  /**\n   * Calibrate volume levels\n   */\n  private async calibrateVolumeLevels(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 3000\n  ): Promise<{ offset: number; range: { min: number; max: number } }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 1024;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.fftSize;\n      const dataArray = new Float32Array(bufferLength);\n      const volumeMeasurements: number[] = [];\n\n      const startTime = Date.now();\n\n      const measureVolume = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Analyze volume distribution\n          volumeMeasurements.sort((a, b) => a - b);\n          \n          const min = volumeMeasurements[0] || 0;\n          const max = volumeMeasurements[volumeMeasurements.length - 1] || 1;\n          const median = volumeMeasurements[Math.floor(volumeMeasurements.length / 2)] || 0.5;\n          \n          // Calculate offset to center dynamic range\n          const targetCenter = 0.3; // Aim for 30% as comfortable speaking level\n          const offset = targetCenter - median;\n\n          source.disconnect();\n          resolve({\n            offset,\n            range: { min, max }\n          });\n          return;\n        }\n\n        analyser.getFloatTimeDomainData(dataArray);\n        \n        // Calculate RMS\n        let sum = 0;\n        for (let i = 0; i < bufferLength; i++) {\n          sum += dataArray[i] * dataArray[i];\n        }\n        const rms = Math.sqrt(sum / bufferLength);\n        volumeMeasurements.push(rms);\n        \n        setTimeout(measureVolume, 50);\n      };\n\n      measureVolume();\n    });\n  }\n\n  /**\n   * Measure frequency response (simplified version)\n   */\n  private async measureFrequencyResponse(\n    audioContext: AudioContext,\n    mediaStream: MediaStream,\n    durationMs: number = 5000\n  ): Promise<{ [frequency: number]: number }> {\n    return new Promise((resolve) => {\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 4096;\n      \n      const source = audioContext.createMediaStreamSource(mediaStream);\n      source.connect(analyser);\n\n      const bufferLength = analyser.frequencyBinCount;\n      const dataArray = new Float32Array(bufferLength);\n      const responseMap: { [frequency: number]: number[] } = {};\n\n      const startTime = Date.now();\n\n      const measureResponse = () => {\n        if (Date.now() - startTime >= durationMs) {\n          // Calculate average response for each frequency\n          const avgResponse: { [frequency: number]: number } = {};\n          \n          Object.keys(responseMap).forEach(freqStr => {\n            const frequency = parseInt(freqStr);\n            const measurements = responseMap[frequency];\n            const avg = measurements.reduce((sum, val) => sum + val, 0) / measurements.length;\n            avgResponse[frequency] = avg;\n          });\n\n          source.disconnect();\n          resolve(avgResponse);\n          return;\n        }\n\n        analyser.getFloatFrequencyData(dataArray);\n        \n        // Store measurements for key frequencies\n        for (let bin = 0; bin < bufferLength; bin++) {\n          const frequency = Math.round((bin * audioContext.sampleRate) / (analyser.fftSize));\n          \n          // Focus on vocal range\n          if (frequency >= 80 && frequency <= 1000) {\n            if (!responseMap[frequency]) {\n              responseMap[frequency] = [];\n            }\n            responseMap[frequency].push(dataArray[bin]);\n          }\n        }\n        \n        setTimeout(measureResponse, 100);\n      };\n\n      measureResponse();\n    });\n  }\n\n  /**\n   * Calculate optimal settings based on calibration data\n   */\n  private calculateOptimalSettings(\n    noiseProfile: { [frequency: number]: number },\n    volumeCalibration: any,\n    frequencyResponse: { [frequency: number]: number }\n  ): any {\n    const baseSettings = this.getDefaultSettings();\n\n    // Adjust sensitivity based on volume calibration\n    const sensitivityAdjustment = Math.max(0.5, Math.min(2.0, 1.0 - volumeCalibration.offset));\n    const adjustedSensitivity = baseSettings.sensitivity * sensitivityAdjustment;\n\n    // Adjust noise gate based on background noise\n    const noiseFrequencies = Object.keys(noiseProfile).map(f => parseInt(f));\n    const vocalRangeNoise = noiseFrequencies\n      .filter(f => f >= 100 && f <= 800)\n      .map(f => noiseProfile[f]);\n    \n    const avgNoise = vocalRangeNoise.length > 0 ? \n      vocalRangeNoise.reduce((sum, val) => sum + val, 0) / vocalRangeNoise.length : -60;\n    \n    const noiseGateAdjustment = Math.max(-20, avgNoise + 10); // 10dB above average noise\n    const adjustedNoiseGate = Math.max(baseSettings.noiseGate, Math.abs(noiseGateAdjustment) / 1000);\n\n    // Analyze frequency response for filter adjustments\n    const frequencyKeys = Object.keys(frequencyResponse).map(f => parseInt(f)).sort((a, b) => a - b);\n    const responseLevels = frequencyKeys.map(f => frequencyResponse[f]);\n    \n    // Simple frequency response correction\n    const lowFreqResponse = responseLevels.slice(0, Math.floor(responseLevels.length * 0.3));\n    const midFreqResponse = responseLevels.slice(\n      Math.floor(responseLevels.length * 0.3),\n      Math.floor(responseLevels.length * 0.7)\n    );\n    const highFreqResponse = responseLevels.slice(Math.floor(responseLevels.length * 0.7));\n\n    const lowAvg = lowFreqResponse.reduce((sum, val) => sum + val, 0) / lowFreqResponse.length;\n    const midAvg = midFreqResponse.reduce((sum, val) => sum + val, 0) / midFreqResponse.length;\n    const highAvg = highFreqResponse.reduce((sum, val) => sum + val, 0) / highFreqResponse.length;\n\n    return {\n      sensitivity: Math.round(adjustedSensitivity * 10) / 10,\n      noiseGate: Math.round(adjustedNoiseGate * 1000) / 1000,\n      volumeOffset: volumeCalibration.offset,\n      filterSettings: {\n        highpassFreq: lowAvg < (midAvg - 5) ? 100 : 80, // Stronger highpass if low freq is weak\n        lowpassFreq: highAvg > (midAvg + 3) ? 600 : 800, // Lower cutoff if high freq is strong\n        notchFreq: 60, // Standard power line frequency\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      },\n      deviceAdjustments: {\n        lowFreqCompensation: Math.max(0.8, Math.min(1.5, midAvg / (lowAvg || -60))),\n        highFreqCompensation: Math.max(0.8, Math.min(1.2, midAvg / (highAvg || -60)))\n      }\n    };\n  }\n\n  /**\n   * Get default settings for current device\n   */\n  private getDefaultSettings(): any {\n    return {\n      sensitivity: this.deviceSpecs.sensitivity,\n      noiseGate: this.deviceSpecs.noiseGate,\n      volumeOffset: 0,\n      filterSettings: {\n        highpassFreq: 80,\n        lowpassFreq: 800,\n        notchFreq: 60,\n        highpassQ: 0.7,\n        lowpassQ: 0.7,\n        notchQ: 10.0\n      }\n    };\n  }\n\n  /**\n   * Apply calibrated settings to audio processing\n   */\n  applyCalibration(audioProcessor: any): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      console.warn('⚠️ [CalibrationSystem] No calibration data available');\n      return false;\n    }\n\n    try {\n      const settings = this.calibrationData.optimalSettings;\n      \n      // Apply settings to audio processor\n      if (audioProcessor.setSensitivity) {\n        audioProcessor.setSensitivity(settings.sensitivity);\n      }\n      \n      if (audioProcessor.setNoiseGate) {\n        audioProcessor.setNoiseGate(settings.noiseGate);\n      }\n      \n      if (audioProcessor.updateFilterSettings) {\n        audioProcessor.updateFilterSettings(settings.filterSettings);\n      }\n\n      console.log('✅ [CalibrationSystem] Calibration applied successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to apply calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get calibration status\n   */\n  getCalibrationStatus(): {\n    isCalibrated: boolean;\n    inProgress: boolean;\n    deviceSpecs: DeviceSpecs;\n    calibrationData: any;\n  } {\n    return {\n      isCalibrated: this.isCalibrated,\n      inProgress: this.calibrationInProgress,\n      deviceSpecs: this.deviceSpecs,\n      calibrationData: this.calibrationData\n    };\n  }\n\n  /**\n   * Reset calibration\n   */\n  reset(): void {\n    this.isCalibrated = false;\n    this.calibrationInProgress = false;\n    this.calibrationData = null;\n    \n    console.log('🔄 [CalibrationSystem] Calibration reset');\n  }\n\n  /**\n   * Save calibration data to localStorage\n   */\n  saveCalibration(): boolean {\n    if (!this.isCalibrated || !this.calibrationData) {\n      return false;\n    }\n\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const dataToSave = {\n        deviceSpecs: this.deviceSpecs,\n        calibrationData: this.calibrationData,\n        timestamp: Date.now()\n      };\n\n      localStorage.setItem(calibrationKey, JSON.stringify(dataToSave));\n      console.log('💾 [CalibrationSystem] Calibration saved');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to save calibration:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Load calibration data from localStorage\n   */\n  loadCalibration(): boolean {\n    try {\n      const calibrationKey = `pitchpro_calibration_${this.deviceSpecs.deviceType}`;\n      const savedData = localStorage.getItem(calibrationKey);\n      \n      if (!savedData) {\n        return false;\n      }\n\n      const parsedData = JSON.parse(savedData);\n      \n      // Check if calibration is recent (within 7 days)\n      const maxAge = 7 * 24 * 60 * 60 * 1000; // 7 days\n      if (Date.now() - parsedData.timestamp > maxAge) {\n        console.log('⏰ [CalibrationSystem] Saved calibration is too old, ignoring');\n        return false;\n      }\n\n      // Verify device compatibility\n      if (parsedData.deviceSpecs.deviceType !== this.deviceSpecs.deviceType) {\n        console.log('📱 [CalibrationSystem] Device type mismatch, ignoring saved calibration');\n        return false;\n      }\n\n      this.calibrationData = parsedData.calibrationData;\n      this.isCalibrated = true;\n      \n      console.log('📂 [CalibrationSystem] Calibration loaded successfully');\n      return true;\n\n    } catch (error) {\n      console.error('❌ [CalibrationSystem] Failed to load calibration:', error);\n      return false;\n    }\n  }\n}","export const version = \"15.1.22\";\n//# sourceMappingURL=version.js.map","export const createExtendedExponentialRampToValueAutomationEvent = (value, endTime, insertTime) => {\n    return { endTime, insertTime, type: 'exponentialRampToValue', value };\n};\n//# sourceMappingURL=create-extended-exponential-ramp-to-value-automation-event.js.map","export const createExtendedLinearRampToValueAutomationEvent = (value, endTime, insertTime) => {\n    return { endTime, insertTime, type: 'linearRampToValue', value };\n};\n//# sourceMappingURL=create-extended-linear-ramp-to-value-automation-event.js.map","export const createSetValueAutomationEvent = (value, startTime) => {\n    return { startTime, type: 'setValue', value };\n};\n//# sourceMappingURL=create-set-value-automation-event.js.map","export const createSetValueCurveAutomationEvent = (values, startTime, duration) => {\n    return { duration, startTime, type: 'setValueCurve', values };\n};\n//# sourceMappingURL=create-set-value-curve-automation-event.js.map","export const getTargetValueAtTime = (time, valueAtStartTime, { startTime, target, timeConstant }) => {\n    return target + (valueAtStartTime - target) * Math.exp((startTime - time) / timeConstant);\n};\n//# sourceMappingURL=get-target-value-at-time.js.map","export const isExponentialRampToValueAutomationEvent = (automationEvent) => {\n    return automationEvent.type === 'exponentialRampToValue';\n};\n//# sourceMappingURL=exponential-ramp-to-value-automation-event.js.map","export const isLinearRampToValueAutomationEvent = (automationEvent) => {\n    return automationEvent.type === 'linearRampToValue';\n};\n//# sourceMappingURL=linear-ramp-to-value-automation-event.js.map","import { isExponentialRampToValueAutomationEvent } from './exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from './linear-ramp-to-value-automation-event';\nexport const isAnyRampToValueAutomationEvent = (automationEvent) => {\n    return isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent);\n};\n//# sourceMappingURL=any-ramp-to-value-automation-event.js.map","export const isSetValueAutomationEvent = (automationEvent) => {\n    return automationEvent.type === 'setValue';\n};\n//# sourceMappingURL=set-value-automation-event.js.map","export const isSetValueCurveAutomationEvent = (automationEvent) => {\n    return automationEvent.type === 'setValueCurve';\n};\n//# sourceMappingURL=set-value-curve-automation-event.js.map","import { getTargetValueAtTime } from '../functions/get-target-value-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nexport const getValueOfAutomationEventAtIndexAtTime = (automationEvents, index, time, defaultValue) => {\n    const automationEvent = automationEvents[index];\n    return automationEvent === undefined\n        ? defaultValue\n        : isAnyRampToValueAutomationEvent(automationEvent) || isSetValueAutomationEvent(automationEvent)\n            ? automationEvent.value\n            : isSetValueCurveAutomationEvent(automationEvent)\n                ? automationEvent.values[automationEvent.values.length - 1]\n                : getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, automationEvent.startTime, defaultValue), automationEvent);\n};\n//# sourceMappingURL=get-value-of-automation-event-at-index-at-time.js.map","import { getValueOfAutomationEventAtIndexAtTime } from '../functions/get-value-of-automation-event-at-index-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nexport const getEndTimeAndValueOfPreviousAutomationEvent = (automationEvents, index, currentAutomationEvent, nextAutomationEvent, defaultValue) => {\n    return currentAutomationEvent === undefined\n        ? [nextAutomationEvent.insertTime, defaultValue]\n        : isAnyRampToValueAutomationEvent(currentAutomationEvent)\n            ? [currentAutomationEvent.endTime, currentAutomationEvent.value]\n            : isSetValueAutomationEvent(currentAutomationEvent)\n                ? [currentAutomationEvent.startTime, currentAutomationEvent.value]\n                : isSetValueCurveAutomationEvent(currentAutomationEvent)\n                    ? [\n                        currentAutomationEvent.startTime + currentAutomationEvent.duration,\n                        currentAutomationEvent.values[currentAutomationEvent.values.length - 1]\n                    ]\n                    : [\n                        currentAutomationEvent.startTime,\n                        getValueOfAutomationEventAtIndexAtTime(automationEvents, index - 1, currentAutomationEvent.startTime, defaultValue)\n                    ];\n};\n//# sourceMappingURL=get-end-time-and-value-of-previous-automation-event.js.map","export const isCancelAndHoldAutomationEvent = (automationEvent) => {\n    return automationEvent.type === 'cancelAndHold';\n};\n//# sourceMappingURL=cancel-and-hold-automation-event.js.map","export const isCancelScheduledValuesAutomationEvent = (automationEvent) => {\n    return automationEvent.type === 'cancelScheduledValues';\n};\n//# sourceMappingURL=cancel-scheduled-values-automation-event.js.map","import { isCancelAndHoldAutomationEvent } from '../guards/cancel-and-hold-automation-event';\nimport { isCancelScheduledValuesAutomationEvent } from '../guards/cancel-scheduled-values-automation-event';\nimport { isExponentialRampToValueAutomationEvent } from '../guards/exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from '../guards/linear-ramp-to-value-automation-event';\nexport const getEventTime = (automationEvent) => {\n    if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n        return automationEvent.cancelTime;\n    }\n    if (isExponentialRampToValueAutomationEvent(automationEvent) || isLinearRampToValueAutomationEvent(automationEvent)) {\n        return automationEvent.endTime;\n    }\n    return automationEvent.startTime;\n};\n//# sourceMappingURL=get-event-time.js.map","export const getExponentialRampValueAtTime = (time, startTime, valueAtStartTime, { endTime, value }) => {\n    if (valueAtStartTime === value) {\n        return value;\n    }\n    if ((0 < valueAtStartTime && 0 < value) || (valueAtStartTime < 0 && value < 0)) {\n        return valueAtStartTime * (value / valueAtStartTime) ** ((time - startTime) / (endTime - startTime));\n    }\n    return 0;\n};\n//# sourceMappingURL=get-exponential-ramp-value-at-time.js.map","export const getLinearRampValueAtTime = (time, startTime, valueAtStartTime, { endTime, value }) => {\n    return valueAtStartTime + ((time - startTime) / (endTime - startTime)) * (value - valueAtStartTime);\n};\n//# sourceMappingURL=get-linear-ramp-value-at-time.js.map","export const interpolateValue = (values, theoreticIndex) => {\n    const lowerIndex = Math.floor(theoreticIndex);\n    const upperIndex = Math.ceil(theoreticIndex);\n    if (lowerIndex === upperIndex) {\n        return values[lowerIndex];\n    }\n    return (1 - (theoreticIndex - lowerIndex)) * values[lowerIndex] + (1 - (upperIndex - theoreticIndex)) * values[upperIndex];\n};\n//# sourceMappingURL=interpolate-value.js.map","import { interpolateValue } from './interpolate-value';\nexport const getValueCurveValueAtTime = (time, { duration, startTime, values }) => {\n    const theoreticIndex = ((time - startTime) / duration) * (values.length - 1);\n    return interpolateValue(values, theoreticIndex);\n};\n//# sourceMappingURL=get-value-curve-value-at-time.js.map","export const isSetTargetAutomationEvent = (automationEvent) => {\n    return automationEvent.type === 'setTarget';\n};\n//# sourceMappingURL=set-target-automation-event.js.map","import { createExtendedExponentialRampToValueAutomationEvent } from '../functions/create-extended-exponential-ramp-to-value-automation-event';\nimport { createExtendedLinearRampToValueAutomationEvent } from '../functions/create-extended-linear-ramp-to-value-automation-event';\nimport { createSetValueAutomationEvent } from '../functions/create-set-value-automation-event';\nimport { createSetValueCurveAutomationEvent } from '../functions/create-set-value-curve-automation-event';\nimport { getEndTimeAndValueOfPreviousAutomationEvent } from '../functions/get-end-time-and-value-of-previous-automation-event';\nimport { getEventTime } from '../functions/get-event-time';\nimport { getExponentialRampValueAtTime } from '../functions/get-exponential-ramp-value-at-time';\nimport { getLinearRampValueAtTime } from '../functions/get-linear-ramp-value-at-time';\nimport { getTargetValueAtTime } from '../functions/get-target-value-at-time';\nimport { getValueCurveValueAtTime } from '../functions/get-value-curve-value-at-time';\nimport { getValueOfAutomationEventAtIndexAtTime } from '../functions/get-value-of-automation-event-at-index-at-time';\nimport { isAnyRampToValueAutomationEvent } from '../guards/any-ramp-to-value-automation-event';\nimport { isCancelAndHoldAutomationEvent } from '../guards/cancel-and-hold-automation-event';\nimport { isCancelScheduledValuesAutomationEvent } from '../guards/cancel-scheduled-values-automation-event';\nimport { isExponentialRampToValueAutomationEvent } from '../guards/exponential-ramp-to-value-automation-event';\nimport { isLinearRampToValueAutomationEvent } from '../guards/linear-ramp-to-value-automation-event';\nimport { isSetTargetAutomationEvent } from '../guards/set-target-automation-event';\nimport { isSetValueAutomationEvent } from '../guards/set-value-automation-event';\nimport { isSetValueCurveAutomationEvent } from '../guards/set-value-curve-automation-event';\nexport class AutomationEventList {\n    constructor(defaultValue) {\n        this._automationEvents = [];\n        this._currenTime = 0;\n        this._defaultValue = defaultValue;\n    }\n    [Symbol.iterator]() {\n        return this._automationEvents[Symbol.iterator]();\n    }\n    add(automationEvent) {\n        const eventTime = getEventTime(automationEvent);\n        if (isCancelAndHoldAutomationEvent(automationEvent) || isCancelScheduledValuesAutomationEvent(automationEvent)) {\n            const index = this._automationEvents.findIndex((currentAutomationEvent) => {\n                if (isCancelScheduledValuesAutomationEvent(automationEvent) && isSetValueCurveAutomationEvent(currentAutomationEvent)) {\n                    return currentAutomationEvent.startTime + currentAutomationEvent.duration >= eventTime;\n                }\n                return getEventTime(currentAutomationEvent) >= eventTime;\n            });\n            const removedAutomationEvent = this._automationEvents[index];\n            if (index !== -1) {\n                this._automationEvents = this._automationEvents.slice(0, index);\n            }\n            if (isCancelAndHoldAutomationEvent(automationEvent)) {\n                const lastAutomationEvent = this._automationEvents[this._automationEvents.length - 1];\n                if (removedAutomationEvent !== undefined && isAnyRampToValueAutomationEvent(removedAutomationEvent)) {\n                    if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                        throw new Error('The internal list is malformed.');\n                    }\n                    const startTime = lastAutomationEvent === undefined\n                        ? removedAutomationEvent.insertTime\n                        : isSetValueCurveAutomationEvent(lastAutomationEvent)\n                            ? lastAutomationEvent.startTime + lastAutomationEvent.duration\n                            : getEventTime(lastAutomationEvent);\n                    const startValue = lastAutomationEvent === undefined\n                        ? this._defaultValue\n                        : isSetValueCurveAutomationEvent(lastAutomationEvent)\n                            ? lastAutomationEvent.values[lastAutomationEvent.values.length - 1]\n                            : lastAutomationEvent.value;\n                    const value = isExponentialRampToValueAutomationEvent(removedAutomationEvent)\n                        ? getExponentialRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent)\n                        : getLinearRampValueAtTime(eventTime, startTime, startValue, removedAutomationEvent);\n                    const truncatedAutomationEvent = isExponentialRampToValueAutomationEvent(removedAutomationEvent)\n                        ? createExtendedExponentialRampToValueAutomationEvent(value, eventTime, this._currenTime)\n                        : createExtendedLinearRampToValueAutomationEvent(value, eventTime, this._currenTime);\n                    this._automationEvents.push(truncatedAutomationEvent);\n                }\n                if (lastAutomationEvent !== undefined && isSetTargetAutomationEvent(lastAutomationEvent)) {\n                    this._automationEvents.push(createSetValueAutomationEvent(this.getValue(eventTime), eventTime));\n                }\n                if (lastAutomationEvent !== undefined &&\n                    isSetValueCurveAutomationEvent(lastAutomationEvent) &&\n                    lastAutomationEvent.startTime + lastAutomationEvent.duration > eventTime) {\n                    const duration = eventTime - lastAutomationEvent.startTime;\n                    const ratio = (lastAutomationEvent.values.length - 1) / lastAutomationEvent.duration;\n                    const length = Math.max(2, 1 + Math.ceil(duration * ratio));\n                    const fraction = (duration / (length - 1)) * ratio;\n                    const values = lastAutomationEvent.values.slice(0, length);\n                    if (fraction < 1) {\n                        for (let i = 1; i < length; i += 1) {\n                            const factor = (fraction * i) % 1;\n                            values[i] = lastAutomationEvent.values[i - 1] * (1 - factor) + lastAutomationEvent.values[i] * factor;\n                        }\n                    }\n                    this._automationEvents[this._automationEvents.length - 1] = createSetValueCurveAutomationEvent(values, lastAutomationEvent.startTime, duration);\n                }\n            }\n        }\n        else {\n            const index = this._automationEvents.findIndex((currentAutomationEvent) => getEventTime(currentAutomationEvent) > eventTime);\n            const previousAutomationEvent = index === -1 ? this._automationEvents[this._automationEvents.length - 1] : this._automationEvents[index - 1];\n            if (previousAutomationEvent !== undefined &&\n                isSetValueCurveAutomationEvent(previousAutomationEvent) &&\n                getEventTime(previousAutomationEvent) + previousAutomationEvent.duration > eventTime) {\n                return false;\n            }\n            const persistentAutomationEvent = isExponentialRampToValueAutomationEvent(automationEvent)\n                ? createExtendedExponentialRampToValueAutomationEvent(automationEvent.value, automationEvent.endTime, this._currenTime)\n                : isLinearRampToValueAutomationEvent(automationEvent)\n                    ? createExtendedLinearRampToValueAutomationEvent(automationEvent.value, eventTime, this._currenTime)\n                    : automationEvent;\n            if (index === -1) {\n                this._automationEvents.push(persistentAutomationEvent);\n            }\n            else {\n                if (isSetValueCurveAutomationEvent(automationEvent) &&\n                    eventTime + automationEvent.duration > getEventTime(this._automationEvents[index])) {\n                    return false;\n                }\n                this._automationEvents.splice(index, 0, persistentAutomationEvent);\n            }\n        }\n        return true;\n    }\n    flush(time) {\n        const index = this._automationEvents.findIndex((currentAutomationEvent) => getEventTime(currentAutomationEvent) > time);\n        if (index > 1) {\n            const remainingAutomationEvents = this._automationEvents.slice(index - 1);\n            const firstRemainingAutomationEvent = remainingAutomationEvents[0];\n            if (isSetTargetAutomationEvent(firstRemainingAutomationEvent)) {\n                remainingAutomationEvents.unshift(createSetValueAutomationEvent(getValueOfAutomationEventAtIndexAtTime(this._automationEvents, index - 2, firstRemainingAutomationEvent.startTime, this._defaultValue), firstRemainingAutomationEvent.startTime));\n            }\n            this._automationEvents = remainingAutomationEvents;\n        }\n    }\n    getValue(time) {\n        if (this._automationEvents.length === 0) {\n            return this._defaultValue;\n        }\n        const indexOfNextEvent = this._automationEvents.findIndex((automationEvent) => getEventTime(automationEvent) > time);\n        const nextAutomationEvent = this._automationEvents[indexOfNextEvent];\n        const indexOfCurrentEvent = (indexOfNextEvent === -1 ? this._automationEvents.length : indexOfNextEvent) - 1;\n        const currentAutomationEvent = this._automationEvents[indexOfCurrentEvent];\n        if (currentAutomationEvent !== undefined &&\n            isSetTargetAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined ||\n                !isAnyRampToValueAutomationEvent(nextAutomationEvent) ||\n                nextAutomationEvent.insertTime > time)) {\n            return getTargetValueAtTime(time, getValueOfAutomationEventAtIndexAtTime(this._automationEvents, indexOfCurrentEvent - 1, currentAutomationEvent.startTime, this._defaultValue), currentAutomationEvent);\n        }\n        if (currentAutomationEvent !== undefined &&\n            isSetValueAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n        }\n        if (currentAutomationEvent !== undefined &&\n            isSetValueCurveAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined ||\n                !isAnyRampToValueAutomationEvent(nextAutomationEvent) ||\n                currentAutomationEvent.startTime + currentAutomationEvent.duration > time)) {\n            if (time < currentAutomationEvent.startTime + currentAutomationEvent.duration) {\n                return getValueCurveValueAtTime(time, currentAutomationEvent);\n            }\n            return currentAutomationEvent.values[currentAutomationEvent.values.length - 1];\n        }\n        if (currentAutomationEvent !== undefined &&\n            isAnyRampToValueAutomationEvent(currentAutomationEvent) &&\n            (nextAutomationEvent === undefined || !isAnyRampToValueAutomationEvent(nextAutomationEvent))) {\n            return currentAutomationEvent.value;\n        }\n        if (nextAutomationEvent !== undefined && isExponentialRampToValueAutomationEvent(nextAutomationEvent)) {\n            const [startTime, value] = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue);\n            return getExponentialRampValueAtTime(time, startTime, value, nextAutomationEvent);\n        }\n        if (nextAutomationEvent !== undefined && isLinearRampToValueAutomationEvent(nextAutomationEvent)) {\n            const [startTime, value] = getEndTimeAndValueOfPreviousAutomationEvent(this._automationEvents, indexOfCurrentEvent, currentAutomationEvent, nextAutomationEvent, this._defaultValue);\n            return getLinearRampValueAtTime(time, startTime, value, nextAutomationEvent);\n        }\n        return this._defaultValue;\n    }\n}\n//# sourceMappingURL=automation-event-list.js.map","export const createCancelAndHoldAutomationEvent = (cancelTime) => {\n    return { cancelTime, type: 'cancelAndHold' };\n};\n//# sourceMappingURL=create-cancel-and-hold-automation-event.js.map","export const createCancelScheduledValuesAutomationEvent = (cancelTime) => {\n    return { cancelTime, type: 'cancelScheduledValues' };\n};\n//# sourceMappingURL=create-cancel-scheduled-values-automation-event.js.map","export const createExponentialRampToValueAutomationEvent = (value, endTime) => {\n    return { endTime, type: 'exponentialRampToValue', value };\n};\n//# sourceMappingURL=create-exponential-ramp-to-value-automation-event.js.map","export const createLinearRampToValueAutomationEvent = (value, endTime) => {\n    return { endTime, type: 'linearRampToValue', value };\n};\n//# sourceMappingURL=create-linear-ramp-to-value-automation-event.js.map","export const createSetTargetAutomationEvent = (target, startTime, timeConstant) => {\n    return { startTime, target, timeConstant, type: 'setTarget' };\n};\n//# sourceMappingURL=create-set-target-automation-event.js.map","export const createAbortError = () => new DOMException('', 'AbortError');\n//# sourceMappingURL=abort-error.js.map","export const createAddActiveInputConnectionToAudioNode = (insertElementInSet) => {\n    return (activeInputs, source, [output, input, eventListener], ignoreDuplicates) => {\n        insertElementInSet(activeInputs[input], [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n    };\n};\n//# sourceMappingURL=add-active-input-connection-to-audio-node.js.map","export const createAddAudioNodeConnections = (audioNodeConnectionsStore) => {\n    return (audioNode, audioNodeRenderer, nativeAudioNode) => {\n        const activeInputs = [];\n        for (let i = 0; i < nativeAudioNode.numberOfInputs; i += 1) {\n            activeInputs.push(new Set());\n        }\n        audioNodeConnectionsStore.set(audioNode, {\n            activeInputs,\n            outputs: new Set(),\n            passiveInputs: new WeakMap(),\n            renderer: audioNodeRenderer\n        });\n    };\n};\n//# sourceMappingURL=add-audio-node-connections.js.map","export const createAddAudioParamConnections = (audioParamConnectionsStore) => {\n    return (audioParam, audioParamRenderer) => {\n        audioParamConnectionsStore.set(audioParam, { activeInputs: new Set(), passiveInputs: new WeakMap(), renderer: audioParamRenderer });\n    };\n};\n//# sourceMappingURL=add-audio-param-connections.js.map","export const ACTIVE_AUDIO_NODE_STORE = new WeakSet();\nexport const AUDIO_NODE_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_NODE_STORE = new WeakMap();\nexport const AUDIO_PARAM_CONNECTIONS_STORE = new WeakMap();\nexport const AUDIO_PARAM_STORE = new WeakMap();\nexport const CONTEXT_STORE = new WeakMap();\nexport const EVENT_LISTENERS = new WeakMap();\nexport const CYCLE_COUNTERS = new WeakMap();\n// This clunky name is borrowed from the spec. :-)\nexport const NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS = new WeakMap();\nexport const NODE_TO_PROCESSOR_MAPS = new WeakMap();\n//# sourceMappingURL=globals.js.map","const handler = {\n    construct() {\n        return handler;\n    }\n};\nexport const isConstructible = (constructible) => {\n    try {\n        const proxy = new Proxy(constructible, handler);\n        new proxy(); // tslint:disable-line:no-unused-expression\n    }\n    catch {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=is-constructible.js.map","/*\n * This massive regex tries to cover all the following cases.\n *\n * import './path';\n * import defaultImport from './path';\n * import { namedImport } from './path';\n * import { namedImport as renamendImport } from './path';\n * import * as namespaceImport from './path';\n * import defaultImport, { namedImport } from './path';\n * import defaultImport, { namedImport as renamendImport } from './path';\n * import defaultImport, * as namespaceImport from './path';\n */\nconst IMPORT_STATEMENT_REGEX = /^import(?:(?:[\\s]+[\\w]+|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\{[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?(?:[\\s]*,[\\s]*[\\w]+(?:[\\s]+as[\\s]+[\\w]+)?)*[\\s]*}|(?:[\\s]+[\\w]+[\\s]*,)?[\\s]*\\*[\\s]+as[\\s]+[\\w]+)[\\s]+from)?(?:[\\s]*)(\"([^\"\\\\]|\\\\.)+\"|'([^'\\\\]|\\\\.)+')(?:[\\s]*);?/; // tslint:disable-line:max-line-length\nexport const splitImportStatements = (source, url) => {\n    const importStatements = [];\n    let sourceWithoutImportStatements = source.replace(/^[\\s]+/, '');\n    let result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    while (result !== null) {\n        const unresolvedUrl = result[1].slice(1, -1);\n        const importStatementWithResolvedUrl = result[0]\n            .replace(/([\\s]+)?;?$/, '')\n            .replace(unresolvedUrl, new URL(unresolvedUrl, url).toString());\n        importStatements.push(importStatementWithResolvedUrl);\n        sourceWithoutImportStatements = sourceWithoutImportStatements.slice(result[0].length).replace(/^[\\s]+/, '');\n        result = sourceWithoutImportStatements.match(IMPORT_STATEMENT_REGEX);\n    }\n    return [importStatements.join(';'), sourceWithoutImportStatements];\n};\n//# sourceMappingURL=split-import-statements.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { isConstructible } from '../helpers/is-constructible';\nimport { splitImportStatements } from '../helpers/split-import-statements';\nconst verifyParameterDescriptors = (parameterDescriptors) => {\n    if (parameterDescriptors !== undefined && !Array.isArray(parameterDescriptors)) {\n        throw new TypeError('The parameterDescriptors property of given value for processorCtor is not an array.');\n    }\n};\nconst verifyProcessorCtor = (processorCtor) => {\n    if (!isConstructible(processorCtor)) {\n        throw new TypeError('The given value for processorCtor should be a constructor.');\n    }\n    if (processorCtor.prototype === null || typeof processorCtor.prototype !== 'object') {\n        throw new TypeError('The given value for processorCtor should have a prototype.');\n    }\n};\nexport const createAddAudioWorkletModule = (cacheTestResult, createNotSupportedError, evaluateSource, exposeCurrentFrameAndCurrentTime, fetchSource, getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, ongoingRequests, resolvedRequests, testAudioWorkletProcessorPostMessageSupport, window) => {\n    let index = 0;\n    return (context, moduleURL, options = { credentials: 'omit' }) => {\n        const resolvedRequestsOfContext = resolvedRequests.get(context);\n        if (resolvedRequestsOfContext !== undefined && resolvedRequestsOfContext.has(moduleURL)) {\n            return Promise.resolve();\n        }\n        const ongoingRequestsOfContext = ongoingRequests.get(context);\n        if (ongoingRequestsOfContext !== undefined) {\n            const promiseOfOngoingRequest = ongoingRequestsOfContext.get(moduleURL);\n            if (promiseOfOngoingRequest !== undefined) {\n                return promiseOfOngoingRequest;\n            }\n        }\n        const nativeContext = getNativeContext(context);\n        // Bug #59: Safari does not implement the audioWorklet property.\n        const promise = nativeContext.audioWorklet === undefined\n            ? fetchSource(moduleURL)\n                .then(([source, absoluteUrl]) => {\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * ${ importStatements };\n                 * ((a, b) => {\n                 *     (a[b] = a[b] || [ ]).push(\n                 *         (AudioWorkletProcessor, global, registerProcessor, sampleRate, self, window) => {\n                 *             ${ sourceWithoutImportStatements }\n                 *         }\n                 *     );\n                 * })(window, '_AWGS');\n                 * ```\n                 */\n                // tslint:disable-next-line:max-line-length\n                const wrappedSource = `${importStatements};((a,b)=>{(a[b]=a[b]||[]).push((AudioWorkletProcessor,global,registerProcessor,sampleRate,self,window)=>{${sourceWithoutImportStatements}\n})})(window,'_AWGS')`;\n                // @todo Evaluating the given source code is a possible security problem.\n                return evaluateSource(wrappedSource);\n            })\n                .then(() => {\n                const evaluateAudioWorkletGlobalScope = window._AWGS.pop();\n                if (evaluateAudioWorkletGlobalScope === undefined) {\n                    // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n                    throw new SyntaxError();\n                }\n                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => evaluateAudioWorkletGlobalScope(class AudioWorkletProcessor {\n                }, undefined, (name, processorCtor) => {\n                    if (name.trim() === '') {\n                        throw createNotSupportedError();\n                    }\n                    const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n                    if (nodeNameToProcessorConstructorMap !== undefined) {\n                        if (nodeNameToProcessorConstructorMap.has(name)) {\n                            throw createNotSupportedError();\n                        }\n                        verifyProcessorCtor(processorCtor);\n                        verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                        nodeNameToProcessorConstructorMap.set(name, processorCtor);\n                    }\n                    else {\n                        verifyProcessorCtor(processorCtor);\n                        verifyParameterDescriptors(processorCtor.parameterDescriptors);\n                        NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.set(nativeContext, new Map([[name, processorCtor]]));\n                    }\n                }, nativeContext.sampleRate, undefined, undefined));\n            })\n            : Promise.all([\n                fetchSource(moduleURL),\n                Promise.resolve(cacheTestResult(testAudioWorkletProcessorPostMessageSupport, testAudioWorkletProcessorPostMessageSupport))\n            ]).then(([[source, absoluteUrl], isSupportingPostMessage]) => {\n                const currentIndex = index + 1;\n                index = currentIndex;\n                const [importStatements, sourceWithoutImportStatements] = splitImportStatements(source, absoluteUrl);\n                /*\n                 * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n                 *\n                 * This is the unminified version of the code used below.\n                 *\n                 * ```js\n                 * class extends AudioWorkletProcessor {\n                 *\n                 *     __buffers = new WeakSet();\n                 *\n                 *     constructor () {\n                 *         super();\n                 *\n                 *         this.port.postMessage = ((postMessage) => {\n                 *             return (message, transferables) => {\n                 *                 const filteredTransferables = (transferables)\n                 *                     ? transferables.filter((transferable) => !this.__buffers.has(transferable))\n                 *                     : transferables;\n                 *\n                 *                 return postMessage.call(this.port, message, filteredTransferables);\n                 *              };\n                 *         })(this.port.postMessage);\n                 *     }\n                 * }\n                 * ```\n                 */\n                const patchedAudioWorkletProcessor = isSupportingPostMessage\n                    ? 'AudioWorkletProcessor'\n                    : 'class extends AudioWorkletProcessor {__b=new WeakSet();constructor(){super();(p=>p.postMessage=(q=>(m,t)=>q.call(p,m,t?t.filter(u=>!this.__b.has(u)):t))(p.postMessage))(this.port)}}';\n                /*\n                 * Bug #170: Chrome and Edge do call process() with an array with empty channelData for each input if no input is connected.\n                 *\n                 * Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\n                 *\n                 * Bug #190: Safari doesn't throw an error when loading an unparsable module.\n                 *\n                 * This is the unminified version of the code used below:\n                 *\n                 * ```js\n                 * `${ importStatements };\n                 * ((AudioWorkletProcessor, registerProcessor) => {${ sourceWithoutImportStatements }\n                 * })(\n                 *     ${ patchedAudioWorkletProcessor },\n                 *     (name, processorCtor) => registerProcessor(name, class extends processorCtor {\n                 *\n                 *         __collectBuffers = (array) => {\n                 *             array.forEach((element) => this.__buffers.add(element.buffer));\n                 *         };\n                 *\n                 *         process (inputs, outputs, parameters) {\n                 *             inputs.forEach(this.__collectBuffers);\n                 *             outputs.forEach(this.__collectBuffers);\n                 *             this.__collectBuffers(Object.values(parameters));\n                 *\n                 *             return super.process(\n                 *                 (inputs.map((input) => input.some((channelData) => channelData.length === 0)) ? [ ] : input),\n                 *                 outputs,\n                 *                 parameters\n                 *             );\n                 *         }\n                 *\n                 *     })\n                 * );\n                 *\n                 * registerProcessor(`__sac${currentIndex}`, class extends AudioWorkletProcessor{\n                 *\n                 *     process () {\n                 *         return false;\n                 *     }\n                 *\n                 * })`\n                 * ```\n                 */\n                const memberDefinition = isSupportingPostMessage ? '' : '__c = (a) => a.forEach(e=>this.__b.add(e.buffer));';\n                const bufferRegistration = isSupportingPostMessage\n                    ? ''\n                    : 'i.forEach(this.__c);o.forEach(this.__c);this.__c(Object.values(p));';\n                const wrappedSource = `${importStatements};((AudioWorkletProcessor,registerProcessor)=>{${sourceWithoutImportStatements}\n})(${patchedAudioWorkletProcessor},(n,p)=>registerProcessor(n,class extends p{${memberDefinition}process(i,o,p){${bufferRegistration}return super.process(i.map(j=>j.some(k=>k.length===0)?[]:j),o,p)}}));registerProcessor('__sac${currentIndex}',class extends AudioWorkletProcessor{process(){return !1}})`;\n                const blob = new Blob([wrappedSource], { type: 'application/javascript; charset=utf-8' });\n                const url = URL.createObjectURL(blob);\n                return nativeContext.audioWorklet\n                    .addModule(url, options)\n                    .then(() => {\n                    if (isNativeOfflineAudioContext(nativeContext)) {\n                        return nativeContext;\n                    }\n                    // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n                    const backupOfflineAudioContext = getOrCreateBackupOfflineAudioContext(nativeContext);\n                    return backupOfflineAudioContext.audioWorklet.addModule(url, options).then(() => backupOfflineAudioContext);\n                })\n                    .then((nativeContextOrBackupOfflineAudioContext) => {\n                    if (nativeAudioWorkletNodeConstructor === null) {\n                        throw new SyntaxError();\n                    }\n                    try {\n                        // Bug #190: Safari doesn't throw an error when loading an unparsable module.\n                        new nativeAudioWorkletNodeConstructor(nativeContextOrBackupOfflineAudioContext, `__sac${currentIndex}`); // tslint:disable-line:no-unused-expression\n                    }\n                    catch {\n                        throw new SyntaxError();\n                    }\n                })\n                    .finally(() => URL.revokeObjectURL(url));\n            });\n        if (ongoingRequestsOfContext === undefined) {\n            ongoingRequests.set(context, new Map([[moduleURL, promise]]));\n        }\n        else {\n            ongoingRequestsOfContext.set(moduleURL, promise);\n        }\n        promise\n            .then(() => {\n            const updatedResolvedRequestsOfContext = resolvedRequests.get(context);\n            if (updatedResolvedRequestsOfContext === undefined) {\n                resolvedRequests.set(context, new Set([moduleURL]));\n            }\n            else {\n                updatedResolvedRequestsOfContext.add(moduleURL);\n            }\n        })\n            .finally(() => {\n            const updatedOngoingRequestsOfContext = ongoingRequests.get(context);\n            if (updatedOngoingRequestsOfContext !== undefined) {\n                updatedOngoingRequestsOfContext.delete(moduleURL);\n            }\n        });\n        return promise;\n    };\n};\n//# sourceMappingURL=add-audio-worklet-module.js.map","export const getValueForKey = (map, key) => {\n    const value = map.get(key);\n    if (value === undefined) {\n        throw new Error('A value with the given key could not be found.');\n    }\n    return value;\n};\n//# sourceMappingURL=get-value-for-key.js.map","export const pickElementFromSet = (set, predicate) => {\n    const matchingElements = Array.from(set).filter(predicate);\n    if (matchingElements.length > 1) {\n        throw Error('More than one element was found.');\n    }\n    if (matchingElements.length === 0) {\n        throw Error('No element was found.');\n    }\n    const [matchingElement] = matchingElements;\n    set.delete(matchingElement);\n    return matchingElement;\n};\n//# sourceMappingURL=pick-element-from-set.js.map","import { getValueForKey } from './get-value-for-key';\nimport { pickElementFromSet } from './pick-element-from-set';\nexport const deletePassiveInputConnectionToAudioNode = (passiveInputs, source, output, input) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input);\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\n//# sourceMappingURL=delete-passive-input-connection-to-audio-node.js.map","import { EVENT_LISTENERS } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getEventListenersOfAudioNode = (audioNode) => {\n    return getValueForKey(EVENT_LISTENERS, audioNode);\n};\n//# sourceMappingURL=get-event-listeners-of-audio-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToActive = (audioNode) => {\n    if (ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is already stored.');\n    }\n    ACTIVE_AUDIO_NODE_STORE.add(audioNode);\n    getEventListenersOfAudioNode(audioNode).forEach((eventListener) => eventListener(true));\n};\n//# sourceMappingURL=set-internal-state-to-active.js.map","export const isAudioWorkletNode = (audioNode) => {\n    return 'port' in audioNode;\n};\n//# sourceMappingURL=audio-worklet-node.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nimport { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const setInternalStateToPassive = (audioNode) => {\n    if (!ACTIVE_AUDIO_NODE_STORE.has(audioNode)) {\n        throw new Error('The AudioNode is not stored.');\n    }\n    ACTIVE_AUDIO_NODE_STORE.delete(audioNode);\n    getEventListenersOfAudioNode(audioNode).forEach((eventListener) => eventListener(false));\n};\n//# sourceMappingURL=set-internal-state-to-passive.js.map","import { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\n// Set the internalState of the audioNode to 'passive' if it is not an AudioWorkletNode and if it has no 'active' input connections.\nexport const setInternalStateToPassiveWhenNecessary = (audioNode, activeInputs) => {\n    if (!isAudioWorkletNode(audioNode) && activeInputs.every((connections) => connections.size === 0)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n//# sourceMappingURL=set-internal-state-to-passive-when-necessary.js.map","import { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nexport const createAddConnectionToAudioNode = (addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode) => {\n    const tailTimeTimeoutIds = new WeakMap();\n    return (source, destination, output, input, isOffline) => {\n        const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n        const { outputs } = getAudioNodeConnections(source);\n        const eventListeners = getEventListenersOfAudioNode(source);\n        const eventListener = (isActive) => {\n            const nativeDestinationAudioNode = getNativeAudioNode(destination);\n            const nativeSourceAudioNode = getNativeAudioNode(source);\n            if (isActive) {\n                const partialConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n                addActiveInputConnectionToAudioNode(activeInputs, source, partialConnection, false);\n                if (!isOffline && !isPartOfACycle(source)) {\n                    connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n                }\n                if (isPassiveAudioNode(destination)) {\n                    setInternalStateToActive(destination);\n                }\n            }\n            else {\n                const partialConnection = deleteActiveInputConnectionToAudioNode(activeInputs, source, output, input);\n                addPassiveInputConnectionToAudioNode(passiveInputs, input, partialConnection, false);\n                if (!isOffline && !isPartOfACycle(source)) {\n                    disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output, input);\n                }\n                const tailTime = getAudioNodeTailTime(destination);\n                if (tailTime === 0) {\n                    if (isActiveAudioNode(destination)) {\n                        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n                    }\n                }\n                else {\n                    const tailTimeTimeoutId = tailTimeTimeoutIds.get(destination);\n                    if (tailTimeTimeoutId !== undefined) {\n                        clearTimeout(tailTimeTimeoutId);\n                    }\n                    tailTimeTimeoutIds.set(destination, setTimeout(() => {\n                        if (isActiveAudioNode(destination)) {\n                            setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n                        }\n                    }, tailTime * 1000));\n                }\n            }\n        };\n        if (insertElementInSet(outputs, [destination, output, input], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output && outputConnection[2] === input, true)) {\n            eventListeners.add(eventListener);\n            if (isActiveAudioNode(source)) {\n                addActiveInputConnectionToAudioNode(activeInputs, source, [output, input, eventListener], true);\n            }\n            else {\n                addPassiveInputConnectionToAudioNode(passiveInputs, input, [source, output, eventListener], true);\n            }\n            return true;\n        }\n        return false;\n    };\n};\n//# sourceMappingURL=add-connection-to-audio-node.js.map","export const createAddPassiveInputConnectionToAudioNode = (insertElementInSet) => {\n    return (passiveInputs, input, [source, output, eventListener], ignoreDuplicates) => {\n        const passiveInputConnections = passiveInputs.get(source);\n        if (passiveInputConnections === undefined) {\n            passiveInputs.set(source, new Set([[output, input, eventListener]]));\n        }\n        else {\n            insertElementInSet(passiveInputConnections, [output, input, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output && passiveInputConnection[1] === input, ignoreDuplicates);\n        }\n    };\n};\n//# sourceMappingURL=add-passive-input-connection-to-audio-node.js.map","export const createAddSilentConnection = (createNativeGainNode) => {\n    return (nativeContext, nativeAudioScheduledSourceNode) => {\n        const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        nativeAudioScheduledSourceNode.connect(nativeGainNode).connect(nativeContext.destination);\n        const disconnect = () => {\n            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnect);\n            nativeAudioScheduledSourceNode.disconnect(nativeGainNode);\n            nativeGainNode.disconnect();\n        };\n        nativeAudioScheduledSourceNode.addEventListener('ended', disconnect);\n    };\n};\n//# sourceMappingURL=add-silent-connection.js.map","export const createAddUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes) => {\n    return (nativeContext, audioWorkletNode) => {\n        getUnrenderedAudioWorkletNodes(nativeContext).add(audioWorkletNode);\n    };\n};\n//# sourceMappingURL=add-unrendered-audio-worklet-node.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    fftSize: 2048,\n    maxDecibels: -30,\n    minDecibels: -100,\n    smoothingTimeConstant: 0.8\n};\nexport const createAnalyserNodeConstructor = (audionNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class AnalyserNode extends audionNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAnalyserNode = createNativeAnalyserNode(nativeContext, mergedOptions);\n            const analyserNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createAnalyserNodeRenderer() : null));\n            super(context, false, nativeAnalyserNode, analyserNodeRenderer);\n            this._nativeAnalyserNode = nativeAnalyserNode;\n        }\n        get fftSize() {\n            return this._nativeAnalyserNode.fftSize;\n        }\n        set fftSize(value) {\n            this._nativeAnalyserNode.fftSize = value;\n        }\n        get frequencyBinCount() {\n            return this._nativeAnalyserNode.frequencyBinCount;\n        }\n        get maxDecibels() {\n            return this._nativeAnalyserNode.maxDecibels;\n        }\n        set maxDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const maxDecibels = this._nativeAnalyserNode.maxDecibels;\n            this._nativeAnalyserNode.maxDecibels = value;\n            if (!(value > this._nativeAnalyserNode.minDecibels)) {\n                this._nativeAnalyserNode.maxDecibels = maxDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get minDecibels() {\n            return this._nativeAnalyserNode.minDecibels;\n        }\n        set minDecibels(value) {\n            // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n            const minDecibels = this._nativeAnalyserNode.minDecibels;\n            this._nativeAnalyserNode.minDecibels = value;\n            if (!(this._nativeAnalyserNode.maxDecibels > value)) {\n                this._nativeAnalyserNode.minDecibels = minDecibels;\n                throw createIndexSizeError();\n            }\n        }\n        get smoothingTimeConstant() {\n            return this._nativeAnalyserNode.smoothingTimeConstant;\n        }\n        set smoothingTimeConstant(value) {\n            this._nativeAnalyserNode.smoothingTimeConstant = value;\n        }\n        getByteFrequencyData(array) {\n            this._nativeAnalyserNode.getByteFrequencyData(array);\n        }\n        getByteTimeDomainData(array) {\n            this._nativeAnalyserNode.getByteTimeDomainData(array);\n        }\n        getFloatFrequencyData(array) {\n            this._nativeAnalyserNode.getFloatFrequencyData(array);\n        }\n        getFloatTimeDomainData(array) {\n            this._nativeAnalyserNode.getFloatTimeDomainData(array);\n        }\n    };\n};\n//# sourceMappingURL=analyser-node-constructor.js.map","export const isOwnedByContext = (nativeAudioNode, nativeContext) => {\n    return nativeAudioNode.context === nativeContext;\n};\n//# sourceMappingURL=is-owned-by-context.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAnalyserNodeRendererFactory = (createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAnalyserNodes = new WeakMap();\n        const createAnalyserNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAnalyserNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAnalyserNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAnalyserNodeIsOwnedByContext = isOwnedByContext(nativeAnalyserNode, nativeOfflineAudioContext);\n            if (!nativeAnalyserNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAnalyserNode.channelCount,\n                    channelCountMode: nativeAnalyserNode.channelCountMode,\n                    channelInterpretation: nativeAnalyserNode.channelInterpretation,\n                    fftSize: nativeAnalyserNode.fftSize,\n                    maxDecibels: nativeAnalyserNode.maxDecibels,\n                    minDecibels: nativeAnalyserNode.minDecibels,\n                    smoothingTimeConstant: nativeAnalyserNode.smoothingTimeConstant\n                };\n                nativeAnalyserNode = createNativeAnalyserNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAnalyserNodes.set(nativeOfflineAudioContext, nativeAnalyserNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAnalyserNode);\n            return nativeAnalyserNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAnalyserNode = renderedNativeAnalyserNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAnalyserNode !== undefined) {\n                    return Promise.resolve(renderedNativeAnalyserNode);\n                }\n                return createAnalyserNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=analyser-node-renderer-factory.js.map","export const testAudioBufferCopyChannelMethodsOutOfBoundsSupport = (nativeAudioBuffer) => {\n    try {\n        nativeAudioBuffer.copyToChannel(new Float32Array(1), 0, -1);\n    }\n    catch {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=test-audio-buffer-copy-channel-methods-out-of-bounds-support.js.map","export const createIndexSizeError = () => new DOMException('', 'IndexSizeError');\n//# sourceMappingURL=index-size-error.js.map","import { createIndexSizeError } from '../factories/index-size-error';\nexport const wrapAudioBufferGetChannelDataMethod = (audioBuffer) => {\n    audioBuffer.getChannelData = ((getChannelData) => {\n        return (channel) => {\n            try {\n                return getChannelData.call(audioBuffer, channel);\n            }\n            catch (err) {\n                if (err.code === 12) {\n                    throw createIndexSizeError();\n                }\n                throw err;\n            }\n        };\n    })(audioBuffer.getChannelData);\n};\n//# sourceMappingURL=wrap-audio-buffer-get-channel-data-method.js.map","import { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from '../helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createAudioBufferConstructor = (audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, testNativeAudioBufferConstructorSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    let nativeOfflineAudioContext = null;\n    return class AudioBuffer {\n        constructor(options) {\n            if (nativeOfflineAudioContextConstructor === null) {\n                throw new Error('Missing the native OfflineAudioContext constructor.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            if (nativeOfflineAudioContext === null) {\n                nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n            }\n            /*\n             * Bug #99: Firefox does not throw a NotSupportedError when the numberOfChannels is zero. But it only does it when using the\n             * factory function. But since Firefox also supports the constructor everything should be fine.\n             */\n            const audioBuffer = nativeAudioBufferConstructor !== null &&\n                cacheTestResult(testNativeAudioBufferConstructorSupport, testNativeAudioBufferConstructorSupport)\n                ? new nativeAudioBufferConstructor({ length, numberOfChannels, sampleRate })\n                : nativeOfflineAudioContext.createBuffer(numberOfChannels, length, sampleRate);\n            // Bug #99: Safari does not throw an error when the numberOfChannels is zero.\n            if (audioBuffer.numberOfChannels === 0) {\n                throw createNotSupportedError();\n            }\n            // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n            // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n            if (typeof audioBuffer.copyFromChannel !== 'function') {\n                wrapAudioBufferCopyChannelMethods(audioBuffer);\n                wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n            }\n            else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n            }\n            audioBufferStore.add(audioBuffer);\n            /*\n             * This does violate all good pratices but it is necessary to allow this AudioBuffer to be used with native\n             * (Offline)AudioContexts.\n             */\n            return audioBuffer;\n        }\n        static [Symbol.hasInstance](instance) {\n            return ((instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === AudioBuffer.prototype) ||\n                audioBufferStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=audio-buffer-constructor.js.map","export const MOST_NEGATIVE_SINGLE_FLOAT = -3.4028234663852886e38;\nexport const MOST_POSITIVE_SINGLE_FLOAT = -MOST_NEGATIVE_SINGLE_FLOAT;\n//# sourceMappingURL=constants.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isActiveAudioNode = (audioNode) => ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n//# sourceMappingURL=is-active-audio-node.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    // Bug #149: Safari does not yet support the detune AudioParam.\n    loop: false,\n    loopEnd: 0,\n    loopStart: 0,\n    playbackRate: 1\n};\nexport const createAudioBufferSourceNodeConstructor = (audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class AudioBufferSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const audioBufferSourceNodeRenderer = ((isOffline ? createAudioBufferSourceNodeRenderer() : null));\n            super(context, false, nativeAudioBufferSourceNode, audioBufferSourceNodeRenderer);\n            this._audioBufferSourceNodeRenderer = audioBufferSourceNodeRenderer;\n            this._isBufferNullified = false;\n            this._isBufferSet = mergedOptions.buffer !== null;\n            this._nativeAudioBufferSourceNode = nativeAudioBufferSourceNode;\n            this._onended = null;\n            // Bug #73: Safari does not export the correct values for maxValue and minValue.\n            this._playbackRate = createAudioParam(this, isOffline, nativeAudioBufferSourceNode.playbackRate, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeAudioBufferSourceNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeAudioBufferSourceNode.buffer = value;\n            // Bug #72: Only Chrome & Edge do not allow to reassign the buffer yet.\n            if (value !== null) {\n                if (this._isBufferSet) {\n                    throw createInvalidStateError();\n                }\n                this._isBufferSet = true;\n            }\n        }\n        get loop() {\n            return this._nativeAudioBufferSourceNode.loop;\n        }\n        set loop(value) {\n            this._nativeAudioBufferSourceNode.loop = value;\n        }\n        get loopEnd() {\n            return this._nativeAudioBufferSourceNode.loopEnd;\n        }\n        set loopEnd(value) {\n            this._nativeAudioBufferSourceNode.loopEnd = value;\n        }\n        get loopStart() {\n            return this._nativeAudioBufferSourceNode.loopStart;\n        }\n        set loopStart(value) {\n            this._nativeAudioBufferSourceNode.loopStart = value;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeAudioBufferSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeAudioBufferSourceNode.onended;\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n        get playbackRate() {\n            return this._playbackRate;\n        }\n        start(when = 0, offset = 0, duration) {\n            this._nativeAudioBufferSourceNode.start(when, offset, duration);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.start = duration === undefined ? [when, offset] : [when, offset, duration];\n            }\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeAudioBufferSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n                this._nativeAudioBufferSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeAudioBufferSourceNode.stop(when);\n            if (this._audioBufferSourceNodeRenderer !== null) {\n                this._audioBufferSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=audio-buffer-source-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createAudioBufferSourceNodeRendererFactory = (connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioBufferSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createAudioBufferSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeAudioBufferSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeAudioBufferSourceNodeIsOwnedByContext = isOwnedByContext(nativeAudioBufferSourceNode, nativeOfflineAudioContext);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeAudioBufferSourceNode.buffer,\n                    channelCount: nativeAudioBufferSourceNode.channelCount,\n                    channelCountMode: nativeAudioBufferSourceNode.channelCountMode,\n                    channelInterpretation: nativeAudioBufferSourceNode.channelInterpretation,\n                    // Bug #149: Safari does not yet support the detune AudioParam.\n                    loop: nativeAudioBufferSourceNode.loop,\n                    loopEnd: nativeAudioBufferSourceNode.loopEnd,\n                    loopStart: nativeAudioBufferSourceNode.loopStart,\n                    playbackRate: nativeAudioBufferSourceNode.playbackRate.value\n                };\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeAudioBufferSourceNode.start(...start);\n                }\n                if (stop !== null) {\n                    nativeAudioBufferSourceNode.stop(stop);\n                }\n            }\n            renderedNativeAudioBufferSourceNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            if (!nativeAudioBufferSourceNodeIsOwnedByContext) {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await renderAutomation(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            else {\n                // Bug #149: Safari does not yet support the detune AudioParam.\n                await connectAudioParam(nativeOfflineAudioContext, proxy.playbackRate, nativeAudioBufferSourceNode.playbackRate);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioBufferSourceNode);\n            return nativeAudioBufferSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioBufferSourceNode = renderedNativeAudioBufferSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioBufferSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioBufferSourceNode);\n                }\n                return createAudioBufferSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=audio-buffer-source-node-renderer-factory.js.map","export const isAudioBufferSourceNode = (audioNode) => {\n    return 'playbackRate' in audioNode;\n};\n//# sourceMappingURL=audio-buffer-source-node.js.map","export const isBiquadFilterNode = (audioNode) => {\n    return 'frequency' in audioNode && 'gain' in audioNode;\n};\n//# sourceMappingURL=biquad-filter-node.js.map","export const isConstantSourceNode = (audioNode) => {\n    return 'offset' in audioNode;\n};\n//# sourceMappingURL=constant-source-node.js.map","export const isGainNode = (audioNode) => {\n    return !('frequency' in audioNode) && 'gain' in audioNode;\n};\n//# sourceMappingURL=gain-node.js.map","export const isOscillatorNode = (audioNode) => {\n    return 'detune' in audioNode && 'frequency' in audioNode && !('gain' in audioNode);\n};\n//# sourceMappingURL=oscillator-node.js.map","export const isStereoPannerNode = (audioNode) => {\n    return 'pan' in audioNode;\n};\n//# sourceMappingURL=stereo-panner-node.js.map","import { AUDIO_NODE_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioNodeConnections = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_CONNECTIONS_STORE, audioNode);\n};\n//# sourceMappingURL=get-audio-node-connections.js.map","import { AUDIO_PARAM_CONNECTIONS_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioParamConnections = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_CONNECTIONS_STORE, audioParam);\n};\n//# sourceMappingURL=get-audio-param-connections.js.map","import { isAudioBufferSourceNode } from '../guards/audio-buffer-source-node';\nimport { isAudioWorkletNode } from '../guards/audio-worklet-node';\nimport { isBiquadFilterNode } from '../guards/biquad-filter-node';\nimport { isConstantSourceNode } from '../guards/constant-source-node';\nimport { isGainNode } from '../guards/gain-node';\nimport { isOscillatorNode } from '../guards/oscillator-node';\nimport { isStereoPannerNode } from '../guards/stereo-panner-node';\nimport { getAudioNodeConnections } from './get-audio-node-connections';\nimport { getAudioParamConnections } from './get-audio-param-connections';\nimport { isActiveAudioNode } from './is-active-audio-node';\nimport { setInternalStateToPassive } from './set-internal-state-to-passive';\nexport const deactivateActiveAudioNodeInputConnections = (audioNode, trace) => {\n    const { activeInputs } = getAudioNodeConnections(audioNode);\n    activeInputs.forEach((connections) => connections.forEach(([source]) => {\n        if (!trace.includes(audioNode)) {\n            deactivateActiveAudioNodeInputConnections(source, [...trace, audioNode]);\n        }\n    }));\n    const audioParams = isAudioBufferSourceNode(audioNode)\n        ? [\n            // Bug #149: Safari does not yet support the detune AudioParam.\n            audioNode.playbackRate\n        ]\n        : isAudioWorkletNode(audioNode)\n            ? Array.from(audioNode.parameters.values())\n            : isBiquadFilterNode(audioNode)\n                ? [audioNode.Q, audioNode.detune, audioNode.frequency, audioNode.gain]\n                : isConstantSourceNode(audioNode)\n                    ? [audioNode.offset]\n                    : isGainNode(audioNode)\n                        ? [audioNode.gain]\n                        : isOscillatorNode(audioNode)\n                            ? [audioNode.detune, audioNode.frequency]\n                            : isStereoPannerNode(audioNode)\n                                ? [audioNode.pan]\n                                : [];\n    for (const audioParam of audioParams) {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        if (audioParamConnections !== undefined) {\n            audioParamConnections.activeInputs.forEach(([source]) => deactivateActiveAudioNodeInputConnections(source, trace));\n        }\n    }\n    if (isActiveAudioNode(audioNode)) {\n        setInternalStateToPassive(audioNode);\n    }\n};\n//# sourceMappingURL=deactivate-active-audio-node-input-connections.js.map","import { deactivateActiveAudioNodeInputConnections } from './deactivate-active-audio-node-input-connections';\nexport const deactivateAudioGraph = (context) => {\n    deactivateActiveAudioNodeInputConnections(context.destination, []);\n};\n//# sourceMappingURL=deactivate-audio-graph.js.map","export const isValidLatencyHint = (latencyHint) => {\n    return (latencyHint === undefined ||\n        typeof latencyHint === 'number' ||\n        (typeof latencyHint === 'string' && (latencyHint === 'balanced' || latencyHint === 'interactive' || latencyHint === 'playback')));\n};\n//# sourceMappingURL=is-valid-latency-hint.js.map","import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { isValidLatencyHint } from '../helpers/is-valid-latency-hint';\nexport const createAudioContextConstructor = (baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor) => {\n    return class AudioContext extends baseAudioContextConstructor {\n        constructor(options = {}) {\n            if (nativeAudioContextConstructor === null) {\n                throw new Error('Missing the native AudioContext constructor.');\n            }\n            let nativeAudioContext;\n            try {\n                nativeAudioContext = new nativeAudioContextConstructor(options);\n            }\n            catch (err) {\n                // Bug #192 Safari does throw a SyntaxError if the sampleRate is not supported.\n                if (err.code === 12 && err.message === 'sampleRate is not in range') {\n                    throw createNotSupportedError();\n                }\n                throw err;\n            }\n            // Bug #131 Safari returns null when there are four other AudioContexts running already.\n            if (nativeAudioContext === null) {\n                throw createUnknownError();\n            }\n            // Bug #51 Only Chrome and Edge throw an error if the given latencyHint is invalid.\n            if (!isValidLatencyHint(options.latencyHint)) {\n                throw new TypeError(`The provided value '${options.latencyHint}' is not a valid enum value of type AudioContextLatencyCategory.`);\n            }\n            // Bug #150 Safari does not support setting the sampleRate.\n            if (options.sampleRate !== undefined && nativeAudioContext.sampleRate !== options.sampleRate) {\n                throw createNotSupportedError();\n            }\n            super(nativeAudioContext, 2);\n            const { latencyHint } = options;\n            const { sampleRate } = nativeAudioContext;\n            // @todo The values for 'balanced', 'interactive' and 'playback' are just copied from Chrome's implementation.\n            this._baseLatency =\n                typeof nativeAudioContext.baseLatency === 'number'\n                    ? nativeAudioContext.baseLatency\n                    : latencyHint === 'balanced'\n                        ? 512 / sampleRate\n                        : latencyHint === 'interactive' || latencyHint === undefined\n                            ? 256 / sampleRate\n                            : latencyHint === 'playback'\n                                ? 1024 / sampleRate\n                                : /*\n                                   * @todo The min (256) and max (16384) values are taken from the allowed bufferSize values of a\n                                   * ScriptProcessorNode.\n                                   */\n                                    (Math.max(2, Math.min(128, Math.round((latencyHint * sampleRate) / 128))) * 128) / sampleRate;\n            this._nativeAudioContext = nativeAudioContext;\n            // Bug #188: Safari will set the context's state to 'interrupted' in case the user switches tabs.\n            if (nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                this._nativeGainNode = nativeAudioContext.createGain();\n                this._nativeOscillatorNode = nativeAudioContext.createOscillator();\n                this._nativeGainNode.gain.value = 1e-37;\n                this._nativeOscillatorNode.connect(this._nativeGainNode).connect(nativeAudioContext.destination);\n                this._nativeOscillatorNode.start();\n            }\n            else {\n                this._nativeGainNode = null;\n                this._nativeOscillatorNode = null;\n            }\n            this._state = null;\n            /*\n             * Bug #34: Chrome and Edge pretend to be running right away, but fire an onstatechange event when the state actually changes\n             * to 'running'.\n             */\n            if (nativeAudioContext.state === 'running') {\n                this._state = 'suspended';\n                const revokeState = () => {\n                    if (this._state === 'suspended') {\n                        this._state = null;\n                    }\n                    nativeAudioContext.removeEventListener('statechange', revokeState);\n                };\n                nativeAudioContext.addEventListener('statechange', revokeState);\n            }\n        }\n        get baseLatency() {\n            return this._baseLatency;\n        }\n        get state() {\n            return this._state !== null ? this._state : this._nativeAudioContext.state;\n        }\n        close() {\n            // Bug #35: Firefox does not throw an error if the AudioContext was closed before.\n            if (this.state === 'closed') {\n                return this._nativeAudioContext.close().then(() => {\n                    throw createInvalidStateError();\n                });\n            }\n            // Bug #34: If the state was set to suspended before it should be revoked now.\n            if (this._state === 'suspended') {\n                this._state = null;\n            }\n            return this._nativeAudioContext.close().then(() => {\n                if (this._nativeGainNode !== null && this._nativeOscillatorNode !== null) {\n                    this._nativeOscillatorNode.stop();\n                    this._nativeGainNode.disconnect();\n                    this._nativeOscillatorNode.disconnect();\n                }\n                deactivateAudioGraph(this);\n            });\n        }\n        createMediaElementSource(mediaElement) {\n            return new mediaElementAudioSourceNodeConstructor(this, { mediaElement });\n        }\n        createMediaStreamDestination() {\n            return new mediaStreamAudioDestinationNodeConstructor(this);\n        }\n        createMediaStreamSource(mediaStream) {\n            return new mediaStreamAudioSourceNodeConstructor(this, { mediaStream });\n        }\n        createMediaStreamTrackSource(mediaStreamTrack) {\n            return new mediaStreamTrackAudioSourceNodeConstructor(this, { mediaStreamTrack });\n        }\n        resume() {\n            if (this._state === 'suspended') {\n                return new Promise((resolve, reject) => {\n                    const resolvePromise = () => {\n                        this._nativeAudioContext.removeEventListener('statechange', resolvePromise);\n                        if (this._nativeAudioContext.state === 'running') {\n                            resolve();\n                        }\n                        else {\n                            this.resume().then(resolve, reject);\n                        }\n                    };\n                    this._nativeAudioContext.addEventListener('statechange', resolvePromise);\n                });\n            }\n            return this._nativeAudioContext.resume().catch((err) => {\n                // Bug #55: Chrome and Edge do throw an InvalidAccessError instead of an InvalidStateError.\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined || err.code === 15) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n        suspend() {\n            return this._nativeAudioContext.suspend().catch((err) => {\n                // Bug #56: Safari invokes the catch handler but without an error.\n                if (err === undefined) {\n                    throw createInvalidStateError();\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=audio-context-constructor.js.map","export const createAudioDestinationNodeConstructor = (audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode) => {\n    return class AudioDestinationNode extends audioNodeConstructor {\n        constructor(context, channelCount) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const nativeAudioDestinationNode = createNativeAudioDestinationNode(nativeContext, channelCount, isOffline);\n            const audioDestinationNodeRenderer = ((isOffline ? createAudioDestinationNodeRenderer(renderInputsOfAudioNode) : null));\n            super(context, false, nativeAudioDestinationNode, audioDestinationNodeRenderer);\n            this._isNodeOfNativeOfflineAudioContext = isOffline;\n            this._nativeAudioDestinationNode = nativeAudioDestinationNode;\n        }\n        get channelCount() {\n            return this._nativeAudioDestinationNode.channelCount;\n        }\n        set channelCount(value) {\n            // Bug #52: Chrome, Edge & Safari do not throw an exception at all.\n            // Bug #54: Firefox does throw an IndexSizeError.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n            if (value > this._nativeAudioDestinationNode.maxChannelCount) {\n                throw createIndexSizeError();\n            }\n            this._nativeAudioDestinationNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioDestinationNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            // Bug #53: No browser does throw an exception yet.\n            if (this._isNodeOfNativeOfflineAudioContext) {\n                throw createInvalidStateError();\n            }\n            this._nativeAudioDestinationNode.channelCountMode = value;\n        }\n        get maxChannelCount() {\n            return this._nativeAudioDestinationNode.maxChannelCount;\n        }\n    };\n};\n//# sourceMappingURL=audio-destination-node-constructor.js.map","export const createAudioDestinationNodeRenderer = (renderInputsOfAudioNode) => {\n    const renderedNativeAudioDestinationNodes = new WeakMap();\n    const createAudioDestinationNode = async (proxy, nativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeOfflineAudioContext.destination;\n        renderedNativeAudioDestinationNodes.set(nativeOfflineAudioContext, nativeAudioDestinationNode);\n        await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioDestinationNode);\n        return nativeAudioDestinationNode;\n    };\n    return {\n        render(proxy, nativeOfflineAudioContext) {\n            const renderedNativeAudioDestinationNode = renderedNativeAudioDestinationNodes.get(nativeOfflineAudioContext);\n            if (renderedNativeAudioDestinationNode !== undefined) {\n                return Promise.resolve(renderedNativeAudioDestinationNode);\n            }\n            return createAudioDestinationNode(proxy, nativeOfflineAudioContext);\n        }\n    };\n};\n//# sourceMappingURL=audio-destination-node-renderer-factory.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nexport const createAudioListenerFactory = (createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors) => {\n    return (context, nativeContext) => {\n        const nativeListener = nativeContext.listener;\n        // Bug #117: Only Chrome & Edge support the new interface already.\n        const createFakeAudioParams = () => {\n            const buffer = new Float32Array(1);\n            const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: 9\n            });\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            let isScriptProcessorNodeCreated = false;\n            let lastOrientation = [0, 0, -1, 0, 1, 0];\n            let lastPosition = [0, 0, 0];\n            const createScriptProcessorNode = () => {\n                if (isScriptProcessorNodeCreated) {\n                    return;\n                }\n                isScriptProcessorNodeCreated = true;\n                const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 9, 0);\n                // tslint:disable-next-line:deprecation\n                scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n                    const orientation = [\n                        getFirstSample(inputBuffer, buffer, 0),\n                        getFirstSample(inputBuffer, buffer, 1),\n                        getFirstSample(inputBuffer, buffer, 2),\n                        getFirstSample(inputBuffer, buffer, 3),\n                        getFirstSample(inputBuffer, buffer, 4),\n                        getFirstSample(inputBuffer, buffer, 5)\n                    ];\n                    if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                        nativeListener.setOrientation(...orientation); // tslint:disable-line:deprecation\n                        lastOrientation = orientation;\n                    }\n                    const positon = [\n                        getFirstSample(inputBuffer, buffer, 6),\n                        getFirstSample(inputBuffer, buffer, 7),\n                        getFirstSample(inputBuffer, buffer, 8)\n                    ];\n                    if (positon.some((value, index) => value !== lastPosition[index])) {\n                        nativeListener.setPosition(...positon); // tslint:disable-line:deprecation\n                        lastPosition = positon;\n                    }\n                };\n                channelMergerNode.connect(scriptProcessorNode);\n            };\n            const createSetOrientation = (index) => (value) => {\n                if (value !== lastOrientation[index]) {\n                    lastOrientation[index] = value;\n                    nativeListener.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n                }\n            };\n            const createSetPosition = (index) => (value) => {\n                if (value !== lastPosition[index]) {\n                    lastPosition[index] = value;\n                    nativeListener.setPosition(...lastPosition); // tslint:disable-line:deprecation\n                }\n            };\n            const createFakeAudioParam = (input, initialValue, setValue) => {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: initialValue\n                });\n                constantSourceNode.connect(channelMergerNode, 0, input);\n                // @todo This should be stopped when the context is closed.\n                constantSourceNode.start();\n                Object.defineProperty(constantSourceNode.offset, 'defaultValue', {\n                    get() {\n                        return initialValue;\n                    }\n                });\n                /*\n                 * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and\n                 * minValue for GainNodes.\n                 */\n                const audioParam = createAudioParam({ context }, isOffline, constantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n                overwriteAccessors(audioParam, 'value', (get) => () => get.call(audioParam), (set) => (value) => {\n                    try {\n                        set.call(audioParam, value);\n                    }\n                    catch (err) {\n                        if (err.code !== 9) {\n                            throw err;\n                        }\n                    }\n                    createScriptProcessorNode();\n                    if (isOffline) {\n                        // Bug #117: Using setOrientation() and setPosition() doesn't work with an OfflineAudioContext.\n                        setValue(value);\n                    }\n                });\n                audioParam.cancelAndHoldAtTime = ((cancelAndHoldAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = cancelAndHoldAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.cancelAndHoldAtTime);\n                audioParam.cancelScheduledValues = ((cancelScheduledValues) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = cancelScheduledValues.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.cancelScheduledValues);\n                audioParam.exponentialRampToValueAtTime = ((exponentialRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = exponentialRampToValueAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.exponentialRampToValueAtTime);\n                audioParam.linearRampToValueAtTime = ((linearRampToValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = linearRampToValueAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.linearRampToValueAtTime);\n                audioParam.setTargetAtTime = ((setTargetAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = setTargetAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.setTargetAtTime);\n                audioParam.setValueAtTime = ((setValueAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = setValueAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.setValueAtTime);\n                audioParam.setValueCurveAtTime = ((setValueCurveAtTime) => {\n                    if (isOffline) {\n                        return () => {\n                            throw createNotSupportedError();\n                        };\n                    }\n                    return (...args) => {\n                        const value = setValueCurveAtTime.apply(audioParam, args);\n                        createScriptProcessorNode();\n                        return value;\n                    };\n                })(audioParam.setValueCurveAtTime);\n                return audioParam;\n            };\n            return {\n                forwardX: createFakeAudioParam(0, 0, createSetOrientation(0)),\n                forwardY: createFakeAudioParam(1, 0, createSetOrientation(1)),\n                forwardZ: createFakeAudioParam(2, -1, createSetOrientation(2)),\n                positionX: createFakeAudioParam(6, 0, createSetPosition(0)),\n                positionY: createFakeAudioParam(7, 0, createSetPosition(1)),\n                positionZ: createFakeAudioParam(8, 0, createSetPosition(2)),\n                upX: createFakeAudioParam(3, 0, createSetOrientation(3)),\n                upY: createFakeAudioParam(4, 1, createSetOrientation(4)),\n                upZ: createFakeAudioParam(5, 0, createSetOrientation(5))\n            };\n        };\n        const { forwardX, forwardY, forwardZ, positionX, positionY, positionZ, upX, upY, upZ } = nativeListener.forwardX === undefined ? createFakeAudioParams() : nativeListener;\n        return {\n            get forwardX() {\n                return forwardX;\n            },\n            get forwardY() {\n                return forwardY;\n            },\n            get forwardZ() {\n                return forwardZ;\n            },\n            get positionX() {\n                return positionX;\n            },\n            get positionY() {\n                return positionY;\n            },\n            get positionZ() {\n                return positionZ;\n            },\n            get upX() {\n                return upX;\n            },\n            get upY() {\n                return upY;\n            },\n            get upZ() {\n                return upZ;\n            }\n        };\n    };\n};\n//# sourceMappingURL=audio-listener-factory.js.map","export const isAudioNode = (audioNodeOrAudioParam) => {\n    return 'context' in audioNodeOrAudioParam;\n};\n//# sourceMappingURL=audio-node.js.map","import { isAudioNode } from './audio-node';\nexport const isAudioNodeOutputConnection = (outputConnection) => {\n    return isAudioNode(outputConnection[0]);\n};\n//# sourceMappingURL=audio-node-output-connection.js.map","export const insertElementInSet = (set, element, predicate, ignoreDuplicates) => {\n    for (const lmnt of set) {\n        if (predicate(lmnt)) {\n            if (ignoreDuplicates) {\n                return false;\n            }\n            throw Error('The set contains at least one similar element.');\n        }\n    }\n    set.add(element);\n    return true;\n};\n//# sourceMappingURL=insert-element-in-set.js.map","import { insertElementInSet } from './insert-element-in-set';\nexport const addActiveInputConnectionToAudioParam = (activeInputs, source, [output, eventListener], ignoreDuplicates) => {\n    insertElementInSet(activeInputs, [source, output, eventListener], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output, ignoreDuplicates);\n};\n//# sourceMappingURL=add-active-input-connection-to-audio-param.js.map","import { insertElementInSet } from './insert-element-in-set';\nexport const addPassiveInputConnectionToAudioParam = (passiveInputs, [source, output, eventListener], ignoreDuplicates) => {\n    const passiveInputConnections = passiveInputs.get(source);\n    if (passiveInputConnections === undefined) {\n        passiveInputs.set(source, new Set([[output, eventListener]]));\n    }\n    else {\n        insertElementInSet(passiveInputConnections, [output, eventListener], (passiveInputConnection) => passiveInputConnection[0] === output, ignoreDuplicates);\n    }\n};\n//# sourceMappingURL=add-passive-input-connection-to-audio-param.js.map","export const isNativeAudioNodeFaker = (nativeAudioNodeOrNativeAudioNodeFaker) => {\n    return 'inputs' in nativeAudioNodeOrNativeAudioNodeFaker;\n};\n//# sourceMappingURL=native-audio-node-faker.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const connectNativeAudioNodeToNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        const fakeNativeDestinationAudioNode = nativeDestinationAudioNode.inputs[input];\n        nativeSourceAudioNode.connect(fakeNativeDestinationAudioNode, output, 0);\n        return [fakeNativeDestinationAudioNode, output, 0];\n    }\n    nativeSourceAudioNode.connect(nativeDestinationAudioNode, output, input);\n    return [nativeDestinationAudioNode, output, input];\n};\n//# sourceMappingURL=connect-native-audio-node-to-native-audio-node.js.map","export const deleteActiveInputConnection = (activeInputConnections, source, output) => {\n    for (const activeInputConnection of activeInputConnections) {\n        if (activeInputConnection[0] === source && activeInputConnection[1] === output) {\n            activeInputConnections.delete(activeInputConnection);\n            return activeInputConnection;\n        }\n    }\n    return null;\n};\n//# sourceMappingURL=delete-active-input-connection.js.map","import { pickElementFromSet } from './pick-element-from-set';\nexport const deleteActiveInputConnectionToAudioParam = (activeInputs, source, output) => {\n    return pickElementFromSet(activeInputs, (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);\n};\n//# sourceMappingURL=delete-active-input-connection-to-audio-param.js.map","import { getEventListenersOfAudioNode } from './get-event-listeners-of-audio-node';\nexport const deleteEventListenerOfAudioNode = (audioNode, eventListener) => {\n    const eventListeners = getEventListenersOfAudioNode(audioNode);\n    if (!eventListeners.delete(eventListener)) {\n        throw new Error('Missing the expected event listener.');\n    }\n};\n//# sourceMappingURL=delete-event-listeners-of-audio-node.js.map","import { getValueForKey } from './get-value-for-key';\nimport { pickElementFromSet } from './pick-element-from-set';\nexport const deletePassiveInputConnectionToAudioParam = (passiveInputs, source, output) => {\n    const passiveInputConnections = getValueForKey(passiveInputs, source);\n    const matchingConnection = pickElementFromSet(passiveInputConnections, (passiveInputConnection) => passiveInputConnection[0] === output);\n    if (passiveInputConnections.size === 0) {\n        passiveInputs.delete(source);\n    }\n    return matchingConnection;\n};\n//# sourceMappingURL=delete-passive-input-connection-to-audio-param.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nexport const disconnectNativeAudioNodeFromNativeAudioNode = (nativeSourceAudioNode, nativeDestinationAudioNode, output, input) => {\n    if (isNativeAudioNodeFaker(nativeDestinationAudioNode)) {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode.inputs[input], output, 0);\n    }\n    else {\n        nativeSourceAudioNode.disconnect(nativeDestinationAudioNode, output, input);\n    }\n};\n//# sourceMappingURL=disconnect-native-audio-node-from-native-audio-node.js.map","import { AUDIO_NODE_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioNode = (audioNode) => {\n    return getValueForKey(AUDIO_NODE_STORE, audioNode);\n};\n//# sourceMappingURL=get-native-audio-node.js.map","import { AUDIO_PARAM_STORE } from '../globals';\nimport { getValueForKey } from './get-value-for-key';\nexport const getNativeAudioParam = (audioParam) => {\n    return getValueForKey(AUDIO_PARAM_STORE, audioParam);\n};\n//# sourceMappingURL=get-native-audio-param.js.map","import { CYCLE_COUNTERS } from '../globals';\nexport const isPartOfACycle = (audioNode) => {\n    return CYCLE_COUNTERS.has(audioNode);\n};\n//# sourceMappingURL=is-part-of-a-cycle.js.map","import { ACTIVE_AUDIO_NODE_STORE } from '../globals';\nexport const isPassiveAudioNode = (audioNode) => {\n    return !ACTIVE_AUDIO_NODE_STORE.has(audioNode);\n};\n//# sourceMappingURL=is-passive-audio-node.js.map","export const testAudioNodeDisconnectMethodSupport = (nativeAudioContext, nativeAudioWorkletNodeConstructor) => {\n    return new Promise((resolve) => {\n        /*\n         * This bug existed in Safari up until v14.0.2. Since AudioWorklets were not supported in Safari until v14.1 the presence of the\n         * constructor for an AudioWorkletNode can be used here to skip the test.\n         */\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            resolve(true);\n        }\n        else {\n            const analyzer = nativeAudioContext.createScriptProcessor(256, 1, 1); // tslint:disable-line deprecation\n            const dummy = nativeAudioContext.createGain();\n            // Bug #95: Safari does not play one sample buffers.\n            const ones = nativeAudioContext.createBuffer(1, 2, 44100);\n            const channelData = ones.getChannelData(0);\n            channelData[0] = 1;\n            channelData[1] = 1;\n            const source = nativeAudioContext.createBufferSource();\n            source.buffer = ones;\n            source.loop = true;\n            source.connect(analyzer).connect(nativeAudioContext.destination);\n            source.connect(dummy);\n            source.disconnect(dummy);\n            // tslint:disable-next-line:deprecation\n            analyzer.onaudioprocess = (event) => {\n                const chnnlDt = event.inputBuffer.getChannelData(0); // tslint:disable-line deprecation\n                if (Array.prototype.some.call(chnnlDt, (sample) => sample === 1)) {\n                    resolve(true);\n                }\n                else {\n                    resolve(false);\n                }\n                source.stop();\n                analyzer.onaudioprocess = null; // tslint:disable-line:deprecation\n                source.disconnect(analyzer);\n                analyzer.disconnect(nativeAudioContext.destination);\n            };\n            source.start();\n        }\n    });\n};\n//# sourceMappingURL=test-audio-node-disconnect-method-support.js.map","export const visitEachAudioNodeOnce = (cycles, visitor) => {\n    const counts = new Map();\n    for (const cycle of cycles) {\n        for (const audioNode of cycle) {\n            const count = counts.get(audioNode);\n            counts.set(audioNode, count === undefined ? 1 : count + 1);\n        }\n    }\n    counts.forEach((count, audioNode) => visitor(audioNode, count));\n};\n//# sourceMappingURL=visit-each-audio-node-once.js.map","export const isNativeAudioNode = (nativeAudioNodeOrAudioParam) => {\n    return 'context' in nativeAudioNodeOrAudioParam;\n};\n//# sourceMappingURL=native-audio-node.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const wrapAudioNodeDisconnectMethod = (nativeAudioNode) => {\n    const connections = new Map();\n    nativeAudioNode.connect = ((connect) => {\n        // tslint:disable-next-line:invalid-void no-inferrable-types\n        return (destination, output = 0, input = 0) => {\n            const returnValue = isNativeAudioNode(destination) ? connect(destination, output, input) : connect(destination, output);\n            // Save the new connection only if the calls to connect above didn't throw an error.\n            const connectionsToDestination = connections.get(destination);\n            if (connectionsToDestination === undefined) {\n                connections.set(destination, [{ input, output }]);\n            }\n            else {\n                if (connectionsToDestination.every((connection) => connection.input !== input || connection.output !== output)) {\n                    connectionsToDestination.push({ input, output });\n                }\n            }\n            return returnValue;\n        };\n    })(nativeAudioNode.connect.bind(nativeAudioNode));\n    nativeAudioNode.disconnect = ((disconnect) => {\n        return (destinationOrOutput, output, input) => {\n            disconnect.apply(nativeAudioNode);\n            if (destinationOrOutput === undefined) {\n                connections.clear();\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                for (const [destination, connectionsToDestination] of connections) {\n                    const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== destinationOrOutput);\n                    if (filteredConnections.length === 0) {\n                        connections.delete(destination);\n                    }\n                    else {\n                        connections.set(destination, filteredConnections);\n                    }\n                }\n            }\n            else if (connections.has(destinationOrOutput)) {\n                if (output === undefined) {\n                    connections.delete(destinationOrOutput);\n                }\n                else {\n                    const connectionsToDestination = connections.get(destinationOrOutput);\n                    if (connectionsToDestination !== undefined) {\n                        const filteredConnections = connectionsToDestination.filter((connection) => connection.output !== output && (connection.input !== input || input === undefined));\n                        if (filteredConnections.length === 0) {\n                            connections.delete(destinationOrOutput);\n                        }\n                        else {\n                            connections.set(destinationOrOutput, filteredConnections);\n                        }\n                    }\n                }\n            }\n            for (const [destination, connectionsToDestination] of connections) {\n                connectionsToDestination.forEach((connection) => {\n                    if (isNativeAudioNode(destination)) {\n                        nativeAudioNode.connect(destination, connection.output, connection.input);\n                    }\n                    else {\n                        nativeAudioNode.connect(destination, connection.output);\n                    }\n                });\n            }\n        };\n    })(nativeAudioNode.disconnect);\n};\n//# sourceMappingURL=wrap-audio-node-disconnect-method.js.map","import { AUDIO_NODE_STORE, EVENT_LISTENERS } from '../globals';\nimport { isAudioNode } from '../guards/audio-node';\nimport { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nimport { addActiveInputConnectionToAudioParam } from '../helpers/add-active-input-connection-to-audio-param';\nimport { addPassiveInputConnectionToAudioParam } from '../helpers/add-passive-input-connection-to-audio-param';\nimport { connectNativeAudioNodeToNativeAudioNode } from '../helpers/connect-native-audio-node-to-native-audio-node';\nimport { deleteActiveInputConnection } from '../helpers/delete-active-input-connection';\nimport { deleteActiveInputConnectionToAudioParam } from '../helpers/delete-active-input-connection-to-audio-param';\nimport { deleteEventListenerOfAudioNode } from '../helpers/delete-event-listeners-of-audio-node';\nimport { deletePassiveInputConnectionToAudioNode } from '../helpers/delete-passive-input-connection-to-audio-node';\nimport { deletePassiveInputConnectionToAudioParam } from '../helpers/delete-passive-input-connection-to-audio-param';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from '../helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from '../helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from '../helpers/get-event-listeners-of-audio-node';\nimport { getNativeAudioNode } from '../helpers/get-native-audio-node';\nimport { getNativeAudioParam } from '../helpers/get-native-audio-param';\nimport { insertElementInSet } from '../helpers/insert-element-in-set';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { isPartOfACycle } from '../helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from '../helpers/is-passive-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassiveWhenNecessary } from '../helpers/set-internal-state-to-passive-when-necessary';\nimport { testAudioNodeDisconnectMethodSupport } from '../helpers/test-audio-node-disconnect-method-support';\nimport { visitEachAudioNodeOnce } from '../helpers/visit-each-audio-node-once';\nimport { wrapAudioNodeDisconnectMethod } from '../helpers/wrap-audio-node-disconnect-method';\nconst addConnectionToAudioParamOfAudioContext = (source, destination, output, isOffline) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const { outputs } = getAudioNodeConnections(source);\n    const eventListeners = getEventListenersOfAudioNode(source);\n    const eventListener = (isActive) => {\n        const nativeAudioNode = getNativeAudioNode(source);\n        const nativeAudioParam = getNativeAudioParam(destination);\n        if (isActive) {\n            const partialConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n            addActiveInputConnectionToAudioParam(activeInputs, source, partialConnection, false);\n            if (!isOffline && !isPartOfACycle(source)) {\n                nativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }\n        else {\n            const partialConnection = deleteActiveInputConnectionToAudioParam(activeInputs, source, output);\n            addPassiveInputConnectionToAudioParam(passiveInputs, partialConnection, false);\n            if (!isOffline && !isPartOfACycle(source)) {\n                nativeAudioNode.disconnect(nativeAudioParam, output);\n            }\n        }\n    };\n    if (insertElementInSet(outputs, [destination, output], (outputConnection) => outputConnection[0] === destination && outputConnection[1] === output, true)) {\n        eventListeners.add(eventListener);\n        if (isActiveAudioNode(source)) {\n            addActiveInputConnectionToAudioParam(activeInputs, source, [output, eventListener], true);\n        }\n        else {\n            addPassiveInputConnectionToAudioParam(passiveInputs, [source, output, eventListener], true);\n        }\n        return true;\n    }\n    return false;\n};\nconst deleteInputConnectionOfAudioNode = (source, destination, output, input) => {\n    const { activeInputs, passiveInputs } = getAudioNodeConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs[input], source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioNode(passiveInputs, source, output, input);\n        return [passiveInputConnection[2], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputConnectionOfAudioParam = (source, destination, output) => {\n    const { activeInputs, passiveInputs } = getAudioParamConnections(destination);\n    const activeInputConnection = deleteActiveInputConnection(activeInputs, source, output);\n    if (activeInputConnection === null) {\n        const passiveInputConnection = deletePassiveInputConnectionToAudioParam(passiveInputs, source, output);\n        return [passiveInputConnection[1], false];\n    }\n    return [activeInputConnection[2], true];\n};\nconst deleteInputsOfAudioNode = (source, isOffline, destination, output, input) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioNode(source, destination, output, input);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isOffline && !isPartOfACycle(source)) {\n            disconnectNativeAudioNodeFromNativeAudioNode(getNativeAudioNode(source), getNativeAudioNode(destination), output, input);\n        }\n    }\n    if (isActiveAudioNode(destination)) {\n        const { activeInputs } = getAudioNodeConnections(destination);\n        setInternalStateToPassiveWhenNecessary(destination, activeInputs);\n    }\n};\nconst deleteInputsOfAudioParam = (source, isOffline, destination, output) => {\n    const [listener, isActive] = deleteInputConnectionOfAudioParam(source, destination, output);\n    if (listener !== null) {\n        deleteEventListenerOfAudioNode(source, listener);\n        if (isActive && !isOffline && !isPartOfACycle(source)) {\n            getNativeAudioNode(source).disconnect(getNativeAudioParam(destination), output);\n        }\n    }\n};\nconst deleteAnyConnection = (source, isOffline) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n        }\n        destinations.push(outputConnection[0]);\n    }\n    audioNodeConnectionsOfSource.outputs.clear();\n    return destinations;\n};\nconst deleteConnectionAtOutput = (source, isOffline, output) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    const destinations = [];\n    for (const outputConnection of audioNodeConnectionsOfSource.outputs) {\n        if (outputConnection[1] === output) {\n            if (isAudioNodeOutputConnection(outputConnection)) {\n                deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n            }\n            else {\n                deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n            }\n            destinations.push(outputConnection[0]);\n            audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        }\n    }\n    return destinations;\n};\nconst deleteConnectionToDestination = (source, isOffline, destination, output, input) => {\n    const audioNodeConnectionsOfSource = getAudioNodeConnections(source);\n    return Array.from(audioNodeConnectionsOfSource.outputs)\n        .filter((outputConnection) => outputConnection[0] === destination &&\n        (output === undefined || outputConnection[1] === output) &&\n        (input === undefined || outputConnection[2] === input))\n        .map((outputConnection) => {\n        if (isAudioNodeOutputConnection(outputConnection)) {\n            deleteInputsOfAudioNode(source, isOffline, ...outputConnection);\n        }\n        else {\n            deleteInputsOfAudioParam(source, isOffline, ...outputConnection);\n        }\n        audioNodeConnectionsOfSource.outputs.delete(outputConnection);\n        return outputConnection[0];\n    });\n};\nexport const createAudioNodeConstructor = (addAudioNodeConnections, addConnectionToAudioNode, cacheTestResult, createIncrementCycleCounter, createIndexSizeError, createInvalidAccessError, createNotSupportedError, decrementCycleCounter, detectCycles, eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor) => {\n    return class AudioNode extends eventTargetConstructor {\n        constructor(context, isActive, nativeAudioNode, audioNodeRenderer) {\n            super(nativeAudioNode);\n            this._context = context;\n            this._nativeAudioNode = nativeAudioNode;\n            const nativeContext = getNativeContext(context);\n            // Bug #12: Safari does not support to disconnect a specific destination.\n            if (isNativeAudioContext(nativeContext) &&\n                true !==\n                    cacheTestResult(testAudioNodeDisconnectMethodSupport, () => {\n                        return testAudioNodeDisconnectMethodSupport(nativeContext, nativeAudioWorkletNodeConstructor);\n                    })) {\n                wrapAudioNodeDisconnectMethod(nativeAudioNode);\n            }\n            AUDIO_NODE_STORE.set(this, nativeAudioNode);\n            EVENT_LISTENERS.set(this, new Set());\n            if (context.state !== 'closed' && isActive) {\n                setInternalStateToActive(this);\n            }\n            addAudioNodeConnections(this, audioNodeRenderer, nativeAudioNode);\n        }\n        get channelCount() {\n            return this._nativeAudioNode.channelCount;\n        }\n        set channelCount(value) {\n            this._nativeAudioNode.channelCount = value;\n        }\n        get channelCountMode() {\n            return this._nativeAudioNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            this._nativeAudioNode.channelCountMode = value;\n        }\n        get channelInterpretation() {\n            return this._nativeAudioNode.channelInterpretation;\n        }\n        set channelInterpretation(value) {\n            this._nativeAudioNode.channelInterpretation = value;\n        }\n        get context() {\n            return this._context;\n        }\n        get numberOfInputs() {\n            return this._nativeAudioNode.numberOfInputs;\n        }\n        get numberOfOutputs() {\n            return this._nativeAudioNode.numberOfOutputs;\n        }\n        // tslint:disable-next-line:invalid-void\n        connect(destination, output = 0, input = 0) {\n            // Bug #174: Safari does expose a wrong numberOfOutputs for MediaStreamAudioDestinationNodes.\n            if (output < 0 || output >= this._nativeAudioNode.numberOfOutputs) {\n                throw createIndexSizeError();\n            }\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (isNativeAudioNode(destination) || isNativeAudioParam(destination)) {\n                throw createInvalidAccessError();\n            }\n            if (isAudioNode(destination)) {\n                const nativeDestinationAudioNode = getNativeAudioNode(destination);\n                try {\n                    const connection = connectNativeAudioNodeToNativeAudioNode(this._nativeAudioNode, nativeDestinationAudioNode, output, input);\n                    const isPassive = isPassiveAudioNode(this);\n                    if (isOffline || isPassive) {\n                        this._nativeAudioNode.disconnect(...connection);\n                    }\n                    if (this.context.state !== 'closed' && !isPassive && isPassiveAudioNode(destination)) {\n                        setInternalStateToActive(destination);\n                    }\n                }\n                catch (err) {\n                    // Bug #41: Safari does not throw the correct exception so far.\n                    if (err.code === 12) {\n                        throw createInvalidAccessError();\n                    }\n                    throw err;\n                }\n                const isNewConnectionToAudioNode = addConnectionToAudioNode(this, destination, output, input, isOffline);\n                // Bug #164: Only Firefox detects cycles so far.\n                if (isNewConnectionToAudioNode) {\n                    const cycles = detectCycles([this], destination);\n                    visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n                }\n                return destination;\n            }\n            const nativeAudioParam = getNativeAudioParam(destination);\n            /*\n             * Bug #73, #147 & #153: Safari does not support to connect an input signal to the playbackRate AudioParam of an\n             * AudioBufferSourceNode. This can't be easily detected and that's why the outdated name property is used here to identify\n             * Safari. In addition to that the maxValue property is used to only detect the affected versions below v14.0.2.\n             */\n            if (nativeAudioParam.name === 'playbackRate' && nativeAudioParam.maxValue === 1024) {\n                throw createNotSupportedError();\n            }\n            try {\n                this._nativeAudioNode.connect(nativeAudioParam, output);\n                if (isOffline || isPassiveAudioNode(this)) {\n                    this._nativeAudioNode.disconnect(nativeAudioParam, output);\n                }\n            }\n            catch (err) {\n                // Bug #58: Safari doesn't throw an InvalidAccessError yet.\n                if (err.code === 12) {\n                    throw createInvalidAccessError();\n                }\n                throw err;\n            }\n            const isNewConnectionToAudioParam = addConnectionToAudioParamOfAudioContext(this, destination, output, isOffline);\n            // Bug #164: Only Firefox detects cycles so far.\n            if (isNewConnectionToAudioParam) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, createIncrementCycleCounter(isOffline));\n            }\n        }\n        disconnect(destinationOrOutput, output, input) {\n            let destinations;\n            const nativeContext = getNativeContext(this._context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            if (destinationOrOutput === undefined) {\n                destinations = deleteAnyConnection(this, isOffline);\n            }\n            else if (typeof destinationOrOutput === 'number') {\n                if (destinationOrOutput < 0 || destinationOrOutput >= this.numberOfOutputs) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionAtOutput(this, isOffline, destinationOrOutput);\n            }\n            else {\n                if (output !== undefined && (output < 0 || output >= this.numberOfOutputs)) {\n                    throw createIndexSizeError();\n                }\n                if (isAudioNode(destinationOrOutput) && input !== undefined && (input < 0 || input >= destinationOrOutput.numberOfInputs)) {\n                    throw createIndexSizeError();\n                }\n                destinations = deleteConnectionToDestination(this, isOffline, destinationOrOutput, output, input);\n                if (destinations.length === 0) {\n                    throw createInvalidAccessError();\n                }\n            }\n            // Bug #164: Only Firefox detects cycles so far.\n            for (const destination of destinations) {\n                const cycles = detectCycles([this], destination);\n                visitEachAudioNodeOnce(cycles, decrementCycleCounter);\n            }\n        }\n    };\n};\n//# sourceMappingURL=audio-node-constructor.js.map","import { AutomationEventList } from 'automation-events';\nexport const createAudioParamFactory = (addAudioParamConnections, audioParamAudioNodeStore, audioParamStore, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible) => {\n    return (audioNode, isAudioParamOfOfflineAudioContext, nativeAudioParam, maxValue = null, minValue = null) => {\n        // Bug #196 Only Safari sets the defaultValue to the initial value.\n        const defaultValue = nativeAudioParam.value;\n        const automationEventList = new AutomationEventList(defaultValue);\n        const audioParamRenderer = isAudioParamOfOfflineAudioContext ? createAudioParamRenderer(automationEventList) : null;\n        const audioParam = {\n            get defaultValue() {\n                return defaultValue;\n            },\n            get maxValue() {\n                return maxValue === null ? nativeAudioParam.maxValue : maxValue;\n            },\n            get minValue() {\n                return minValue === null ? nativeAudioParam.minValue : minValue;\n            },\n            get value() {\n                return nativeAudioParam.value;\n            },\n            set value(value) {\n                nativeAudioParam.value = value;\n                // Bug #98: Firefox & Safari do not yet treat the value setter like a call to setValueAtTime().\n                audioParam.setValueAtTime(value, audioNode.context.currentTime);\n            },\n            cancelAndHoldAtTime(cancelTime) {\n                // Bug #28: Firefox & Safari do not yet implement cancelAndHoldAtTime().\n                if (typeof nativeAudioParam.cancelAndHoldAtTime === 'function') {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    nativeAudioParam.cancelAndHoldAtTime(cancelTime);\n                }\n                else {\n                    const previousLastEvent = Array.from(automationEventList).pop();\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createCancelAndHoldAutomationEvent(cancelTime));\n                    const currentLastEvent = Array.from(automationEventList).pop();\n                    nativeAudioParam.cancelScheduledValues(cancelTime);\n                    if (previousLastEvent !== currentLastEvent && currentLastEvent !== undefined) {\n                        if (currentLastEvent.type === 'exponentialRampToValue') {\n                            nativeAudioParam.exponentialRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'linearRampToValue') {\n                            nativeAudioParam.linearRampToValueAtTime(currentLastEvent.value, currentLastEvent.endTime);\n                        }\n                        else if (currentLastEvent.type === 'setValue') {\n                            nativeAudioParam.setValueAtTime(currentLastEvent.value, currentLastEvent.startTime);\n                        }\n                        else if (currentLastEvent.type === 'setValueCurve') {\n                            nativeAudioParam.setValueCurveAtTime(currentLastEvent.values, currentLastEvent.startTime, currentLastEvent.duration);\n                        }\n                    }\n                }\n                return audioParam;\n            },\n            cancelScheduledValues(cancelTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createCancelScheduledValuesAutomationEvent(cancelTime));\n                nativeAudioParam.cancelScheduledValues(cancelTime);\n                return audioParam;\n            },\n            exponentialRampToValueAtTime(value, endTime) {\n                // Bug #45: Safari does not throw an error yet.\n                if (value === 0) {\n                    throw new RangeError();\n                }\n                // Bug #187: Safari does not throw an error yet.\n                if (!Number.isFinite(endTime) || endTime < 0) {\n                    throw new RangeError();\n                }\n                const currentTime = audioNode.context.currentTime;\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(currentTime);\n                }\n                // Bug #194: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n                if (Array.from(automationEventList).length === 0) {\n                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n                }\n                automationEventList.add(createExponentialRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.exponentialRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            linearRampToValueAtTime(value, endTime) {\n                const currentTime = audioNode.context.currentTime;\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(currentTime);\n                }\n                // Bug #195: Firefox does not implicitly call setValueAtTime() if there is no previous event.\n                if (Array.from(automationEventList).length === 0) {\n                    automationEventList.add(createSetValueAutomationEvent(defaultValue, currentTime));\n                    nativeAudioParam.setValueAtTime(defaultValue, currentTime);\n                }\n                automationEventList.add(createLinearRampToValueAutomationEvent(value, endTime));\n                nativeAudioParam.linearRampToValueAtTime(value, endTime);\n                return audioParam;\n            },\n            setTargetAtTime(target, startTime, timeConstant) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetTargetAutomationEvent(target, startTime, timeConstant));\n                nativeAudioParam.setTargetAtTime(target, startTime, timeConstant);\n                return audioParam;\n            },\n            setValueAtTime(value, startTime) {\n                if (audioParamRenderer === null) {\n                    automationEventList.flush(audioNode.context.currentTime);\n                }\n                automationEventList.add(createSetValueAutomationEvent(value, startTime));\n                nativeAudioParam.setValueAtTime(value, startTime);\n                return audioParam;\n            },\n            setValueCurveAtTime(values, startTime, duration) {\n                // Bug 183: Safari only accepts a Float32Array.\n                const convertedValues = values instanceof Float32Array ? values : new Float32Array(values);\n                /*\n                 * Bug #152: Safari does not correctly interpolate the values of the curve.\n                 * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the\n                 * existence of the webkitAudioContext is used as a workaround here.\n                 */\n                if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n                    const endTime = startTime + duration;\n                    const sampleRate = audioNode.context.sampleRate;\n                    const firstSample = Math.ceil(startTime * sampleRate);\n                    const lastSample = Math.floor(endTime * sampleRate);\n                    const numberOfInterpolatedValues = lastSample - firstSample;\n                    const interpolatedValues = new Float32Array(numberOfInterpolatedValues);\n                    for (let i = 0; i < numberOfInterpolatedValues; i += 1) {\n                        const theoreticIndex = ((convertedValues.length - 1) / duration) * ((firstSample + i) / sampleRate - startTime);\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        interpolatedValues[i] =\n                            lowerIndex === upperIndex\n                                ? convertedValues[lowerIndex]\n                                : (1 - (theoreticIndex - lowerIndex)) * convertedValues[lowerIndex] +\n                                    (1 - (upperIndex - theoreticIndex)) * convertedValues[upperIndex];\n                    }\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(interpolatedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(interpolatedValues, startTime, duration);\n                    const timeOfLastSample = lastSample / sampleRate;\n                    if (timeOfLastSample < endTime) {\n                        setValueAtTimeUntilPossible(audioParam, interpolatedValues[interpolatedValues.length - 1], timeOfLastSample);\n                    }\n                    setValueAtTimeUntilPossible(audioParam, convertedValues[convertedValues.length - 1], endTime);\n                }\n                else {\n                    if (audioParamRenderer === null) {\n                        automationEventList.flush(audioNode.context.currentTime);\n                    }\n                    automationEventList.add(createSetValueCurveAutomationEvent(convertedValues, startTime, duration));\n                    nativeAudioParam.setValueCurveAtTime(convertedValues, startTime, duration);\n                }\n                return audioParam;\n            }\n        };\n        audioParamStore.set(audioParam, nativeAudioParam);\n        audioParamAudioNodeStore.set(audioParam, audioNode);\n        addAudioParamConnections(audioParam, audioParamRenderer);\n        return audioParam;\n    };\n};\n//# sourceMappingURL=audio-param-factory.js.map","export const createAudioParamRenderer = (automationEventList) => {\n    return {\n        replay(audioParam) {\n            for (const automationEvent of automationEventList) {\n                if (automationEvent.type === 'exponentialRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.exponentialRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'linearRampToValue') {\n                    const { endTime, value } = automationEvent;\n                    audioParam.linearRampToValueAtTime(value, endTime);\n                }\n                else if (automationEvent.type === 'setTarget') {\n                    const { startTime, target, timeConstant } = automationEvent;\n                    audioParam.setTargetAtTime(target, startTime, timeConstant);\n                }\n                else if (automationEvent.type === 'setValue') {\n                    const { startTime, value } = automationEvent;\n                    audioParam.setValueAtTime(value, startTime);\n                }\n                else if (automationEvent.type === 'setValueCurve') {\n                    const { duration, startTime, values } = automationEvent;\n                    audioParam.setValueCurveAtTime(values, startTime, duration);\n                }\n                else {\n                    throw new Error(\"Can't apply an unknown automation.\");\n                }\n            }\n        }\n    };\n};\n//# sourceMappingURL=audio-param-renderer.js.map","export class ReadOnlyMap {\n    constructor(parameters) {\n        this._map = new Map(parameters);\n    }\n    get size() {\n        return this._map.size;\n    }\n    entries() {\n        return this._map.entries();\n    }\n    forEach(callback, thisArg = null) {\n        return this._map.forEach((value, key) => callback.call(thisArg, value, key, this));\n    }\n    get(name) {\n        return this._map.get(name);\n    }\n    has(name) {\n        return this._map.has(name);\n    }\n    keys() {\n        return this._map.keys();\n    }\n    values() {\n        return this._map.values();\n    }\n}\n//# sourceMappingURL=read-only-map.js.map","import { NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS } from '../globals';\nimport { ReadOnlyMap } from '../read-only-map';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    // Bug #61: The channelCountMode should be 'max' according to the spec but is set to 'explicit' to achieve consistent behavior.\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 1,\n    numberOfOutputs: 1,\n    parameterData: {},\n    processorOptions: {}\n};\nexport const createAudioWorkletNodeConstructor = (addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener) => {\n    return class AudioWorkletNode extends audioNodeConstructor {\n        constructor(context, name, options) {\n            var _a;\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = sanitizeAudioWorkletNodeOptions({ ...DEFAULT_OPTIONS, ...options });\n            // Bug #191: Safari doesn't throw an error if the options aren't clonable.\n            testAudioWorkletNodeOptionsClonability(mergedOptions);\n            const nodeNameToProcessorConstructorMap = NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS.get(nativeContext);\n            const processorConstructor = nodeNameToProcessorConstructorMap === null || nodeNameToProcessorConstructorMap === void 0 ? void 0 : nodeNameToProcessorConstructorMap.get(name);\n            // Bug #186: Chrome and Edge do not allow to create an AudioWorkletNode on a closed AudioContext.\n            const nativeContextOrBackupOfflineAudioContext = isOffline || nativeContext.state !== 'closed'\n                ? nativeContext\n                : (_a = getBackupOfflineAudioContext(nativeContext)) !== null && _a !== void 0 ? _a : nativeContext;\n            const nativeAudioWorkletNode = createNativeAudioWorkletNode(nativeContextOrBackupOfflineAudioContext, isOffline ? null : context.baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, mergedOptions);\n            const audioWorkletNodeRenderer = ((isOffline ? createAudioWorkletNodeRenderer(name, mergedOptions, processorConstructor) : null));\n            /*\n             * @todo Add a mechanism to switch an AudioWorkletNode to passive once the process() function of the AudioWorkletProcessor\n             * returns false.\n             */\n            super(context, true, nativeAudioWorkletNode, audioWorkletNodeRenderer);\n            const parameters = [];\n            nativeAudioWorkletNode.parameters.forEach((nativeAudioParam, nm) => {\n                const audioParam = createAudioParam(this, isOffline, nativeAudioParam);\n                parameters.push([nm, audioParam]);\n            });\n            this._nativeAudioWorkletNode = nativeAudioWorkletNode;\n            this._onprocessorerror = null;\n            this._parameters = new ReadOnlyMap(parameters);\n            /*\n             * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to\n             * the destination.\n             */\n            if (isOffline) {\n                addUnrenderedAudioWorkletNode(nativeContext, this);\n            }\n            const { activeInputs } = getAudioNodeConnections(this);\n            setActiveAudioWorkletNodeInputs(nativeAudioWorkletNode, activeInputs);\n        }\n        get onprocessorerror() {\n            return this._onprocessorerror;\n        }\n        set onprocessorerror(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeAudioWorkletNode.onprocessorerror = wrappedListener;\n            const nativeOnProcessorError = this._nativeAudioWorkletNode.onprocessorerror;\n            this._onprocessorerror =\n                nativeOnProcessorError !== null && nativeOnProcessorError === wrappedListener\n                    ? value\n                    : nativeOnProcessorError;\n        }\n        get parameters() {\n            if (this._parameters === null) {\n                // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                return this._nativeAudioWorkletNode.parameters;\n            }\n            return this._parameters;\n        }\n        get port() {\n            return this._nativeAudioWorkletNode.port;\n        }\n    };\n};\n//# sourceMappingURL=audio-worklet-node-constructor.js.map","export function copyFromChannel(audioBuffer, \n// @todo There is currently no way to define something like { [ key: number | string ]: Float32Array }\nparent, key, channelNumber, bufferOffset) {\n    if (typeof audioBuffer.copyFromChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = new Float32Array(128);\n        }\n        audioBuffer.copyFromChannel(parent[key], channelNumber, bufferOffset);\n        // Bug #5: Safari does not support copyFromChannel().\n    }\n    else {\n        const channelData = audioBuffer.getChannelData(channelNumber);\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength === 0) {\n            parent[key] = channelData.slice(bufferOffset, bufferOffset + 128);\n        }\n        else {\n            const slicedInput = new Float32Array(channelData.buffer, bufferOffset * Float32Array.BYTES_PER_ELEMENT, 128);\n            parent[key].set(slicedInput);\n        }\n    }\n}\n//# sourceMappingURL=copy-from-channel.js.map","export const copyToChannel = (audioBuffer, parent, key, channelNumber, bufferOffset) => {\n    if (typeof audioBuffer.copyToChannel === 'function') {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.copyToChannel(parent[key], channelNumber, bufferOffset);\n        }\n        // Bug #5: Safari does not support copyToChannel().\n    }\n    else {\n        // The byteLength will be 0 when the ArrayBuffer was transferred.\n        if (parent[key].byteLength !== 0) {\n            audioBuffer.getChannelData(channelNumber).set(parent[key], bufferOffset);\n        }\n    }\n};\n//# sourceMappingURL=copy-to-channel.js.map","export const createNestedArrays = (x, y) => {\n    const arrays = [];\n    for (let i = 0; i < x; i += 1) {\n        const array = [];\n        const length = typeof y === 'number' ? y : y[i];\n        for (let j = 0; j < length; j += 1) {\n            array.push(new Float32Array(128));\n        }\n        arrays.push(array);\n    }\n    return arrays;\n};\n//# sourceMappingURL=create-nested-arrays.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { getNativeAudioNode } from './get-native-audio-node';\nimport { getValueForKey } from './get-value-for-key';\nexport const getAudioWorkletProcessor = (nativeOfflineAudioContext, proxy) => {\n    const nodeToProcessorMap = getValueForKey(NODE_TO_PROCESSOR_MAPS, nativeOfflineAudioContext);\n    const nativeAudioWorkletNode = getNativeAudioNode(proxy);\n    return getValueForKey(nodeToProcessorMap, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=get-audio-worklet-processor.js.map","import { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { getAudioNodeConnections } from '../helpers/get-audio-node-connections';\nimport { getAudioWorkletProcessor } from '../helpers/get-audio-worklet-processor';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst processBuffer = async (proxy, renderedBuffer, nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime) => {\n    // Ceil the length to the next full render quantum.\n    // Bug #17: Safari does not yet expose the length.\n    const length = renderedBuffer === null ? Math.ceil(proxy.context.length / 128) * 128 : renderedBuffer.length;\n    const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n    const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n    const processedBuffer = numberOfOutputChannels === 0\n        ? null\n        : nativeOfflineAudioContext.createBuffer(numberOfOutputChannels, length, nativeOfflineAudioContext.sampleRate);\n    if (processorConstructor === undefined) {\n        throw new Error('Missing the processor constructor.');\n    }\n    const audioNodeConnections = getAudioNodeConnections(proxy);\n    const audioWorkletProcessor = await getAudioWorkletProcessor(nativeOfflineAudioContext, proxy);\n    const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n    const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n    const parameters = Array.from(proxy.parameters.keys()).reduce((prmtrs, name) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n    for (let i = 0; i < length; i += 128) {\n        if (options.numberOfInputs > 0 && renderedBuffer !== null) {\n            for (let j = 0; j < options.numberOfInputs; j += 1) {\n                for (let k = 0; k < options.channelCount; k += 1) {\n                    copyFromChannel(renderedBuffer, inputs[j], k, k, i);\n                }\n            }\n        }\n        if (processorConstructor.parameterDescriptors !== undefined && renderedBuffer !== null) {\n            processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                copyFromChannel(renderedBuffer, parameters, name, numberOfInputChannels + index, i);\n            });\n        }\n        for (let j = 0; j < options.numberOfInputs; j += 1) {\n            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                // The byteLength will be 0 when the ArrayBuffer was transferred.\n                if (outputs[j][k].byteLength === 0) {\n                    outputs[j][k] = new Float32Array(128);\n                }\n            }\n        }\n        try {\n            const potentiallyEmptyInputs = inputs.map((input, index) => {\n                if (audioNodeConnections.activeInputs[index].size === 0) {\n                    return [];\n                }\n                return input;\n            });\n            const activeSourceFlag = exposeCurrentFrameAndCurrentTime(i / nativeOfflineAudioContext.sampleRate, nativeOfflineAudioContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n            if (processedBuffer !== null) {\n                for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                    for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                        copyToChannel(processedBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                    }\n                    outputChannelSplitterNodeOutput += outputChannelCount[j];\n                }\n            }\n            if (!activeSourceFlag) {\n                break;\n            }\n        }\n        catch (error) {\n            proxy.dispatchEvent(new ErrorEvent('processorerror', {\n                colno: error.colno,\n                filename: error.filename,\n                lineno: error.lineno,\n                message: error.message\n            }));\n            break;\n        }\n    }\n    return processedBuffer;\n};\nexport const createAudioWorkletNodeRendererFactory = (connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (name, options, processorConstructor) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let processedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioWorkletNode = getNativeAudioNode(proxy);\n            let nativeOutputNodes = null;\n            const nativeAudioWorkletNodeIsOwnedByContext = isOwnedByContext(nativeAudioWorkletNode, nativeOfflineAudioContext);\n            const outputChannelCount = Array.isArray(options.outputChannelCount)\n                ? options.outputChannelCount\n                : Array.from(options.outputChannelCount);\n            // Bug #61: Only Chrome, Edge & Firefox have an implementation of the AudioWorkletNode yet.\n            if (nativeAudioWorkletNodeConstructor === null) {\n                const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n                const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, {\n                    channelCount: Math.max(1, numberOfOutputChannels),\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    numberOfOutputs: Math.max(1, numberOfOutputChannels)\n                });\n                const outputChannelMergerNodes = [];\n                for (let i = 0; i < proxy.numberOfOutputs; i += 1) {\n                    outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: outputChannelCount[i]\n                    }));\n                }\n                const outputGainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                    channelCount: options.channelCount,\n                    channelCountMode: options.channelCountMode,\n                    channelInterpretation: options.channelInterpretation,\n                    gain: 1\n                });\n                outputGainNode.connect = connectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                outputGainNode.disconnect = disconnectMultipleOutputs.bind(null, outputChannelMergerNodes);\n                nativeOutputNodes = [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode];\n            }\n            else if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeOfflineAudioContext, name);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeOutputNodes === null ? nativeAudioWorkletNode : nativeOutputNodes[2]);\n            if (nativeOutputNodes !== null) {\n                if (processedBufferPromise === null) {\n                    if (processorConstructor === undefined) {\n                        throw new Error('Missing the processor constructor.');\n                    }\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                    const numberOfInputChannels = proxy.channelCount * proxy.numberOfInputs;\n                    const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n                    const numberOfChannels = numberOfInputChannels + numberOfParameters;\n                    const renderBuffer = async () => {\n                        const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(numberOfChannels, \n                        // Ceil the length to the next full render quantum.\n                        // Bug #17: Safari does not yet expose the length.\n                        Math.ceil(proxy.context.length / 128) * 128, nativeOfflineAudioContext.sampleRate);\n                        const gainNodes = [];\n                        const inputChannelSplitterNodes = [];\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes.push(createNativeGainNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: options.channelCountMode,\n                                channelInterpretation: options.channelInterpretation,\n                                gain: 1\n                            }));\n                            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(partialOfflineAudioContext, {\n                                channelCount: options.channelCount,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                numberOfOutputs: options.channelCount\n                            }));\n                        }\n                        const constantSourceNodes = await Promise.all(Array.from(proxy.parameters.values()).map(async (audioParam) => {\n                            const constantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: audioParam.value\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, constantSourceNode.offset);\n                            return constantSourceNode;\n                        }));\n                        const inputChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                            channelCount: 1,\n                            channelCountMode: 'explicit',\n                            channelInterpretation: 'speakers',\n                            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n                        });\n                        for (let i = 0; i < options.numberOfInputs; i += 1) {\n                            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n                            for (let j = 0; j < options.channelCount; j += 1) {\n                                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n                            }\n                        }\n                        for (const [index, constantSourceNode] of constantSourceNodes.entries()) {\n                            constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                            constantSourceNode.start(0);\n                        }\n                        inputChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                        await Promise.all(gainNodes.map((gainNode) => renderInputsOfAudioNode(proxy, partialOfflineAudioContext, gainNode)));\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    };\n                    processedBufferPromise = processBuffer(proxy, numberOfChannels === 0 ? null : await renderBuffer(), nativeOfflineAudioContext, options, outputChannelCount, processorConstructor, exposeCurrentFrameAndCurrentTime);\n                }\n                const processedBuffer = await processedBufferPromise;\n                const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n                const [outputChannelSplitterNode, outputChannelMergerNodes, outputGainNode] = nativeOutputNodes;\n                if (processedBuffer !== null) {\n                    audioBufferSourceNode.buffer = processedBuffer;\n                    audioBufferSourceNode.start(0);\n                }\n                audioBufferSourceNode.connect(outputChannelSplitterNode);\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < proxy.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n                return outputGainNode;\n            }\n            if (!nativeAudioWorkletNodeIsOwnedByContext) {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await renderAutomation(nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            else {\n                for (const [nm, audioParam] of proxy.parameters.entries()) {\n                    await connectAudioParam(nativeOfflineAudioContext, audioParam, \n                    // @todo The definition that TypeScript uses of the AudioParamMap is lacking many methods.\n                    nativeAudioWorkletNode.parameters.get(nm));\n                }\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioWorkletNode);\n            return nativeAudioWorkletNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                deleteUnrenderedAudioWorkletNode(nativeOfflineAudioContext, proxy);\n                const renderedNativeAudioWorkletNodeOrGainNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioWorkletNodeOrGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioWorkletNodeOrGainNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=audio-worklet-node-renderer-factory.js.map","export const createBaseAudioContextConstructor = (addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor) => {\n    return class BaseAudioContext extends minimalBaseAudioContextConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext, numberOfChannels);\n            this._nativeContext = _nativeContext;\n            this._audioWorklet =\n                addAudioWorkletModule === undefined\n                    ? undefined\n                    : {\n                        addModule: (moduleURL, options) => {\n                            return addAudioWorkletModule(this, moduleURL, options);\n                        }\n                    };\n        }\n        get audioWorklet() {\n            return this._audioWorklet;\n        }\n        createAnalyser() {\n            return new analyserNodeConstructor(this);\n        }\n        createBiquadFilter() {\n            return new biquadFilterNodeConstructor(this);\n        }\n        createBuffer(numberOfChannels, length, sampleRate) {\n            return new audioBufferConstructor({ length, numberOfChannels, sampleRate });\n        }\n        createBufferSource() {\n            return new audioBufferSourceNodeConstructor(this);\n        }\n        createChannelMerger(numberOfInputs = 6) {\n            return new channelMergerNodeConstructor(this, { numberOfInputs });\n        }\n        createChannelSplitter(numberOfOutputs = 6) {\n            return new channelSplitterNodeConstructor(this, { numberOfOutputs });\n        }\n        createConstantSource() {\n            return new constantSourceNodeConstructor(this);\n        }\n        createConvolver() {\n            return new convolverNodeConstructor(this);\n        }\n        createDelay(maxDelayTime = 1) {\n            return new delayNodeConstructor(this, { maxDelayTime });\n        }\n        createDynamicsCompressor() {\n            return new dynamicsCompressorNodeConstructor(this);\n        }\n        createGain() {\n            return new gainNodeConstructor(this);\n        }\n        createIIRFilter(feedforward, feedback) {\n            return new iIRFilterNodeConstructor(this, { feedback, feedforward });\n        }\n        createOscillator() {\n            return new oscillatorNodeConstructor(this);\n        }\n        createPanner() {\n            return new pannerNodeConstructor(this);\n        }\n        createPeriodicWave(real, imag, constraints = { disableNormalization: false }) {\n            return new periodicWaveConstructor(this, { ...constraints, imag, real });\n        }\n        createStereoPanner() {\n            return new stereoPannerNodeConstructor(this);\n        }\n        createWaveShaper() {\n            return new waveShaperNodeConstructor(this);\n        }\n        decodeAudioData(audioData, successCallback, errorCallback) {\n            return decodeAudioData(this._nativeContext, audioData).then((audioBuffer) => {\n                if (typeof successCallback === 'function') {\n                    successCallback(audioBuffer);\n                }\n                return audioBuffer;\n            }, (err) => {\n                if (typeof errorCallback === 'function') {\n                    errorCallback(err);\n                }\n                throw err;\n            });\n        }\n    };\n};\n//# sourceMappingURL=base-audio-context-constructor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    Q: 1,\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    detune: 0,\n    frequency: 350,\n    gain: 0,\n    type: 'lowpass'\n};\nexport const createBiquadFilterNodeConstructor = (audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class BiquadFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const biquadFilterNodeRenderer = (isOffline ? createBiquadFilterNodeRenderer() : null);\n            super(context, false, nativeBiquadFilterNode, biquadFilterNodeRenderer);\n            // Bug #80: Safari does not export the correct values for maxValue and minValue.\n            this._Q = createAudioParam(this, isOffline, nativeBiquadFilterNode.Q, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // Bug #78: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeBiquadFilterNode.detune, 1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT), -1200 * Math.log2(MOST_POSITIVE_SINGLE_FLOAT));\n            // Bug #77: Firefox & Safari do not export the correct value for minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeBiquadFilterNode.frequency, context.sampleRate / 2, 0);\n            // Bug #79: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeBiquadFilterNode.gain, 40 * Math.log10(MOST_POSITIVE_SINGLE_FLOAT), MOST_NEGATIVE_SINGLE_FLOAT);\n            this._nativeBiquadFilterNode = nativeBiquadFilterNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get gain() {\n            return this._gain;\n        }\n        get Q() {\n            return this._Q;\n        }\n        get type() {\n            return this._nativeBiquadFilterNode.type;\n        }\n        set type(value) {\n            this._nativeBiquadFilterNode.type = value;\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            // Bug #189: Safari does throw an InvalidStateError.\n            try {\n                this._nativeBiquadFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n            }\n            catch (err) {\n                if (err.code === 11) {\n                    throw createInvalidAccessError();\n                }\n                throw err;\n            }\n            // Bug #68: Safari does not throw an error if the parameters differ in their length.\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n        }\n    };\n};\n//# sourceMappingURL=biquad-filter-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createBiquadFilterNodeRendererFactory = (connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeBiquadFilterNodes = new WeakMap();\n        const createBiquadFilterNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeBiquadFilterNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeBiquadFilterNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeBiquadFilterNodeIsOwnedByContext = isOwnedByContext(nativeBiquadFilterNode, nativeOfflineAudioContext);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                const options = {\n                    Q: nativeBiquadFilterNode.Q.value,\n                    channelCount: nativeBiquadFilterNode.channelCount,\n                    channelCountMode: nativeBiquadFilterNode.channelCountMode,\n                    channelInterpretation: nativeBiquadFilterNode.channelInterpretation,\n                    detune: nativeBiquadFilterNode.detune.value,\n                    frequency: nativeBiquadFilterNode.frequency.value,\n                    gain: nativeBiquadFilterNode.gain.value,\n                    type: nativeBiquadFilterNode.type\n                };\n                nativeBiquadFilterNode = createNativeBiquadFilterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeBiquadFilterNodes.set(nativeOfflineAudioContext, nativeBiquadFilterNode);\n            if (!nativeBiquadFilterNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.Q, nativeBiquadFilterNode.Q);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeBiquadFilterNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeBiquadFilterNode.frequency);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeBiquadFilterNode.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeBiquadFilterNode);\n            return nativeBiquadFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeBiquadFilterNode = renderedNativeBiquadFilterNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeBiquadFilterNode !== undefined) {\n                    return Promise.resolve(renderedNativeBiquadFilterNode);\n                }\n                return createBiquadFilterNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=biquad-filter-node-renderer-factory.js.map","export const createCacheTestResult = (ongoingTests, testResults) => {\n    return (tester, test) => {\n        const cachedTestResult = testResults.get(tester);\n        if (cachedTestResult !== undefined) {\n            return cachedTestResult;\n        }\n        const ongoingTest = ongoingTests.get(tester);\n        if (ongoingTest !== undefined) {\n            return ongoingTest;\n        }\n        try {\n            const synchronousTestResult = test();\n            if (synchronousTestResult instanceof Promise) {\n                ongoingTests.set(tester, synchronousTestResult);\n                return synchronousTestResult\n                    .catch(() => false)\n                    .then((finalTestResult) => {\n                    ongoingTests.delete(tester);\n                    testResults.set(tester, finalTestResult);\n                    return finalTestResult;\n                });\n            }\n            testResults.set(tester, synchronousTestResult);\n            return synchronousTestResult;\n        }\n        catch {\n            testResults.set(tester, false);\n            return false;\n        }\n    };\n};\n//# sourceMappingURL=cache-test-result.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 1,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    numberOfInputs: 6\n};\nexport const createChannelMergerNodeConstructor = (audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class ChannelMergerNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeChannelMergerNode = createNativeChannelMergerNode(nativeContext, mergedOptions);\n            const channelMergerNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createChannelMergerNodeRenderer() : null));\n            super(context, false, nativeChannelMergerNode, channelMergerNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=channel-merger-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelMergerNodeRendererFactory = (createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfInputs: nativeAudioNode.numberOfInputs\n                };\n                nativeAudioNode = createNativeChannelMergerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=channel-merger-node-renderer-factory.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 6,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'discrete',\n    numberOfOutputs: 6\n};\nexport const createChannelSplitterNodeConstructor = (audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions) => {\n    return class ChannelSplitterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizeChannelSplitterOptions({ ...DEFAULT_OPTIONS, ...options });\n            const nativeChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, mergedOptions);\n            const channelSplitterNodeRenderer = ((isNativeOfflineAudioContext(nativeContext) ? createChannelSplitterNodeRenderer() : null));\n            super(context, false, nativeChannelSplitterNode, channelSplitterNodeRenderer);\n        }\n    };\n};\n//# sourceMappingURL=channel-splitter-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createChannelSplitterNodeRendererFactory = (createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioNode = getNativeAudioNode(proxy);\n            // If the initially used nativeAudioNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeAudioNodeIsOwnedByContext = isOwnedByContext(nativeAudioNode, nativeOfflineAudioContext);\n            if (!nativeAudioNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeAudioNode.channelCount,\n                    channelCountMode: nativeAudioNode.channelCountMode,\n                    channelInterpretation: nativeAudioNode.channelInterpretation,\n                    numberOfOutputs: nativeAudioNode.numberOfOutputs\n                };\n                nativeAudioNode = createNativeChannelSplitterNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioNode);\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeAudioNode);\n            return nativeAudioNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=channel-splitter-node-renderer-factory.js.map","export const createConnectAudioParam = (renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n    };\n};\n//# sourceMappingURL=connect-audio-param.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nexport const createConnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destination, output = 0, input = 0) => {\n        const outputAudioNode = outputAudioNodes[output];\n        if (outputAudioNode === undefined) {\n            throw createIndexSizeError();\n        }\n        if (isNativeAudioNode(destination)) {\n            return outputAudioNode.connect(destination, 0, input);\n        }\n        return outputAudioNode.connect(destination, 0);\n    };\n};\n//# sourceMappingURL=connect-multiple-outputs.js.map","export const createConnectedNativeAudioBufferSourceNodeFactory = (createNativeAudioBufferSourceNode) => {\n    return (nativeContext, nativeAudioNode) => {\n        const nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const nativeAudioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n        nativeAudioBufferSourceNode.loop = true;\n        nativeAudioBufferSourceNode.connect(nativeAudioNode);\n        nativeAudioBufferSourceNode.start();\n        return () => {\n            nativeAudioBufferSourceNode.stop();\n            nativeAudioBufferSourceNode.disconnect(nativeAudioNode);\n        };\n    };\n};\n//# sourceMappingURL=connected-native-audio-buffer-source-node-factory.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    offset: 1\n};\nexport const createConstantSourceNodeConstructor = (audioNodeConstructor, createAudioParam, createConstantSourceNodeRendererFactory, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class ConstantSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConstantSourceNode = createNativeConstantSourceNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const constantSourceNodeRenderer = ((isOffline ? createConstantSourceNodeRendererFactory() : null));\n            super(context, false, nativeConstantSourceNode, constantSourceNodeRenderer);\n            this._constantSourceNodeRenderer = constantSourceNodeRenderer;\n            this._nativeConstantSourceNode = nativeConstantSourceNode;\n            /*\n             * Bug #62 & #74: Safari does not support ConstantSourceNodes and does not export the correct values for maxValue and minValue\n             * for GainNodes.\n             */\n            this._offset = createAudioParam(this, isOffline, nativeConstantSourceNode.offset, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._onended = null;\n        }\n        get offset() {\n            return this._offset;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeConstantSourceNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeConstantSourceNode.onended;\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n        start(when = 0) {\n            this._nativeConstantSourceNode.start(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.start = when;\n            }\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeConstantSourceNode.removeEventListener('ended', resetInternalStateToPassive);\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n                this._nativeConstantSourceNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeConstantSourceNode.stop(when);\n            if (this._constantSourceNodeRenderer !== null) {\n                this._constantSourceNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=constant-source-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConstantSourceNodeRendererFactory = (connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConstantSourceNodes = new WeakMap();\n        let start = null;\n        let stop = null;\n        const createConstantSourceNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConstantSourceNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeConstantSourceNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeConstantSourceNodeIsOwnedByContext = isOwnedByContext(nativeConstantSourceNode, nativeOfflineAudioContext);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeConstantSourceNode.channelCount,\n                    channelCountMode: nativeConstantSourceNode.channelCountMode,\n                    channelInterpretation: nativeConstantSourceNode.channelInterpretation,\n                    offset: nativeConstantSourceNode.offset.value\n                };\n                nativeConstantSourceNode = createNativeConstantSourceNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeConstantSourceNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeConstantSourceNode.stop(stop);\n                }\n            }\n            renderedNativeConstantSourceNodes.set(nativeOfflineAudioContext, nativeConstantSourceNode);\n            if (!nativeConstantSourceNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.offset, nativeConstantSourceNode.offset);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConstantSourceNode);\n            return nativeConstantSourceNode;\n        };\n        return {\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConstantSourceNode = renderedNativeConstantSourceNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConstantSourceNode !== undefined) {\n                    return Promise.resolve(renderedNativeConstantSourceNode);\n                }\n                return createConstantSourceNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=constant-source-node-renderer-factory.js.map","export const createConvertNumberToUnsignedLong = (unit32Array) => {\n    return (value) => {\n        unit32Array[0] = value;\n        return unit32Array[0];\n    };\n};\n//# sourceMappingURL=convert-number-to-unsigned-long.js.map","const DEFAULT_OPTIONS = {\n    buffer: null,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    disableNormalization: false\n};\nexport const createConvolverNodeConstructor = (audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class ConvolverNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeConvolverNode = createNativeConvolverNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const convolverNodeRenderer = (isOffline ? createConvolverNodeRenderer() : null);\n            super(context, false, nativeConvolverNode, convolverNodeRenderer);\n            this._isBufferNullified = false;\n            this._nativeConvolverNode = nativeConvolverNode;\n            if (mergedOptions.buffer !== null) {\n                setAudioNodeTailTime(this, mergedOptions.buffer.duration);\n            }\n        }\n        get buffer() {\n            if (this._isBufferNullified) {\n                return null;\n            }\n            return this._nativeConvolverNode.buffer;\n        }\n        set buffer(value) {\n            this._nativeConvolverNode.buffer = value;\n            // Bug #115: Safari does not allow to set the buffer to null.\n            if (value === null && this._nativeConvolverNode.buffer !== null) {\n                const nativeContext = this._nativeConvolverNode.context;\n                this._nativeConvolverNode.buffer = nativeContext.createBuffer(1, 1, nativeContext.sampleRate);\n                this._isBufferNullified = true;\n                setAudioNodeTailTime(this, 0);\n            }\n            else {\n                this._isBufferNullified = false;\n                setAudioNodeTailTime(this, this._nativeConvolverNode.buffer === null ? 0 : this._nativeConvolverNode.buffer.duration);\n            }\n        }\n        get normalize() {\n            return this._nativeConvolverNode.normalize;\n        }\n        set normalize(value) {\n            this._nativeConvolverNode.normalize = value;\n        }\n    };\n};\n//# sourceMappingURL=convolver-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createConvolverNodeRendererFactory = (createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeConvolverNodes = new WeakMap();\n        const createConvolverNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeConvolverNode = getNativeAudioNode(proxy);\n            // If the initially used nativeConvolverNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeConvolverNodeIsOwnedByContext = isOwnedByContext(nativeConvolverNode, nativeOfflineAudioContext);\n            if (!nativeConvolverNodeIsOwnedByContext) {\n                const options = {\n                    buffer: nativeConvolverNode.buffer,\n                    channelCount: nativeConvolverNode.channelCount,\n                    channelCountMode: nativeConvolverNode.channelCountMode,\n                    channelInterpretation: nativeConvolverNode.channelInterpretation,\n                    disableNormalization: !nativeConvolverNode.normalize\n                };\n                nativeConvolverNode = createNativeConvolverNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeConvolverNodes.set(nativeOfflineAudioContext, nativeConvolverNode);\n            if (isNativeAudioNodeFaker(nativeConvolverNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeConvolverNode);\n            }\n            return nativeConvolverNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeConvolverNode = renderedNativeConvolverNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeConvolverNode !== undefined) {\n                    return Promise.resolve(renderedNativeConvolverNode);\n                }\n                return createConvolverNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=convolver-node-renderer-factory.js.map","export const createCreateNativeOfflineAudioContext = (createNotSupportedError, nativeOfflineAudioContextConstructor) => {\n    return (numberOfChannels, length, sampleRate) => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        try {\n            return new nativeOfflineAudioContextConstructor(numberOfChannels, length, sampleRate);\n        }\n        catch (err) {\n            // Bug #143, #144 & #146: Safari throws a SyntaxError when numberOfChannels, length or sampleRate are invalid.\n            if (err.name === 'SyntaxError') {\n                throw createNotSupportedError();\n            }\n            throw err;\n        }\n    };\n};\n//# sourceMappingURL=create-native-offline-audio-context.js.map","export const createDataCloneError = () => new DOMException('', 'DataCloneError');\n//# sourceMappingURL=data-clone-error.js.map","export const detachArrayBuffer = (arrayBuffer) => {\n    const { port1, port2 } = new MessageChannel();\n    return new Promise((resolve) => {\n        const closeAndResolve = () => {\n            port2.onmessage = null;\n            port1.close();\n            port2.close();\n            resolve();\n        };\n        port2.onmessage = () => closeAndResolve();\n        try {\n            port1.postMessage(arrayBuffer, [arrayBuffer]);\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            closeAndResolve();\n        }\n    });\n};\n//# sourceMappingURL=detach-array-buffer.js.map","import { detachArrayBuffer } from '../helpers/detach-array-buffer';\nimport { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createDecodeAudioData = (audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, detachedArrayBuffers, getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (anyContext, audioData) => {\n        const nativeContext = isNativeContext(anyContext) ? anyContext : getNativeContext(anyContext);\n        // Bug #43: Only Chrome and Edge do throw a DataCloneError.\n        if (detachedArrayBuffers.has(audioData)) {\n            const err = createDataCloneError();\n            return Promise.reject(err);\n        }\n        // The audioData parameter maybe of a type which can't be added to a WeakSet.\n        try {\n            detachedArrayBuffers.add(audioData);\n        }\n        catch {\n            // Ignore errors.\n        }\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeContext))) {\n            return nativeContext.decodeAudioData(audioData).then((audioBuffer) => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                detachArrayBuffer(audioData).catch(() => {\n                    // Ignore errors.\n                });\n                // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n                if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n                    wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n                }\n                audioBufferStore.add(audioBuffer);\n                return audioBuffer;\n            });\n        }\n        // Bug #21: Safari does not return a Promise yet.\n        return new Promise((resolve, reject) => {\n            const complete = async () => {\n                // Bug #133: Safari does neuter the ArrayBuffer.\n                try {\n                    await detachArrayBuffer(audioData);\n                }\n                catch {\n                    // Ignore errors.\n                }\n            };\n            const fail = (err) => {\n                reject(err);\n                complete();\n            };\n            // Bug #26: Safari throws a synchronous error.\n            try {\n                // Bug #1: Safari requires a successCallback.\n                nativeContext.decodeAudioData(audioData, (audioBuffer) => {\n                    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n                    // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n                    if (typeof audioBuffer.copyFromChannel !== 'function') {\n                        wrapAudioBufferCopyChannelMethods(audioBuffer);\n                        wrapAudioBufferGetChannelDataMethod(audioBuffer);\n                    }\n                    audioBufferStore.add(audioBuffer);\n                    complete().then(() => resolve(audioBuffer));\n                }, (err) => {\n                    // Bug #4: Safari returns null instead of an error.\n                    if (err === null) {\n                        fail(createEncodingError());\n                    }\n                    else {\n                        fail(err);\n                    }\n                });\n            }\n            catch (err) {\n                fail(err);\n            }\n        });\n    };\n};\n//# sourceMappingURL=decode-audio-data.js.map","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createDecrementCycleCounter = (connectNativeAudioNodeToNativeAudioNode, cycleCounters, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext) => {\n    return (audioNode, count) => {\n        const cycleCounter = cycleCounters.get(audioNode);\n        if (cycleCounter === undefined) {\n            throw new Error('Missing the expected cycle count.');\n        }\n        const nativeContext = getNativeContext(audioNode.context);\n        const isOffline = isNativeOfflineAudioContext(nativeContext);\n        if (cycleCounter === count) {\n            cycleCounters.delete(audioNode);\n            if (!isOffline && isActiveAudioNode(audioNode)) {\n                const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                const { outputs } = getAudioNodeConnections(audioNode);\n                for (const output of outputs) {\n                    if (isAudioNodeOutputConnection(output)) {\n                        const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                        connectNativeAudioNodeToNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                    }\n                    else {\n                        const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                        nativeSourceAudioNode.connect(nativeDestinationAudioParam, output[1]);\n                    }\n                }\n            }\n        }\n        else {\n            cycleCounters.set(audioNode, cycleCounter - count);\n        }\n    };\n};\n//# sourceMappingURL=decrement-cycle-counter.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    delayTime: 0,\n    maxDelayTime: 1\n};\nexport const createDelayNodeConstructor = (audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class DelayNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDelayNode = createNativeDelayNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const delayNodeRenderer = (isOffline ? createDelayNodeRenderer(mergedOptions.maxDelayTime) : null);\n            super(context, false, nativeDelayNode, delayNodeRenderer);\n            this._delayTime = createAudioParam(this, isOffline, nativeDelayNode.delayTime);\n            setAudioNodeTailTime(this, mergedOptions.maxDelayTime);\n        }\n        get delayTime() {\n            return this._delayTime;\n        }\n    };\n};\n//# sourceMappingURL=delay-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDelayNodeRendererFactory = (connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return (maxDelayTime) => {\n        const renderedNativeDelayNodes = new WeakMap();\n        const createDelayNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDelayNode = getNativeAudioNode(proxy);\n            // If the initially used nativeDelayNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeDelayNodeIsOwnedByContext = isOwnedByContext(nativeDelayNode, nativeOfflineAudioContext);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeDelayNode.channelCount,\n                    channelCountMode: nativeDelayNode.channelCountMode,\n                    channelInterpretation: nativeDelayNode.channelInterpretation,\n                    delayTime: nativeDelayNode.delayTime.value,\n                    maxDelayTime\n                };\n                nativeDelayNode = createNativeDelayNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDelayNodes.set(nativeOfflineAudioContext, nativeDelayNode);\n            if (!nativeDelayNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.delayTime, nativeDelayNode.delayTime);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDelayNode);\n            return nativeDelayNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDelayNode = renderedNativeDelayNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDelayNode !== undefined) {\n                    return Promise.resolve(renderedNativeDelayNode);\n                }\n                return createDelayNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=delay-node-renderer-factory.js.map","export const createDeleteActiveInputConnectionToAudioNode = (pickElementFromSet) => {\n    return (activeInputs, source, output, input) => {\n        return pickElementFromSet(activeInputs[input], (activeInputConnection) => activeInputConnection[0] === source && activeInputConnection[1] === output);\n    };\n};\n//# sourceMappingURL=delete-active-input-connection-to-audio-node.js.map","export const createDeleteUnrenderedAudioWorkletNode = (getUnrenderedAudioWorkletNodes) => {\n    return (nativeContext, audioWorkletNode) => {\n        getUnrenderedAudioWorkletNodes(nativeContext).delete(audioWorkletNode);\n    };\n};\n//# sourceMappingURL=delete-unrendered-audio-worklet-node.js.map","export const isDelayNode = (audioNode) => {\n    return 'delayTime' in audioNode;\n};\n//# sourceMappingURL=delay-node.js.map","import { isAudioNode } from '../guards/audio-node';\nimport { isDelayNode } from '../guards/delay-node';\nexport const createDetectCycles = (audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey) => {\n    return function detectCycles(chain, nextLink) {\n        const audioNode = isAudioNode(nextLink) ? nextLink : getValueForKey(audioParamAudioNodeStore, nextLink);\n        if (isDelayNode(audioNode)) {\n            return [];\n        }\n        if (chain[0] === audioNode) {\n            return [chain];\n        }\n        if (chain.includes(audioNode)) {\n            return [];\n        }\n        const { outputs } = getAudioNodeConnections(audioNode);\n        return Array.from(outputs)\n            .map((outputConnection) => detectCycles([...chain, audioNode], outputConnection[0]))\n            .reduce((mergedCycles, nestedCycles) => mergedCycles.concat(nestedCycles), []);\n    };\n};\n//# sourceMappingURL=detect-cycles.js.map","import { isNativeAudioNode } from '../guards/native-audio-node';\nconst getOutputAudioNodeAtIndex = (createIndexSizeError, outputAudioNodes, output) => {\n    const outputAudioNode = outputAudioNodes[output];\n    if (outputAudioNode === undefined) {\n        throw createIndexSizeError();\n    }\n    return outputAudioNode;\n};\nexport const createDisconnectMultipleOutputs = (createIndexSizeError) => {\n    return (outputAudioNodes, destinationOrOutput = undefined, output = undefined, input = 0) => {\n        if (destinationOrOutput === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect());\n        }\n        if (typeof destinationOrOutput === 'number') {\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, destinationOrOutput).disconnect();\n        }\n        if (isNativeAudioNode(destinationOrOutput)) {\n            if (output === undefined) {\n                return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n            }\n            if (input === undefined) {\n                return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n            }\n            return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0, input);\n        }\n        if (output === undefined) {\n            return outputAudioNodes.forEach((outputAudioNode) => outputAudioNode.disconnect(destinationOrOutput));\n        }\n        return getOutputAudioNodeAtIndex(createIndexSizeError, outputAudioNodes, output).disconnect(destinationOrOutput, 0);\n    };\n};\n//# sourceMappingURL=disconnect-multiple-outputs.js.map","const DEFAULT_OPTIONS = {\n    attack: 0.003,\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    knee: 30,\n    ratio: 12,\n    release: 0.25,\n    threshold: -24\n};\nexport const createDynamicsCompressorNodeConstructor = (audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class DynamicsCompressorNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const dynamicsCompressorNodeRenderer = (isOffline ? createDynamicsCompressorNodeRenderer() : null);\n            super(context, false, nativeDynamicsCompressorNode, dynamicsCompressorNodeRenderer);\n            this._attack = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.attack);\n            this._knee = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.knee);\n            this._nativeDynamicsCompressorNode = nativeDynamicsCompressorNode;\n            this._ratio = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.ratio);\n            this._release = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.release);\n            this._threshold = createAudioParam(this, isOffline, nativeDynamicsCompressorNode.threshold);\n            setAudioNodeTailTime(this, 0.006);\n        }\n        get attack() {\n            return this._attack;\n        }\n        // Bug #108: Safari allows a channelCount of three and above which is why the getter and setter needs to be overwritten here.\n        get channelCount() {\n            return this._nativeDynamicsCompressorNode.channelCount;\n        }\n        set channelCount(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCount;\n            this._nativeDynamicsCompressorNode.channelCount = value;\n            if (value > 2) {\n                this._nativeDynamicsCompressorNode.channelCount = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        /*\n         * Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max' yet which is why the getter and setter needs to be\n         * overwritten here.\n         */\n        get channelCountMode() {\n            return this._nativeDynamicsCompressorNode.channelCountMode;\n        }\n        set channelCountMode(value) {\n            const previousChannelCount = this._nativeDynamicsCompressorNode.channelCountMode;\n            this._nativeDynamicsCompressorNode.channelCountMode = value;\n            if (value === 'max') {\n                this._nativeDynamicsCompressorNode.channelCountMode = previousChannelCount;\n                throw createNotSupportedError();\n            }\n        }\n        get knee() {\n            return this._knee;\n        }\n        get ratio() {\n            return this._ratio;\n        }\n        get reduction() {\n            // Bug #111: Safari returns an AudioParam instead of a number.\n            if (typeof this._nativeDynamicsCompressorNode.reduction.value === 'number') {\n                return this._nativeDynamicsCompressorNode.reduction.value;\n            }\n            return this._nativeDynamicsCompressorNode.reduction;\n        }\n        get release() {\n            return this._release;\n        }\n        get threshold() {\n            return this._threshold;\n        }\n    };\n};\n//# sourceMappingURL=dynamics-compressor-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createDynamicsCompressorNodeRendererFactory = (connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeDynamicsCompressorNodes = new WeakMap();\n        const createDynamicsCompressorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeDynamicsCompressorNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeDynamicsCompressorNode was not constructed on the same OfflineAudioContext it needs to be\n             * created again.\n             */\n            const nativeDynamicsCompressorNodeIsOwnedByContext = isOwnedByContext(nativeDynamicsCompressorNode, nativeOfflineAudioContext);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                const options = {\n                    attack: nativeDynamicsCompressorNode.attack.value,\n                    channelCount: nativeDynamicsCompressorNode.channelCount,\n                    channelCountMode: nativeDynamicsCompressorNode.channelCountMode,\n                    channelInterpretation: nativeDynamicsCompressorNode.channelInterpretation,\n                    knee: nativeDynamicsCompressorNode.knee.value,\n                    ratio: nativeDynamicsCompressorNode.ratio.value,\n                    release: nativeDynamicsCompressorNode.release.value,\n                    threshold: nativeDynamicsCompressorNode.threshold.value\n                };\n                nativeDynamicsCompressorNode = createNativeDynamicsCompressorNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeDynamicsCompressorNodes.set(nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            if (!nativeDynamicsCompressorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await renderAutomation(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await renderAutomation(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await renderAutomation(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await renderAutomation(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.attack, nativeDynamicsCompressorNode.attack);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.knee, nativeDynamicsCompressorNode.knee);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.ratio, nativeDynamicsCompressorNode.ratio);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.release, nativeDynamicsCompressorNode.release);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.threshold, nativeDynamicsCompressorNode.threshold);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeDynamicsCompressorNode);\n            return nativeDynamicsCompressorNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeDynamicsCompressorNode = renderedNativeDynamicsCompressorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeDynamicsCompressorNode !== undefined) {\n                    return Promise.resolve(renderedNativeDynamicsCompressorNode);\n                }\n                return createDynamicsCompressorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=dynamics-compressor-node-renderer-factory.js.map","export const createEncodingError = () => new DOMException('', 'EncodingError');\n//# sourceMappingURL=encoding-error.js.map","export const createEvaluateSource = (window) => {\n    return (source) => new Promise((resolve, reject) => {\n        if (window === null) {\n            // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n            reject(new SyntaxError());\n            return;\n        }\n        const head = window.document.head;\n        if (head === null) {\n            // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n            reject(new SyntaxError());\n        }\n        else {\n            const script = window.document.createElement('script');\n            // @todo Safari doesn't like URLs with a type of 'application/javascript; charset=utf-8'.\n            const blob = new Blob([source], { type: 'application/javascript' });\n            const url = URL.createObjectURL(blob);\n            const originalOnErrorHandler = window.onerror;\n            const removeErrorEventListenerAndRevokeUrl = () => {\n                window.onerror = originalOnErrorHandler;\n                URL.revokeObjectURL(url);\n            };\n            window.onerror = (message, src, lineno, colno, error) => {\n                // @todo Edge thinks the source is the one of the html document.\n                if (src === url || (src === window.location.href && lineno === 1 && colno === 1)) {\n                    removeErrorEventListenerAndRevokeUrl();\n                    reject(error);\n                    return false;\n                }\n                if (originalOnErrorHandler !== null) {\n                    return originalOnErrorHandler(message, src, lineno, colno, error);\n                }\n            };\n            script.onerror = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                // Bug #182 Chrome and Edge do throw an instance of a SyntaxError instead of a DOMException.\n                reject(new SyntaxError());\n            };\n            script.onload = () => {\n                removeErrorEventListenerAndRevokeUrl();\n                resolve();\n            };\n            script.src = url;\n            script.type = 'module';\n            head.appendChild(script);\n        }\n    });\n};\n//# sourceMappingURL=evaluate-source.js.map","export const createEventTargetConstructor = (wrapEventListener) => {\n    return class EventTarget {\n        constructor(_nativeEventTarget) {\n            this._nativeEventTarget = _nativeEventTarget;\n            this._listeners = new WeakMap();\n        }\n        addEventListener(type, listener, options) {\n            if (listener !== null) {\n                let wrappedEventListener = this._listeners.get(listener);\n                if (wrappedEventListener === undefined) {\n                    wrappedEventListener = wrapEventListener(this, listener);\n                    if (typeof listener === 'function') {\n                        this._listeners.set(listener, wrappedEventListener);\n                    }\n                }\n                this._nativeEventTarget.addEventListener(type, wrappedEventListener, options);\n            }\n        }\n        dispatchEvent(event) {\n            return this._nativeEventTarget.dispatchEvent(event);\n        }\n        removeEventListener(type, listener, options) {\n            const wrappedEventListener = listener === null ? undefined : this._listeners.get(listener);\n            this._nativeEventTarget.removeEventListener(type, wrappedEventListener === undefined ? null : wrappedEventListener, options);\n        }\n    };\n};\n//# sourceMappingURL=event-target-constructor.js.map","export const createExposeCurrentFrameAndCurrentTime = (window) => {\n    return (currentTime, sampleRate, fn) => {\n        Object.defineProperties(window, {\n            currentFrame: {\n                configurable: true,\n                get() {\n                    return Math.round(currentTime * sampleRate);\n                }\n            },\n            currentTime: {\n                configurable: true,\n                get() {\n                    return currentTime;\n                }\n            }\n        });\n        try {\n            return fn();\n        }\n        finally {\n            if (window !== null) {\n                delete window.currentFrame;\n                delete window.currentTime;\n            }\n        }\n    };\n};\n//# sourceMappingURL=expose-current-frame-and-current-time.js.map","export const createFetchSource = (createAbortError) => {\n    return async (url) => {\n        try {\n            const response = await fetch(url);\n            if (response.ok) {\n                return [await response.text(), response.url];\n            }\n        }\n        catch {\n            // Ignore errors.\n        } // tslint:disable-line:no-empty\n        throw createAbortError();\n    };\n};\n//# sourceMappingURL=fetch-source.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    gain: 1\n};\nexport const createGainNodeConstructor = (audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class GainNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeGainNode = createNativeGainNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const gainNodeRenderer = (isOffline ? createGainNodeRenderer() : null);\n            super(context, false, nativeGainNode, gainNodeRenderer);\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._gain = createAudioParam(this, isOffline, nativeGainNode.gain, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n        }\n        get gain() {\n            return this._gain;\n        }\n    };\n};\n//# sourceMappingURL=gain-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createGainNodeRendererFactory = (connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeGainNodes = new WeakMap();\n        const createGainNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = getNativeAudioNode(proxy);\n            // If the initially used nativeGainNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeGainNodeIsOwnedByContext = isOwnedByContext(nativeGainNode, nativeOfflineAudioContext);\n            if (!nativeGainNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeGainNode.channelCount,\n                    channelCountMode: nativeGainNode.channelCountMode,\n                    channelInterpretation: nativeGainNode.channelInterpretation,\n                    gain: nativeGainNode.gain.value\n                };\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeGainNodes.set(nativeOfflineAudioContext, nativeGainNode);\n            if (!nativeGainNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.gain, nativeGainNode.gain);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeGainNode);\n            return nativeGainNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNode = renderedNativeGainNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNode);\n                }\n                return createGainNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=gain-node-renderer-factory.js.map","export const createGetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore, getValueForKey) => {\n    return (nativeAudioWorkletNode) => getValueForKey(activeAudioWorkletNodeInputsStore, nativeAudioWorkletNode);\n};\n//# sourceMappingURL=get-active-audio-worklet-node-inputs.js.map","export const createGetAudioNodeRenderer = (getAudioNodeConnections) => {\n    return (audioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        if (audioNodeConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioNode in the audio graph.');\n        }\n        return audioNodeConnections.renderer;\n    };\n};\n//# sourceMappingURL=get-audio-node-renderer.js.map","export const createGetAudioNodeTailTime = (audioNodeTailTimeStore) => {\n    return (audioNode) => { var _a; return (_a = audioNodeTailTimeStore.get(audioNode)) !== null && _a !== void 0 ? _a : 0; };\n};\n//# sourceMappingURL=get-audio-node-tail-time.js.map","export const createGetAudioParamRenderer = (getAudioParamConnections) => {\n    return (audioParam) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        if (audioParamConnections.renderer === null) {\n            throw new Error('Missing the renderer of the given AudioParam in the audio graph.');\n        }\n        return audioParamConnections.renderer;\n    };\n};\n//# sourceMappingURL=get-audio-param-renderer.js.map","export const createGetBackupOfflineAudioContext = (backupOfflineAudioContextStore) => {\n    return (nativeContext) => {\n        return backupOfflineAudioContextStore.get(nativeContext);\n    };\n};\n//# sourceMappingURL=get-backup-offline-audio-context.js.map","export const createInvalidStateError = () => new DOMException('', 'InvalidStateError');\n//# sourceMappingURL=invalid-state-error.js.map","import { createInvalidStateError } from './invalid-state-error';\nexport const createGetNativeContext = (contextStore) => {\n    return (context) => {\n        const nativeContext = contextStore.get(context);\n        if (nativeContext === undefined) {\n            throw createInvalidStateError();\n        }\n        return (nativeContext);\n    };\n};\n//# sourceMappingURL=get-native-context.js.map","export const createGetOrCreateBackupOfflineAudioContext = (backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor) => {\n    return (nativeContext) => {\n        let backupOfflineAudioContext = backupOfflineAudioContextStore.get(nativeContext);\n        if (backupOfflineAudioContext !== undefined) {\n            return backupOfflineAudioContext;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            throw new Error('Missing the native OfflineAudioContext constructor.');\n        }\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        backupOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        backupOfflineAudioContextStore.set(nativeContext, backupOfflineAudioContext);\n        return backupOfflineAudioContext;\n    };\n};\n//# sourceMappingURL=get-or-create-backup-offline-audio-context.js.map","export const createGetUnrenderedAudioWorkletNodes = (unrenderedAudioWorkletNodeStore) => {\n    return (nativeContext) => {\n        const unrenderedAudioWorkletNodes = unrenderedAudioWorkletNodeStore.get(nativeContext);\n        if (unrenderedAudioWorkletNodes === undefined) {\n            throw new Error('The context has no set of AudioWorkletNodes.');\n        }\n        return unrenderedAudioWorkletNodes;\n    };\n};\n//# sourceMappingURL=get-unrendered-audio-worklet-nodes.js.map","export const createInvalidAccessError = () => new DOMException('', 'InvalidAccessError');\n//# sourceMappingURL=invalid-access-error.js.map","import { createInvalidAccessError } from '../factories/invalid-access-error';\nexport const wrapIIRFilterNodeGetFrequencyResponseMethod = (nativeIIRFilterNode) => {\n    nativeIIRFilterNode.getFrequencyResponse = ((getFrequencyResponse) => {\n        return (frequencyHz, magResponse, phaseResponse) => {\n            if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                throw createInvalidAccessError();\n            }\n            return getFrequencyResponse.call(nativeIIRFilterNode, frequencyHz, magResponse, phaseResponse);\n        };\n    })(nativeIIRFilterNode.getFrequencyResponse);\n};\n//# sourceMappingURL=wrap-iir-filter-node-get-frequency-response-method.js.map","import { wrapIIRFilterNodeGetFrequencyResponseMethod } from '../helpers/wrap-iir-filter-node-get-frequency-response-method';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers'\n};\nexport const createIIRFilterNodeConstructor = (audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class IIRFilterNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeIIRFilterNode = createNativeIIRFilterNode(nativeContext, isOffline ? null : context.baseLatency, mergedOptions);\n            const iirFilterNodeRenderer = ((isOffline ? createIIRFilterNodeRenderer(mergedOptions.feedback, mergedOptions.feedforward) : null));\n            super(context, false, nativeIIRFilterNode, iirFilterNodeRenderer);\n            // Bug #23 & #24: FirefoxDeveloper does not throw an InvalidAccessError.\n            // @todo Write a test which allows other browsers to remain unpatched.\n            wrapIIRFilterNodeGetFrequencyResponseMethod(nativeIIRFilterNode);\n            this._nativeIIRFilterNode = nativeIIRFilterNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n            return this._nativeIIRFilterNode.getFrequencyResponse(frequencyHz, magResponse, phaseResponse);\n        }\n    };\n};\n//# sourceMappingURL=iir-filter-node-constructor.js.map","// This implementation as shamelessly inspired by source code of\n// tslint:disable-next-line:max-line-length\n// {@link https://chromium.googlesource.com/chromium/src.git/+/master/third_party/WebKit/Source/platform/audio/IIRFilter.cpp|Chromium's IIRFilter}.\nexport const filterBuffer = (feedback, feedbackLength, feedforward, feedforwardLength, minLength, xBuffer, yBuffer, bufferIndex, bufferLength, input, output) => {\n    const inputLength = input.length;\n    let i = bufferIndex;\n    for (let j = 0; j < inputLength; j += 1) {\n        let y = feedforward[0] * input[j];\n        for (let k = 1; k < minLength; k += 1) {\n            const x = (i - k) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n            y += feedforward[k] * xBuffer[x];\n            y -= feedback[k] * yBuffer[x];\n        }\n        for (let k = minLength; k < feedforwardLength; k += 1) {\n            y += feedforward[k] * xBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        for (let k = minLength; k < feedbackLength; k += 1) {\n            y -= feedback[k] * yBuffer[(i - k) & (bufferLength - 1)]; // tslint:disable-line:no-bitwise\n        }\n        xBuffer[i] = input[j];\n        yBuffer[i] = y;\n        i = (i + 1) & (bufferLength - 1); // tslint:disable-line:no-bitwise\n        output[j] = y;\n    }\n    return i;\n};\n//# sourceMappingURL=filter-buffer.js.map","import { filterBuffer } from '../helpers/filter-buffer';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nconst filterFullBuffer = (renderedBuffer, nativeOfflineAudioContext, feedback, feedforward) => {\n    const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n    const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n    const feedbackLength = convertedFeedback.length;\n    const feedforwardLength = convertedFeedforward.length;\n    const minLength = Math.min(feedbackLength, feedforwardLength);\n    if (convertedFeedback[0] !== 1) {\n        for (let i = 0; i < feedbackLength; i += 1) {\n            convertedFeedforward[i] /= convertedFeedback[0];\n        }\n        for (let i = 1; i < feedforwardLength; i += 1) {\n            convertedFeedback[i] /= convertedFeedback[0];\n        }\n    }\n    const bufferLength = 32;\n    const xBuffer = new Float32Array(bufferLength);\n    const yBuffer = new Float32Array(bufferLength);\n    const filteredBuffer = nativeOfflineAudioContext.createBuffer(renderedBuffer.numberOfChannels, renderedBuffer.length, renderedBuffer.sampleRate);\n    const numberOfChannels = renderedBuffer.numberOfChannels;\n    for (let i = 0; i < numberOfChannels; i += 1) {\n        const input = renderedBuffer.getChannelData(i);\n        const output = filteredBuffer.getChannelData(i);\n        xBuffer.fill(0);\n        yBuffer.fill(0);\n        filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffer, yBuffer, 0, bufferLength, input, output);\n    }\n    return filteredBuffer;\n};\nexport const createIIRFilterNodeRendererFactory = (createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return (feedback, feedforward) => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let filteredBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeAudioBufferSourceNode = null;\n            let nativeIIRFilterNode = getNativeAudioNode(proxy);\n            // If the initially used nativeIIRFilterNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeIIRFilterNodeIsOwnedByContext = isOwnedByContext(nativeIIRFilterNode, nativeOfflineAudioContext);\n            // Bug #9: Safari does not support IIRFilterNodes.\n            if (nativeOfflineAudioContext.createIIRFilter === undefined) {\n                nativeAudioBufferSourceNode = createNativeAudioBufferSourceNode(nativeOfflineAudioContext, {\n                    buffer: null,\n                    channelCount: 2,\n                    channelCountMode: 'max',\n                    channelInterpretation: 'speakers',\n                    loop: false,\n                    loopEnd: 0,\n                    loopStart: 0,\n                    playbackRate: 1\n                });\n            }\n            else if (!nativeIIRFilterNodeIsOwnedByContext) {\n                // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n                nativeIIRFilterNode = nativeOfflineAudioContext.createIIRFilter(feedforward, feedback);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeAudioBufferSourceNode === null ? nativeIIRFilterNode : nativeAudioBufferSourceNode);\n            if (nativeAudioBufferSourceNode !== null) {\n                if (filteredBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(\n                    // Bug #47: The AudioDestinationNode in Safari gets not initialized correctly.\n                    proxy.context.destination.channelCount, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    filteredBufferPromise = (async () => {\n                        await renderInputsOfAudioNode(proxy, partialOfflineAudioContext, partialOfflineAudioContext.destination);\n                        const renderedBuffer = await renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                        return filterFullBuffer(renderedBuffer, nativeOfflineAudioContext, feedback, feedforward);\n                    })();\n                }\n                const filteredBuffer = await filteredBufferPromise;\n                nativeAudioBufferSourceNode.buffer = filteredBuffer;\n                nativeAudioBufferSourceNode.start(0);\n                return nativeAudioBufferSourceNode;\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeIIRFilterNode);\n            return nativeIIRFilterNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeAudioNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeAudioNode !== undefined) {\n                    return Promise.resolve(renderedNativeAudioNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=iir-filter-node-renderer-factory.js.map","import { isAudioNodeOutputConnection } from '../guards/audio-node-output-connection';\nexport const createIncrementCycleCounterFactory = (cycleCounters, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode) => {\n    return (isOffline) => {\n        return (audioNode, count) => {\n            const cycleCounter = cycleCounters.get(audioNode);\n            if (cycleCounter === undefined) {\n                if (!isOffline && isActiveAudioNode(audioNode)) {\n                    const nativeSourceAudioNode = getNativeAudioNode(audioNode);\n                    const { outputs } = getAudioNodeConnections(audioNode);\n                    for (const output of outputs) {\n                        if (isAudioNodeOutputConnection(output)) {\n                            const nativeDestinationAudioNode = getNativeAudioNode(output[0]);\n                            disconnectNativeAudioNodeFromNativeAudioNode(nativeSourceAudioNode, nativeDestinationAudioNode, output[1], output[2]);\n                        }\n                        else {\n                            const nativeDestinationAudioParam = getNativeAudioParam(output[0]);\n                            nativeSourceAudioNode.disconnect(nativeDestinationAudioParam, output[1]);\n                        }\n                    }\n                }\n                cycleCounters.set(audioNode, count);\n            }\n            else {\n                cycleCounters.set(audioNode, cycleCounter + count);\n            }\n        };\n    };\n};\n//# sourceMappingURL=increment-cycle-counter-factory.js.map","export const createIsAnyAudioContext = (contextStore, isNativeAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeAudioContext(nativeContext) || isNativeAudioContext(anything);\n    };\n};\n//# sourceMappingURL=is-any-audio-context.js.map","export const createIsAnyAudioNode = (audioNodeStore, isNativeAudioNode) => {\n    return (anything) => audioNodeStore.has(anything) || isNativeAudioNode(anything);\n};\n//# sourceMappingURL=is-any-audio-node.js.map","export const createIsAnyAudioParam = (audioParamStore, isNativeAudioParam) => {\n    return (anything) => audioParamStore.has(anything) || isNativeAudioParam(anything);\n};\n//# sourceMappingURL=is-any-audio-param.js.map","export const createIsAnyOfflineAudioContext = (contextStore, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        const nativeContext = contextStore.get(anything);\n        return isNativeOfflineAudioContext(nativeContext) || isNativeOfflineAudioContext(anything);\n    };\n};\n//# sourceMappingURL=is-any-offline-audio-context.js.map","export const createIsNativeAudioContext = (nativeAudioContextConstructor) => {\n    return (anything) => {\n        return nativeAudioContextConstructor !== null && anything instanceof nativeAudioContextConstructor;\n    };\n};\n//# sourceMappingURL=is-native-audio-context.js.map","export const createIsNativeAudioNode = (window) => {\n    return (anything) => {\n        return window !== null && typeof window.AudioNode === 'function' && anything instanceof window.AudioNode;\n    };\n};\n//# sourceMappingURL=is-native-audio-node.js.map","export const createIsNativeAudioParam = (window) => {\n    return (anything) => {\n        return window !== null && typeof window.AudioParam === 'function' && anything instanceof window.AudioParam;\n    };\n};\n//# sourceMappingURL=is-native-audio-param.js.map","export const createIsNativeContext = (isNativeAudioContext, isNativeOfflineAudioContext) => {\n    return (anything) => {\n        return isNativeAudioContext(anything) || isNativeOfflineAudioContext(anything);\n    };\n};\n//# sourceMappingURL=is-native-context.js.map","export const createIsNativeOfflineAudioContext = (nativeOfflineAudioContextConstructor) => {\n    return (anything) => {\n        return nativeOfflineAudioContextConstructor !== null && anything instanceof nativeOfflineAudioContextConstructor;\n    };\n};\n//# sourceMappingURL=is-native-offline-audio-context.js.map","export const createIsSecureContext = (window) => window !== null && window.isSecureContext;\n//# sourceMappingURL=is-secure-context.js.map","export const createMediaElementAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaElementAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaElementAudioSourceNode = createNativeMediaElementAudioSourceNode(nativeContext, options);\n            // Bug #171: Safari allows to create a MediaElementAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw TypeError();\n            }\n            super(context, true, nativeMediaElementAudioSourceNode, null);\n            this._nativeMediaElementAudioSourceNode = nativeMediaElementAudioSourceNode;\n        }\n        get mediaElement() {\n            return this._nativeMediaElementAudioSourceNode.mediaElement;\n        }\n    };\n};\n//# sourceMappingURL=media-element-audio-source-node-constructor.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers'\n};\nexport const createMediaStreamAudioDestinationNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaStreamAudioDestinationNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            // Bug #173: Safari allows to create a MediaStreamAudioDestinationNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeMediaStreamAudioDestinationNode = createNativeMediaStreamAudioDestinationNode(nativeContext, mergedOptions);\n            super(context, false, nativeMediaStreamAudioDestinationNode, null);\n            this._nativeMediaStreamAudioDestinationNode = nativeMediaStreamAudioDestinationNode;\n        }\n        get stream() {\n            return this._nativeMediaStreamAudioDestinationNode.stream;\n        }\n    };\n};\n//# sourceMappingURL=media-stream-audio-destination-node-constructor.js.map","export const createMediaStreamAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext) => {\n    return class MediaStreamAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaStreamAudioSourceNode = createNativeMediaStreamAudioSourceNode(nativeContext, options);\n            // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n            if (isNativeOfflineAudioContext(nativeContext)) {\n                throw new TypeError();\n            }\n            super(context, true, nativeMediaStreamAudioSourceNode, null);\n            this._nativeMediaStreamAudioSourceNode = nativeMediaStreamAudioSourceNode;\n        }\n        get mediaStream() {\n            return this._nativeMediaStreamAudioSourceNode.mediaStream;\n        }\n    };\n};\n//# sourceMappingURL=media-stream-audio-source-node-constructor.js.map","export const createMediaStreamTrackAudioSourceNodeConstructor = (audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext) => {\n    return class MediaStreamTrackAudioSourceNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const nativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNode(nativeContext, options);\n            super(context, true, nativeMediaStreamTrackAudioSourceNode, null);\n        }\n    };\n};\n//# sourceMappingURL=media-stream-track-audio-source-node-constructor.js.map","import { CONTEXT_STORE } from '../globals';\nexport const createMinimalBaseAudioContextConstructor = (audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) => {\n    return class MinimalBaseAudioContext extends eventTargetConstructor {\n        constructor(_nativeContext, numberOfChannels) {\n            super(_nativeContext);\n            this._nativeContext = _nativeContext;\n            CONTEXT_STORE.set(this, _nativeContext);\n            if (isNativeOfflineAudioContext(_nativeContext)) {\n                unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n            }\n            this._destination = new audioDestinationNodeConstructor(this, numberOfChannels);\n            this._listener = createAudioListener(this, _nativeContext);\n            this._onstatechange = null;\n        }\n        get currentTime() {\n            return this._nativeContext.currentTime;\n        }\n        get destination() {\n            return this._destination;\n        }\n        get listener() {\n            return this._listener;\n        }\n        get onstatechange() {\n            return this._onstatechange;\n        }\n        set onstatechange(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeContext.onstatechange = wrappedListener;\n            const nativeOnStateChange = this._nativeContext.onstatechange;\n            this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n        }\n        get sampleRate() {\n            return this._nativeContext.sampleRate;\n        }\n        get state() {\n            return this._nativeContext.state;\n        }\n    };\n};\n//# sourceMappingURL=minimal-base-audio-context-constructor.js.map","export const testPromiseSupport = (nativeContext) => {\n    // This 12 numbers represent the 48 bytes of an empty WAVE file with a single sample.\n    const uint32Array = new Uint32Array([1179011410, 40, 1163280727, 544501094, 16, 131073, 44100, 176400, 1048580, 1635017060, 4, 0]);\n    try {\n        // Bug #1: Safari requires a successCallback.\n        const promise = nativeContext.decodeAudioData(uint32Array.buffer, () => {\n            // Ignore the success callback.\n        });\n        if (promise === undefined) {\n            return false;\n        }\n        promise.catch(() => {\n            // Ignore rejected errors.\n        });\n        return true;\n    }\n    catch {\n        // Ignore errors.\n    }\n    return false;\n};\n//# sourceMappingURL=test-promise-support.js.map","export const createMonitorConnections = (insertElementInSet, isNativeAudioNode) => {\n    return (nativeAudioNode, whenConnected, whenDisconnected) => {\n        const connections = new Set();\n        nativeAudioNode.connect = ((connect) => {\n            // tslint:disable-next-line:invalid-void no-inferrable-types\n            return (destination, output = 0, input = 0) => {\n                const wasDisconnected = connections.size === 0;\n                if (isNativeAudioNode(destination)) {\n                    // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                    connect.call(nativeAudioNode, destination, output, input);\n                    insertElementInSet(connections, [destination, output, input], (connection) => connection[0] === destination && connection[1] === output && connection[2] === input, true);\n                    if (wasDisconnected) {\n                        whenConnected();\n                    }\n                    return destination;\n                }\n                connect.call(nativeAudioNode, destination, output);\n                insertElementInSet(connections, [destination, output], (connection) => connection[0] === destination && connection[1] === output, true);\n                if (wasDisconnected) {\n                    whenConnected();\n                }\n                return;\n            };\n        })(nativeAudioNode.connect);\n        nativeAudioNode.disconnect = ((disconnect) => {\n            return (destinationOrOutput, output, input) => {\n                const wasConnected = connections.size > 0;\n                if (destinationOrOutput === undefined) {\n                    disconnect.apply(nativeAudioNode);\n                    connections.clear();\n                }\n                else if (typeof destinationOrOutput === 'number') {\n                    // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n                    disconnect.call(nativeAudioNode, destinationOrOutput);\n                    for (const connection of connections) {\n                        if (connection[1] === destinationOrOutput) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                else {\n                    if (isNativeAudioNode(destinationOrOutput)) {\n                        // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output, input);\n                    }\n                    else {\n                        // @todo TypeScript cannot infer the overloaded signature with 2 arguments yet.\n                        disconnect.call(nativeAudioNode, destinationOrOutput, output);\n                    }\n                    for (const connection of connections) {\n                        if (connection[0] === destinationOrOutput &&\n                            (output === undefined || connection[1] === output) &&\n                            (input === undefined || connection[2] === input)) {\n                            connections.delete(connection);\n                        }\n                    }\n                }\n                const isDisconnected = connections.size === 0;\n                if (wasConnected && isDisconnected) {\n                    whenDisconnected();\n                }\n            };\n        })(nativeAudioNode.disconnect);\n        return nativeAudioNode;\n    };\n};\n//# sourceMappingURL=monitor-connections.js.map","export const assignNativeAudioNodeOption = (nativeAudioNode, options, option) => {\n    const value = options[option];\n    if (value !== undefined && value !== nativeAudioNode[option]) {\n        nativeAudioNode[option] = value;\n    }\n};\n//# sourceMappingURL=assign-native-audio-node-option.js.map","import { assignNativeAudioNodeOption } from './assign-native-audio-node-option';\nexport const assignNativeAudioNodeOptions = (nativeAudioNode, options) => {\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCount');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelCountMode');\n    assignNativeAudioNodeOption(nativeAudioNode, options, 'channelInterpretation');\n};\n//# sourceMappingURL=assign-native-audio-node-options.js.map","export const testAnalyserNodeGetFloatTimeDomainDataMethodSupport = (nativeAnalyserNode) => {\n    return typeof nativeAnalyserNode.getFloatTimeDomainData === 'function';\n};\n//# sourceMappingURL=test-analyser-node-get-float-time-domain-data-method-support.js.map","export const wrapAnalyserNodeGetFloatTimeDomainDataMethod = (nativeAnalyserNode) => {\n    nativeAnalyserNode.getFloatTimeDomainData = (array) => {\n        const byteTimeDomainData = new Uint8Array(array.length);\n        nativeAnalyserNode.getByteTimeDomainData(byteTimeDomainData);\n        const length = Math.max(byteTimeDomainData.length, nativeAnalyserNode.fftSize);\n        for (let i = 0; i < length; i += 1) {\n            array[i] = (byteTimeDomainData[i] - 128) * 0.0078125;\n        }\n        return array;\n    };\n};\n//# sourceMappingURL=wrap-analyser-node-get-float-time-domain-data-method.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { testAnalyserNodeGetFloatTimeDomainDataMethodSupport } from '../helpers/test-analyser-node-get-float-time-domain-data-method-support';\nimport { wrapAnalyserNodeGetFloatTimeDomainDataMethod } from '../helpers/wrap-analyser-node-get-float-time-domain-data-method';\nexport const createNativeAnalyserNodeFactory = (cacheTestResult, createIndexSizeError) => {\n    return (nativeContext, options) => {\n        const nativeAnalyserNode = nativeContext.createAnalyser();\n        // Bug #37: Firefox does not create an AnalyserNode with the default properties.\n        assignNativeAudioNodeOptions(nativeAnalyserNode, options);\n        // Bug #118: Safari does not throw an error if maxDecibels is not more than minDecibels.\n        if (!(options.maxDecibels > options.minDecibels)) {\n            throw createIndexSizeError();\n        }\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'fftSize');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'maxDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'minDecibels');\n        assignNativeAudioNodeOption(nativeAnalyserNode, options, 'smoothingTimeConstant');\n        // Bug #36: Safari does not support getFloatTimeDomainData() yet.\n        if (!cacheTestResult(testAnalyserNodeGetFloatTimeDomainDataMethodSupport, () => testAnalyserNodeGetFloatTimeDomainDataMethodSupport(nativeAnalyserNode))) {\n            wrapAnalyserNodeGetFloatTimeDomainDataMethod(nativeAnalyserNode);\n        }\n        return nativeAnalyserNode;\n    };\n};\n//# sourceMappingURL=native-analyser-node-factory.js.map","export const createNativeAudioBufferConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioBuffer')) {\n        return window.AudioBuffer;\n    }\n    return null;\n};\n//# sourceMappingURL=native-audio-buffer-constructor.js.map","export const assignNativeAudioNodeAudioParamValue = (nativeAudioNode, options, audioParam) => {\n    const value = options[audioParam];\n    if (value !== undefined && value !== nativeAudioNode[audioParam].value) {\n        nativeAudioNode[audioParam].value = value;\n    }\n};\n//# sourceMappingURL=assign-native-audio-node-audio-param-value.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapAudioBufferSourceNodeStartMethodConsecutiveCalls = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        let isScheduled = false;\n        return (when = 0, offset = 0, duration) => {\n            if (isScheduled) {\n                throw createInvalidStateError();\n            }\n            start.call(nativeAudioBufferSourceNode, when, offset, duration);\n            isScheduled = true;\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=wrap-audio-buffer-source-node-start-method-consecutive-calls.js.map","export const wrapAudioScheduledSourceNodeStartMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            if ((typeof duration === 'number' && duration < 0) || offset < 0 || when < 0) {\n                throw new RangeError(\"The parameters can't be negative.\");\n            }\n            // @todo TypeScript cannot infer the overloaded signature with 3 arguments yet.\n            start.call(nativeAudioScheduledSourceNode, when, offset, duration);\n        };\n    })(nativeAudioScheduledSourceNode.start);\n};\n//# sourceMappingURL=wrap-audio-scheduled-source-node-start-method-negative-parameters.js.map","export const wrapAudioScheduledSourceNodeStopMethodNegativeParameters = (nativeAudioScheduledSourceNode) => {\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        return (when = 0) => {\n            if (when < 0) {\n                throw new RangeError(\"The parameter can't be negative.\");\n            }\n            stop.call(nativeAudioScheduledSourceNode, when);\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-negative-parameters.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioBufferSourceNodeStartMethodConsecutiveCalls } from '../helpers/wrap-audio-buffer-source-node-start-method-consecutive-calls';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeAudioBufferSourceNodeFactory = (addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClampling, wrapAudioBufferSourceNodeStopMethodNullifiedBuffer, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n        assignNativeAudioNodeOptions(nativeAudioBufferSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeAudioBufferSourceNode, options, 'playbackRate');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'buffer');\n        // Bug #149: Safari does not yet support the detune AudioParam.\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loop');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopEnd');\n        assignNativeAudioNodeOption(nativeAudioBufferSourceNode, options, 'loopStart');\n        // Bug #69: Safari does allow calls to start() of an already scheduled AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, () => testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodConsecutiveCalls(nativeAudioBufferSourceNode);\n        }\n        // Bug #154 & #155: Safari does not handle offsets which are equal to or greater than the duration of the buffer.\n        if (!cacheTestResult(testAudioBufferSourceNodeStartMethodOffsetClampingSupport, () => testAudioBufferSourceNodeStartMethodOffsetClampingSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStartMethodOffsetClampling(nativeAudioBufferSourceNode);\n        }\n        // Bug #162: Safari does throw an error when stop() is called on an AudioBufferSourceNode which has no buffer assigned to it.\n        if (!cacheTestResult(testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, () => testAudioBufferSourceNodeStopMethodNullifiedBufferSupport(nativeContext))) {\n            wrapAudioBufferSourceNodeStopMethodNullifiedBuffer(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Safari does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeAudioBufferSourceNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeAudioBufferSourceNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeAudioBufferSourceNode);\n        return nativeAudioBufferSourceNode;\n    };\n};\n//# sourceMappingURL=native-audio-buffer-source-node-factory.js.map","export const createNativeAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('AudioContext')) {\n        return window.AudioContext;\n    }\n    return window.hasOwnProperty('webkitAudioContext') ? window.webkitAudioContext : null;\n};\n//# sourceMappingURL=native-audio-context-constructor.js.map","export const createNativeAudioDestinationNodeFactory = (createNativeGainNode, overwriteAccessors) => {\n    return (nativeContext, channelCount, isNodeOfNativeOfflineAudioContext) => {\n        const nativeAudioDestinationNode = nativeContext.destination;\n        // Bug #132: Safari does not have the correct channelCount.\n        if (nativeAudioDestinationNode.channelCount !== channelCount) {\n            try {\n                nativeAudioDestinationNode.channelCount = channelCount;\n            }\n            catch {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n            }\n        }\n        // Bug #83: Safari does not have the correct channelCountMode.\n        if (isNodeOfNativeOfflineAudioContext && nativeAudioDestinationNode.channelCountMode !== 'explicit') {\n            nativeAudioDestinationNode.channelCountMode = 'explicit';\n        }\n        // Bug #47: The AudioDestinationNode in Safari does not initialize the maxChannelCount property correctly.\n        if (nativeAudioDestinationNode.maxChannelCount === 0) {\n            Object.defineProperty(nativeAudioDestinationNode, 'maxChannelCount', {\n                value: channelCount\n            });\n        }\n        // Bug #168: No browser does yet have an AudioDestinationNode with an output.\n        const gainNode = createNativeGainNode(nativeContext, {\n            channelCount,\n            channelCountMode: nativeAudioDestinationNode.channelCountMode,\n            channelInterpretation: nativeAudioDestinationNode.channelInterpretation,\n            gain: 1\n        });\n        overwriteAccessors(gainNode, 'channelCount', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            try {\n                nativeAudioDestinationNode.channelCount = value;\n            }\n            catch (err) {\n                // Bug #169: Safari throws an error on each attempt to change the channelCount.\n                if (value > nativeAudioDestinationNode.maxChannelCount) {\n                    throw err;\n                }\n            }\n        });\n        overwriteAccessors(gainNode, 'channelCountMode', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelCountMode = value;\n        });\n        overwriteAccessors(gainNode, 'channelInterpretation', (get) => () => get.call(gainNode), (set) => (value) => {\n            set.call(gainNode, value);\n            nativeAudioDestinationNode.channelInterpretation = value;\n        });\n        Object.defineProperty(gainNode, 'maxChannelCount', {\n            get: () => nativeAudioDestinationNode.maxChannelCount\n        });\n        // @todo This should be disconnected when the context is closed.\n        gainNode.connect(nativeAudioDestinationNode);\n        return gainNode;\n    };\n};\n//# sourceMappingURL=native-audio-destination-node.js.map","export const createNativeAudioWorkletNodeConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    return window.hasOwnProperty('AudioWorkletNode') ? window.AudioWorkletNode : null;\n};\n//# sourceMappingURL=native-audio-worklet-node-constructor.js.map","export const testClonabilityOfAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    const { port1 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n    }\n};\n//# sourceMappingURL=test-clonability-of-audio-worklet-node-options.js.map","import { testClonabilityOfAudioWorkletNodeOptions } from '../helpers/test-clonability-of-audio-worklet-node-options';\nexport const createNativeAudioWorkletNodeFactory = (createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections) => {\n    return (nativeContext, baseLatency, nativeAudioWorkletNodeConstructor, name, processorConstructor, options) => {\n        if (nativeAudioWorkletNodeConstructor !== null) {\n            try {\n                const nativeAudioWorkletNode = new nativeAudioWorkletNodeConstructor(nativeContext, name, options);\n                const patchedEventListeners = new Map();\n                let onprocessorerror = null;\n                Object.defineProperties(nativeAudioWorkletNode, {\n                    /*\n                     * Bug #61: Overwriting the property accessors for channelCount and channelCountMode is necessary as long as some\n                     * browsers have no native implementation to achieve a consistent behavior.\n                     */\n                    channelCount: {\n                        get: () => options.channelCount,\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    channelCountMode: {\n                        get: () => 'explicit',\n                        set: () => {\n                            throw createInvalidStateError();\n                        }\n                    },\n                    // Bug #156: Chrome and Edge do not yet fire an ErrorEvent.\n                    onprocessorerror: {\n                        get: () => onprocessorerror,\n                        set: (value) => {\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.removeEventListener('processorerror', onprocessorerror);\n                            }\n                            onprocessorerror = typeof value === 'function' ? value : null;\n                            if (typeof onprocessorerror === 'function') {\n                                nativeAudioWorkletNode.addEventListener('processorerror', onprocessorerror);\n                            }\n                        }\n                    }\n                });\n                nativeAudioWorkletNode.addEventListener = ((addEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const unpatchedEventListener = typeof args[1] === 'function'\n                                ? args[1]\n                                : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                                    ? args[1].handleEvent\n                                    : null;\n                            if (unpatchedEventListener !== null) {\n                                const patchedEventListener = patchedEventListeners.get(args[1]);\n                                if (patchedEventListener !== undefined) {\n                                    args[1] = patchedEventListener;\n                                }\n                                else {\n                                    args[1] = (event) => {\n                                        // Bug #178: Chrome and Edge do fire an event of type error.\n                                        if (event.type === 'error') {\n                                            Object.defineProperties(event, {\n                                                type: { value: 'processorerror' }\n                                            });\n                                            unpatchedEventListener(event);\n                                        }\n                                        else {\n                                            unpatchedEventListener(new ErrorEvent(args[0], { ...event }));\n                                        }\n                                    };\n                                    patchedEventListeners.set(unpatchedEventListener, args[1]);\n                                }\n                            }\n                        }\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        addEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n                        return addEventListener.call(nativeAudioWorkletNode, ...args);\n                    };\n                })(nativeAudioWorkletNode.addEventListener);\n                nativeAudioWorkletNode.removeEventListener = ((removeEventListener) => {\n                    return (...args) => {\n                        if (args[0] === 'processorerror') {\n                            const patchedEventListener = patchedEventListeners.get(args[1]);\n                            if (patchedEventListener !== undefined) {\n                                patchedEventListeners.delete(args[1]);\n                                args[1] = patchedEventListener;\n                            }\n                        }\n                        // Bug #178: Chrome and Edge do fire an event of type error.\n                        removeEventListener.call(nativeAudioWorkletNode, 'error', args[1], args[2]);\n                        return removeEventListener.call(nativeAudioWorkletNode, args[0], args[1], args[2]);\n                    };\n                })(nativeAudioWorkletNode.removeEventListener);\n                /*\n                 * Bug #86: Chrome and Edge do not invoke the process() function if the corresponding AudioWorkletNode is unconnected but\n                 * has an output.\n                 */\n                if (options.numberOfOutputs !== 0) {\n                    const nativeGainNode = createNativeGainNode(nativeContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'discrete',\n                        gain: 0\n                    });\n                    nativeAudioWorkletNode.connect(nativeGainNode).connect(nativeContext.destination);\n                    const whenConnected = () => nativeGainNode.disconnect();\n                    const whenDisconnected = () => nativeGainNode.connect(nativeContext.destination);\n                    // @todo Disconnect the connection when the process() function of the AudioWorkletNode returns false.\n                    return monitorConnections(nativeAudioWorkletNode, whenConnected, whenDisconnected);\n                }\n                return nativeAudioWorkletNode;\n            }\n            catch (err) {\n                // Bug #60: Chrome & Edge throw an InvalidStateError instead of a NotSupportedError.\n                if (err.code === 11) {\n                    throw createNotSupportedError();\n                }\n                throw err;\n            }\n        }\n        // Bug #61: Only Chrome & Edge have an implementation of the AudioWorkletNode yet.\n        if (processorConstructor === undefined) {\n            throw createNotSupportedError();\n        }\n        testClonabilityOfAudioWorkletNodeOptions(options);\n        return createNativeAudioWorkletNodeFaker(nativeContext, baseLatency, processorConstructor, options);\n    };\n};\n//# sourceMappingURL=native-audio-worklet-node-factory.js.map","export const computeBufferSize = (baseLatency, sampleRate) => {\n    if (baseLatency === null) {\n        return 512;\n    }\n    return Math.max(512, Math.min(16384, Math.pow(2, Math.round(Math.log2(baseLatency * sampleRate)))));\n};\n//# sourceMappingURL=compute-buffer-size.js.map","export const cloneAudioWorkletNodeOptions = (audioWorkletNodeOptions) => {\n    return new Promise((resolve, reject) => {\n        const { port1, port2 } = new MessageChannel();\n        port1.onmessage = ({ data }) => {\n            port1.close();\n            port2.close();\n            resolve(data);\n        };\n        port1.onmessageerror = ({ data }) => {\n            port1.close();\n            port2.close();\n            reject(data);\n        };\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port2.postMessage(audioWorkletNodeOptions);\n    });\n};\n//# sourceMappingURL=clone-audio-worklet-node-options.js.map","import { cloneAudioWorkletNodeOptions } from './clone-audio-worklet-node-options';\nexport const createAudioWorkletProcessorPromise = async (processorConstructor, audioWorkletNodeOptions) => {\n    const clonedAudioWorkletNodeOptions = await cloneAudioWorkletNodeOptions(audioWorkletNodeOptions);\n    return new processorConstructor(clonedAudioWorkletNodeOptions);\n};\n//# sourceMappingURL=create-audio-worklet-processor-promise.js.map","import { NODE_TO_PROCESSOR_MAPS } from '../globals';\nimport { createAudioWorkletProcessorPromise } from './create-audio-worklet-processor-promise';\nexport const createAudioWorkletProcessor = (nativeContext, nativeAudioWorkletNode, processorConstructor, audioWorkletNodeOptions) => {\n    let nodeToProcessorMap = NODE_TO_PROCESSOR_MAPS.get(nativeContext);\n    if (nodeToProcessorMap === undefined) {\n        nodeToProcessorMap = new WeakMap();\n        NODE_TO_PROCESSOR_MAPS.set(nativeContext, nodeToProcessorMap);\n    }\n    const audioWorkletProcessorPromise = createAudioWorkletProcessorPromise(processorConstructor, audioWorkletNodeOptions);\n    nodeToProcessorMap.set(nativeAudioWorkletNode, audioWorkletProcessorPromise);\n    return audioWorkletProcessorPromise;\n};\n//# sourceMappingURL=create-audio-worklet-processor.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nimport { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { copyFromChannel } from '../helpers/copy-from-channel';\nimport { copyToChannel } from '../helpers/copy-to-channel';\nimport { createAudioWorkletProcessor } from '../helpers/create-audio-worklet-processor';\nimport { createNestedArrays } from '../helpers/create-nested-arrays';\nimport { ReadOnlyMap } from '../read-only-map';\nexport const createNativeAudioWorkletNodeFakerFactory = (connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections) => {\n    return (nativeContext, baseLatency, processorConstructor, options) => {\n        if (options.numberOfInputs === 0 && options.numberOfOutputs === 0) {\n            throw createNotSupportedError();\n        }\n        const outputChannelCount = Array.isArray(options.outputChannelCount)\n            ? options.outputChannelCount\n            : Array.from(options.outputChannelCount);\n        // @todo Check if any of the channelCount values is greater than the implementation's maximum number of channels.\n        if (outputChannelCount.some((channelCount) => channelCount < 1)) {\n            throw createNotSupportedError();\n        }\n        if (outputChannelCount.length !== options.numberOfOutputs) {\n            throw createIndexSizeError();\n        }\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (options.channelCountMode !== 'explicit') {\n            throw createNotSupportedError();\n        }\n        const numberOfInputChannels = options.channelCount * options.numberOfInputs;\n        const numberOfOutputChannels = outputChannelCount.reduce((sum, value) => sum + value, 0);\n        const numberOfParameters = processorConstructor.parameterDescriptors === undefined ? 0 : processorConstructor.parameterDescriptors.length;\n        // Bug #61: This is not part of the standard but required for the faker to work.\n        if (numberOfInputChannels + numberOfParameters > 6 || numberOfOutputChannels > 6) {\n            throw createNotSupportedError();\n        }\n        const messageChannel = new MessageChannel();\n        const gainNodes = [];\n        const inputChannelSplitterNodes = [];\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes.push(createNativeGainNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: options.channelCountMode,\n                channelInterpretation: options.channelInterpretation,\n                gain: 1\n            }));\n            inputChannelSplitterNodes.push(createNativeChannelSplitterNode(nativeContext, {\n                channelCount: options.channelCount,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                numberOfOutputs: options.channelCount\n            }));\n        }\n        const constantSourceNodes = [];\n        if (processorConstructor.parameterDescriptors !== undefined) {\n            for (const { defaultValue, maxValue, minValue, name } of processorConstructor.parameterDescriptors) {\n                const constantSourceNode = createNativeConstantSourceNode(nativeContext, {\n                    channelCount: 1,\n                    channelCountMode: 'explicit',\n                    channelInterpretation: 'discrete',\n                    offset: options.parameterData[name] !== undefined\n                        ? options.parameterData[name]\n                        : defaultValue === undefined\n                            ? 0\n                            : defaultValue\n                });\n                Object.defineProperties(constantSourceNode.offset, {\n                    defaultValue: {\n                        get: () => (defaultValue === undefined ? 0 : defaultValue)\n                    },\n                    maxValue: {\n                        get: () => (maxValue === undefined ? MOST_POSITIVE_SINGLE_FLOAT : maxValue)\n                    },\n                    minValue: {\n                        get: () => (minValue === undefined ? MOST_NEGATIVE_SINGLE_FLOAT : minValue)\n                    }\n                });\n                constantSourceNodes.push(constantSourceNode);\n            }\n        }\n        const inputChannelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'speakers',\n            numberOfInputs: Math.max(1, numberOfInputChannels + numberOfParameters)\n        });\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, numberOfInputChannels + numberOfParameters, \n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        Math.max(1, numberOfOutputChannels));\n        const outputChannelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: Math.max(1, numberOfOutputChannels),\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: Math.max(1, numberOfOutputChannels)\n        });\n        const outputChannelMergerNodes = [];\n        for (let i = 0; i < options.numberOfOutputs; i += 1) {\n            outputChannelMergerNodes.push(createNativeChannelMergerNode(nativeContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'speakers',\n                numberOfInputs: outputChannelCount[i]\n            }));\n        }\n        for (let i = 0; i < options.numberOfInputs; i += 1) {\n            gainNodes[i].connect(inputChannelSplitterNodes[i]);\n            for (let j = 0; j < options.channelCount; j += 1) {\n                inputChannelSplitterNodes[i].connect(inputChannelMergerNode, j, i * options.channelCount + j);\n            }\n        }\n        const parameterMap = new ReadOnlyMap(processorConstructor.parameterDescriptors === undefined\n            ? []\n            : processorConstructor.parameterDescriptors.map(({ name }, index) => {\n                const constantSourceNode = constantSourceNodes[index];\n                constantSourceNode.connect(inputChannelMergerNode, 0, numberOfInputChannels + index);\n                constantSourceNode.start(0);\n                return [name, constantSourceNode.offset];\n            }));\n        inputChannelMergerNode.connect(scriptProcessorNode);\n        let channelInterpretation = options.channelInterpretation;\n        let onprocessorerror = null;\n        // Bug #87: Expose at least one output to make this node connectable.\n        const outputAudioNodes = options.numberOfOutputs === 0 ? [scriptProcessorNode] : outputChannelMergerNodes;\n        const nativeAudioWorkletNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return options.channelCount;\n            },\n            set channelCount(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelCountMode() {\n                return options.channelCountMode;\n            },\n            set channelCountMode(_) {\n                // Bug #61: This is not part of the standard but required for the faker to work.\n                throw createInvalidStateError();\n            },\n            get channelInterpretation() {\n                return channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                for (const gainNode of gainNodes) {\n                    gainNode.channelInterpretation = value;\n                }\n                channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return gainNodes;\n            },\n            get numberOfInputs() {\n                return options.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return options.numberOfOutputs;\n            },\n            get onprocessorerror() {\n                return onprocessorerror;\n            },\n            set onprocessorerror(value) {\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.removeEventListener('processorerror', onprocessorerror);\n                }\n                onprocessorerror = typeof value === 'function' ? value : null;\n                if (typeof onprocessorerror === 'function') {\n                    nativeAudioWorkletNodeFaker.addEventListener('processorerror', onprocessorerror);\n                }\n            },\n            get parameters() {\n                return parameterMap;\n            },\n            get port() {\n                return messageChannel.port2;\n            },\n            addEventListener(...args) {\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            connect: connectMultipleOutputs.bind(null, outputAudioNodes),\n            disconnect: disconnectMultipleOutputs.bind(null, outputAudioNodes),\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        const patchedEventListeners = new Map();\n        messageChannel.port1.addEventListener = ((addEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const unpatchedEventListener = typeof args[1] === 'function'\n                        ? args[1]\n                        : typeof args[1] === 'object' && args[1] !== null && typeof args[1].handleEvent === 'function'\n                            ? args[1].handleEvent\n                            : null;\n                    if (unpatchedEventListener !== null) {\n                        const patchedEventListener = patchedEventListeners.get(args[1]);\n                        if (patchedEventListener !== undefined) {\n                            args[1] = patchedEventListener;\n                        }\n                        else {\n                            args[1] = (event) => {\n                                exposeCurrentFrameAndCurrentTime(nativeContext.currentTime, nativeContext.sampleRate, () => unpatchedEventListener(event));\n                            };\n                            patchedEventListeners.set(unpatchedEventListener, args[1]);\n                        }\n                    }\n                }\n                return addEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.addEventListener);\n        messageChannel.port1.removeEventListener = ((removeEventListener) => {\n            return (...args) => {\n                if (args[0] === 'message') {\n                    const patchedEventListener = patchedEventListeners.get(args[1]);\n                    if (patchedEventListener !== undefined) {\n                        patchedEventListeners.delete(args[1]);\n                        args[1] = patchedEventListener;\n                    }\n                }\n                return removeEventListener.call(messageChannel.port1, args[0], args[1], args[2]);\n            };\n        })(messageChannel.port1.removeEventListener);\n        let onmessage = null;\n        Object.defineProperty(messageChannel.port1, 'onmessage', {\n            get: () => onmessage,\n            set: (value) => {\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.removeEventListener('message', onmessage);\n                }\n                onmessage = typeof value === 'function' ? value : null;\n                if (typeof onmessage === 'function') {\n                    messageChannel.port1.addEventListener('message', onmessage);\n                    messageChannel.port1.start();\n                }\n            }\n        });\n        processorConstructor.prototype.port = messageChannel.port1;\n        let audioWorkletProcessor = null;\n        const audioWorkletProcessorPromise = createAudioWorkletProcessor(nativeContext, nativeAudioWorkletNodeFaker, processorConstructor, options);\n        audioWorkletProcessorPromise.then((dWrkltPrcssr) => (audioWorkletProcessor = dWrkltPrcssr));\n        const inputs = createNestedArrays(options.numberOfInputs, options.channelCount);\n        const outputs = createNestedArrays(options.numberOfOutputs, outputChannelCount);\n        const parameters = processorConstructor.parameterDescriptors === undefined\n            ? []\n            : processorConstructor.parameterDescriptors.reduce((prmtrs, { name }) => ({ ...prmtrs, [name]: new Float32Array(128) }), {});\n        let isActive = true;\n        const disconnectOutputsGraph = () => {\n            if (options.numberOfOutputs > 0) {\n                scriptProcessorNode.disconnect(outputChannelSplitterNode);\n            }\n            for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                const outputChannelMergerNode = outputChannelMergerNodes[i];\n                for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                    outputChannelSplitterNode.disconnect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                }\n                outputChannelSplitterNodeOutput += outputChannelCount[i];\n            }\n        };\n        const activeInputIndexes = new Map();\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer, outputBuffer }) => {\n            if (audioWorkletProcessor !== null) {\n                const activeInputs = getActiveAudioWorkletNodeInputs(nativeAudioWorkletNodeFaker);\n                for (let i = 0; i < bufferSize; i += 128) {\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < options.channelCount; k += 1) {\n                            copyFromChannel(inputBuffer, inputs[j], k, k, i);\n                        }\n                    }\n                    if (processorConstructor.parameterDescriptors !== undefined) {\n                        processorConstructor.parameterDescriptors.forEach(({ name }, index) => {\n                            copyFromChannel(inputBuffer, parameters, name, numberOfInputChannels + index, i);\n                        });\n                    }\n                    for (let j = 0; j < options.numberOfInputs; j += 1) {\n                        for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                            // The byteLength will be 0 when the ArrayBuffer was transferred.\n                            if (outputs[j][k].byteLength === 0) {\n                                outputs[j][k] = new Float32Array(128);\n                            }\n                        }\n                    }\n                    try {\n                        const potentiallyEmptyInputs = inputs.map((input, index) => {\n                            const activeInput = activeInputs[index];\n                            if (activeInput.size > 0) {\n                                activeInputIndexes.set(index, bufferSize / 128);\n                                return input;\n                            }\n                            const count = activeInputIndexes.get(index);\n                            if (count === undefined) {\n                                return [];\n                            }\n                            if (input.every((channelData) => channelData.every((sample) => sample === 0))) {\n                                if (count === 1) {\n                                    activeInputIndexes.delete(index);\n                                }\n                                else {\n                                    activeInputIndexes.set(index, count - 1);\n                                }\n                            }\n                            return input;\n                        });\n                        const activeSourceFlag = exposeCurrentFrameAndCurrentTime(nativeContext.currentTime + i / nativeContext.sampleRate, nativeContext.sampleRate, () => audioWorkletProcessor.process(potentiallyEmptyInputs, outputs, parameters));\n                        isActive = activeSourceFlag;\n                        for (let j = 0, outputChannelSplitterNodeOutput = 0; j < options.numberOfOutputs; j += 1) {\n                            for (let k = 0; k < outputChannelCount[j]; k += 1) {\n                                copyToChannel(outputBuffer, outputs[j], k, outputChannelSplitterNodeOutput + k, i);\n                            }\n                            outputChannelSplitterNodeOutput += outputChannelCount[j];\n                        }\n                    }\n                    catch (error) {\n                        isActive = false;\n                        nativeAudioWorkletNodeFaker.dispatchEvent(new ErrorEvent('processorerror', {\n                            colno: error.colno,\n                            filename: error.filename,\n                            lineno: error.lineno,\n                            message: error.message\n                        }));\n                    }\n                    if (!isActive) {\n                        for (let j = 0; j < options.numberOfInputs; j += 1) {\n                            gainNodes[j].disconnect(inputChannelSplitterNodes[j]);\n                            for (let k = 0; k < options.channelCount; k += 1) {\n                                inputChannelSplitterNodes[i].disconnect(inputChannelMergerNode, k, j * options.channelCount + k);\n                            }\n                        }\n                        if (processorConstructor.parameterDescriptors !== undefined) {\n                            const length = processorConstructor.parameterDescriptors.length;\n                            for (let j = 0; j < length; j += 1) {\n                                const constantSourceNode = constantSourceNodes[j];\n                                constantSourceNode.disconnect(inputChannelMergerNode, 0, numberOfInputChannels + j);\n                                constantSourceNode.stop();\n                            }\n                        }\n                        inputChannelMergerNode.disconnect(scriptProcessorNode);\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        if (isConnected) {\n                            disconnectOutputsGraph();\n                        }\n                        else {\n                            disconnectFakeGraph();\n                        }\n                        break;\n                    }\n                }\n            }\n        };\n        let isConnected = false;\n        // Bug #87: Only Firefox will fire an AudioProcessingEvent if there is no connected output.\n        const nativeGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        const connectFakeGraph = () => scriptProcessorNode.connect(nativeGainNode).connect(nativeContext.destination);\n        const disconnectFakeGraph = () => {\n            scriptProcessorNode.disconnect(nativeGainNode);\n            nativeGainNode.disconnect();\n        };\n        const whenConnected = () => {\n            if (isActive) {\n                disconnectFakeGraph();\n                if (options.numberOfOutputs > 0) {\n                    scriptProcessorNode.connect(outputChannelSplitterNode);\n                }\n                for (let i = 0, outputChannelSplitterNodeOutput = 0; i < options.numberOfOutputs; i += 1) {\n                    const outputChannelMergerNode = outputChannelMergerNodes[i];\n                    for (let j = 0; j < outputChannelCount[i]; j += 1) {\n                        outputChannelSplitterNode.connect(outputChannelMergerNode, outputChannelSplitterNodeOutput + j, j);\n                    }\n                    outputChannelSplitterNodeOutput += outputChannelCount[i];\n                }\n            }\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            if (isActive) {\n                connectFakeGraph();\n                disconnectOutputsGraph();\n            }\n            isConnected = false;\n        };\n        connectFakeGraph();\n        return monitorConnections(nativeAudioWorkletNodeFaker, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-audio-worklet-node-faker-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeBiquadFilterNode = (nativeContext, options) => {\n    const nativeBiquadFilterNode = nativeContext.createBiquadFilter();\n    assignNativeAudioNodeOptions(nativeBiquadFilterNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'Q');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'detune');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'frequency');\n    assignNativeAudioNodeAudioParamValue(nativeBiquadFilterNode, options, 'gain');\n    assignNativeAudioNodeOption(nativeBiquadFilterNode, options, 'type');\n    return nativeBiquadFilterNode;\n};\n//# sourceMappingURL=native-biquad-filter-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeChannelMergerNodeFactory = (nativeAudioContextConstructor, wrapChannelMergerNode) => {\n    return (nativeContext, options) => {\n        const nativeChannelMergerNode = nativeContext.createChannelMerger(options.numberOfInputs);\n        /*\n         * Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here.\n         */\n        if (nativeAudioContextConstructor !== null && nativeAudioContextConstructor.name === 'webkitAudioContext') {\n            wrapChannelMergerNode(nativeContext, nativeChannelMergerNode);\n        }\n        assignNativeAudioNodeOptions(nativeChannelMergerNode, options);\n        return nativeChannelMergerNode;\n    };\n};\n//# sourceMappingURL=native-channel-merger-node-factory.js.map","import { createInvalidStateError } from '../factories/invalid-state-error';\nexport const wrapChannelSplitterNode = (channelSplitterNode) => {\n    const channelCount = channelSplitterNode.numberOfOutputs;\n    // Bug #97: Safari does not throw an error when attempting to change the channelCount to something other than its initial value.\n    Object.defineProperty(channelSplitterNode, 'channelCount', {\n        get: () => channelCount,\n        set: (value) => {\n            if (value !== channelCount) {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    // Bug #30: Safari does not throw an error when attempting to change the channelCountMode to something other than explicit.\n    Object.defineProperty(channelSplitterNode, 'channelCountMode', {\n        get: () => 'explicit',\n        set: (value) => {\n            if (value !== 'explicit') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n    // Bug #32: Safari does not throw an error when attempting to change the channelInterpretation to something other than discrete.\n    Object.defineProperty(channelSplitterNode, 'channelInterpretation', {\n        get: () => 'discrete',\n        set: (value) => {\n            if (value !== 'discrete') {\n                throw createInvalidStateError();\n            }\n        }\n    });\n};\n//# sourceMappingURL=wrap-channel-splitter-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapChannelSplitterNode } from '../helpers/wrap-channel-splitter-node';\nexport const createNativeChannelSplitterNode = (nativeContext, options) => {\n    const nativeChannelSplitterNode = nativeContext.createChannelSplitter(options.numberOfOutputs);\n    // Bug #96: Safari does not have the correct channelCount.\n    // Bug #29: Safari does not have the correct channelCountMode.\n    // Bug #31: Safari does not have the correct channelInterpretation.\n    assignNativeAudioNodeOptions(nativeChannelSplitterNode, options);\n    // Bug #29, #30, #31, #32, #96 & #97: Only Chrome, Edge & Firefox partially support the spec yet.\n    wrapChannelSplitterNode(nativeChannelSplitterNode);\n    return nativeChannelSplitterNode;\n};\n//# sourceMappingURL=native-channel-splitter-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeConstantSourceNodeFactory = (addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport) => {\n    return (nativeContext, options) => {\n        // Bug #62: Safari does not support ConstantSourceNodes.\n        if (nativeContext.createConstantSource === undefined) {\n            return createNativeConstantSourceNodeFaker(nativeContext, options);\n        }\n        const nativeConstantSourceNode = nativeContext.createConstantSource();\n        assignNativeAudioNodeOptions(nativeConstantSourceNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeConstantSourceNode, options, 'offset');\n        // Bug #44: Safari does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeConstantSourceNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the ConstantSourceNode is unconnected.\n        addSilentConnection(nativeContext, nativeConstantSourceNode);\n        return nativeConstantSourceNode;\n    };\n};\n//# sourceMappingURL=native-constant-source-node-factory.js.map","export const interceptConnections = (original, interceptor) => {\n    original.connect = interceptor.connect.bind(interceptor);\n    original.disconnect = interceptor.disconnect.bind(interceptor);\n    return original;\n};\n//# sourceMappingURL=intercept-connections.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeConstantSourceNodeFakerFactory = (addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections) => {\n    return (nativeContext, { offset, ...audioNodeOptions }) => {\n        const audioBuffer = nativeContext.createBuffer(1, 2, 44100);\n        const audioBufferSourceNode = createNativeAudioBufferSourceNode(nativeContext, {\n            buffer: null,\n            channelCount: 2,\n            channelCountMode: 'max',\n            channelInterpretation: 'speakers',\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            playbackRate: 1\n        });\n        const gainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: offset });\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        const channelData = audioBuffer.getChannelData(0);\n        // Bug #95: Safari does not play or loop one sample buffers.\n        channelData[0] = 1;\n        channelData[1] = 1;\n        audioBufferSourceNode.buffer = audioBuffer;\n        audioBufferSourceNode.loop = true;\n        const nativeConstantSourceNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return gainNode.channelCount;\n            },\n            set channelCount(value) {\n                gainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return gainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                gainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return gainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                gainNode.channelInterpretation = value;\n            },\n            get context() {\n                return gainNode.context;\n            },\n            get inputs() {\n                return [];\n            },\n            get numberOfInputs() {\n                return audioBufferSourceNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return gainNode.numberOfOutputs;\n            },\n            get offset() {\n                return gainNode.gain;\n            },\n            get onended() {\n                return audioBufferSourceNode.onended;\n            },\n            set onended(value) {\n                audioBufferSourceNode.onended = value;\n            },\n            addEventListener(...args) {\n                return audioBufferSourceNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return audioBufferSourceNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return audioBufferSourceNode.removeEventListener(args[0], args[1], args[2]);\n            },\n            start(when = 0) {\n                audioBufferSourceNode.start.call(audioBufferSourceNode, when);\n            },\n            stop(when = 0) {\n                audioBufferSourceNode.stop.call(audioBufferSourceNode, when);\n            }\n        };\n        const whenConnected = () => audioBufferSourceNode.connect(gainNode);\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(gainNode);\n        // Bug #175: Safari will not fire an ended event if the AudioBufferSourceNode is unconnected.\n        addSilentConnection(nativeContext, audioBufferSourceNode);\n        return monitorConnections(interceptConnections(nativeConstantSourceNodeFaker, gainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-constant-source-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeConvolverNodeFactory = (createNotSupportedError, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeConvolverNode = nativeContext.createConvolver();\n        assignNativeAudioNodeOptions(nativeConvolverNode, options);\n        // The normalize property needs to be set before setting the buffer.\n        if (options.disableNormalization === nativeConvolverNode.normalize) {\n            nativeConvolverNode.normalize = !options.disableNormalization;\n        }\n        assignNativeAudioNodeOption(nativeConvolverNode, options, 'buffer');\n        // Bug #113: Safari does allow to set the channelCount to a value larger than 2.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCount', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value > 2) {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        // Bug #114: Safari allows to set the channelCountMode to 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        overwriteAccessors(nativeConvolverNode, 'channelCountMode', (get) => () => get.call(nativeConvolverNode), (set) => (value) => {\n            if (value === 'max') {\n                throw createNotSupportedError();\n            }\n            return set.call(nativeConvolverNode, value);\n        });\n        return nativeConvolverNode;\n    };\n};\n//# sourceMappingURL=native-convolver-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDelayNode = (nativeContext, options) => {\n    const nativeDelayNode = nativeContext.createDelay(options.maxDelayTime);\n    assignNativeAudioNodeOptions(nativeDelayNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeDelayNode, options, 'delayTime');\n    return nativeDelayNode;\n};\n//# sourceMappingURL=native-delay-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeDynamicsCompressorNodeFactory = (createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const nativeDynamicsCompressorNode = nativeContext.createDynamicsCompressor();\n        assignNativeAudioNodeOptions(nativeDynamicsCompressorNode, options);\n        // Bug #108: Safari allows a channelCount of three and above.\n        if (options.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #109: Only Chrome and Firefox disallow a channelCountMode of 'max'.\n        if (options.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'attack');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'knee');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'ratio');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'release');\n        assignNativeAudioNodeAudioParamValue(nativeDynamicsCompressorNode, options, 'threshold');\n        return nativeDynamicsCompressorNode;\n    };\n};\n//# sourceMappingURL=native-dynamics-compressor-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeGainNode = (nativeContext, options) => {\n    const nativeGainNode = nativeContext.createGain();\n    assignNativeAudioNodeOptions(nativeGainNode, options);\n    assignNativeAudioNodeAudioParamValue(nativeGainNode, options, 'gain');\n    return nativeGainNode;\n};\n//# sourceMappingURL=native-gain-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeIIRFilterNodeFactory = (createNativeIIRFilterNodeFaker) => {\n    return (nativeContext, baseLatency, options) => {\n        // Bug #9: Safari does not support IIRFilterNodes.\n        if (nativeContext.createIIRFilter === undefined) {\n            return createNativeIIRFilterNodeFaker(nativeContext, baseLatency, options);\n        }\n        // @todo TypeScript defines the parameters of createIIRFilter() as arrays of numbers.\n        const nativeIIRFilterNode = nativeContext.createIIRFilter(options.feedforward, options.feedback);\n        assignNativeAudioNodeOptions(nativeIIRFilterNode, options);\n        return nativeIIRFilterNode;\n    };\n};\n//# sourceMappingURL=native-iir-filter-node-factory.js.map","import { computeBufferSize } from '../helpers/compute-buffer-size';\nimport { filterBuffer } from '../helpers/filter-buffer';\nimport { interceptConnections } from '../helpers/intercept-connections';\nfunction divide(a, b) {\n    const denominator = b[0] * b[0] + b[1] * b[1];\n    return [(a[0] * b[0] + a[1] * b[1]) / denominator, (a[1] * b[0] - a[0] * b[1]) / denominator];\n}\nfunction multiply(a, b) {\n    return [a[0] * b[0] - a[1] * b[1], a[0] * b[1] + a[1] * b[0]];\n}\nfunction evaluatePolynomial(coefficient, z) {\n    let result = [0, 0];\n    for (let i = coefficient.length - 1; i >= 0; i -= 1) {\n        result = multiply(result, z);\n        result[0] += coefficient[i];\n    }\n    return result;\n}\nexport const createNativeIIRFilterNodeFakerFactory = (createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError) => {\n    return (nativeContext, baseLatency, { channelCount, channelCountMode, channelInterpretation, feedback, feedforward }) => {\n        const bufferSize = computeBufferSize(baseLatency, nativeContext.sampleRate);\n        const convertedFeedback = feedback instanceof Float64Array ? feedback : new Float64Array(feedback);\n        const convertedFeedforward = feedforward instanceof Float64Array ? feedforward : new Float64Array(feedforward);\n        const feedbackLength = convertedFeedback.length;\n        const feedforwardLength = convertedFeedforward.length;\n        const minLength = Math.min(feedbackLength, feedforwardLength);\n        if (feedbackLength === 0 || feedbackLength > 20) {\n            throw createNotSupportedError();\n        }\n        if (convertedFeedback[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (feedforwardLength === 0 || feedforwardLength > 20) {\n            throw createNotSupportedError();\n        }\n        if (convertedFeedforward[0] === 0) {\n            throw createInvalidStateError();\n        }\n        if (convertedFeedback[0] !== 1) {\n            for (let i = 0; i < feedforwardLength; i += 1) {\n                convertedFeedforward[i] /= convertedFeedback[0];\n            }\n            for (let i = 1; i < feedbackLength; i += 1) {\n                convertedFeedback[i] /= convertedFeedback[0];\n            }\n        }\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, bufferSize, channelCount, channelCount);\n        scriptProcessorNode.channelCount = channelCount;\n        scriptProcessorNode.channelCountMode = channelCountMode;\n        scriptProcessorNode.channelInterpretation = channelInterpretation;\n        const bufferLength = 32;\n        const bufferIndexes = [];\n        const xBuffers = [];\n        const yBuffers = [];\n        for (let i = 0; i < channelCount; i += 1) {\n            bufferIndexes.push(0);\n            const xBuffer = new Float32Array(bufferLength);\n            const yBuffer = new Float32Array(bufferLength);\n            xBuffer.fill(0);\n            yBuffer.fill(0);\n            xBuffers.push(xBuffer);\n            yBuffers.push(yBuffer);\n        }\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = (event) => {\n            const inputBuffer = event.inputBuffer;\n            const outputBuffer = event.outputBuffer;\n            const numberOfChannels = inputBuffer.numberOfChannels;\n            for (let i = 0; i < numberOfChannels; i += 1) {\n                const input = inputBuffer.getChannelData(i);\n                const output = outputBuffer.getChannelData(i);\n                bufferIndexes[i] = filterBuffer(convertedFeedback, feedbackLength, convertedFeedforward, feedforwardLength, minLength, xBuffers[i], yBuffers[i], bufferIndexes[i], bufferLength, input, output);\n            }\n        };\n        const nyquist = nativeContext.sampleRate / 2;\n        const nativeIIRFilterNodeFaker = {\n            get bufferSize() {\n                return bufferSize;\n            },\n            get channelCount() {\n                return scriptProcessorNode.channelCount;\n            },\n            set channelCount(value) {\n                scriptProcessorNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return scriptProcessorNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                scriptProcessorNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return scriptProcessorNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                scriptProcessorNode.channelInterpretation = value;\n            },\n            get context() {\n                return scriptProcessorNode.context;\n            },\n            get inputs() {\n                return [scriptProcessorNode];\n            },\n            get numberOfInputs() {\n                return scriptProcessorNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return scriptProcessorNode.numberOfOutputs;\n            },\n            addEventListener(...args) {\n                // @todo Dissallow adding an audioprocess listener.\n                return scriptProcessorNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return scriptProcessorNode.dispatchEvent(args[0]);\n            },\n            getFrequencyResponse(frequencyHz, magResponse, phaseResponse) {\n                if (frequencyHz.length !== magResponse.length || magResponse.length !== phaseResponse.length) {\n                    throw createInvalidAccessError();\n                }\n                const length = frequencyHz.length;\n                for (let i = 0; i < length; i += 1) {\n                    const omega = -Math.PI * (frequencyHz[i] / nyquist);\n                    const z = [Math.cos(omega), Math.sin(omega)];\n                    const numerator = evaluatePolynomial(convertedFeedforward, z);\n                    const denominator = evaluatePolynomial(convertedFeedback, z);\n                    const response = divide(numerator, denominator);\n                    magResponse[i] = Math.sqrt(response[0] * response[0] + response[1] * response[1]);\n                    phaseResponse[i] = Math.atan2(response[1], response[0]);\n                }\n            },\n            removeEventListener(...args) {\n                return scriptProcessorNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        return interceptConnections(nativeIIRFilterNodeFaker, scriptProcessorNode);\n    };\n};\n//# sourceMappingURL=native-iir-filter-node-faker-factory.js.map","export const createNativeMediaElementAudioSourceNode = (nativeAudioContext, options) => {\n    return nativeAudioContext.createMediaElementSource(options.mediaElement);\n};\n//# sourceMappingURL=native-media-element-audio-source-node.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeMediaStreamAudioDestinationNode = (nativeAudioContext, options) => {\n    const nativeMediaStreamAudioDestinationNode = nativeAudioContext.createMediaStreamDestination();\n    assignNativeAudioNodeOptions(nativeMediaStreamAudioDestinationNode, options);\n    // Bug #174: Safari does expose a wrong numberOfOutputs.\n    if (nativeMediaStreamAudioDestinationNode.numberOfOutputs === 1) {\n        Object.defineProperty(nativeMediaStreamAudioDestinationNode, 'numberOfOutputs', { get: () => 0 });\n    }\n    return nativeMediaStreamAudioDestinationNode;\n};\n//# sourceMappingURL=native-media-stream-audio-destination-node.js.map","export const createNativeMediaStreamAudioSourceNode = (nativeAudioContext, { mediaStream }) => {\n    const audioStreamTracks = mediaStream.getAudioTracks();\n    /*\n     * Bug #151: Safari does not use the audio track as input anymore if it gets removed from the mediaStream after construction.\n     * Bug #159: Safari picks the first audio track if the MediaStream has more than one audio track.\n     */\n    audioStreamTracks.sort((a, b) => (a.id < b.id ? -1 : a.id > b.id ? 1 : 0));\n    const filteredAudioStreamTracks = audioStreamTracks.slice(0, 1);\n    const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(new MediaStream(filteredAudioStreamTracks));\n    /*\n     * Bug #151 & #159: The given mediaStream gets reconstructed before it gets passed to the native node which is why the accessor needs\n     * to be overwritten as it would otherwise expose the reconstructed version.\n     */\n    Object.defineProperty(nativeMediaStreamAudioSourceNode, 'mediaStream', { value: mediaStream });\n    return nativeMediaStreamAudioSourceNode;\n};\n//# sourceMappingURL=native-media-stream-audio-source-node.js.map","export const createNativeMediaStreamTrackAudioSourceNodeFactory = (createInvalidStateError, isNativeOfflineAudioContext) => {\n    return (nativeAudioContext, { mediaStreamTrack }) => {\n        // Bug #121: Only Firefox does yet support the MediaStreamTrackAudioSourceNode.\n        if (typeof nativeAudioContext.createMediaStreamTrackSource === 'function') {\n            return nativeAudioContext.createMediaStreamTrackSource(mediaStreamTrack);\n        }\n        const mediaStream = new MediaStream([mediaStreamTrack]);\n        const nativeMediaStreamAudioSourceNode = nativeAudioContext.createMediaStreamSource(mediaStream);\n        // Bug #120: Firefox does not throw an error if the mediaStream has no audio track.\n        if (mediaStreamTrack.kind !== 'audio') {\n            throw createInvalidStateError();\n        }\n        // Bug #172: Safari allows to create a MediaStreamAudioSourceNode with an OfflineAudioContext.\n        if (isNativeOfflineAudioContext(nativeAudioContext)) {\n            throw new TypeError();\n        }\n        return nativeMediaStreamAudioSourceNode;\n    };\n};\n//# sourceMappingURL=native-media-stream-track-audio-source-node-factory.js.map","export const createNativeOfflineAudioContextConstructor = (window) => {\n    if (window === null) {\n        return null;\n    }\n    if (window.hasOwnProperty('OfflineAudioContext')) {\n        return window.OfflineAudioContext;\n    }\n    return window.hasOwnProperty('webkitOfflineAudioContext') ? window.webkitOfflineAudioContext : null;\n};\n//# sourceMappingURL=native-offline-audio-context-constructor.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { wrapAudioScheduledSourceNodeStartMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-start-method-negative-parameters';\nimport { wrapAudioScheduledSourceNodeStopMethodNegativeParameters } from '../helpers/wrap-audio-scheduled-source-node-stop-method-negative-parameters';\nexport const createNativeOscillatorNodeFactory = (addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls) => {\n    return (nativeContext, options) => {\n        const nativeOscillatorNode = nativeContext.createOscillator();\n        assignNativeAudioNodeOptions(nativeOscillatorNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'detune');\n        assignNativeAudioNodeAudioParamValue(nativeOscillatorNode, options, 'frequency');\n        if (options.periodicWave !== undefined) {\n            nativeOscillatorNode.setPeriodicWave(options.periodicWave);\n        }\n        else {\n            assignNativeAudioNodeOption(nativeOscillatorNode, options, 'type');\n        }\n        // Bug #44: Only Chrome & Edge throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStartMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStartMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #19: Safari does not ignore calls to stop() of an already stopped AudioBufferSourceNode.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, () => testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls(nativeOscillatorNode, nativeContext);\n        }\n        // Bug #44: Only Firefox does not throw a RangeError yet.\n        if (!cacheTestResult(testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, () => testAudioScheduledSourceNodeStopMethodNegativeParametersSupport(nativeContext))) {\n            wrapAudioScheduledSourceNodeStopMethodNegativeParameters(nativeOscillatorNode);\n        }\n        // Bug #175: Safari will not fire an ended event if the OscillatorNode is unconnected.\n        addSilentConnection(nativeContext, nativeOscillatorNode);\n        return nativeOscillatorNode;\n    };\n};\n//# sourceMappingURL=native-oscillator-node-factory.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativePannerNodeFactory = (createNativePannerNodeFaker) => {\n    return (nativeContext, options) => {\n        const nativePannerNode = nativeContext.createPanner();\n        // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n        if (nativePannerNode.orientationX === undefined) {\n            return createNativePannerNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativePannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'orientationZ');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionX');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionY');\n        assignNativeAudioNodeAudioParamValue(nativePannerNode, options, 'positionZ');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneInnerAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterAngle');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'coneOuterGain');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'distanceModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'maxDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'panningModel');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'refDistance');\n        assignNativeAudioNodeOption(nativePannerNode, options, 'rolloffFactor');\n        return nativePannerNode;\n    };\n};\n//# sourceMappingURL=native-panner-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativePannerNodeFakerFactory = (connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections) => {\n    return (nativeContext, { coneInnerAngle, coneOuterAngle, coneOuterGain, distanceModel, maxDistance, orientationX, orientationY, orientationZ, panningModel, positionX, positionY, positionZ, refDistance, rolloffFactor, ...audioNodeOptions }) => {\n        const pannerNode = nativeContext.createPanner();\n        // Bug #125: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCount > 2) {\n            throw createNotSupportedError();\n        }\n        // Bug #126: Safari does not throw an error yet.\n        if (audioNodeOptions.channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        assignNativeAudioNodeOptions(pannerNode, audioNodeOptions);\n        const SINGLE_CHANNEL_OPTIONS = {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete'\n        };\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            channelInterpretation: 'speakers',\n            numberOfInputs: 6\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const orientationXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 1 });\n        const orientationYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const orientationZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionXGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionYGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const positionZGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        const scriptProcessorNode = createNativeScriptProcessorNode(nativeContext, 256, 6, 1);\n        const waveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_OPTIONS,\n            curve: new Float32Array([1, 1]),\n            oversample: 'none'\n        });\n        let lastOrientation = [orientationX, orientationY, orientationZ];\n        let lastPosition = [positionX, positionY, positionZ];\n        const buffer = new Float32Array(1);\n        // tslint:disable-next-line:deprecation\n        scriptProcessorNode.onaudioprocess = ({ inputBuffer }) => {\n            const orientation = [\n                getFirstSample(inputBuffer, buffer, 0),\n                getFirstSample(inputBuffer, buffer, 1),\n                getFirstSample(inputBuffer, buffer, 2)\n            ];\n            if (orientation.some((value, index) => value !== lastOrientation[index])) {\n                pannerNode.setOrientation(...orientation); // tslint:disable-line:deprecation\n                lastOrientation = orientation;\n            }\n            const positon = [\n                getFirstSample(inputBuffer, buffer, 3),\n                getFirstSample(inputBuffer, buffer, 4),\n                getFirstSample(inputBuffer, buffer, 5)\n            ];\n            if (positon.some((value, index) => value !== lastPosition[index])) {\n                pannerNode.setPosition(...positon); // tslint:disable-line:deprecation\n                lastPosition = positon;\n            }\n        };\n        Object.defineProperty(orientationYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(orientationZGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionXGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionYGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(positionZGainNode.gain, 'defaultValue', { get: () => 0 });\n        const nativePannerNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return pannerNode.channelCount;\n            },\n            set channelCount(value) {\n                // Bug #125: Safari does not throw an error yet.\n                if (value > 2) {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCount = value;\n                pannerNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return pannerNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                // Bug #126: Safari does not throw an error yet.\n                if (value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n                pannerNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return pannerNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                pannerNode.channelInterpretation = value;\n            },\n            get coneInnerAngle() {\n                return pannerNode.coneInnerAngle;\n            },\n            set coneInnerAngle(value) {\n                pannerNode.coneInnerAngle = value;\n            },\n            get coneOuterAngle() {\n                return pannerNode.coneOuterAngle;\n            },\n            set coneOuterAngle(value) {\n                pannerNode.coneOuterAngle = value;\n            },\n            get coneOuterGain() {\n                return pannerNode.coneOuterGain;\n            },\n            set coneOuterGain(value) {\n                // Bug #127: Safari does not throw an InvalidStateError yet.\n                if (value < 0 || value > 1) {\n                    throw createInvalidStateError();\n                }\n                pannerNode.coneOuterGain = value;\n            },\n            get context() {\n                return pannerNode.context;\n            },\n            get distanceModel() {\n                return pannerNode.distanceModel;\n            },\n            set distanceModel(value) {\n                pannerNode.distanceModel = value;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get maxDistance() {\n                return pannerNode.maxDistance;\n            },\n            set maxDistance(value) {\n                // Bug #128: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.maxDistance = value;\n            },\n            get numberOfInputs() {\n                return pannerNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return pannerNode.numberOfOutputs;\n            },\n            get orientationX() {\n                return orientationXGainNode.gain;\n            },\n            get orientationY() {\n                return orientationYGainNode.gain;\n            },\n            get orientationZ() {\n                return orientationZGainNode.gain;\n            },\n            get panningModel() {\n                return pannerNode.panningModel;\n            },\n            set panningModel(value) {\n                pannerNode.panningModel = value;\n            },\n            get positionX() {\n                return positionXGainNode.gain;\n            },\n            get positionY() {\n                return positionYGainNode.gain;\n            },\n            get positionZ() {\n                return positionZGainNode.gain;\n            },\n            get refDistance() {\n                return pannerNode.refDistance;\n            },\n            set refDistance(value) {\n                // Bug #129: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.refDistance = value;\n            },\n            get rolloffFactor() {\n                return pannerNode.rolloffFactor;\n            },\n            set rolloffFactor(value) {\n                // Bug #130: Safari does not throw an error yet.\n                if (value < 0) {\n                    throw new RangeError();\n                }\n                pannerNode.rolloffFactor = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (coneInnerAngle !== nativePannerNodeFaker.coneInnerAngle) {\n            nativePannerNodeFaker.coneInnerAngle = coneInnerAngle;\n        }\n        if (coneOuterAngle !== nativePannerNodeFaker.coneOuterAngle) {\n            nativePannerNodeFaker.coneOuterAngle = coneOuterAngle;\n        }\n        if (coneOuterGain !== nativePannerNodeFaker.coneOuterGain) {\n            nativePannerNodeFaker.coneOuterGain = coneOuterGain;\n        }\n        if (distanceModel !== nativePannerNodeFaker.distanceModel) {\n            nativePannerNodeFaker.distanceModel = distanceModel;\n        }\n        if (maxDistance !== nativePannerNodeFaker.maxDistance) {\n            nativePannerNodeFaker.maxDistance = maxDistance;\n        }\n        if (orientationX !== nativePannerNodeFaker.orientationX.value) {\n            nativePannerNodeFaker.orientationX.value = orientationX;\n        }\n        if (orientationY !== nativePannerNodeFaker.orientationY.value) {\n            nativePannerNodeFaker.orientationY.value = orientationY;\n        }\n        if (orientationZ !== nativePannerNodeFaker.orientationZ.value) {\n            nativePannerNodeFaker.orientationZ.value = orientationZ;\n        }\n        if (panningModel !== nativePannerNodeFaker.panningModel) {\n            nativePannerNodeFaker.panningModel = panningModel;\n        }\n        if (positionX !== nativePannerNodeFaker.positionX.value) {\n            nativePannerNodeFaker.positionX.value = positionX;\n        }\n        if (positionY !== nativePannerNodeFaker.positionY.value) {\n            nativePannerNodeFaker.positionY.value = positionY;\n        }\n        if (positionZ !== nativePannerNodeFaker.positionZ.value) {\n            nativePannerNodeFaker.positionZ.value = positionZ;\n        }\n        if (refDistance !== nativePannerNodeFaker.refDistance) {\n            nativePannerNodeFaker.refDistance = refDistance;\n        }\n        if (rolloffFactor !== nativePannerNodeFaker.rolloffFactor) {\n            nativePannerNodeFaker.rolloffFactor = rolloffFactor;\n        }\n        if (lastOrientation[0] !== 1 || lastOrientation[1] !== 0 || lastOrientation[2] !== 0) {\n            pannerNode.setOrientation(...lastOrientation); // tslint:disable-line:deprecation\n        }\n        if (lastPosition[0] !== 0 || lastPosition[1] !== 0 || lastPosition[2] !== 0) {\n            pannerNode.setPosition(...lastPosition); // tslint:disable-line:deprecation\n        }\n        const whenConnected = () => {\n            inputGainNode.connect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            connectNativeAudioNodeToNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode.connect(orientationXGainNode).connect(channelMergerNode, 0, 0);\n            waveShaperNode.connect(orientationYGainNode).connect(channelMergerNode, 0, 1);\n            waveShaperNode.connect(orientationZGainNode).connect(channelMergerNode, 0, 2);\n            waveShaperNode.connect(positionXGainNode).connect(channelMergerNode, 0, 3);\n            waveShaperNode.connect(positionYGainNode).connect(channelMergerNode, 0, 4);\n            waveShaperNode.connect(positionZGainNode).connect(channelMergerNode, 0, 5);\n            channelMergerNode.connect(scriptProcessorNode).connect(nativeContext.destination);\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(pannerNode);\n            // Bug #119: Safari does not fully support the WaveShaperNode.\n            disconnectNativeAudioNodeFromNativeAudioNode(inputGainNode, waveShaperNode, 0, 0);\n            waveShaperNode.disconnect(orientationXGainNode);\n            orientationXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationYGainNode);\n            orientationYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(orientationZGainNode);\n            orientationZGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionXGainNode);\n            positionXGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionYGainNode);\n            positionYGainNode.disconnect(channelMergerNode);\n            waveShaperNode.disconnect(positionZGainNode);\n            positionZGainNode.disconnect(channelMergerNode);\n            channelMergerNode.disconnect(scriptProcessorNode);\n            scriptProcessorNode.disconnect(nativeContext.destination);\n        };\n        return monitorConnections(interceptConnections(nativePannerNodeFaker, pannerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-panner-node-faker-factory.js.map","export const createNativePeriodicWaveFactory = (createIndexSizeError) => {\n    return (nativeContext, { disableNormalization, imag, real }) => {\n        // Bug #180: Safari does not allow to use ordinary arrays.\n        const convertedImag = imag instanceof Float32Array ? imag : new Float32Array(imag);\n        const convertedReal = real instanceof Float32Array ? real : new Float32Array(real);\n        const nativePeriodicWave = nativeContext.createPeriodicWave(convertedReal, convertedImag, { disableNormalization });\n        // Bug #181: Safari does not throw an IndexSizeError so far if the given arrays have less than two values.\n        if (Array.from(imag).length < 2) {\n            throw createIndexSizeError();\n        }\n        return nativePeriodicWave;\n    };\n};\n//# sourceMappingURL=native-periodic-wave-factory.js.map","export const createNativeScriptProcessorNode = (nativeContext, bufferSize, numberOfInputChannels, numberOfOutputChannels) => {\n    return nativeContext.createScriptProcessor(bufferSize, numberOfInputChannels, numberOfOutputChannels); // tslint:disable-line deprecation\n};\n//# sourceMappingURL=native-script-processor-node.js.map","import { assignNativeAudioNodeAudioParamValue } from '../helpers/assign-native-audio-node-audio-param-value';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeStereoPannerNodeFactory = (createNativeStereoPannerNodeFaker, createNotSupportedError) => {\n    return (nativeContext, options) => {\n        const channelCountMode = options.channelCountMode;\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        if (channelCountMode === 'clamped-max') {\n            throw createNotSupportedError();\n        }\n        // Bug #105: Safari does not support the StereoPannerNode.\n        if (nativeContext.createStereoPanner === undefined) {\n            return createNativeStereoPannerNodeFaker(nativeContext, options);\n        }\n        const nativeStereoPannerNode = nativeContext.createStereoPanner();\n        assignNativeAudioNodeOptions(nativeStereoPannerNode, options);\n        assignNativeAudioNodeAudioParamValue(nativeStereoPannerNode, options, 'pan');\n        /*\n         * Bug #105: The channelCountMode of 'clamped-max' should be supported. However it is not possible to write a polyfill for Safari\n         * which supports it and therefore it can't be supported at all.\n         */\n        Object.defineProperty(nativeStereoPannerNode, 'channelCountMode', {\n            get: () => channelCountMode,\n            set: (value) => {\n                if (value !== channelCountMode) {\n                    throw createNotSupportedError();\n                }\n            }\n        });\n        return nativeStereoPannerNode;\n    };\n};\n//# sourceMappingURL=native-stereo-panner-node-factory.js.map","import { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeStereoPannerNodeFakerFactory = (createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections) => {\n    // The curve has a size of 14bit plus 1 value to have an exact representation for zero. This value has been determined experimentally.\n    const CURVE_SIZE = 16385;\n    const DC_CURVE = new Float32Array([1, 1]);\n    const HALF_PI = Math.PI / 2;\n    const SINGLE_CHANNEL_OPTIONS = { channelCount: 1, channelCountMode: 'explicit', channelInterpretation: 'discrete' };\n    const SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS = { ...SINGLE_CHANNEL_OPTIONS, oversample: 'none' };\n    const buildInternalGraphForMono = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            const x = (i / (CURVE_SIZE - 1)) * HALF_PI;\n            leftWaveShaperCurve[i] = Math.cos(x);\n            rightWaveShaperCurve[i] = Math.sin(x);\n        }\n        const leftGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: leftWaveShaperCurve }));\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE }));\n        const rightGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: rightWaveShaperCurve }));\n        return {\n            connectGraph() {\n                inputGainNode.connect(leftGainNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.connect(rightGainNode);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.connect(leftGainNode.gain);\n                rightWaveShaperNode.connect(rightGainNode.gain);\n                leftGainNode.connect(channelMergerNode, 0, 0);\n                rightGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(leftGainNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                inputGainNode.disconnect(rightGainNode);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftWaveShaperNode.inputs === undefined ? leftWaveShaperNode : leftWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightWaveShaperNode.inputs === undefined ? rightWaveShaperNode : rightWaveShaperNode.inputs[0]);\n                leftWaveShaperNode.disconnect(leftGainNode.gain);\n                rightWaveShaperNode.disconnect(rightGainNode.gain);\n                leftGainNode.disconnect(channelMergerNode, 0, 0);\n                rightGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraphForStereo = (nativeContext, inputGainNode, panGainNode, channelMergerNode) => {\n        const leftInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const leftInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForLeftOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const rightInputForRightOutputWaveShaperCurve = new Float32Array(CURVE_SIZE);\n        const centerIndex = Math.floor(CURVE_SIZE / 2);\n        for (let i = 0; i < CURVE_SIZE; i += 1) {\n            if (i > centerIndex) {\n                const x = ((i - centerIndex) / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                leftInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n                rightInputForLeftOutputWaveShaperCurve[i] = 0;\n                rightInputForRightOutputWaveShaperCurve[i] = 1;\n            }\n            else {\n                const x = (i / (CURVE_SIZE - 1 - centerIndex)) * HALF_PI;\n                leftInputForLeftOutputWaveShaperCurve[i] = 1;\n                leftInputForRightOutputWaveShaperCurve[i] = 0;\n                rightInputForLeftOutputWaveShaperCurve[i] = Math.cos(x);\n                rightInputForRightOutputWaveShaperCurve[i] = Math.sin(x);\n            }\n        }\n        const channelSplitterNode = createNativeChannelSplitterNode(nativeContext, {\n            channelCount: 2,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            numberOfOutputs: 2\n        });\n        const leftInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForLeftOutputWaveShaperCurve\n        });\n        const leftInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const leftInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: leftInputForRightOutputWaveShaperCurve\n        });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const panWaveShaperNode = (createNativeWaveShaperNode(nativeContext, { ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS, curve: DC_CURVE }));\n        const rightInputForLeftOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForLeftOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForLeftOutputWaveShaperCurve\n        });\n        const rightInputForRightOutputGainNode = createNativeGainNode(nativeContext, { ...SINGLE_CHANNEL_OPTIONS, gain: 0 });\n        // Bug #119: Safari does not fully support the WaveShaperNode.\n        const rightInputForRightOutputWaveShaperNode = createNativeWaveShaperNode(nativeContext, {\n            ...SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS,\n            curve: rightInputForRightOutputWaveShaperCurve\n        });\n        return {\n            connectGraph() {\n                inputGainNode.connect(channelSplitterNode);\n                inputGainNode.connect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                channelSplitterNode.connect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.connect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.connect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.connect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.connect(panGainNode);\n                panGainNode.connect(leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForLeftOutputWaveShaperNode\n                    : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(leftInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForRightOutputWaveShaperNode\n                    : leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForLeftOutputWaveShaperNode\n                    : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.connect(rightInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForRightOutputWaveShaperNode\n                    : rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.connect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.connect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.connect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.connect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.connect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.connect(channelMergerNode, 0, 1);\n            },\n            disconnectGraph() {\n                inputGainNode.disconnect(channelSplitterNode);\n                inputGainNode.disconnect(panWaveShaperNode.inputs === undefined ? panWaveShaperNode : panWaveShaperNode.inputs[0]);\n                channelSplitterNode.disconnect(leftInputForLeftOutputGainNode, 0);\n                channelSplitterNode.disconnect(leftInputForRightOutputGainNode, 0);\n                channelSplitterNode.disconnect(rightInputForLeftOutputGainNode, 1);\n                channelSplitterNode.disconnect(rightInputForRightOutputGainNode, 1);\n                panWaveShaperNode.disconnect(panGainNode);\n                panGainNode.disconnect(leftInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForLeftOutputWaveShaperNode\n                    : leftInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(leftInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? leftInputForRightOutputWaveShaperNode\n                    : leftInputForRightOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForLeftOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForLeftOutputWaveShaperNode\n                    : rightInputForLeftOutputWaveShaperNode.inputs[0]);\n                panGainNode.disconnect(rightInputForRightOutputWaveShaperNode.inputs === undefined\n                    ? rightInputForRightOutputWaveShaperNode\n                    : rightInputForRightOutputWaveShaperNode.inputs[0]);\n                leftInputForLeftOutputWaveShaperNode.disconnect(leftInputForLeftOutputGainNode.gain);\n                leftInputForRightOutputWaveShaperNode.disconnect(leftInputForRightOutputGainNode.gain);\n                rightInputForLeftOutputWaveShaperNode.disconnect(rightInputForLeftOutputGainNode.gain);\n                rightInputForRightOutputWaveShaperNode.disconnect(rightInputForRightOutputGainNode.gain);\n                leftInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                rightInputForLeftOutputGainNode.disconnect(channelMergerNode, 0, 0);\n                leftInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n                rightInputForRightOutputGainNode.disconnect(channelMergerNode, 0, 1);\n            }\n        };\n    };\n    const buildInternalGraph = (nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode) => {\n        if (channelCount === 1) {\n            return buildInternalGraphForMono(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        if (channelCount === 2) {\n            return buildInternalGraphForStereo(nativeContext, inputGainNode, panGainNode, channelMergerNode);\n        }\n        throw createNotSupportedError();\n    };\n    return (nativeContext, { channelCount, channelCountMode, pan, ...audioNodeOptions }) => {\n        if (channelCountMode === 'max') {\n            throw createNotSupportedError();\n        }\n        const channelMergerNode = createNativeChannelMergerNode(nativeContext, {\n            ...audioNodeOptions,\n            channelCount: 1,\n            channelCountMode,\n            numberOfInputs: 2\n        });\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, channelCount, channelCountMode, gain: 1 });\n        const panGainNode = createNativeGainNode(nativeContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: pan\n        });\n        let { connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, channelCount, inputGainNode, panGainNode, channelMergerNode);\n        Object.defineProperty(panGainNode.gain, 'defaultValue', { get: () => 0 });\n        Object.defineProperty(panGainNode.gain, 'maxValue', { get: () => 1 });\n        Object.defineProperty(panGainNode.gain, 'minValue', { get: () => -1 });\n        const nativeStereoPannerNodeFakerFactory = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return inputGainNode.channelCount;\n            },\n            set channelCount(value) {\n                if (inputGainNode.channelCount !== value) {\n                    if (isConnected) {\n                        disconnectGraph();\n                    }\n                    ({ connectGraph, disconnectGraph } = buildInternalGraph(nativeContext, value, inputGainNode, panGainNode, channelMergerNode));\n                    if (isConnected) {\n                        connectGraph();\n                    }\n                }\n                inputGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return inputGainNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                if (value === 'clamped-max' || value === 'max') {\n                    throw createNotSupportedError();\n                }\n                inputGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return inputGainNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return inputGainNode.context;\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return inputGainNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return inputGainNode.numberOfOutputs;\n            },\n            get pan() {\n                return panGainNode.gain;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        let isConnected = false;\n        const whenConnected = () => {\n            connectGraph();\n            isConnected = true;\n        };\n        const whenDisconnected = () => {\n            disconnectGraph();\n            isConnected = false;\n        };\n        return monitorConnections(interceptConnections(nativeStereoPannerNodeFakerFactory, channelMergerNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-stereo-panner-node-faker-factory.js.map","import { assignNativeAudioNodeOption } from '../helpers/assign-native-audio-node-option';\nimport { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nexport const createNativeWaveShaperNodeFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors) => {\n    return (nativeContext, options) => {\n        const nativeWaveShaperNode = nativeContext.createWaveShaper();\n        /*\n         * Bug #119: Safari does not correctly map the values.\n         * @todo Unfortunately there is no way to test for this behavior in a synchronous fashion which is why testing for the existence of\n         * the webkitAudioContext is used as a workaround here. Testing for the automationRate property is necessary because this workaround\n         * isn't necessary anymore since v14.0.2 of Safari.\n         */\n        if (nativeAudioContextConstructor !== null &&\n            nativeAudioContextConstructor.name === 'webkitAudioContext' &&\n            nativeContext.createGain().gain.automationRate === undefined) {\n            return createNativeWaveShaperNodeFaker(nativeContext, options);\n        }\n        assignNativeAudioNodeOptions(nativeWaveShaperNode, options);\n        const curve = options.curve === null || options.curve instanceof Float32Array ? options.curve : new Float32Array(options.curve);\n        // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n        if (curve !== null && curve.length < 2) {\n            throw createInvalidStateError();\n        }\n        // Only values of type Float32Array can be assigned to the curve property.\n        assignNativeAudioNodeOption(nativeWaveShaperNode, { curve }, 'curve');\n        assignNativeAudioNodeOption(nativeWaveShaperNode, options, 'oversample');\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        overwriteAccessors(nativeWaveShaperNode, 'curve', (get) => () => get.call(nativeWaveShaperNode), (set) => (value) => {\n            set.call(nativeWaveShaperNode, value);\n            if (isConnected) {\n                if (isDCCurve(value) && disconnectNativeAudioBufferSourceNode === null) {\n                    disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n                }\n                else if (!isDCCurve(value) && disconnectNativeAudioBufferSourceNode !== null) {\n                    disconnectNativeAudioBufferSourceNode();\n                    disconnectNativeAudioBufferSourceNode = null;\n                }\n            }\n            return value;\n        });\n        const whenConnected = () => {\n            isConnected = true;\n            if (isDCCurve(nativeWaveShaperNode.curve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, nativeWaveShaperNode);\n            }\n        };\n        const whenDisconnected = () => {\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(nativeWaveShaperNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-wave-shaper-node-factory.js.map","import { assignNativeAudioNodeOptions } from '../helpers/assign-native-audio-node-options';\nimport { interceptConnections } from '../helpers/intercept-connections';\nexport const createNativeWaveShaperNodeFakerFactory = (createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections) => {\n    return (nativeContext, { curve, oversample, ...audioNodeOptions }) => {\n        const negativeWaveShaperNode = nativeContext.createWaveShaper();\n        const positiveWaveShaperNode = nativeContext.createWaveShaper();\n        assignNativeAudioNodeOptions(negativeWaveShaperNode, audioNodeOptions);\n        assignNativeAudioNodeOptions(positiveWaveShaperNode, audioNodeOptions);\n        const inputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const invertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        const outputGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: 1 });\n        const revertGainNode = createNativeGainNode(nativeContext, { ...audioNodeOptions, gain: -1 });\n        let disconnectNativeAudioBufferSourceNode = null;\n        let isConnected = false;\n        let unmodifiedCurve = null;\n        const nativeWaveShaperNodeFaker = {\n            get bufferSize() {\n                return undefined;\n            },\n            get channelCount() {\n                return negativeWaveShaperNode.channelCount;\n            },\n            set channelCount(value) {\n                inputGainNode.channelCount = value;\n                invertGainNode.channelCount = value;\n                negativeWaveShaperNode.channelCount = value;\n                outputGainNode.channelCount = value;\n                positiveWaveShaperNode.channelCount = value;\n                revertGainNode.channelCount = value;\n            },\n            get channelCountMode() {\n                return negativeWaveShaperNode.channelCountMode;\n            },\n            set channelCountMode(value) {\n                inputGainNode.channelCountMode = value;\n                invertGainNode.channelCountMode = value;\n                negativeWaveShaperNode.channelCountMode = value;\n                outputGainNode.channelCountMode = value;\n                positiveWaveShaperNode.channelCountMode = value;\n                revertGainNode.channelCountMode = value;\n            },\n            get channelInterpretation() {\n                return negativeWaveShaperNode.channelInterpretation;\n            },\n            set channelInterpretation(value) {\n                inputGainNode.channelInterpretation = value;\n                invertGainNode.channelInterpretation = value;\n                negativeWaveShaperNode.channelInterpretation = value;\n                outputGainNode.channelInterpretation = value;\n                positiveWaveShaperNode.channelInterpretation = value;\n                revertGainNode.channelInterpretation = value;\n            },\n            get context() {\n                return negativeWaveShaperNode.context;\n            },\n            get curve() {\n                return unmodifiedCurve;\n            },\n            set curve(value) {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                if (value !== null && value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                if (value === null) {\n                    negativeWaveShaperNode.curve = value;\n                    positiveWaveShaperNode.curve = value;\n                }\n                else {\n                    const curveLength = value.length;\n                    const negativeCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    const positiveCurve = new Float32Array(curveLength + 2 - (curveLength % 2));\n                    negativeCurve[0] = value[0];\n                    positiveCurve[0] = -value[curveLength - 1];\n                    const length = Math.ceil((curveLength + 1) / 2);\n                    const centerIndex = (curveLength + 1) / 2 - 1;\n                    for (let i = 1; i < length; i += 1) {\n                        const theoreticIndex = (i / length) * centerIndex;\n                        const lowerIndex = Math.floor(theoreticIndex);\n                        const upperIndex = Math.ceil(theoreticIndex);\n                        negativeCurve[i] =\n                            lowerIndex === upperIndex\n                                ? value[lowerIndex]\n                                : (1 - (theoreticIndex - lowerIndex)) * value[lowerIndex] +\n                                    (1 - (upperIndex - theoreticIndex)) * value[upperIndex];\n                        positiveCurve[i] =\n                            lowerIndex === upperIndex\n                                ? -value[curveLength - 1 - lowerIndex]\n                                : -((1 - (theoreticIndex - lowerIndex)) * value[curveLength - 1 - lowerIndex]) -\n                                    (1 - (upperIndex - theoreticIndex)) * value[curveLength - 1 - upperIndex];\n                    }\n                    negativeCurve[length] = curveLength % 2 === 1 ? value[length - 1] : (value[length - 2] + value[length - 1]) / 2;\n                    negativeWaveShaperNode.curve = negativeCurve;\n                    positiveWaveShaperNode.curve = positiveCurve;\n                }\n                unmodifiedCurve = value;\n                if (isConnected) {\n                    if (isDCCurve(unmodifiedCurve) && disconnectNativeAudioBufferSourceNode === null) {\n                        disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n                    }\n                    else if (disconnectNativeAudioBufferSourceNode !== null) {\n                        disconnectNativeAudioBufferSourceNode();\n                        disconnectNativeAudioBufferSourceNode = null;\n                    }\n                }\n            },\n            get inputs() {\n                return [inputGainNode];\n            },\n            get numberOfInputs() {\n                return negativeWaveShaperNode.numberOfInputs;\n            },\n            get numberOfOutputs() {\n                return negativeWaveShaperNode.numberOfOutputs;\n            },\n            get oversample() {\n                return negativeWaveShaperNode.oversample;\n            },\n            set oversample(value) {\n                negativeWaveShaperNode.oversample = value;\n                positiveWaveShaperNode.oversample = value;\n            },\n            addEventListener(...args) {\n                return inputGainNode.addEventListener(args[0], args[1], args[2]);\n            },\n            dispatchEvent(...args) {\n                return inputGainNode.dispatchEvent(args[0]);\n            },\n            removeEventListener(...args) {\n                return inputGainNode.removeEventListener(args[0], args[1], args[2]);\n            }\n        };\n        if (curve !== null) {\n            // Only values of type Float32Array can be assigned to the curve property.\n            nativeWaveShaperNodeFaker.curve = curve instanceof Float32Array ? curve : new Float32Array(curve);\n        }\n        if (oversample !== nativeWaveShaperNodeFaker.oversample) {\n            nativeWaveShaperNodeFaker.oversample = oversample;\n        }\n        const whenConnected = () => {\n            inputGainNode.connect(negativeWaveShaperNode).connect(outputGainNode);\n            inputGainNode.connect(invertGainNode).connect(positiveWaveShaperNode).connect(revertGainNode).connect(outputGainNode);\n            isConnected = true;\n            if (isDCCurve(unmodifiedCurve)) {\n                disconnectNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNode(nativeContext, inputGainNode);\n            }\n        };\n        const whenDisconnected = () => {\n            inputGainNode.disconnect(negativeWaveShaperNode);\n            negativeWaveShaperNode.disconnect(outputGainNode);\n            inputGainNode.disconnect(invertGainNode);\n            invertGainNode.disconnect(positiveWaveShaperNode);\n            positiveWaveShaperNode.disconnect(revertGainNode);\n            revertGainNode.disconnect(outputGainNode);\n            isConnected = false;\n            if (disconnectNativeAudioBufferSourceNode !== null) {\n                disconnectNativeAudioBufferSourceNode();\n                disconnectNativeAudioBufferSourceNode = null;\n            }\n        };\n        return monitorConnections(interceptConnections(nativeWaveShaperNodeFaker, outputGainNode), whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=native-wave-shaper-node-faker-factory.js.map","export const createNotSupportedError = () => new DOMException('', 'NotSupportedError');\n//# sourceMappingURL=not-supported-error.js.map","import { deactivateAudioGraph } from '../helpers/deactivate-audio-graph';\nimport { testPromiseSupport } from '../helpers/test-promise-support';\nconst DEFAULT_OPTIONS = {\n    numberOfChannels: 1\n};\nexport const createOfflineAudioContextConstructor = (baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering) => {\n    return class OfflineAudioContext extends baseAudioContextConstructor {\n        constructor(a, b, c) {\n            let options;\n            if (typeof a === 'number' && b !== undefined && c !== undefined) {\n                options = { length: b, numberOfChannels: a, sampleRate: c };\n            }\n            else if (typeof a === 'object') {\n                options = a;\n            }\n            else {\n                throw new Error('The given parameters are not valid.');\n            }\n            const { length, numberOfChannels, sampleRate } = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOfflineAudioContext = createNativeOfflineAudioContext(numberOfChannels, length, sampleRate);\n            // #21 Safari does not support promises and therefore would fire the statechange event before the promise can be resolved.\n            if (!cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n                nativeOfflineAudioContext.addEventListener('statechange', (() => {\n                    let i = 0;\n                    const delayStateChangeEvent = (event) => {\n                        if (this._state === 'running') {\n                            if (i > 0) {\n                                nativeOfflineAudioContext.removeEventListener('statechange', delayStateChangeEvent);\n                                event.stopImmediatePropagation();\n                                this._waitForThePromiseToSettle(event);\n                            }\n                            else {\n                                i += 1;\n                            }\n                        }\n                    };\n                    return delayStateChangeEvent;\n                })());\n            }\n            super(nativeOfflineAudioContext, numberOfChannels);\n            this._length = length;\n            this._nativeOfflineAudioContext = nativeOfflineAudioContext;\n            this._state = null;\n        }\n        get length() {\n            // Bug #17: Safari does not yet expose the length.\n            if (this._nativeOfflineAudioContext.length === undefined) {\n                return this._length;\n            }\n            return this._nativeOfflineAudioContext.length;\n        }\n        get state() {\n            return this._state === null ? this._nativeOfflineAudioContext.state : this._state;\n        }\n        startRendering() {\n            /*\n             * Bug #9 & #59: It is theoretically possible that startRendering() will first render a partialOfflineAudioContext. Therefore\n             * the state of the nativeOfflineAudioContext might no transition to running immediately.\n             */\n            if (this._state === 'running') {\n                return Promise.reject(createInvalidStateError());\n            }\n            this._state = 'running';\n            return startRendering(this.destination, this._nativeOfflineAudioContext).finally(() => {\n                this._state = null;\n                deactivateAudioGraph(this);\n            });\n        }\n        _waitForThePromiseToSettle(event) {\n            if (this._state === null) {\n                this._nativeOfflineAudioContext.dispatchEvent(event);\n            }\n            else {\n                setTimeout(() => this._waitForThePromiseToSettle(event));\n            }\n        }\n    };\n};\n//# sourceMappingURL=offline-audio-context-constructor.js.map","import { isActiveAudioNode } from '../helpers/is-active-audio-node';\nimport { setInternalStateToActive } from '../helpers/set-internal-state-to-active';\nimport { setInternalStateToPassive } from '../helpers/set-internal-state-to-passive';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max', // This attribute has no effect for nodes with no inputs.\n    channelInterpretation: 'speakers', // This attribute has no effect for nodes with no inputs.\n    detune: 0,\n    frequency: 440,\n    periodicWave: undefined,\n    type: 'sine'\n};\nexport const createOscillatorNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener) => {\n    return class OscillatorNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeOscillatorNode = createNativeOscillatorNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const oscillatorNodeRenderer = (isOffline ? createOscillatorNodeRenderer() : null);\n            const nyquist = context.sampleRate / 2;\n            super(context, false, nativeOscillatorNode, oscillatorNodeRenderer);\n            // Bug #81: Firefox & Safari do not export the correct values for maxValue and minValue.\n            this._detune = createAudioParam(this, isOffline, nativeOscillatorNode.detune, 153600, -153600);\n            // Bug #76: Safari does not export the correct values for maxValue and minValue.\n            this._frequency = createAudioParam(this, isOffline, nativeOscillatorNode.frequency, nyquist, -nyquist);\n            this._nativeOscillatorNode = nativeOscillatorNode;\n            this._onended = null;\n            this._oscillatorNodeRenderer = oscillatorNodeRenderer;\n            if (this._oscillatorNodeRenderer !== null && mergedOptions.periodicWave !== undefined) {\n                this._oscillatorNodeRenderer.periodicWave =\n                    mergedOptions.periodicWave;\n            }\n        }\n        get detune() {\n            return this._detune;\n        }\n        get frequency() {\n            return this._frequency;\n        }\n        get onended() {\n            return this._onended;\n        }\n        set onended(value) {\n            const wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n            this._nativeOscillatorNode.onended = wrappedListener;\n            const nativeOnEnded = this._nativeOscillatorNode.onended;\n            this._onended = nativeOnEnded !== null && nativeOnEnded === wrappedListener ? value : nativeOnEnded;\n        }\n        get type() {\n            return this._nativeOscillatorNode.type;\n        }\n        set type(value) {\n            this._nativeOscillatorNode.type = value;\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = null;\n            }\n        }\n        setPeriodicWave(periodicWave) {\n            this._nativeOscillatorNode.setPeriodicWave(periodicWave);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.periodicWave = periodicWave;\n            }\n        }\n        start(when = 0) {\n            this._nativeOscillatorNode.start(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.start = when;\n            }\n            if (this.context.state !== 'closed') {\n                setInternalStateToActive(this);\n                const resetInternalStateToPassive = () => {\n                    this._nativeOscillatorNode.removeEventListener('ended', resetInternalStateToPassive);\n                    if (isActiveAudioNode(this)) {\n                        setInternalStateToPassive(this);\n                    }\n                };\n                this._nativeOscillatorNode.addEventListener('ended', resetInternalStateToPassive);\n            }\n        }\n        stop(when = 0) {\n            this._nativeOscillatorNode.stop(when);\n            if (this._oscillatorNodeRenderer !== null) {\n                this._oscillatorNodeRenderer.stop = when;\n            }\n        }\n    };\n};\n//# sourceMappingURL=oscillator-node-constructor.js.map","import { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createOscillatorNodeRendererFactory = (connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeOscillatorNodes = new WeakMap();\n        let periodicWave = null;\n        let start = null;\n        let stop = null;\n        const createOscillatorNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeOscillatorNode = getNativeAudioNode(proxy);\n            // If the initially used nativeOscillatorNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeOscillatorNodeIsOwnedByContext = isOwnedByContext(nativeOscillatorNode, nativeOfflineAudioContext);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeOscillatorNode.channelCount,\n                    channelCountMode: nativeOscillatorNode.channelCountMode,\n                    channelInterpretation: nativeOscillatorNode.channelInterpretation,\n                    detune: nativeOscillatorNode.detune.value,\n                    frequency: nativeOscillatorNode.frequency.value,\n                    periodicWave: periodicWave === null ? undefined : periodicWave,\n                    type: nativeOscillatorNode.type\n                };\n                nativeOscillatorNode = createNativeOscillatorNode(nativeOfflineAudioContext, options);\n                if (start !== null) {\n                    nativeOscillatorNode.start(start);\n                }\n                if (stop !== null) {\n                    nativeOscillatorNode.stop(stop);\n                }\n            }\n            renderedNativeOscillatorNodes.set(nativeOfflineAudioContext, nativeOscillatorNode);\n            if (!nativeOscillatorNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await renderAutomation(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.detune, nativeOscillatorNode.detune);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.frequency, nativeOscillatorNode.frequency);\n            }\n            await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeOscillatorNode);\n            return nativeOscillatorNode;\n        };\n        return {\n            set periodicWave(value) {\n                periodicWave = value;\n            },\n            set start(value) {\n                start = value;\n            },\n            set stop(value) {\n                stop = value;\n            },\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeOscillatorNode = renderedNativeOscillatorNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeOscillatorNode !== undefined) {\n                    return Promise.resolve(renderedNativeOscillatorNode);\n                }\n                return createOscillatorNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=oscillator-node-renderer-factory.js.map","import { MOST_NEGATIVE_SINGLE_FLOAT, MOST_POSITIVE_SINGLE_FLOAT } from '../constants';\nconst DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'clamped-max',\n    channelInterpretation: 'speakers',\n    coneInnerAngle: 360,\n    coneOuterAngle: 360,\n    coneOuterGain: 0,\n    distanceModel: 'inverse',\n    maxDistance: 10000,\n    orientationX: 1,\n    orientationY: 0,\n    orientationZ: 0,\n    panningModel: 'equalpower',\n    positionX: 0,\n    positionY: 0,\n    positionZ: 0,\n    refDistance: 1,\n    rolloffFactor: 1\n};\nexport const createPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class PannerNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativePannerNode = createNativePannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const pannerNodeRenderer = (isOffline ? createPannerNodeRenderer() : null);\n            super(context, false, nativePannerNode, pannerNodeRenderer);\n            this._nativePannerNode = nativePannerNode;\n            // Bug #74: Safari does not export the correct values for maxValue and minValue.\n            this._orientationX = createAudioParam(this, isOffline, nativePannerNode.orientationX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationY = createAudioParam(this, isOffline, nativePannerNode.orientationY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._orientationZ = createAudioParam(this, isOffline, nativePannerNode.orientationZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionX = createAudioParam(this, isOffline, nativePannerNode.positionX, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionY = createAudioParam(this, isOffline, nativePannerNode.positionY, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            this._positionZ = createAudioParam(this, isOffline, nativePannerNode.positionZ, MOST_POSITIVE_SINGLE_FLOAT, MOST_NEGATIVE_SINGLE_FLOAT);\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        get coneInnerAngle() {\n            return this._nativePannerNode.coneInnerAngle;\n        }\n        set coneInnerAngle(value) {\n            this._nativePannerNode.coneInnerAngle = value;\n        }\n        get coneOuterAngle() {\n            return this._nativePannerNode.coneOuterAngle;\n        }\n        set coneOuterAngle(value) {\n            this._nativePannerNode.coneOuterAngle = value;\n        }\n        get coneOuterGain() {\n            return this._nativePannerNode.coneOuterGain;\n        }\n        set coneOuterGain(value) {\n            this._nativePannerNode.coneOuterGain = value;\n        }\n        get distanceModel() {\n            return this._nativePannerNode.distanceModel;\n        }\n        set distanceModel(value) {\n            this._nativePannerNode.distanceModel = value;\n        }\n        get maxDistance() {\n            return this._nativePannerNode.maxDistance;\n        }\n        set maxDistance(value) {\n            this._nativePannerNode.maxDistance = value;\n        }\n        get orientationX() {\n            return this._orientationX;\n        }\n        get orientationY() {\n            return this._orientationY;\n        }\n        get orientationZ() {\n            return this._orientationZ;\n        }\n        get panningModel() {\n            return this._nativePannerNode.panningModel;\n        }\n        set panningModel(value) {\n            this._nativePannerNode.panningModel = value;\n        }\n        get positionX() {\n            return this._positionX;\n        }\n        get positionY() {\n            return this._positionY;\n        }\n        get positionZ() {\n            return this._positionZ;\n        }\n        get refDistance() {\n            return this._nativePannerNode.refDistance;\n        }\n        set refDistance(value) {\n            this._nativePannerNode.refDistance = value;\n        }\n        get rolloffFactor() {\n            return this._nativePannerNode.rolloffFactor;\n        }\n        set rolloffFactor(value) {\n            this._nativePannerNode.rolloffFactor = value;\n        }\n    };\n};\n//# sourceMappingURL=panner-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createPannerNodeRendererFactory = (connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext) => {\n    return () => {\n        const renderedNativeAudioNodes = new WeakMap();\n        let renderedBufferPromise = null;\n        const createAudioNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeGainNode = null;\n            let nativePannerNode = getNativeAudioNode(proxy);\n            const commonAudioNodeOptions = {\n                channelCount: nativePannerNode.channelCount,\n                channelCountMode: nativePannerNode.channelCountMode,\n                channelInterpretation: nativePannerNode.channelInterpretation\n            };\n            const commonNativePannerNodeOptions = {\n                ...commonAudioNodeOptions,\n                coneInnerAngle: nativePannerNode.coneInnerAngle,\n                coneOuterAngle: nativePannerNode.coneOuterAngle,\n                coneOuterGain: nativePannerNode.coneOuterGain,\n                distanceModel: nativePannerNode.distanceModel,\n                maxDistance: nativePannerNode.maxDistance,\n                panningModel: nativePannerNode.panningModel,\n                refDistance: nativePannerNode.refDistance,\n                rolloffFactor: nativePannerNode.rolloffFactor\n            };\n            // If the initially used nativePannerNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativePannerNodeIsOwnedByContext = isOwnedByContext(nativePannerNode, nativeOfflineAudioContext);\n            // Bug #124: Safari does not support modifying the orientation and the position with AudioParams.\n            if ('bufferSize' in nativePannerNode) {\n                nativeGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n            }\n            else if (!nativePannerNodeIsOwnedByContext) {\n                const options = {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: nativePannerNode.orientationX.value,\n                    orientationY: nativePannerNode.orientationY.value,\n                    orientationZ: nativePannerNode.orientationZ.value,\n                    positionX: nativePannerNode.positionX.value,\n                    positionY: nativePannerNode.positionY.value,\n                    positionZ: nativePannerNode.positionZ.value\n                };\n                nativePannerNode = createNativePannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeAudioNodes.set(nativeOfflineAudioContext, nativeGainNode === null ? nativePannerNode : nativeGainNode);\n            if (nativeGainNode !== null) {\n                if (renderedBufferPromise === null) {\n                    if (nativeOfflineAudioContextConstructor === null) {\n                        throw new Error('Missing the native OfflineAudioContext constructor.');\n                    }\n                    const partialOfflineAudioContext = new nativeOfflineAudioContextConstructor(6, \n                    // Bug #17: Safari does not yet expose the length.\n                    proxy.context.length, nativeOfflineAudioContext.sampleRate);\n                    const nativeChannelMergerNode = createNativeChannelMergerNode(partialOfflineAudioContext, {\n                        channelCount: 1,\n                        channelCountMode: 'explicit',\n                        channelInterpretation: 'speakers',\n                        numberOfInputs: 6\n                    });\n                    nativeChannelMergerNode.connect(partialOfflineAudioContext.destination);\n                    renderedBufferPromise = (async () => {\n                        const nativeConstantSourceNodes = await Promise.all([\n                            proxy.orientationX,\n                            proxy.orientationY,\n                            proxy.orientationZ,\n                            proxy.positionX,\n                            proxy.positionY,\n                            proxy.positionZ\n                        ].map(async (audioParam, index) => {\n                            const nativeConstantSourceNode = createNativeConstantSourceNode(partialOfflineAudioContext, {\n                                channelCount: 1,\n                                channelCountMode: 'explicit',\n                                channelInterpretation: 'discrete',\n                                offset: index === 0 ? 1 : 0\n                            });\n                            await renderAutomation(partialOfflineAudioContext, audioParam, nativeConstantSourceNode.offset);\n                            return nativeConstantSourceNode;\n                        }));\n                        for (let i = 0; i < 6; i += 1) {\n                            nativeConstantSourceNodes[i].connect(nativeChannelMergerNode, 0, i);\n                            nativeConstantSourceNodes[i].start(0);\n                        }\n                        return renderNativeOfflineAudioContext(partialOfflineAudioContext);\n                    })();\n                }\n                const renderedBuffer = await renderedBufferPromise;\n                const inputGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, inputGainNode);\n                const channelDatas = [];\n                for (let i = 0; i < renderedBuffer.numberOfChannels; i += 1) {\n                    channelDatas.push(renderedBuffer.getChannelData(i));\n                }\n                let lastOrientation = [channelDatas[0][0], channelDatas[1][0], channelDatas[2][0]];\n                let lastPosition = [channelDatas[3][0], channelDatas[4][0], channelDatas[5][0]];\n                let gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 1 });\n                let partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                    ...commonNativePannerNodeOptions,\n                    orientationX: lastOrientation[0],\n                    orientationY: lastOrientation[1],\n                    orientationZ: lastOrientation[2],\n                    positionX: lastPosition[0],\n                    positionY: lastPosition[1],\n                    positionZ: lastPosition[2]\n                });\n                inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                partialPannerNode.connect(nativeGainNode);\n                for (let i = 128; i < renderedBuffer.length; i += 128) {\n                    const orientation = [channelDatas[0][i], channelDatas[1][i], channelDatas[2][i]];\n                    const positon = [channelDatas[3][i], channelDatas[4][i], channelDatas[5][i]];\n                    if (orientation.some((value, index) => value !== lastOrientation[index]) ||\n                        positon.some((value, index) => value !== lastPosition[index])) {\n                        lastOrientation = orientation;\n                        lastPosition = positon;\n                        const currentTime = i / nativeOfflineAudioContext.sampleRate;\n                        gateGainNode.gain.setValueAtTime(0, currentTime);\n                        gateGainNode = createNativeGainNode(nativeOfflineAudioContext, { ...commonAudioNodeOptions, gain: 0 });\n                        partialPannerNode = createNativePannerNode(nativeOfflineAudioContext, {\n                            ...commonNativePannerNodeOptions,\n                            orientationX: lastOrientation[0],\n                            orientationY: lastOrientation[1],\n                            orientationZ: lastOrientation[2],\n                            positionX: lastPosition[0],\n                            positionY: lastPosition[1],\n                            positionZ: lastPosition[2]\n                        });\n                        gateGainNode.gain.setValueAtTime(1, currentTime);\n                        inputGainNode.connect(gateGainNode).connect(partialPannerNode.inputs[0]);\n                        partialPannerNode.connect(nativeGainNode);\n                    }\n                }\n                return nativeGainNode;\n            }\n            if (!nativePannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await renderAutomation(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationX, nativePannerNode.orientationX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationY, nativePannerNode.orientationY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.orientationZ, nativePannerNode.orientationZ);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionX, nativePannerNode.positionX);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionY, nativePannerNode.positionY);\n                await connectAudioParam(nativeOfflineAudioContext, proxy.positionZ, nativePannerNode.positionZ);\n            }\n            if (isNativeAudioNodeFaker(nativePannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativePannerNode);\n            }\n            return nativePannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeGainNodeOrNativePannerNode = renderedNativeAudioNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeGainNodeOrNativePannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeGainNodeOrNativePannerNode);\n                }\n                return createAudioNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=panner-node-renderer-factory.js.map","const DEFAULT_OPTIONS = {\n    disableNormalization: false\n};\nexport const createPeriodicWaveConstructor = (createNativePeriodicWave, getNativeContext, periodicWaveStore, sanitizePeriodicWaveOptions) => {\n    return class PeriodicWave {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = sanitizePeriodicWaveOptions({ ...DEFAULT_OPTIONS, ...options });\n            const periodicWave = createNativePeriodicWave(nativeContext, mergedOptions);\n            periodicWaveStore.add(periodicWave);\n            // This does violate all good pratices but it is used here to simplify the handling of periodic waves.\n            return periodicWave;\n        }\n        static [Symbol.hasInstance](instance) {\n            return ((instance !== null && typeof instance === 'object' && Object.getPrototypeOf(instance) === PeriodicWave.prototype) ||\n                periodicWaveStore.has(instance));\n        }\n    };\n};\n//# sourceMappingURL=periodic-wave-constructor.js.map","export const createRenderAutomation = (getAudioParamRenderer, renderInputsOfAudioParam) => {\n    return (nativeOfflineAudioContext, audioParam, nativeAudioParam) => {\n        const audioParamRenderer = getAudioParamRenderer(audioParam);\n        audioParamRenderer.replay(nativeAudioParam);\n        return renderInputsOfAudioParam(audioParam, nativeOfflineAudioContext, nativeAudioParam);\n    };\n};\n//# sourceMappingURL=render-automation.js.map","export const createRenderInputsOfAudioNode = (getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle) => {\n    return async (audioNode, nativeOfflineAudioContext, nativeAudioNode) => {\n        const audioNodeConnections = getAudioNodeConnections(audioNode);\n        await Promise.all(audioNodeConnections.activeInputs\n            .map((connections, input) => Array.from(connections).map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n            const destination = audioNode.context.destination;\n            if (!isPartOfACycle(source) && (audioNode !== destination || !isPartOfACycle(audioNode))) {\n                renderedNativeAudioNode.connect(nativeAudioNode, output, input);\n            }\n        }))\n            .reduce((allRenderingPromises, renderingPromises) => [...allRenderingPromises, ...renderingPromises], []));\n    };\n};\n//# sourceMappingURL=render-inputs-of-audio-node.js.map","export const createRenderInputsOfAudioParam = (getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle) => {\n    return async (audioParam, nativeOfflineAudioContext, nativeAudioParam) => {\n        const audioParamConnections = getAudioParamConnections(audioParam);\n        await Promise.all(Array.from(audioParamConnections.activeInputs).map(async ([source, output]) => {\n            const audioNodeRenderer = getAudioNodeRenderer(source);\n            const renderedNativeAudioNode = await audioNodeRenderer.render(source, nativeOfflineAudioContext);\n            if (!isPartOfACycle(source)) {\n                renderedNativeAudioNode.connect(nativeAudioParam, output);\n            }\n        }));\n    };\n};\n//# sourceMappingURL=render-inputs-of-audio-param.js.map","import { testPromiseSupport } from '../helpers/test-promise-support';\nexport const createRenderNativeOfflineAudioContext = (cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, testOfflineAudioContextCurrentTimeSupport) => {\n    return (nativeOfflineAudioContext) => {\n        // Bug #21: Safari does not support promises yet.\n        if (cacheTestResult(testPromiseSupport, () => testPromiseSupport(nativeOfflineAudioContext))) {\n            // Bug #158: Chrome and Edge do not advance currentTime if it is not accessed while rendering the audio.\n            return Promise.resolve(cacheTestResult(testOfflineAudioContextCurrentTimeSupport, testOfflineAudioContextCurrentTimeSupport)).then((isOfflineAudioContextCurrentTimeSupported) => {\n                if (!isOfflineAudioContextCurrentTimeSupported) {\n                    const scriptProcessorNode = createNativeScriptProcessorNode(nativeOfflineAudioContext, 512, 0, 1);\n                    nativeOfflineAudioContext.oncomplete = () => {\n                        scriptProcessorNode.onaudioprocess = null; // tslint:disable-line:deprecation\n                        scriptProcessorNode.disconnect();\n                    };\n                    scriptProcessorNode.onaudioprocess = () => nativeOfflineAudioContext.currentTime; // tslint:disable-line:deprecation\n                    scriptProcessorNode.connect(nativeOfflineAudioContext.destination);\n                }\n                return nativeOfflineAudioContext.startRendering();\n            });\n        }\n        return new Promise((resolve) => {\n            // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n            const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n                channelCount: 1,\n                channelCountMode: 'explicit',\n                channelInterpretation: 'discrete',\n                gain: 0\n            });\n            nativeOfflineAudioContext.oncomplete = (event) => {\n                gainNode.disconnect();\n                resolve(event.renderedBuffer);\n            };\n            gainNode.connect(nativeOfflineAudioContext.destination);\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=render-native-offline-audio-context.js.map","export const createSetActiveAudioWorkletNodeInputs = (activeAudioWorkletNodeInputsStore) => {\n    return (nativeAudioWorkletNode, activeInputs) => {\n        activeAudioWorkletNodeInputsStore.set(nativeAudioWorkletNode, activeInputs);\n    };\n};\n//# sourceMappingURL=set-active-audio-worklet-node-inputs.js.map","export const createSetAudioNodeTailTime = (audioNodeTailTimeStore) => {\n    return (audioNode, tailTime) => audioNodeTailTimeStore.set(audioNode, tailTime);\n};\n//# sourceMappingURL=set-audio-node-tail-time.js.map","import { wrapAudioBufferGetChannelDataMethod } from '../helpers/wrap-audio-buffer-get-channel-data-method';\nexport const createStartRendering = (audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds) => {\n    return (destination, nativeOfflineAudioContext) => getAudioNodeRenderer(destination)\n        .render(destination, nativeOfflineAudioContext)\n        /*\n         * Bug #86 & #87: Invoking the renderer of an AudioWorkletNode might be necessary if it has no direct or indirect connection to the\n         * destination.\n         */\n        .then(() => Promise.all(Array.from(getUnrenderedAudioWorkletNodes(nativeOfflineAudioContext)).map((audioWorkletNode) => getAudioNodeRenderer(audioWorkletNode).render(audioWorkletNode, nativeOfflineAudioContext))))\n        .then(() => renderNativeOfflineAudioContext(nativeOfflineAudioContext))\n        .then((audioBuffer) => {\n        // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n        // Bug #100: Safari does throw a wrong error when calling getChannelData() with an out-of-bounds value.\n        if (typeof audioBuffer.copyFromChannel !== 'function') {\n            wrapAudioBufferCopyChannelMethods(audioBuffer);\n            wrapAudioBufferGetChannelDataMethod(audioBuffer);\n            // Bug #157: Firefox does not allow the bufferOffset to be out-of-bounds.\n        }\n        else if (!cacheTestResult(testAudioBufferCopyChannelMethodsOutOfBoundsSupport, () => testAudioBufferCopyChannelMethodsOutOfBoundsSupport(audioBuffer))) {\n            wrapAudioBufferCopyChannelMethodsOutOfBounds(audioBuffer);\n        }\n        audioBufferStore.add(audioBuffer);\n        return audioBuffer;\n    });\n};\n//# sourceMappingURL=start-rendering.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    /*\n     * Bug #105: The channelCountMode should be 'clamped-max' according to the spec but is set to 'explicit' to achieve consistent\n     * behavior.\n     */\n    channelCountMode: 'explicit',\n    channelInterpretation: 'speakers',\n    pan: 0\n};\nexport const createStereoPannerNodeConstructor = (audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext) => {\n    return class StereoPannerNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeStereoPannerNode = createNativeStereoPannerNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const stereoPannerNodeRenderer = (isOffline ? createStereoPannerNodeRenderer() : null);\n            super(context, false, nativeStereoPannerNode, stereoPannerNodeRenderer);\n            this._pan = createAudioParam(this, isOffline, nativeStereoPannerNode.pan);\n        }\n        get pan() {\n            return this._pan;\n        }\n    };\n};\n//# sourceMappingURL=stereo-panner-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createStereoPannerNodeRendererFactory = (connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeStereoPannerNodes = new WeakMap();\n        const createStereoPannerNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeStereoPannerNode = getNativeAudioNode(proxy);\n            /*\n             * If the initially used nativeStereoPannerNode was not constructed on the same OfflineAudioContext it needs to be created\n             * again.\n             */\n            const nativeStereoPannerNodeIsOwnedByContext = isOwnedByContext(nativeStereoPannerNode, nativeOfflineAudioContext);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeStereoPannerNode.channelCount,\n                    channelCountMode: nativeStereoPannerNode.channelCountMode,\n                    channelInterpretation: nativeStereoPannerNode.channelInterpretation,\n                    pan: nativeStereoPannerNode.pan.value\n                };\n                nativeStereoPannerNode = createNativeStereoPannerNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeStereoPannerNodes.set(nativeOfflineAudioContext, nativeStereoPannerNode);\n            if (!nativeStereoPannerNodeIsOwnedByContext) {\n                await renderAutomation(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            else {\n                await connectAudioParam(nativeOfflineAudioContext, proxy.pan, nativeStereoPannerNode.pan);\n            }\n            if (isNativeAudioNodeFaker(nativeStereoPannerNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeStereoPannerNode);\n            }\n            return nativeStereoPannerNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeStereoPannerNode = renderedNativeStereoPannerNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeStereoPannerNode !== undefined) {\n                    return Promise.resolve(renderedNativeStereoPannerNode);\n                }\n                return createStereoPannerNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=stereo-panner-node-renderer-factory.js.map","// Bug #33: Safari exposes an AudioBuffer but it can't be used as a constructor.\nexport const createTestAudioBufferConstructorSupport = (nativeAudioBufferConstructor) => {\n    return () => {\n        if (nativeAudioBufferConstructor === null) {\n            return false;\n        }\n        try {\n            new nativeAudioBufferConstructor({ length: 1, sampleRate: 44100 }); // tslint:disable-line:no-unused-expression\n        }\n        catch {\n            return false;\n        }\n        return true;\n    };\n};\n//# sourceMappingURL=test-audio-buffer-constructor-support.js.map","// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport const createTestAudioWorkletProcessorPostMessageSupport = (nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) => {\n    return async () => {\n        // Bug #61: If there is no native AudioWorkletNode it gets faked and therefore it is no problem if the it doesn't exist.\n        if (nativeAudioWorkletNodeConstructor === null) {\n            return true;\n        }\n        if (nativeOfflineAudioContextConstructor === null) {\n            return false;\n        }\n        const blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n            type: 'application/javascript; charset=utf-8'\n        });\n        // Bug #141: Safari does not support creating an OfflineAudioContext with less than 44100 Hz.\n        const offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 44100);\n        const url = URL.createObjectURL(blob);\n        let isEmittingMessageEvents = false;\n        let isEmittingProcessorErrorEvents = false;\n        try {\n            await offlineAudioContext.audioWorklet.addModule(url);\n            const audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', { numberOfOutputs: 0 });\n            const oscillator = offlineAudioContext.createOscillator();\n            audioWorkletNode.port.onmessage = () => (isEmittingMessageEvents = true);\n            audioWorkletNode.onprocessorerror = () => (isEmittingProcessorErrorEvents = true);\n            oscillator.connect(audioWorkletNode);\n            oscillator.start(0);\n            await offlineAudioContext.startRendering();\n            // Bug #197: Safari does not deliver the messages before the promise returned by startRendering() resolves.\n            await new Promise((resolve) => setTimeout(resolve));\n        }\n        catch {\n            // Ignore errors.\n        }\n        finally {\n            URL.revokeObjectURL(url);\n        }\n        return isEmittingMessageEvents && !isEmittingProcessorErrorEvents;\n    };\n};\n//# sourceMappingURL=test-audio-worklet-processor-post-message-support.js.map","export const createTestOfflineAudioContextCurrentTimeSupport = (createNativeGainNode, nativeOfflineAudioContextConstructor) => {\n    return () => {\n        if (nativeOfflineAudioContextConstructor === null) {\n            return Promise.resolve(false);\n        }\n        const nativeOfflineAudioContext = new nativeOfflineAudioContextConstructor(1, 1, 44100);\n        // Bug #48: Safari does not render an OfflineAudioContext without any connected node.\n        const gainNode = createNativeGainNode(nativeOfflineAudioContext, {\n            channelCount: 1,\n            channelCountMode: 'explicit',\n            channelInterpretation: 'discrete',\n            gain: 0\n        });\n        // Bug #21: Safari does not support promises yet.\n        return new Promise((resolve) => {\n            nativeOfflineAudioContext.oncomplete = () => {\n                gainNode.disconnect();\n                resolve(nativeOfflineAudioContext.currentTime !== 0);\n            };\n            nativeOfflineAudioContext.startRendering();\n        });\n    };\n};\n//# sourceMappingURL=test-offline-audio-context-current-time-support.js.map","export const createUnknownError = () => new DOMException('', 'UnknownError');\n//# sourceMappingURL=unknown-error.js.map","const DEFAULT_OPTIONS = {\n    channelCount: 2,\n    channelCountMode: 'max',\n    channelInterpretation: 'speakers',\n    curve: null,\n    oversample: 'none'\n};\nexport const createWaveShaperNodeConstructor = (audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime) => {\n    return class WaveShaperNode extends audioNodeConstructor {\n        constructor(context, options) {\n            const nativeContext = getNativeContext(context);\n            const mergedOptions = { ...DEFAULT_OPTIONS, ...options };\n            const nativeWaveShaperNode = createNativeWaveShaperNode(nativeContext, mergedOptions);\n            const isOffline = isNativeOfflineAudioContext(nativeContext);\n            const waveShaperNodeRenderer = (isOffline ? createWaveShaperNodeRenderer() : null);\n            // @todo Add a mechanism to only switch a WaveShaperNode to active while it is connected.\n            super(context, true, nativeWaveShaperNode, waveShaperNodeRenderer);\n            this._isCurveNullified = false;\n            this._nativeWaveShaperNode = nativeWaveShaperNode;\n            // @todo Determine a meaningful tail-time instead of just using one second.\n            setAudioNodeTailTime(this, 1);\n        }\n        get curve() {\n            if (this._isCurveNullified) {\n                return null;\n            }\n            return this._nativeWaveShaperNode.curve;\n        }\n        set curve(value) {\n            // Bug #103: Safari does not allow to set the curve to null.\n            if (value === null) {\n                this._isCurveNullified = true;\n                this._nativeWaveShaperNode.curve = new Float32Array([0, 0]);\n            }\n            else {\n                // Bug #102: Safari does not throw an InvalidStateError when the curve has less than two samples.\n                // Bug #104: Chrome and Edge will throw an InvalidAccessError when the curve has less than two samples.\n                if (value.length < 2) {\n                    throw createInvalidStateError();\n                }\n                this._isCurveNullified = false;\n                this._nativeWaveShaperNode.curve = value;\n            }\n        }\n        get oversample() {\n            return this._nativeWaveShaperNode.oversample;\n        }\n        set oversample(value) {\n            this._nativeWaveShaperNode.oversample = value;\n        }\n    };\n};\n//# sourceMappingURL=wave-shaper-node-constructor.js.map","import { isNativeAudioNodeFaker } from '../guards/native-audio-node-faker';\nimport { isOwnedByContext } from '../helpers/is-owned-by-context';\nexport const createWaveShaperNodeRendererFactory = (createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode) => {\n    return () => {\n        const renderedNativeWaveShaperNodes = new WeakMap();\n        const createWaveShaperNode = async (proxy, nativeOfflineAudioContext) => {\n            let nativeWaveShaperNode = getNativeAudioNode(proxy);\n            // If the initially used nativeWaveShaperNode was not constructed on the same OfflineAudioContext it needs to be created again.\n            const nativeWaveShaperNodeIsOwnedByContext = isOwnedByContext(nativeWaveShaperNode, nativeOfflineAudioContext);\n            if (!nativeWaveShaperNodeIsOwnedByContext) {\n                const options = {\n                    channelCount: nativeWaveShaperNode.channelCount,\n                    channelCountMode: nativeWaveShaperNode.channelCountMode,\n                    channelInterpretation: nativeWaveShaperNode.channelInterpretation,\n                    curve: nativeWaveShaperNode.curve,\n                    oversample: nativeWaveShaperNode.oversample\n                };\n                nativeWaveShaperNode = createNativeWaveShaperNode(nativeOfflineAudioContext, options);\n            }\n            renderedNativeWaveShaperNodes.set(nativeOfflineAudioContext, nativeWaveShaperNode);\n            if (isNativeAudioNodeFaker(nativeWaveShaperNode)) {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode.inputs[0]);\n            }\n            else {\n                await renderInputsOfAudioNode(proxy, nativeOfflineAudioContext, nativeWaveShaperNode);\n            }\n            return nativeWaveShaperNode;\n        };\n        return {\n            render(proxy, nativeOfflineAudioContext) {\n                const renderedNativeWaveShaperNode = renderedNativeWaveShaperNodes.get(nativeOfflineAudioContext);\n                if (renderedNativeWaveShaperNode !== undefined) {\n                    return Promise.resolve(renderedNativeWaveShaperNode);\n                }\n                return createWaveShaperNode(proxy, nativeOfflineAudioContext);\n            }\n        };\n    };\n};\n//# sourceMappingURL=wave-shaper-node-renderer-factory.js.map","export const createWindow = () => (typeof window === 'undefined' ? null : window);\n//# sourceMappingURL=window.js.map","export const createWrapAudioBufferCopyChannelMethods = (convertNumberToUnsignedLong, createIndexSizeError) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const destinationLength = destination.length;\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n                destination[i] = channelData[i + bufferOffset];\n            }\n        };\n        audioBuffer.copyToChannel = (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n            const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n            const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n            if (channelNumber >= audioBuffer.numberOfChannels) {\n                throw createIndexSizeError();\n            }\n            const audioBufferLength = audioBuffer.length;\n            const channelData = audioBuffer.getChannelData(channelNumber);\n            const sourceLength = source.length;\n            for (let i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n                channelData[i + bufferOffset] = source[i];\n            }\n        };\n    };\n};\n//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods.js.map","export const createWrapAudioBufferCopyChannelMethodsOutOfBounds = (convertNumberToUnsignedLong) => {\n    return (audioBuffer) => {\n        audioBuffer.copyFromChannel = ((copyFromChannel) => {\n            return (destination, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyFromChannel.call(audioBuffer, destination, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyFromChannel);\n        audioBuffer.copyToChannel = ((copyToChannel) => {\n            return (source, channelNumberAsNumber, bufferOffsetAsNumber = 0) => {\n                const bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n                const channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n                if (bufferOffset < audioBuffer.length) {\n                    return copyToChannel.call(audioBuffer, source, channelNumber, bufferOffset);\n                }\n            };\n        })(audioBuffer.copyToChannel);\n    };\n};\n//# sourceMappingURL=wrap-audio-buffer-copy-channel-methods-out-of-bounds.js.map","export const createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer = (overwriteAccessors) => {\n    return (nativeAudioBufferSourceNode, nativeContext) => {\n        const nullifiedBuffer = nativeContext.createBuffer(1, 1, 44100);\n        if (nativeAudioBufferSourceNode.buffer === null) {\n            nativeAudioBufferSourceNode.buffer = nullifiedBuffer;\n        }\n        overwriteAccessors(nativeAudioBufferSourceNode, 'buffer', (get) => () => {\n            const value = get.call(nativeAudioBufferSourceNode);\n            return value === nullifiedBuffer ? null : value;\n        }, (set) => (value) => {\n            return set.call(nativeAudioBufferSourceNode, value === null ? nullifiedBuffer : value);\n        });\n    };\n};\n//# sourceMappingURL=wrap-audio-buffer-source-node-stop-method-nullified-buffer.js.map","export const createWrapChannelMergerNode = (createInvalidStateError, monitorConnections) => {\n    return (nativeContext, channelMergerNode) => {\n        // Bug #15: Safari does not return the default properties.\n        channelMergerNode.channelCount = 1;\n        channelMergerNode.channelCountMode = 'explicit';\n        // Bug #16: Safari does not throw an error when setting a different channelCount or channelCountMode.\n        Object.defineProperty(channelMergerNode, 'channelCount', {\n            get: () => 1,\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        Object.defineProperty(channelMergerNode, 'channelCountMode', {\n            get: () => 'explicit',\n            set: () => {\n                throw createInvalidStateError();\n            }\n        });\n        // Bug #20: Safari requires a connection of any kind to treat the input signal correctly.\n        const audioBufferSourceNode = nativeContext.createBufferSource();\n        const whenConnected = () => {\n            const length = channelMergerNode.numberOfInputs;\n            for (let i = 0; i < length; i += 1) {\n                audioBufferSourceNode.connect(channelMergerNode, 0, i);\n            }\n        };\n        const whenDisconnected = () => audioBufferSourceNode.disconnect(channelMergerNode);\n        monitorConnections(channelMergerNode, whenConnected, whenDisconnected);\n    };\n};\n//# sourceMappingURL=wrap-channel-merger-node.js.map","export const getFirstSample = (audioBuffer, buffer, channelNumber) => {\n    // Bug #5: Safari does not support copyFromChannel() and copyToChannel().\n    if (audioBuffer.copyFromChannel === undefined) {\n        return audioBuffer.getChannelData(channelNumber)[0];\n    }\n    audioBuffer.copyFromChannel(buffer, channelNumber);\n    return buffer[0];\n};\n//# sourceMappingURL=get-first-sample.js.map","export const isDCCurve = (curve) => {\n    if (curve === null) {\n        return false;\n    }\n    const length = curve.length;\n    if (length % 2 !== 0) {\n        return curve[Math.floor(length / 2)] !== 0;\n    }\n    return curve[length / 2 - 1] + curve[length / 2] !== 0;\n};\n//# sourceMappingURL=is-dc-curve.js.map","export const overwriteAccessors = (object, property, createGetter, createSetter) => {\n    let prototype = object;\n    while (!prototype.hasOwnProperty(property)) {\n        prototype = Object.getPrototypeOf(prototype);\n    }\n    const { get, set } = Object.getOwnPropertyDescriptor(prototype, property);\n    Object.defineProperty(object, property, { get: createGetter(get), set: createSetter(set) });\n};\n//# sourceMappingURL=overwrite-accessors.js.map","export const sanitizeAudioWorkletNodeOptions = (options) => {\n    return {\n        ...options,\n        outputChannelCount: options.outputChannelCount !== undefined\n            ? options.outputChannelCount\n            : options.numberOfInputs === 1 && options.numberOfOutputs === 1\n                ? /*\n                   * Bug #61: This should be the computedNumberOfChannels, but unfortunately that is almost impossible to fake. That's why\n                   * the channelCountMode is required to be 'explicit' as long as there is not a native implementation in every browser. That\n                   * makes sure the computedNumberOfChannels is equivilant to the channelCount which makes it much easier to compute.\n                   */\n                    [options.channelCount]\n                : Array.from({ length: options.numberOfOutputs }, () => 1)\n    };\n};\n//# sourceMappingURL=sanitize-audio-worklet-node-options.js.map","export const sanitizeChannelSplitterOptions = (options) => {\n    return { ...options, channelCount: options.numberOfOutputs };\n};\n//# sourceMappingURL=sanitize-channel-splitter-options.js.map","export const sanitizePeriodicWaveOptions = (options) => {\n    const { imag, real } = options;\n    if (imag === undefined) {\n        if (real === undefined) {\n            return { ...options, imag: [0, 0], real: [0, 0] };\n        }\n        return { ...options, imag: Array.from(real, () => 0), real };\n    }\n    if (real === undefined) {\n        return { ...options, imag, real: Array.from(imag, () => 0) };\n    }\n    return { ...options, imag, real };\n};\n//# sourceMappingURL=sanitize-periodic-wave-options.js.map","export const setValueAtTimeUntilPossible = (audioParam, value, startTime) => {\n    try {\n        audioParam.setValueAtTime(value, startTime);\n    }\n    catch (err) {\n        if (err.code !== 9) {\n            throw err;\n        }\n        setValueAtTimeUntilPossible(audioParam, value, startTime + 1e-7);\n    }\n};\n//# sourceMappingURL=set-value-at-time-until-possible.js.map","export const testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport = (nativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    nativeAudioBufferSourceNode.start();\n    try {\n        nativeAudioBufferSourceNode.start();\n    }\n    catch {\n        return true;\n    }\n    return false;\n};\n//# sourceMappingURL=test-audio-buffer-source-node-start-method-consecutive-calls-support.js.map","export const testAudioBufferSourceNodeStartMethodOffsetClampingSupport = (nativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    try {\n        nativeAudioBufferSourceNode.start(0, 1);\n    }\n    catch {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=test-audio-buffer-source-node-start-method-offset-clamping-support.js.map","export const testAudioBufferSourceNodeStopMethodNullifiedBufferSupport = (nativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    nativeAudioBufferSourceNode.start();\n    try {\n        nativeAudioBufferSourceNode.stop();\n    }\n    catch {\n        return false;\n    }\n    return true;\n};\n//# sourceMappingURL=test-audio-buffer-source-node-stop-method-nullified-buffer-support.js.map","export const testAudioScheduledSourceNodeStartMethodNegativeParametersSupport = (nativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createOscillator();\n    try {\n        nativeAudioBufferSourceNode.start(-1);\n    }\n    catch (err) {\n        return err instanceof RangeError;\n    }\n    return false;\n};\n//# sourceMappingURL=test-audio-scheduled-source-node-start-method-negative-parameters-support.js.map","export const testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport = (nativeContext) => {\n    const nativeAudioBuffer = nativeContext.createBuffer(1, 1, 44100);\n    const nativeAudioBufferSourceNode = nativeContext.createBufferSource();\n    nativeAudioBufferSourceNode.buffer = nativeAudioBuffer;\n    nativeAudioBufferSourceNode.start();\n    nativeAudioBufferSourceNode.stop();\n    try {\n        nativeAudioBufferSourceNode.stop();\n        return true;\n    }\n    catch {\n        return false;\n    }\n};\n//# sourceMappingURL=test-audio-scheduled-source-node-stop-method-consecutive-calls-support.js.map","export const testAudioScheduledSourceNodeStopMethodNegativeParametersSupport = (nativeContext) => {\n    const nativeAudioBufferSourceNode = nativeContext.createOscillator();\n    try {\n        nativeAudioBufferSourceNode.stop(-1);\n    }\n    catch (err) {\n        return err instanceof RangeError;\n    }\n    return false;\n};\n//# sourceMappingURL=test-audio-scheduled-source-node-stop-method-negative-parameters-support.js.map","export const testAudioWorkletNodeOptionsClonability = (audioWorkletNodeOptions) => {\n    const { port1, port2 } = new MessageChannel();\n    try {\n        // This will throw an error if the audioWorkletNodeOptions are not clonable.\n        port1.postMessage(audioWorkletNodeOptions);\n    }\n    finally {\n        port1.close();\n        port2.close();\n    }\n};\n//# sourceMappingURL=test-audio-worklet-node-options-clonability.js.map","export const wrapAudioBufferSourceNodeStartMethodOffsetClamping = (nativeAudioBufferSourceNode) => {\n    nativeAudioBufferSourceNode.start = ((start) => {\n        return (when = 0, offset = 0, duration) => {\n            const buffer = nativeAudioBufferSourceNode.buffer;\n            // Bug #154: Safari does not clamp the offset if it is equal to or greater than the duration of the buffer.\n            const clampedOffset = buffer === null ? offset : Math.min(buffer.duration, offset);\n            // Bug #155: Safari does not handle the offset correctly if it would cause the buffer to be not be played at all.\n            if (buffer !== null && clampedOffset > buffer.duration - 0.5 / nativeAudioBufferSourceNode.context.sampleRate) {\n                start.call(nativeAudioBufferSourceNode, when, 0, 0);\n            }\n            else {\n                start.call(nativeAudioBufferSourceNode, when, clampedOffset, duration);\n            }\n        };\n    })(nativeAudioBufferSourceNode.start);\n};\n//# sourceMappingURL=wrap-audio-buffer-source-node-start-method-offset-clamping.js.map","import { interceptConnections } from './intercept-connections';\nexport const wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls = (nativeAudioScheduledSourceNode, nativeContext) => {\n    const nativeGainNode = nativeContext.createGain();\n    nativeAudioScheduledSourceNode.connect(nativeGainNode);\n    const disconnectGainNode = ((disconnect) => {\n        return () => {\n            // @todo TypeScript cannot infer the overloaded signature with 1 argument yet.\n            disconnect.call(nativeAudioScheduledSourceNode, nativeGainNode);\n            nativeAudioScheduledSourceNode.removeEventListener('ended', disconnectGainNode);\n        };\n    })(nativeAudioScheduledSourceNode.disconnect);\n    nativeAudioScheduledSourceNode.addEventListener('ended', disconnectGainNode);\n    interceptConnections(nativeAudioScheduledSourceNode, nativeGainNode);\n    nativeAudioScheduledSourceNode.stop = ((stop) => {\n        let isStopped = false;\n        return (when = 0) => {\n            if (isStopped) {\n                try {\n                    stop.call(nativeAudioScheduledSourceNode, when);\n                }\n                catch {\n                    nativeGainNode.gain.setValueAtTime(0, when);\n                }\n            }\n            else {\n                stop.call(nativeAudioScheduledSourceNode, when);\n                isStopped = true;\n            }\n        };\n    })(nativeAudioScheduledSourceNode.stop);\n};\n//# sourceMappingURL=wrap-audio-scheduled-source-node-stop-method-consecutive-calls.js.map","export const wrapEventListener = (target, eventListener) => {\n    return (event) => {\n        const descriptor = { value: target };\n        Object.defineProperties(event, {\n            currentTarget: descriptor,\n            target: descriptor\n        });\n        if (typeof eventListener === 'function') {\n            return eventListener.call(target, event);\n        }\n        return eventListener.handleEvent.call(target, event);\n    };\n};\n//# sourceMappingURL=wrap-event-listener.js.map","import { createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent } from 'automation-events';\nimport { createAbortError } from './factories/abort-error';\nimport { createAddActiveInputConnectionToAudioNode } from './factories/add-active-input-connection-to-audio-node';\nimport { createAddAudioNodeConnections } from './factories/add-audio-node-connections';\nimport { createAddAudioParamConnections } from './factories/add-audio-param-connections';\nimport { createAddAudioWorkletModule } from './factories/add-audio-worklet-module';\nimport { createAddConnectionToAudioNode } from './factories/add-connection-to-audio-node';\nimport { createAddPassiveInputConnectionToAudioNode } from './factories/add-passive-input-connection-to-audio-node';\nimport { createAddSilentConnection } from './factories/add-silent-connection';\nimport { createAddUnrenderedAudioWorkletNode } from './factories/add-unrendered-audio-worklet-node';\nimport { createAnalyserNodeConstructor } from './factories/analyser-node-constructor';\nimport { createAnalyserNodeRendererFactory } from './factories/analyser-node-renderer-factory';\nimport { createAudioBufferConstructor } from './factories/audio-buffer-constructor';\nimport { createAudioBufferSourceNodeConstructor } from './factories/audio-buffer-source-node-constructor';\nimport { createAudioBufferSourceNodeRendererFactory } from './factories/audio-buffer-source-node-renderer-factory';\nimport { createAudioContextConstructor } from './factories/audio-context-constructor';\nimport { createAudioDestinationNodeConstructor } from './factories/audio-destination-node-constructor';\nimport { createAudioDestinationNodeRenderer } from './factories/audio-destination-node-renderer-factory';\nimport { createAudioListenerFactory } from './factories/audio-listener-factory';\nimport { createAudioNodeConstructor } from './factories/audio-node-constructor';\nimport { createAudioParamFactory } from './factories/audio-param-factory';\nimport { createAudioParamRenderer } from './factories/audio-param-renderer';\nimport { createAudioWorkletNodeConstructor } from './factories/audio-worklet-node-constructor';\nimport { createAudioWorkletNodeRendererFactory } from './factories/audio-worklet-node-renderer-factory';\nimport { createBaseAudioContextConstructor } from './factories/base-audio-context-constructor';\nimport { createBiquadFilterNodeConstructor } from './factories/biquad-filter-node-constructor';\nimport { createBiquadFilterNodeRendererFactory } from './factories/biquad-filter-node-renderer-factory';\nimport { createCacheTestResult } from './factories/cache-test-result';\nimport { createChannelMergerNodeConstructor } from './factories/channel-merger-node-constructor';\nimport { createChannelMergerNodeRendererFactory } from './factories/channel-merger-node-renderer-factory';\nimport { createChannelSplitterNodeConstructor } from './factories/channel-splitter-node-constructor';\nimport { createChannelSplitterNodeRendererFactory } from './factories/channel-splitter-node-renderer-factory';\nimport { createConnectAudioParam } from './factories/connect-audio-param';\nimport { createConnectMultipleOutputs } from './factories/connect-multiple-outputs';\nimport { createConnectedNativeAudioBufferSourceNodeFactory } from './factories/connected-native-audio-buffer-source-node-factory';\nimport { createConstantSourceNodeConstructor } from './factories/constant-source-node-constructor';\nimport { createConstantSourceNodeRendererFactory } from './factories/constant-source-node-renderer-factory';\nimport { createConvertNumberToUnsignedLong } from './factories/convert-number-to-unsigned-long';\nimport { createConvolverNodeConstructor } from './factories/convolver-node-constructor';\nimport { createConvolverNodeRendererFactory } from './factories/convolver-node-renderer-factory';\nimport { createCreateNativeOfflineAudioContext } from './factories/create-native-offline-audio-context';\nimport { createDataCloneError } from './factories/data-clone-error';\nimport { createDecodeAudioData } from './factories/decode-audio-data';\nimport { createDecrementCycleCounter } from './factories/decrement-cycle-counter';\nimport { createDelayNodeConstructor } from './factories/delay-node-constructor';\nimport { createDelayNodeRendererFactory } from './factories/delay-node-renderer-factory';\nimport { createDeleteActiveInputConnectionToAudioNode } from './factories/delete-active-input-connection-to-audio-node';\nimport { createDeleteUnrenderedAudioWorkletNode } from './factories/delete-unrendered-audio-worklet-node';\nimport { createDetectCycles } from './factories/detect-cycles';\nimport { createDisconnectMultipleOutputs } from './factories/disconnect-multiple-outputs';\nimport { createDynamicsCompressorNodeConstructor } from './factories/dynamics-compressor-node-constructor';\nimport { createDynamicsCompressorNodeRendererFactory } from './factories/dynamics-compressor-node-renderer-factory';\nimport { createEncodingError } from './factories/encoding-error';\nimport { createEvaluateSource } from './factories/evaluate-source';\nimport { createEventTargetConstructor } from './factories/event-target-constructor';\nimport { createExposeCurrentFrameAndCurrentTime } from './factories/expose-current-frame-and-current-time';\nimport { createFetchSource } from './factories/fetch-source';\nimport { createGainNodeConstructor } from './factories/gain-node-constructor';\nimport { createGainNodeRendererFactory } from './factories/gain-node-renderer-factory';\nimport { createGetActiveAudioWorkletNodeInputs } from './factories/get-active-audio-worklet-node-inputs';\nimport { createGetAudioNodeRenderer } from './factories/get-audio-node-renderer';\nimport { createGetAudioNodeTailTime } from './factories/get-audio-node-tail-time';\nimport { createGetAudioParamRenderer } from './factories/get-audio-param-renderer';\nimport { createGetBackupOfflineAudioContext } from './factories/get-backup-offline-audio-context';\nimport { createGetNativeContext } from './factories/get-native-context';\nimport { createGetOrCreateBackupOfflineAudioContext } from './factories/get-or-create-backup-offline-audio-context';\nimport { createGetUnrenderedAudioWorkletNodes } from './factories/get-unrendered-audio-worklet-nodes';\nimport { createIIRFilterNodeConstructor } from './factories/iir-filter-node-constructor';\nimport { createIIRFilterNodeRendererFactory } from './factories/iir-filter-node-renderer-factory';\nimport { createIncrementCycleCounterFactory } from './factories/increment-cycle-counter-factory';\nimport { createIndexSizeError } from './factories/index-size-error';\nimport { createInvalidAccessError } from './factories/invalid-access-error';\nimport { createInvalidStateError } from './factories/invalid-state-error';\nimport { createIsAnyAudioContext } from './factories/is-any-audio-context';\nimport { createIsAnyAudioNode } from './factories/is-any-audio-node';\nimport { createIsAnyAudioParam } from './factories/is-any-audio-param';\nimport { createIsAnyOfflineAudioContext } from './factories/is-any-offline-audio-context';\nimport { createIsNativeAudioContext } from './factories/is-native-audio-context';\nimport { createIsNativeAudioNode } from './factories/is-native-audio-node';\nimport { createIsNativeAudioParam } from './factories/is-native-audio-param';\nimport { createIsNativeContext } from './factories/is-native-context';\nimport { createIsNativeOfflineAudioContext } from './factories/is-native-offline-audio-context';\nimport { createIsSecureContext } from './factories/is-secure-context';\nimport { createIsSupportedPromise } from './factories/is-supported-promise';\nimport { createMediaElementAudioSourceNodeConstructor } from './factories/media-element-audio-source-node-constructor';\nimport { createMediaStreamAudioDestinationNodeConstructor } from './factories/media-stream-audio-destination-node-constructor';\nimport { createMediaStreamAudioSourceNodeConstructor } from './factories/media-stream-audio-source-node-constructor';\nimport { createMediaStreamTrackAudioSourceNodeConstructor } from './factories/media-stream-track-audio-source-node-constructor';\nimport { createMinimalAudioContextConstructor } from './factories/minimal-audio-context-constructor';\nimport { createMinimalBaseAudioContextConstructor } from './factories/minimal-base-audio-context-constructor';\nimport { createMinimalOfflineAudioContextConstructor } from './factories/minimal-offline-audio-context-constructor';\nimport { createMonitorConnections } from './factories/monitor-connections';\nimport { createNativeAnalyserNodeFactory } from './factories/native-analyser-node-factory';\nimport { createNativeAudioBufferConstructor } from './factories/native-audio-buffer-constructor';\nimport { createNativeAudioBufferSourceNodeFactory } from './factories/native-audio-buffer-source-node-factory';\nimport { createNativeAudioContextConstructor } from './factories/native-audio-context-constructor';\nimport { createNativeAudioDestinationNodeFactory } from './factories/native-audio-destination-node';\nimport { createNativeAudioWorkletNodeConstructor } from './factories/native-audio-worklet-node-constructor';\nimport { createNativeAudioWorkletNodeFactory } from './factories/native-audio-worklet-node-factory';\nimport { createNativeAudioWorkletNodeFakerFactory } from './factories/native-audio-worklet-node-faker-factory';\nimport { createNativeBiquadFilterNode } from './factories/native-biquad-filter-node';\nimport { createNativeChannelMergerNodeFactory } from './factories/native-channel-merger-node-factory';\nimport { createNativeChannelSplitterNode } from './factories/native-channel-splitter-node';\nimport { createNativeConstantSourceNodeFactory } from './factories/native-constant-source-node-factory';\nimport { createNativeConstantSourceNodeFakerFactory } from './factories/native-constant-source-node-faker-factory';\nimport { createNativeConvolverNodeFactory } from './factories/native-convolver-node-factory';\nimport { createNativeDelayNode } from './factories/native-delay-node';\nimport { createNativeDynamicsCompressorNodeFactory } from './factories/native-dynamics-compressor-node-factory';\nimport { createNativeGainNode } from './factories/native-gain-node';\nimport { createNativeIIRFilterNodeFactory } from './factories/native-iir-filter-node-factory';\nimport { createNativeIIRFilterNodeFakerFactory } from './factories/native-iir-filter-node-faker-factory';\nimport { createNativeMediaElementAudioSourceNode } from './factories/native-media-element-audio-source-node';\nimport { createNativeMediaStreamAudioDestinationNode } from './factories/native-media-stream-audio-destination-node';\nimport { createNativeMediaStreamAudioSourceNode } from './factories/native-media-stream-audio-source-node';\nimport { createNativeMediaStreamTrackAudioSourceNodeFactory } from './factories/native-media-stream-track-audio-source-node-factory';\nimport { createNativeOfflineAudioContextConstructor } from './factories/native-offline-audio-context-constructor';\nimport { createNativeOscillatorNodeFactory } from './factories/native-oscillator-node-factory';\nimport { createNativePannerNodeFactory } from './factories/native-panner-node-factory';\nimport { createNativePannerNodeFakerFactory } from './factories/native-panner-node-faker-factory';\nimport { createNativePeriodicWaveFactory } from './factories/native-periodic-wave-factory';\nimport { createNativeScriptProcessorNode } from './factories/native-script-processor-node';\nimport { createNativeStereoPannerNodeFactory } from './factories/native-stereo-panner-node-factory';\nimport { createNativeStereoPannerNodeFakerFactory } from './factories/native-stereo-panner-node-faker-factory';\nimport { createNativeWaveShaperNodeFactory } from './factories/native-wave-shaper-node-factory';\nimport { createNativeWaveShaperNodeFakerFactory } from './factories/native-wave-shaper-node-faker-factory';\nimport { createNotSupportedError } from './factories/not-supported-error';\nimport { createOfflineAudioContextConstructor } from './factories/offline-audio-context-constructor';\nimport { createOscillatorNodeConstructor } from './factories/oscillator-node-constructor';\nimport { createOscillatorNodeRendererFactory } from './factories/oscillator-node-renderer-factory';\nimport { createPannerNodeConstructor } from './factories/panner-node-constructor';\nimport { createPannerNodeRendererFactory } from './factories/panner-node-renderer-factory';\nimport { createPeriodicWaveConstructor } from './factories/periodic-wave-constructor';\nimport { createRenderAutomation } from './factories/render-automation';\nimport { createRenderInputsOfAudioNode } from './factories/render-inputs-of-audio-node';\nimport { createRenderInputsOfAudioParam } from './factories/render-inputs-of-audio-param';\nimport { createRenderNativeOfflineAudioContext } from './factories/render-native-offline-audio-context';\nimport { createSetActiveAudioWorkletNodeInputs } from './factories/set-active-audio-worklet-node-inputs';\nimport { createSetAudioNodeTailTime } from './factories/set-audio-node-tail-time';\nimport { createStartRendering } from './factories/start-rendering';\nimport { createStereoPannerNodeConstructor } from './factories/stereo-panner-node-constructor';\nimport { createStereoPannerNodeRendererFactory } from './factories/stereo-panner-node-renderer-factory';\nimport { createTestAudioBufferConstructorSupport } from './factories/test-audio-buffer-constructor-support';\nimport { createTestAudioBufferCopyChannelMethodsSubarraySupport } from './factories/test-audio-buffer-copy-channel-methods-subarray-support';\nimport { createTestAudioContextCloseMethodSupport } from './factories/test-audio-context-close-method-support';\nimport { createTestAudioContextDecodeAudioDataMethodTypeErrorSupport } from './factories/test-audio-context-decode-audio-data-method-type-error-support';\nimport { createTestAudioContextOptionsSupport } from './factories/test-audio-context-options-support';\nimport { createTestAudioNodeConnectMethodSupport } from './factories/test-audio-node-connect-method-support';\nimport { createTestAudioWorkletProcessorNoOutputsSupport } from './factories/test-audio-worklet-processor-no-outputs-support';\nimport { createTestAudioWorkletProcessorPostMessageSupport } from './factories/test-audio-worklet-processor-post-message-support';\nimport { createTestChannelMergerNodeChannelCountSupport } from './factories/test-channel-merger-node-channel-count-support';\nimport { createTestConstantSourceNodeAccurateSchedulingSupport } from './factories/test-constant-source-node-accurate-scheduling-support';\nimport { createTestConvolverNodeBufferReassignabilitySupport } from './factories/test-convolver-node-buffer-reassignability-support';\nimport { createTestConvolverNodeChannelCountSupport } from './factories/test-convolver-node-channel-count-support';\nimport { createTestIsSecureContextSupport } from './factories/test-is-secure-context-support';\nimport { createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport } from './factories/test-media-stream-audio-source-node-media-stream-without-audio-track-support';\nimport { createTestOfflineAudioContextCurrentTimeSupport } from './factories/test-offline-audio-context-current-time-support';\nimport { createTestStereoPannerNodeDefaultValueSupport } from './factories/test-stereo-panner-node-default-value-support';\nimport { createUnknownError } from './factories/unknown-error';\nimport { createWaveShaperNodeConstructor } from './factories/wave-shaper-node-constructor';\nimport { createWaveShaperNodeRendererFactory } from './factories/wave-shaper-node-renderer-factory';\nimport { createWindow } from './factories/window';\nimport { createWrapAudioBufferCopyChannelMethods } from './factories/wrap-audio-buffer-copy-channel-methods';\nimport { createWrapAudioBufferCopyChannelMethodsOutOfBounds } from './factories/wrap-audio-buffer-copy-channel-methods-out-of-bounds';\nimport { createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer } from './factories/wrap-audio-buffer-source-node-stop-method-nullified-buffer';\nimport { createWrapChannelMergerNode } from './factories/wrap-channel-merger-node';\nimport { AUDIO_NODE_CONNECTIONS_STORE, AUDIO_NODE_STORE, AUDIO_PARAM_CONNECTIONS_STORE, AUDIO_PARAM_STORE, CONTEXT_STORE, CYCLE_COUNTERS } from './globals';\nimport { connectNativeAudioNodeToNativeAudioNode } from './helpers/connect-native-audio-node-to-native-audio-node';\nimport { disconnectNativeAudioNodeFromNativeAudioNode } from './helpers/disconnect-native-audio-node-from-native-audio-node';\nimport { getAudioNodeConnections } from './helpers/get-audio-node-connections';\nimport { getAudioParamConnections } from './helpers/get-audio-param-connections';\nimport { getEventListenersOfAudioNode } from './helpers/get-event-listeners-of-audio-node';\nimport { getFirstSample } from './helpers/get-first-sample';\nimport { getNativeAudioNode } from './helpers/get-native-audio-node';\nimport { getNativeAudioParam } from './helpers/get-native-audio-param';\nimport { getValueForKey } from './helpers/get-value-for-key';\nimport { insertElementInSet } from './helpers/insert-element-in-set';\nimport { isActiveAudioNode } from './helpers/is-active-audio-node';\nimport { isDCCurve } from './helpers/is-dc-curve';\nimport { isPartOfACycle } from './helpers/is-part-of-a-cycle';\nimport { isPassiveAudioNode } from './helpers/is-passive-audio-node';\nimport { overwriteAccessors } from './helpers/overwrite-accessors';\nimport { pickElementFromSet } from './helpers/pick-element-from-set';\nimport { sanitizeAudioWorkletNodeOptions } from './helpers/sanitize-audio-worklet-node-options';\nimport { sanitizeChannelSplitterOptions } from './helpers/sanitize-channel-splitter-options';\nimport { sanitizePeriodicWaveOptions } from './helpers/sanitize-periodic-wave-options';\nimport { setValueAtTimeUntilPossible } from './helpers/set-value-at-time-until-possible';\nimport { testAudioBufferCopyChannelMethodsOutOfBoundsSupport } from './helpers/test-audio-buffer-copy-channel-methods-out-of-bounds-support';\nimport { testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport } from './helpers/test-audio-buffer-source-node-start-method-consecutive-calls-support';\nimport { testAudioBufferSourceNodeStartMethodOffsetClampingSupport } from './helpers/test-audio-buffer-source-node-start-method-offset-clamping-support';\nimport { testAudioBufferSourceNodeStopMethodNullifiedBufferSupport } from './helpers/test-audio-buffer-source-node-stop-method-nullified-buffer-support';\nimport { testAudioScheduledSourceNodeStartMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-start-method-negative-parameters-support';\nimport { testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport } from './helpers/test-audio-scheduled-source-node-stop-method-consecutive-calls-support';\nimport { testAudioScheduledSourceNodeStopMethodNegativeParametersSupport } from './helpers/test-audio-scheduled-source-node-stop-method-negative-parameters-support';\nimport { testAudioWorkletNodeOptionsClonability } from './helpers/test-audio-worklet-node-options-clonability';\nimport { testDomExceptionConstructorSupport } from './helpers/test-dom-exception-constructor-support';\nimport { testPromiseSupport } from './helpers/test-promise-support';\nimport { testTransferablesSupport } from './helpers/test-transferables-support';\nimport { wrapAudioBufferSourceNodeStartMethodOffsetClamping } from './helpers/wrap-audio-buffer-source-node-start-method-offset-clamping';\nimport { wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls } from './helpers/wrap-audio-scheduled-source-node-stop-method-consecutive-calls';\nimport { wrapEventListener } from './helpers/wrap-event-listener';\n/*\n * @todo Explicitly referencing the barrel file seems to be necessary when enabling the\n * isolatedModules compiler option.\n */\nexport * from './interfaces/index';\nexport * from './types/index';\nconst addActiveInputConnectionToAudioNode = createAddActiveInputConnectionToAudioNode(insertElementInSet);\nconst addPassiveInputConnectionToAudioNode = createAddPassiveInputConnectionToAudioNode(insertElementInSet);\nconst deleteActiveInputConnectionToAudioNode = createDeleteActiveInputConnectionToAudioNode(pickElementFromSet);\nconst audioNodeTailTimeStore = new WeakMap();\nconst getAudioNodeTailTime = createGetAudioNodeTailTime(audioNodeTailTimeStore);\nconst cacheTestResult = createCacheTestResult(new Map(), new WeakMap());\nconst window = createWindow();\nconst createNativeAnalyserNode = createNativeAnalyserNodeFactory(cacheTestResult, createIndexSizeError);\nconst getAudioNodeRenderer = createGetAudioNodeRenderer(getAudioNodeConnections);\nconst renderInputsOfAudioNode = createRenderInputsOfAudioNode(getAudioNodeConnections, getAudioNodeRenderer, isPartOfACycle);\nconst createAnalyserNodeRenderer = createAnalyserNodeRendererFactory(createNativeAnalyserNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst getNativeContext = createGetNativeContext(CONTEXT_STORE);\nconst nativeOfflineAudioContextConstructor = createNativeOfflineAudioContextConstructor(window);\nconst isNativeOfflineAudioContext = createIsNativeOfflineAudioContext(nativeOfflineAudioContextConstructor);\nconst audioParamAudioNodeStore = new WeakMap();\nconst eventTargetConstructor = createEventTargetConstructor(wrapEventListener);\nconst nativeAudioContextConstructor = createNativeAudioContextConstructor(window);\nconst isNativeAudioContext = createIsNativeAudioContext(nativeAudioContextConstructor);\nconst isNativeAudioNode = createIsNativeAudioNode(window);\nconst isNativeAudioParam = createIsNativeAudioParam(window);\nconst nativeAudioWorkletNodeConstructor = createNativeAudioWorkletNodeConstructor(window);\nconst audioNodeConstructor = createAudioNodeConstructor(createAddAudioNodeConnections(AUDIO_NODE_CONNECTIONS_STORE), createAddConnectionToAudioNode(addActiveInputConnectionToAudioNode, addPassiveInputConnectionToAudioNode, connectNativeAudioNodeToNativeAudioNode, deleteActiveInputConnectionToAudioNode, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getAudioNodeTailTime, getEventListenersOfAudioNode, getNativeAudioNode, insertElementInSet, isActiveAudioNode, isPartOfACycle, isPassiveAudioNode), cacheTestResult, createIncrementCycleCounterFactory(CYCLE_COUNTERS, disconnectNativeAudioNodeFromNativeAudioNode, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, isActiveAudioNode), createIndexSizeError, createInvalidAccessError, createNotSupportedError, createDecrementCycleCounter(connectNativeAudioNodeToNativeAudioNode, CYCLE_COUNTERS, getAudioNodeConnections, getNativeAudioNode, getNativeAudioParam, getNativeContext, isActiveAudioNode, isNativeOfflineAudioContext), createDetectCycles(audioParamAudioNodeStore, getAudioNodeConnections, getValueForKey), eventTargetConstructor, getNativeContext, isNativeAudioContext, isNativeAudioNode, isNativeAudioParam, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor);\nconst analyserNodeConstructor = createAnalyserNodeConstructor(audioNodeConstructor, createAnalyserNodeRenderer, createIndexSizeError, createNativeAnalyserNode, getNativeContext, isNativeOfflineAudioContext);\nexport { analyserNodeConstructor as AnalyserNode };\nconst audioBufferStore = new WeakSet();\nconst nativeAudioBufferConstructor = createNativeAudioBufferConstructor(window);\nconst convertNumberToUnsignedLong = createConvertNumberToUnsignedLong(new Uint32Array(1));\nconst wrapAudioBufferCopyChannelMethods = createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError);\nconst wrapAudioBufferCopyChannelMethodsOutOfBounds = createWrapAudioBufferCopyChannelMethodsOutOfBounds(convertNumberToUnsignedLong);\nconst audioBufferConstructor = createAudioBufferConstructor(audioBufferStore, cacheTestResult, createNotSupportedError, nativeAudioBufferConstructor, nativeOfflineAudioContextConstructor, createTestAudioBufferConstructorSupport(nativeAudioBufferConstructor), wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nexport { audioBufferConstructor as AudioBuffer };\nconst addSilentConnection = createAddSilentConnection(createNativeGainNode);\nconst renderInputsOfAudioParam = createRenderInputsOfAudioParam(getAudioNodeRenderer, getAudioParamConnections, isPartOfACycle);\nconst connectAudioParam = createConnectAudioParam(renderInputsOfAudioParam);\nconst createNativeAudioBufferSourceNode = createNativeAudioBufferSourceNodeFactory(addSilentConnection, cacheTestResult, testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport, testAudioBufferSourceNodeStartMethodOffsetClampingSupport, testAudioBufferSourceNodeStopMethodNullifiedBufferSupport, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioBufferSourceNodeStartMethodOffsetClamping, createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer(overwriteAccessors), wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst renderAutomation = createRenderAutomation(createGetAudioParamRenderer(getAudioParamConnections), renderInputsOfAudioParam);\nconst createAudioBufferSourceNodeRenderer = createAudioBufferSourceNodeRendererFactory(connectAudioParam, createNativeAudioBufferSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst createAudioParam = createAudioParamFactory(createAddAudioParamConnections(AUDIO_PARAM_CONNECTIONS_STORE), audioParamAudioNodeStore, AUDIO_PARAM_STORE, createAudioParamRenderer, createCancelAndHoldAutomationEvent, createCancelScheduledValuesAutomationEvent, createExponentialRampToValueAutomationEvent, createLinearRampToValueAutomationEvent, createSetTargetAutomationEvent, createSetValueAutomationEvent, createSetValueCurveAutomationEvent, nativeAudioContextConstructor, setValueAtTimeUntilPossible);\nconst audioBufferSourceNodeConstructor = createAudioBufferSourceNodeConstructor(audioNodeConstructor, createAudioBufferSourceNodeRenderer, createAudioParam, createInvalidStateError, createNativeAudioBufferSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nexport { audioBufferSourceNodeConstructor as AudioBufferSourceNode };\nconst audioDestinationNodeConstructor = createAudioDestinationNodeConstructor(audioNodeConstructor, createAudioDestinationNodeRenderer, createIndexSizeError, createInvalidStateError, createNativeAudioDestinationNodeFactory(createNativeGainNode, overwriteAccessors), getNativeContext, isNativeOfflineAudioContext, renderInputsOfAudioNode);\nconst createBiquadFilterNodeRenderer = createBiquadFilterNodeRendererFactory(connectAudioParam, createNativeBiquadFilterNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst setAudioNodeTailTime = createSetAudioNodeTailTime(audioNodeTailTimeStore);\nconst biquadFilterNodeConstructor = createBiquadFilterNodeConstructor(audioNodeConstructor, createAudioParam, createBiquadFilterNodeRenderer, createInvalidAccessError, createNativeBiquadFilterNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst monitorConnections = createMonitorConnections(insertElementInSet, isNativeAudioNode);\nconst wrapChannelMergerNode = createWrapChannelMergerNode(createInvalidStateError, monitorConnections);\nconst createNativeChannelMergerNode = createNativeChannelMergerNodeFactory(nativeAudioContextConstructor, wrapChannelMergerNode);\nconst createChannelMergerNodeRenderer = createChannelMergerNodeRendererFactory(createNativeChannelMergerNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelMergerNodeConstructor = createChannelMergerNodeConstructor(audioNodeConstructor, createChannelMergerNodeRenderer, createNativeChannelMergerNode, getNativeContext, isNativeOfflineAudioContext);\nconst createChannelSplitterNodeRenderer = createChannelSplitterNodeRendererFactory(createNativeChannelSplitterNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst channelSplitterNodeConstructor = createChannelSplitterNodeConstructor(audioNodeConstructor, createChannelSplitterNodeRenderer, createNativeChannelSplitterNode, getNativeContext, isNativeOfflineAudioContext, sanitizeChannelSplitterOptions);\nconst createNativeConstantSourceNodeFaker = createNativeConstantSourceNodeFakerFactory(addSilentConnection, createNativeAudioBufferSourceNode, createNativeGainNode, monitorConnections);\nconst createNativeConstantSourceNode = createNativeConstantSourceNodeFactory(addSilentConnection, cacheTestResult, createNativeConstantSourceNodeFaker, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport);\nconst createConstantSourceNodeRenderer = createConstantSourceNodeRendererFactory(connectAudioParam, createNativeConstantSourceNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst constantSourceNodeConstructor = createConstantSourceNodeConstructor(audioNodeConstructor, createAudioParam, createConstantSourceNodeRenderer, createNativeConstantSourceNode, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createNativeConvolverNode = createNativeConvolverNodeFactory(createNotSupportedError, overwriteAccessors);\nconst createConvolverNodeRenderer = createConvolverNodeRendererFactory(createNativeConvolverNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst convolverNodeConstructor = createConvolverNodeConstructor(audioNodeConstructor, createConvolverNodeRenderer, createNativeConvolverNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createDelayNodeRenderer = createDelayNodeRendererFactory(connectAudioParam, createNativeDelayNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst delayNodeConstructor = createDelayNodeConstructor(audioNodeConstructor, createAudioParam, createDelayNodeRenderer, createNativeDelayNode, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativeDynamicsCompressorNode = createNativeDynamicsCompressorNodeFactory(createNotSupportedError);\nconst createDynamicsCompressorNodeRenderer = createDynamicsCompressorNodeRendererFactory(connectAudioParam, createNativeDynamicsCompressorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst dynamicsCompressorNodeConstructor = createDynamicsCompressorNodeConstructor(audioNodeConstructor, createAudioParam, createDynamicsCompressorNodeRenderer, createNativeDynamicsCompressorNode, createNotSupportedError, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createGainNodeRenderer = createGainNodeRendererFactory(connectAudioParam, createNativeGainNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst gainNodeConstructor = createGainNodeConstructor(audioNodeConstructor, createAudioParam, createGainNodeRenderer, createNativeGainNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeIIRFilterNodeFaker = createNativeIIRFilterNodeFakerFactory(createInvalidAccessError, createInvalidStateError, createNativeScriptProcessorNode, createNotSupportedError);\nconst renderNativeOfflineAudioContext = createRenderNativeOfflineAudioContext(cacheTestResult, createNativeGainNode, createNativeScriptProcessorNode, createTestOfflineAudioContextCurrentTimeSupport(createNativeGainNode, nativeOfflineAudioContextConstructor));\nconst createIIRFilterNodeRenderer = createIIRFilterNodeRendererFactory(createNativeAudioBufferSourceNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst createNativeIIRFilterNode = createNativeIIRFilterNodeFactory(createNativeIIRFilterNodeFaker);\nconst iIRFilterNodeConstructor = createIIRFilterNodeConstructor(audioNodeConstructor, createNativeIIRFilterNode, createIIRFilterNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createAudioListener = createAudioListenerFactory(createAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeScriptProcessorNode, createNotSupportedError, getFirstSample, isNativeOfflineAudioContext, overwriteAccessors);\nconst unrenderedAudioWorkletNodeStore = new WeakMap();\nconst minimalBaseAudioContextConstructor = createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener);\nconst createNativeOscillatorNode = createNativeOscillatorNodeFactory(addSilentConnection, cacheTestResult, testAudioScheduledSourceNodeStartMethodNegativeParametersSupport, testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport, testAudioScheduledSourceNodeStopMethodNegativeParametersSupport, wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls);\nconst createOscillatorNodeRenderer = createOscillatorNodeRendererFactory(connectAudioParam, createNativeOscillatorNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst oscillatorNodeConstructor = createOscillatorNodeConstructor(audioNodeConstructor, createAudioParam, createNativeOscillatorNode, createOscillatorNodeRenderer, getNativeContext, isNativeOfflineAudioContext, wrapEventListener);\nconst createConnectedNativeAudioBufferSourceNode = createConnectedNativeAudioBufferSourceNodeFactory(createNativeAudioBufferSourceNode);\nconst createNativeWaveShaperNodeFaker = createNativeWaveShaperNodeFakerFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeGainNode, isDCCurve, monitorConnections);\nconst createNativeWaveShaperNode = createNativeWaveShaperNodeFactory(createConnectedNativeAudioBufferSourceNode, createInvalidStateError, createNativeWaveShaperNodeFaker, isDCCurve, monitorConnections, nativeAudioContextConstructor, overwriteAccessors);\nconst createNativePannerNodeFaker = createNativePannerNodeFakerFactory(connectNativeAudioNodeToNativeAudioNode, createInvalidStateError, createNativeChannelMergerNode, createNativeGainNode, createNativeScriptProcessorNode, createNativeWaveShaperNode, createNotSupportedError, disconnectNativeAudioNodeFromNativeAudioNode, getFirstSample, monitorConnections);\nconst createNativePannerNode = createNativePannerNodeFactory(createNativePannerNodeFaker);\nconst createPannerNodeRenderer = createPannerNodeRendererFactory(connectAudioParam, createNativeChannelMergerNode, createNativeConstantSourceNode, createNativeGainNode, createNativePannerNode, getNativeAudioNode, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst pannerNodeConstructor = createPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativePannerNode, createPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst createNativePeriodicWave = createNativePeriodicWaveFactory(createIndexSizeError);\nconst periodicWaveConstructor = createPeriodicWaveConstructor(createNativePeriodicWave, getNativeContext, new WeakSet(), sanitizePeriodicWaveOptions);\nconst nativeStereoPannerNodeFakerFactory = createNativeStereoPannerNodeFakerFactory(createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeGainNode, createNativeWaveShaperNode, createNotSupportedError, monitorConnections);\nconst createNativeStereoPannerNode = createNativeStereoPannerNodeFactory(nativeStereoPannerNodeFakerFactory, createNotSupportedError);\nconst createStereoPannerNodeRenderer = createStereoPannerNodeRendererFactory(connectAudioParam, createNativeStereoPannerNode, getNativeAudioNode, renderAutomation, renderInputsOfAudioNode);\nconst stereoPannerNodeConstructor = createStereoPannerNodeConstructor(audioNodeConstructor, createAudioParam, createNativeStereoPannerNode, createStereoPannerNodeRenderer, getNativeContext, isNativeOfflineAudioContext);\nconst createWaveShaperNodeRenderer = createWaveShaperNodeRendererFactory(createNativeWaveShaperNode, getNativeAudioNode, renderInputsOfAudioNode);\nconst waveShaperNodeConstructor = createWaveShaperNodeConstructor(audioNodeConstructor, createInvalidStateError, createNativeWaveShaperNode, createWaveShaperNodeRenderer, getNativeContext, isNativeOfflineAudioContext, setAudioNodeTailTime);\nconst isSecureContext = createIsSecureContext(window);\nconst exposeCurrentFrameAndCurrentTime = createExposeCurrentFrameAndCurrentTime(window);\nconst backupOfflineAudioContextStore = new WeakMap();\nconst getOrCreateBackupOfflineAudioContext = createGetOrCreateBackupOfflineAudioContext(backupOfflineAudioContextStore, nativeOfflineAudioContextConstructor);\n// The addAudioWorkletModule() function is only available in a SecureContext.\nexport const addAudioWorkletModule = isSecureContext\n    ? createAddAudioWorkletModule(cacheTestResult, createNotSupportedError, createEvaluateSource(window), exposeCurrentFrameAndCurrentTime, createFetchSource(createAbortError), getNativeContext, getOrCreateBackupOfflineAudioContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, new WeakMap(), new WeakMap(), createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), \n    // @todo window is guaranteed to be defined because isSecureContext checks that as well.\n    window)\n    : undefined;\nconst isNativeContext = createIsNativeContext(isNativeAudioContext, isNativeOfflineAudioContext);\nexport const decodeAudioData = createDecodeAudioData(audioBufferStore, cacheTestResult, createDataCloneError, createEncodingError, new WeakSet(), getNativeContext, isNativeContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, testPromiseSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst baseAudioContextConstructor = createBaseAudioContextConstructor(addAudioWorkletModule, analyserNodeConstructor, audioBufferConstructor, audioBufferSourceNodeConstructor, biquadFilterNodeConstructor, channelMergerNodeConstructor, channelSplitterNodeConstructor, constantSourceNodeConstructor, convolverNodeConstructor, decodeAudioData, delayNodeConstructor, dynamicsCompressorNodeConstructor, gainNodeConstructor, iIRFilterNodeConstructor, minimalBaseAudioContextConstructor, oscillatorNodeConstructor, pannerNodeConstructor, periodicWaveConstructor, stereoPannerNodeConstructor, waveShaperNodeConstructor);\nconst mediaElementAudioSourceNodeConstructor = createMediaElementAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaElementAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioDestinationNodeConstructor = createMediaStreamAudioDestinationNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioDestinationNode, getNativeContext, isNativeOfflineAudioContext);\nconst mediaStreamAudioSourceNodeConstructor = createMediaStreamAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamAudioSourceNode, getNativeContext, isNativeOfflineAudioContext);\nconst createNativeMediaStreamTrackAudioSourceNode = createNativeMediaStreamTrackAudioSourceNodeFactory(createInvalidStateError, isNativeOfflineAudioContext);\nconst mediaStreamTrackAudioSourceNodeConstructor = createMediaStreamTrackAudioSourceNodeConstructor(audioNodeConstructor, createNativeMediaStreamTrackAudioSourceNode, getNativeContext);\nconst audioContextConstructor = createAudioContextConstructor(baseAudioContextConstructor, createInvalidStateError, createNotSupportedError, createUnknownError, mediaElementAudioSourceNodeConstructor, mediaStreamAudioDestinationNodeConstructor, mediaStreamAudioSourceNodeConstructor, mediaStreamTrackAudioSourceNodeConstructor, nativeAudioContextConstructor);\nexport { audioContextConstructor as AudioContext };\nconst getUnrenderedAudioWorkletNodes = createGetUnrenderedAudioWorkletNodes(unrenderedAudioWorkletNodeStore);\nconst addUnrenderedAudioWorkletNode = createAddUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst connectMultipleOutputs = createConnectMultipleOutputs(createIndexSizeError);\nconst deleteUnrenderedAudioWorkletNode = createDeleteUnrenderedAudioWorkletNode(getUnrenderedAudioWorkletNodes);\nconst disconnectMultipleOutputs = createDisconnectMultipleOutputs(createIndexSizeError);\nconst activeAudioWorkletNodeInputsStore = new WeakMap();\nconst getActiveAudioWorkletNodeInputs = createGetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore, getValueForKey);\nconst createNativeAudioWorkletNodeFaker = createNativeAudioWorkletNodeFakerFactory(connectMultipleOutputs, createIndexSizeError, createInvalidStateError, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, createNativeScriptProcessorNode, createNotSupportedError, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getActiveAudioWorkletNodeInputs, monitorConnections);\nconst createNativeAudioWorkletNode = createNativeAudioWorkletNodeFactory(createInvalidStateError, createNativeAudioWorkletNodeFaker, createNativeGainNode, createNotSupportedError, monitorConnections);\nconst createAudioWorkletNodeRenderer = createAudioWorkletNodeRendererFactory(connectAudioParam, connectMultipleOutputs, createNativeAudioBufferSourceNode, createNativeChannelMergerNode, createNativeChannelSplitterNode, createNativeConstantSourceNode, createNativeGainNode, deleteUnrenderedAudioWorkletNode, disconnectMultipleOutputs, exposeCurrentFrameAndCurrentTime, getNativeAudioNode, nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor, renderAutomation, renderInputsOfAudioNode, renderNativeOfflineAudioContext);\nconst getBackupOfflineAudioContext = createGetBackupOfflineAudioContext(backupOfflineAudioContextStore);\nconst setActiveAudioWorkletNodeInputs = createSetActiveAudioWorkletNodeInputs(activeAudioWorkletNodeInputsStore);\n// The AudioWorkletNode constructor is only available in a SecureContext.\nconst audioWorkletNodeConstructor = isSecureContext\n    ? createAudioWorkletNodeConstructor(addUnrenderedAudioWorkletNode, audioNodeConstructor, createAudioParam, createAudioWorkletNodeRenderer, createNativeAudioWorkletNode, getAudioNodeConnections, getBackupOfflineAudioContext, getNativeContext, isNativeOfflineAudioContext, nativeAudioWorkletNodeConstructor, sanitizeAudioWorkletNodeOptions, setActiveAudioWorkletNodeInputs, testAudioWorkletNodeOptionsClonability, wrapEventListener)\n    : undefined;\nexport { audioWorkletNodeConstructor as AudioWorkletNode };\nexport { biquadFilterNodeConstructor as BiquadFilterNode };\nexport { channelMergerNodeConstructor as ChannelMergerNode };\nexport { channelSplitterNodeConstructor as ChannelSplitterNode };\nexport { convolverNodeConstructor as ConvolverNode };\nexport { constantSourceNodeConstructor as ConstantSourceNode };\nexport { delayNodeConstructor as DelayNode };\nexport { dynamicsCompressorNodeConstructor as DynamicsCompressorNode };\nexport { gainNodeConstructor as GainNode };\nexport { iIRFilterNodeConstructor as IIRFilterNode };\nexport { mediaElementAudioSourceNodeConstructor as MediaElementAudioSourceNode };\nexport { mediaStreamAudioDestinationNodeConstructor as MediaStreamAudioDestinationNode };\nexport { mediaStreamAudioSourceNodeConstructor as MediaStreamAudioSourceNode };\nexport { mediaStreamTrackAudioSourceNodeConstructor as MediaStreamTrackAudioSourceNode };\nconst minimalAudioContextConstructor = createMinimalAudioContextConstructor(createInvalidStateError, createNotSupportedError, createUnknownError, minimalBaseAudioContextConstructor, nativeAudioContextConstructor);\nexport { minimalAudioContextConstructor as MinimalAudioContext };\nconst createNativeOfflineAudioContext = createCreateNativeOfflineAudioContext(createNotSupportedError, nativeOfflineAudioContextConstructor);\nconst startRendering = createStartRendering(audioBufferStore, cacheTestResult, getAudioNodeRenderer, getUnrenderedAudioWorkletNodes, renderNativeOfflineAudioContext, testAudioBufferCopyChannelMethodsOutOfBoundsSupport, wrapAudioBufferCopyChannelMethods, wrapAudioBufferCopyChannelMethodsOutOfBounds);\nconst minimalOfflineAudioContextConstructor = createMinimalOfflineAudioContextConstructor(cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, minimalBaseAudioContextConstructor, startRendering);\nexport { minimalOfflineAudioContextConstructor as MinimalOfflineAudioContext };\nconst offlineAudioContextConstructor = createOfflineAudioContextConstructor(baseAudioContextConstructor, cacheTestResult, createInvalidStateError, createNativeOfflineAudioContext, startRendering);\nexport { offlineAudioContextConstructor as OfflineAudioContext };\nexport { oscillatorNodeConstructor as OscillatorNode };\nexport { pannerNodeConstructor as PannerNode };\nexport { periodicWaveConstructor as PeriodicWave };\nexport { stereoPannerNodeConstructor as StereoPannerNode };\nexport { waveShaperNodeConstructor as WaveShaperNode };\nexport const isAnyAudioContext = createIsAnyAudioContext(CONTEXT_STORE, isNativeAudioContext);\nexport const isAnyAudioNode = createIsAnyAudioNode(AUDIO_NODE_STORE, isNativeAudioNode);\nexport const isAnyAudioParam = createIsAnyAudioParam(AUDIO_PARAM_STORE, isNativeAudioParam);\nexport const isAnyOfflineAudioContext = createIsAnyOfflineAudioContext(CONTEXT_STORE, isNativeOfflineAudioContext);\nexport const isSupported = () => createIsSupportedPromise(cacheTestResult, createTestAudioBufferCopyChannelMethodsSubarraySupport(nativeOfflineAudioContextConstructor), createTestAudioContextCloseMethodSupport(nativeAudioContextConstructor), createTestAudioContextDecodeAudioDataMethodTypeErrorSupport(nativeOfflineAudioContextConstructor), createTestAudioContextOptionsSupport(nativeAudioContextConstructor), createTestAudioNodeConnectMethodSupport(nativeOfflineAudioContextConstructor), createTestAudioWorkletProcessorNoOutputsSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor), createTestChannelMergerNodeChannelCountSupport(nativeOfflineAudioContextConstructor), createTestConstantSourceNodeAccurateSchedulingSupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeBufferReassignabilitySupport(nativeOfflineAudioContextConstructor), createTestConvolverNodeChannelCountSupport(nativeOfflineAudioContextConstructor), testDomExceptionConstructorSupport, createTestIsSecureContextSupport(window), createTestMediaStreamAudioSourceNodeMediaStreamWithoutAudioTrackSupport(nativeAudioContextConstructor), createTestStereoPannerNodeDefaultValueSupport(nativeOfflineAudioContextConstructor), testTransferablesSupport);\n//# sourceMappingURL=module.js.map","/**\n * Test if the arg is undefined\n */\nexport function isUndef(arg) {\n    return arg === undefined;\n}\n/**\n * Test if the arg is not undefined\n */\nexport function isDefined(arg) {\n    return arg !== undefined;\n}\n/**\n * Test if the arg is a function\n */\nexport function isFunction(arg) {\n    return typeof arg === \"function\";\n}\n/**\n * Test if the argument is a number.\n */\nexport function isNumber(arg) {\n    return typeof arg === \"number\";\n}\n/**\n * Test if the given argument is an object literal (i.e. `{}`);\n */\nexport function isObject(arg) {\n    return (Object.prototype.toString.call(arg) === \"[object Object]\" &&\n        arg.constructor === Object);\n}\n/**\n * Test if the argument is a boolean.\n */\nexport function isBoolean(arg) {\n    return typeof arg === \"boolean\";\n}\n/**\n * Test if the argument is an Array\n */\nexport function isArray(arg) {\n    return Array.isArray(arg);\n}\n/**\n * Test if the argument is a string.\n */\nexport function isString(arg) {\n    return typeof arg === \"string\";\n}\n/**\n * Test if the argument is in the form of a note in scientific pitch notation.\n * e.g. \"C4\"\n */\nexport function isNote(arg) {\n    return isString(arg) && /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i.test(arg);\n}\n//# sourceMappingURL=TypeCheck.js.map","import { isUndef } from \"./TypeCheck.js\";\n/**\n * Assert that the statement is true, otherwise invoke the error.\n * @param statement\n * @param error The message which is passed into an Error\n */\nexport function assert(statement, error) {\n    if (!statement) {\n        throw new Error(error);\n    }\n}\n/**\n * Make sure that the given value is within the range\n */\nexport function assertRange(value, gte, lte = Infinity) {\n    if (!(gte <= value && value <= lte)) {\n        throw new RangeError(`Value must be within [${gte}, ${lte}], got: ${value}`);\n    }\n}\n/**\n * Warn if the context is not running.\n */\nexport function assertContextRunning(context) {\n    // add a warning if the context is not started\n    if (!context.isOffline && context.state !== \"running\") {\n        warn('The AudioContext is \"suspended\". Invoke Tone.start() from a user action to start the audio.');\n    }\n}\n/**\n * If it is currently inside a scheduled callback\n */\nlet isInsideScheduledCallback = false;\nlet printedScheduledWarning = false;\n/**\n * Notify that the following block of code is occurring inside a Transport callback.\n */\nexport function enterScheduledCallback(insideCallback) {\n    isInsideScheduledCallback = insideCallback;\n}\n/**\n * Make sure that a time was passed into\n */\nexport function assertUsedScheduleTime(time) {\n    if (isUndef(time) &&\n        isInsideScheduledCallback &&\n        !printedScheduledWarning) {\n        printedScheduledWarning = true;\n        warn(\"Events scheduled inside of scheduled callbacks should use the passed in scheduling time. See https://github.com/Tonejs/Tone.js/wiki/Accurate-Timing\");\n    }\n}\n/**\n * The default logger is the console\n */\nlet defaultLogger = console;\n/**\n * Set the logging interface\n */\nexport function setLogger(logger) {\n    defaultLogger = logger;\n}\n/**\n * Log anything\n */\nexport function log(...args) {\n    defaultLogger.log(...args);\n}\n/**\n * Warn anything\n */\nexport function warn(...args) {\n    defaultLogger.warn(...args);\n}\n//# sourceMappingURL=Debug.js.map","import { AudioContext as stdAudioContext, AudioWorkletNode as stdAudioWorkletNode, OfflineAudioContext as stdOfflineAudioContext, } from \"standardized-audio-context\";\nimport { assert } from \"../util/Debug.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\n/**\n * Create a new AudioContext\n */\nexport function createAudioContext(options) {\n    return new stdAudioContext(options);\n}\n/**\n * Create a new OfflineAudioContext\n */\nexport function createOfflineAudioContext(channels, length, sampleRate) {\n    return new stdOfflineAudioContext(channels, length, sampleRate);\n}\n/**\n * A reference to the window object\n * @hidden\n */\nexport const theWindow = typeof self === \"object\" ? self : null;\n/**\n * If the browser has a window object which has an AudioContext\n * @hidden\n */\nexport const hasAudioContext = theWindow &&\n    (theWindow.hasOwnProperty(\"AudioContext\") ||\n        theWindow.hasOwnProperty(\"webkitAudioContext\"));\nexport function createAudioWorkletNode(context, name, options) {\n    assert(isDefined(stdAudioWorkletNode), \"AudioWorkletNode only works in a secure context (https or localhost)\");\n    return new (context instanceof (theWindow === null || theWindow === void 0 ? void 0 : theWindow.BaseAudioContext)\n        ? theWindow === null || theWindow === void 0 ? void 0 : theWindow.AudioWorkletNode\n        : stdAudioWorkletNode)(context, name, options);\n}\n/**\n * This promise resolves to a boolean which indicates if the\n * functionality is supported within the currently used browse.\n * Taken from [standardized-audio-context](https://github.com/chrisguttandin/standardized-audio-context#issupported)\n */\nexport { isSupported as supported } from \"standardized-audio-context\";\n//# sourceMappingURL=AudioContext.js.map","/******************************************************************************\nCopyright (c) Microsoft Corporation.\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\nPERFORMANCE OF THIS SOFTWARE.\n***************************************************************************** */\n/* global Reflect, Promise, SuppressedError, Symbol, Iterator */\n\nvar extendStatics = function(d, b) {\n  extendStatics = Object.setPrototypeOf ||\n      ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n      function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n  return extendStatics(d, b);\n};\n\nexport function __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null)\n      throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n  function __() { this.constructor = d; }\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nexport var __assign = function() {\n  __assign = Object.assign || function __assign(t) {\n      for (var s, i = 1, n = arguments.length; i < n; i++) {\n          s = arguments[i];\n          for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n      return t;\n  }\n  return __assign.apply(this, arguments);\n}\n\nexport function __rest(s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n      t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n      for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n              t[p[i]] = s[p[i]];\n      }\n  return t;\n}\n\nexport function __decorate(decorators, target, key, desc) {\n  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n}\n\nexport function __param(paramIndex, decorator) {\n  return function (target, key) { decorator(target, key, paramIndex); }\n}\n\nexport function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {\n  function accept(f) { if (f !== void 0 && typeof f !== \"function\") throw new TypeError(\"Function expected\"); return f; }\n  var kind = contextIn.kind, key = kind === \"getter\" ? \"get\" : kind === \"setter\" ? \"set\" : \"value\";\n  var target = !descriptorIn && ctor ? contextIn[\"static\"] ? ctor : ctor.prototype : null;\n  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});\n  var _, done = false;\n  for (var i = decorators.length - 1; i >= 0; i--) {\n      var context = {};\n      for (var p in contextIn) context[p] = p === \"access\" ? {} : contextIn[p];\n      for (var p in contextIn.access) context.access[p] = contextIn.access[p];\n      context.addInitializer = function (f) { if (done) throw new TypeError(\"Cannot add initializers after decoration has completed\"); extraInitializers.push(accept(f || null)); };\n      var result = (0, decorators[i])(kind === \"accessor\" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);\n      if (kind === \"accessor\") {\n          if (result === void 0) continue;\n          if (result === null || typeof result !== \"object\") throw new TypeError(\"Object expected\");\n          if (_ = accept(result.get)) descriptor.get = _;\n          if (_ = accept(result.set)) descriptor.set = _;\n          if (_ = accept(result.init)) initializers.unshift(_);\n      }\n      else if (_ = accept(result)) {\n          if (kind === \"field\") initializers.unshift(_);\n          else descriptor[key] = _;\n      }\n  }\n  if (target) Object.defineProperty(target, contextIn.name, descriptor);\n  done = true;\n};\n\nexport function __runInitializers(thisArg, initializers, value) {\n  var useValue = arguments.length > 2;\n  for (var i = 0; i < initializers.length; i++) {\n      value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);\n  }\n  return useValue ? value : void 0;\n};\n\nexport function __propKey(x) {\n  return typeof x === \"symbol\" ? x : \"\".concat(x);\n};\n\nexport function __setFunctionName(f, name, prefix) {\n  if (typeof name === \"symbol\") name = name.description ? \"[\".concat(name.description, \"]\") : \"\";\n  return Object.defineProperty(f, \"name\", { configurable: true, value: prefix ? \"\".concat(prefix, \" \", name) : name });\n};\n\nexport function __metadata(metadataKey, metadataValue) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\n}\n\nexport function __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n  return new (P || (P = Promise))(function (resolve, reject) {\n      function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n      function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n      function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n      step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nexport function __generator(thisArg, body) {\n  var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g = Object.create((typeof Iterator === \"function\" ? Iterator : Object).prototype);\n  return g.next = verb(0), g[\"throw\"] = verb(1), g[\"return\"] = verb(2), typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n  function verb(n) { return function (v) { return step([n, v]); }; }\n  function step(op) {\n      if (f) throw new TypeError(\"Generator is already executing.\");\n      while (g && (g = 0, op[0] && (_ = 0)), _) try {\n          if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n          if (y = 0, t) op = [op[0] & 2, t.value];\n          switch (op[0]) {\n              case 0: case 1: t = op; break;\n              case 4: _.label++; return { value: op[1], done: false };\n              case 5: _.label++; y = op[1]; op = [0]; continue;\n              case 7: op = _.ops.pop(); _.trys.pop(); continue;\n              default:\n                  if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                  if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                  if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                  if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                  if (t[2]) _.ops.pop();\n                  _.trys.pop(); continue;\n          }\n          op = body.call(thisArg, _);\n      } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n      if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n  }\n}\n\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n  }\n  Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\n\nexport function __exportStar(m, o) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\n}\n\nexport function __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n      next: function () {\n          if (o && i >= o.length) o = void 0;\n          return { value: o && o[i++], done: !o };\n      }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nexport function __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o), r, ar = [], e;\n  try {\n      while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  }\n  catch (error) { e = { error: error }; }\n  finally {\n      try {\n          if (r && !r.done && (m = i[\"return\"])) m.call(i);\n      }\n      finally { if (e) throw e.error; }\n  }\n  return ar;\n}\n\n/** @deprecated */\nexport function __spread() {\n  for (var ar = [], i = 0; i < arguments.length; i++)\n      ar = ar.concat(__read(arguments[i]));\n  return ar;\n}\n\n/** @deprecated */\nexport function __spreadArrays() {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n  for (var r = Array(s), k = 0, i = 0; i < il; i++)\n      for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\n          r[k] = a[j];\n  return r;\n}\n\nexport function __spreadArray(to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n      if (ar || !(i in from)) {\n          if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n          ar[i] = from[i];\n      }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n}\n\nexport function __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nexport function __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []), i, q = [];\n  return i = Object.create((typeof AsyncIterator === \"function\" ? AsyncIterator : Object).prototype), verb(\"next\"), verb(\"throw\"), verb(\"return\", awaitReturn), i[Symbol.asyncIterator] = function () { return this; }, i;\n  function awaitReturn(f) { return function (v) { return Promise.resolve(v).then(f, reject); }; }\n  function verb(n, f) { if (g[n]) { i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; if (f) i[n] = f(i[n]); } }\n  function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\n  function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\n  function fulfill(value) { resume(\"next\", value); }\n  function reject(value) { resume(\"throw\", value); }\n  function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\n}\n\nexport function __asyncDelegator(o) {\n  var i, p;\n  return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\n  function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v; } : f; }\n}\n\nexport function __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator], i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\n  function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\n  function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\n}\n\nexport function __makeTemplateObject(cooked, raw) {\n  if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\n  return cooked;\n};\n\nvar __setModuleDefault = Object.create ? (function(o, v) {\n  Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n  o[\"default\"] = v;\n};\n\nvar ownKeys = function(o) {\n  ownKeys = Object.getOwnPropertyNames || function (o) {\n    var ar = [];\n    for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;\n    return ar;\n  };\n  return ownKeys(o);\n};\n\nexport function __importStar(mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== \"default\") __createBinding(result, mod, k[i]);\n  __setModuleDefault(result, mod);\n  return result;\n}\n\nexport function __importDefault(mod) {\n  return (mod && mod.__esModule) ? mod : { default: mod };\n}\n\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\n  return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\n}\n\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\n  if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\n  if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\n  if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\n  return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\n}\n\nexport function __classPrivateFieldIn(state, receiver) {\n  if (receiver === null || (typeof receiver !== \"object\" && typeof receiver !== \"function\")) throw new TypeError(\"Cannot use 'in' operator on non-object\");\n  return typeof state === \"function\" ? receiver === state : state.has(receiver);\n}\n\nexport function __addDisposableResource(env, value, async) {\n  if (value !== null && value !== void 0) {\n    if (typeof value !== \"object\" && typeof value !== \"function\") throw new TypeError(\"Object expected.\");\n    var dispose, inner;\n    if (async) {\n      if (!Symbol.asyncDispose) throw new TypeError(\"Symbol.asyncDispose is not defined.\");\n      dispose = value[Symbol.asyncDispose];\n    }\n    if (dispose === void 0) {\n      if (!Symbol.dispose) throw new TypeError(\"Symbol.dispose is not defined.\");\n      dispose = value[Symbol.dispose];\n      if (async) inner = dispose;\n    }\n    if (typeof dispose !== \"function\") throw new TypeError(\"Object not disposable.\");\n    if (inner) dispose = function() { try { inner.call(this); } catch (e) { return Promise.reject(e); } };\n    env.stack.push({ value: value, dispose: dispose, async: async });\n  }\n  else if (async) {\n    env.stack.push({ async: true });\n  }\n  return value;\n}\n\nvar _SuppressedError = typeof SuppressedError === \"function\" ? SuppressedError : function (error, suppressed, message) {\n  var e = new Error(message);\n  return e.name = \"SuppressedError\", e.error = error, e.suppressed = suppressed, e;\n};\n\nexport function __disposeResources(env) {\n  function fail(e) {\n    env.error = env.hasError ? new _SuppressedError(e, env.error, \"An error was suppressed during disposal.\") : e;\n    env.hasError = true;\n  }\n  var r, s = 0;\n  function next() {\n    while (r = env.stack.pop()) {\n      try {\n        if (!r.async && s === 1) return s = 0, env.stack.push(r), Promise.resolve().then(next);\n        if (r.dispose) {\n          var result = r.dispose.call(r.value);\n          if (r.async) return s |= 2, Promise.resolve(result).then(next, function(e) { fail(e); return next(); });\n        }\n        else s |= 1;\n      }\n      catch (e) {\n        fail(e);\n      }\n    }\n    if (s === 1) return env.hasError ? Promise.reject(env.error) : Promise.resolve();\n    if (env.hasError) throw env.error;\n  }\n  return next();\n}\n\nexport function __rewriteRelativeImportExtension(path, preserveJsx) {\n  if (typeof path === \"string\" && /^\\.\\.?\\//.test(path)) {\n      return path.replace(/\\.(tsx)$|((?:\\.d)?)((?:\\.[^./]+?)?)\\.([cm]?)ts$/i, function (m, tsx, d, ext, cm) {\n          return tsx ? preserveJsx ? \".jsx\" : \".js\" : d && (!ext || !cm) ? m : (d + ext + \".\" + cm.toLowerCase() + \"js\");\n      });\n  }\n  return path;\n}\n\nexport default {\n  __extends,\n  __assign,\n  __rest,\n  __decorate,\n  __param,\n  __esDecorate,\n  __runInitializers,\n  __propKey,\n  __setFunctionName,\n  __metadata,\n  __awaiter,\n  __generator,\n  __createBinding,\n  __exportStar,\n  __values,\n  __read,\n  __spread,\n  __spreadArrays,\n  __spreadArray,\n  __await,\n  __asyncGenerator,\n  __asyncDelegator,\n  __asyncValues,\n  __makeTemplateObject,\n  __importStar,\n  __importDefault,\n  __classPrivateFieldGet,\n  __classPrivateFieldSet,\n  __classPrivateFieldIn,\n  __addDisposableResource,\n  __disposeResources,\n  __rewriteRelativeImportExtension,\n};\n","/**\n * A class which provides a reliable callback using either\n * a Web Worker, or if that isn't supported, falls back to setTimeout.\n */\nexport class Ticker {\n    constructor(callback, type, updateInterval, contextSampleRate) {\n        this._callback = callback;\n        this._type = type;\n        this._minimumUpdateInterval = Math.max(128 / (contextSampleRate || 44100), 0.001);\n        this.updateInterval = updateInterval;\n        // create the clock source for the first time\n        this._createClock();\n    }\n    /**\n     * Generate a web worker\n     */\n    _createWorker() {\n        const blob = new Blob([\n            /* javascript */ `\n\t\t\t// the initial timeout time\n\t\t\tlet timeoutTime =  ${(this._updateInterval * 1000).toFixed(1)};\n\t\t\t// onmessage callback\n\t\t\tself.onmessage = function(msg){\n\t\t\t\ttimeoutTime = parseInt(msg.data);\n\t\t\t};\n\t\t\t// the tick function which posts a message\n\t\t\t// and schedules a new tick\n\t\t\tfunction tick(){\n\t\t\t\tsetTimeout(tick, timeoutTime);\n\t\t\t\tself.postMessage('tick');\n\t\t\t}\n\t\t\t// call tick initially\n\t\t\ttick();\n\t\t\t`,\n        ], { type: \"text/javascript\" });\n        const blobUrl = URL.createObjectURL(blob);\n        const worker = new Worker(blobUrl);\n        worker.onmessage = this._callback.bind(this);\n        this._worker = worker;\n    }\n    /**\n     * Create a timeout loop\n     */\n    _createTimeout() {\n        this._timeout = setTimeout(() => {\n            this._createTimeout();\n            this._callback();\n        }, this._updateInterval * 1000);\n    }\n    /**\n     * Create the clock source.\n     */\n    _createClock() {\n        if (this._type === \"worker\") {\n            try {\n                this._createWorker();\n            }\n            catch (e) {\n                // workers not supported, fallback to timeout\n                this._type = \"timeout\";\n                this._createClock();\n            }\n        }\n        else if (this._type === \"timeout\") {\n            this._createTimeout();\n        }\n    }\n    /**\n     * Clean up the current clock source\n     */\n    _disposeClock() {\n        if (this._timeout) {\n            clearTimeout(this._timeout);\n        }\n        if (this._worker) {\n            this._worker.terminate();\n            this._worker.onmessage = null;\n        }\n    }\n    /**\n     * The rate in seconds the ticker will update\n     */\n    get updateInterval() {\n        return this._updateInterval;\n    }\n    set updateInterval(interval) {\n        var _a;\n        this._updateInterval = Math.max(interval, this._minimumUpdateInterval);\n        if (this._type === \"worker\") {\n            (_a = this._worker) === null || _a === void 0 ? void 0 : _a.postMessage(this._updateInterval * 1000);\n        }\n    }\n    /**\n     * The type of the ticker, either a worker or a timeout\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        this._disposeClock();\n        this._type = type;\n        this._createClock();\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        this._disposeClock();\n    }\n}\n//# sourceMappingURL=Ticker.js.map","import { AudioBuffer, isAnyAudioContext, isAnyAudioNode, isAnyAudioParam, isAnyOfflineAudioContext, } from \"standardized-audio-context\";\n/**\n * Test if the given value is an instanceof AudioParam\n */\nexport function isAudioParam(arg) {\n    return isAnyAudioParam(arg);\n}\n/**\n * Test if the given value is an instanceof AudioNode\n */\nexport function isAudioNode(arg) {\n    return isAnyAudioNode(arg);\n}\n/**\n * Test if the arg is instanceof an OfflineAudioContext\n */\nexport function isOfflineAudioContext(arg) {\n    return isAnyOfflineAudioContext(arg);\n}\n/**\n * Test if the arg is an instanceof AudioContext\n */\nexport function isAudioContext(arg) {\n    return isAnyAudioContext(arg);\n}\n/**\n * Test if the arg is instanceof an AudioBuffer\n */\nexport function isAudioBuffer(arg) {\n    return arg instanceof AudioBuffer;\n}\n//# sourceMappingURL=AdvancedTypeCheck.js.map","import { isAudioBuffer, isAudioNode, isAudioParam, } from \"./AdvancedTypeCheck.js\";\nimport { isDefined, isObject, isUndef } from \"./TypeCheck.js\";\n/**\n * Some objects should not be merged\n */\nfunction noCopy(key, arg) {\n    return (key === \"value\" ||\n        isAudioParam(arg) ||\n        isAudioNode(arg) ||\n        isAudioBuffer(arg));\n}\n/**\n * Recursively merge an object\n * @param target the object to merge into\n * @param sources the source objects to merge\n */\nexport function deepMerge(target, ...sources) {\n    if (!sources.length) {\n        return target;\n    }\n    const source = sources.shift();\n    if (isObject(target) && isObject(source)) {\n        for (const key in source) {\n            if (noCopy(key, source[key])) {\n                target[key] = source[key];\n            }\n            else if (isObject(source[key])) {\n                if (!target[key]) {\n                    Object.assign(target, { [key]: {} });\n                }\n                deepMerge(target[key], source[key]);\n            }\n            else {\n                Object.assign(target, { [key]: source[key] });\n            }\n        }\n    }\n    // @ts-ignore\n    return deepMerge(target, ...sources);\n}\n/**\n * Returns true if the two arrays have the same value for each of the elements\n */\nexport function deepEquals(arrayA, arrayB) {\n    return (arrayA.length === arrayB.length &&\n        arrayA.every((element, index) => arrayB[index] === element));\n}\n/**\n * Convert an args array into an object.\n * @internal\n */\nexport function optionsFromArguments(defaults, argsArray, keys = [], objKey) {\n    const opts = {};\n    const args = Array.from(argsArray);\n    // if the first argument is an object and has an object key\n    if (isObject(args[0]) && objKey && !Reflect.has(args[0], objKey)) {\n        // if it's not part of the defaults\n        const partOfDefaults = Object.keys(args[0]).some((key) => Reflect.has(defaults, key));\n        if (!partOfDefaults) {\n            // merge that key\n            deepMerge(opts, { [objKey]: args[0] });\n            // remove the obj key from the keys\n            keys.splice(keys.indexOf(objKey), 1);\n            // shift the first argument off\n            args.shift();\n        }\n    }\n    if (args.length === 1 && isObject(args[0])) {\n        deepMerge(opts, args[0]);\n    }\n    else {\n        for (let i = 0; i < keys.length; i++) {\n            if (isDefined(args[i])) {\n                opts[keys[i]] = args[i];\n            }\n        }\n    }\n    return deepMerge(defaults, opts);\n}\n/**\n * Return this instances default values by calling Constructor.getDefaults()\n */\nexport function getDefaultsFromInstance(instance) {\n    return instance.constructor.getDefaults();\n}\n/**\n * Returns the fallback if the given object is undefined.\n * Take an array of arguments and return a formatted options object.\n * @internal\n */\nexport function defaultArg(given, fallback) {\n    if (isUndef(given)) {\n        return fallback;\n    }\n    else {\n        return given;\n    }\n}\n/**\n * Remove all of the properties belonging to omit from obj.\n */\nexport function omitFromObject(obj, omit) {\n    omit.forEach((prop) => {\n        if (Reflect.has(obj, prop)) {\n            delete obj[prop];\n        }\n    });\n    return obj;\n}\n//# sourceMappingURL=Defaults.js.map","/**\n * Tone.js\n * @author Yotam Mann\n * @license http://opensource.org/licenses/MIT MIT License\n * @copyright 2014-2024 Yotam Mann\n */\nimport { version } from \"../version.js\";\nimport { theWindow } from \"./context/AudioContext.js\";\nimport { log } from \"./util/Debug.js\";\n/**\n * Tone is the base class of all other classes.\n *\n * @category Core\n * @constructor\n */\nexport class Tone {\n    constructor() {\n        //-------------------------------------\n        // \tDEBUGGING\n        //-------------------------------------\n        /**\n         * Set this debug flag to log all events that happen in this class.\n         */\n        this.debug = false;\n        //-------------------------------------\n        // \tDISPOSING\n        //-------------------------------------\n        /**\n         * Indicates if the instance was disposed\n         */\n        this._wasDisposed = false;\n    }\n    /**\n     * Returns all of the default options belonging to the class.\n     */\n    static getDefaults() {\n        return {};\n    }\n    /**\n     * Prints the outputs to the console log for debugging purposes.\n     * Prints the contents only if either the object has a property\n     * called `debug` set to true, or a variable called TONE_DEBUG_CLASS\n     * is set to the name of the class.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * // prints all logs originating from this oscillator\n     * osc.debug = true;\n     * // calls to start/stop will print in the console\n     * osc.start();\n     */\n    log(...args) {\n        // if the object is either set to debug = true\n        // or if there is a string on the Tone.global.with the class name\n        if (this.debug ||\n            (theWindow && this.toString() === theWindow.TONE_DEBUG_CLASS)) {\n            log(this, ...args);\n        }\n    }\n    /**\n     * disconnect and dispose.\n     */\n    dispose() {\n        this._wasDisposed = true;\n        return this;\n    }\n    /**\n     * Indicates if the instance was disposed. 'Disposing' an\n     * instance means that all of the Web Audio nodes that were\n     * created for the instance are disconnected and freed for garbage collection.\n     */\n    get disposed() {\n        return this._wasDisposed;\n    }\n    /**\n     * Convert the class to a string\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.toString());\n     */\n    toString() {\n        return this.name;\n    }\n}\n/**\n * The version number semver\n */\nTone.version = version;\n//# sourceMappingURL=Tone.js.map","/**\n * The threshold for correctness for operators. Less than one sample even\n * at very high sampling rates (e.g. `1e-6 < 1 / 192000`).\n */\nconst EPSILON = 1e-6;\n/**\n * Test if A is greater than B\n */\nexport function GT(a, b) {\n    return a > b + EPSILON;\n}\n/**\n * Test if A is greater than or equal to B\n */\nexport function GTE(a, b) {\n    return GT(a, b) || EQ(a, b);\n}\n/**\n * Test if A is less than B\n */\nexport function LT(a, b) {\n    return a + EPSILON < b;\n}\n/**\n * Test if A is less than B\n */\nexport function EQ(a, b) {\n    return Math.abs(a - b) < EPSILON;\n}\n/**\n * Clamp the value within the given range\n */\nexport function clamp(value, min, max) {\n    return Math.max(Math.min(value, max), min);\n}\n//# sourceMappingURL=Math.js.map","import { Tone } from \"../Tone.js\";\nimport { optionsFromArguments } from \"./Defaults.js\";\nimport { assert } from \"./Debug.js\";\nimport { EQ, GT, GTE, LT } from \"./Math.js\";\n/**\n * A Timeline class for scheduling and maintaining state\n * along a timeline. All events must have a \"time\" property.\n * Internally, events are stored in time order for fast\n * retrieval.\n * @internal\n */\nexport class Timeline extends Tone {\n    constructor() {\n        super();\n        this.name = \"Timeline\";\n        /**\n         * The array of scheduled timeline events\n         */\n        this._timeline = [];\n        const options = optionsFromArguments(Timeline.getDefaults(), arguments, [\"memory\"]);\n        this.memory = options.memory;\n        this.increasing = options.increasing;\n    }\n    static getDefaults() {\n        return {\n            memory: Infinity,\n            increasing: false,\n        };\n    }\n    /**\n     * The number of items in the timeline.\n     */\n    get length() {\n        return this._timeline.length;\n    }\n    /**\n     * Insert an event object onto the timeline. Events must have a \"time\" attribute.\n     * @param event  The event object to insert into the timeline.\n     */\n    add(event) {\n        // the event needs to have a time attribute\n        assert(Reflect.has(event, \"time\"), \"Timeline: events must have a time attribute\");\n        event.time = event.time.valueOf();\n        if (this.increasing && this.length) {\n            const lastValue = this._timeline[this.length - 1];\n            assert(GTE(event.time, lastValue.time), \"The time must be greater than or equal to the last scheduled time\");\n            this._timeline.push(event);\n        }\n        else {\n            const index = this._search(event.time);\n            this._timeline.splice(index + 1, 0, event);\n        }\n        // if the length is more than the memory, remove the previous ones\n        if (this.length > this.memory) {\n            const diff = this.length - this.memory;\n            this._timeline.splice(0, diff);\n        }\n        return this;\n    }\n    /**\n     * Remove an event from the timeline.\n     * @param  {Object}  event  The event object to remove from the list.\n     * @returns {Timeline} this\n     */\n    remove(event) {\n        const index = this._timeline.indexOf(event);\n        if (index !== -1) {\n            this._timeline.splice(index, 1);\n        }\n        return this;\n    }\n    /**\n     * Get the nearest event whose time is less than or equal to the given time.\n     * @param  time  The time to query.\n     */\n    get(time, param = \"time\") {\n        const index = this._search(time, param);\n        if (index !== -1) {\n            return this._timeline[index];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Return the first event in the timeline without removing it\n     * @returns {Object} The first event object\n     * @deprecated\n     */\n    peek() {\n        return this._timeline[0];\n    }\n    /**\n     * Return the first event in the timeline and remove it\n     * @deprecated\n     */\n    shift() {\n        return this._timeline.shift();\n    }\n    /**\n     * Get the event which is scheduled after the given time.\n     * @param  time  The time to query.\n     */\n    getAfter(time, param = \"time\") {\n        const index = this._search(time, param);\n        if (index + 1 < this._timeline.length) {\n            return this._timeline[index + 1];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Get the event before the event at the given time.\n     * @param  time  The time to query.\n     */\n    getBefore(time) {\n        const len = this._timeline.length;\n        // if it's after the last item, return the last item\n        if (len > 0 && this._timeline[len - 1].time < time) {\n            return this._timeline[len - 1];\n        }\n        const index = this._search(time);\n        if (index - 1 >= 0) {\n            return this._timeline[index - 1];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Cancel events at and after the given time\n     * @param  after  The time to query.\n     */\n    cancel(after) {\n        if (this._timeline.length > 1) {\n            let index = this._search(after);\n            if (index >= 0) {\n                if (EQ(this._timeline[index].time, after)) {\n                    // get the first item with that time\n                    for (let i = index; i >= 0; i--) {\n                        if (EQ(this._timeline[i].time, after)) {\n                            index = i;\n                        }\n                        else {\n                            break;\n                        }\n                    }\n                    this._timeline = this._timeline.slice(0, index);\n                }\n                else {\n                    this._timeline = this._timeline.slice(0, index + 1);\n                }\n            }\n            else {\n                this._timeline = [];\n            }\n        }\n        else if (this._timeline.length === 1) {\n            // the first item's time\n            if (GTE(this._timeline[0].time, after)) {\n                this._timeline = [];\n            }\n        }\n        return this;\n    }\n    /**\n     * Cancel events before or equal to the given time.\n     * @param  time  The time to cancel before.\n     */\n    cancelBefore(time) {\n        const index = this._search(time);\n        if (index >= 0) {\n            this._timeline = this._timeline.slice(index + 1);\n        }\n        return this;\n    }\n    /**\n     * Returns the previous event if there is one. null otherwise\n     * @param  event The event to find the previous one of\n     * @return The event right before the given event\n     */\n    previousEvent(event) {\n        const index = this._timeline.indexOf(event);\n        if (index > 0) {\n            return this._timeline[index - 1];\n        }\n        else {\n            return null;\n        }\n    }\n    /**\n     * Does a binary search on the timeline array and returns the\n     * nearest event index whose time is after or equal to the given time.\n     * If a time is searched before the first index in the timeline, -1 is returned.\n     * If the time is after the end, the index of the last item is returned.\n     */\n    _search(time, param = \"time\") {\n        if (this._timeline.length === 0) {\n            return -1;\n        }\n        let beginning = 0;\n        const len = this._timeline.length;\n        let end = len;\n        if (len > 0 && this._timeline[len - 1][param] <= time) {\n            return len - 1;\n        }\n        while (beginning < end) {\n            // calculate the midpoint for roughly equal partition\n            let midPoint = Math.floor(beginning + (end - beginning) / 2);\n            const event = this._timeline[midPoint];\n            const nextEvent = this._timeline[midPoint + 1];\n            if (EQ(event[param], time)) {\n                // choose the last one that has the same time\n                for (let i = midPoint; i < this._timeline.length; i++) {\n                    const testEvent = this._timeline[i];\n                    if (EQ(testEvent[param], time)) {\n                        midPoint = i;\n                    }\n                    else {\n                        break;\n                    }\n                }\n                return midPoint;\n            }\n            else if (LT(event[param], time) && GT(nextEvent[param], time)) {\n                return midPoint;\n            }\n            else if (GT(event[param], time)) {\n                // search lower\n                end = midPoint;\n            }\n            else {\n                // search upper\n                beginning = midPoint + 1;\n            }\n        }\n        return -1;\n    }\n    /**\n     * Internal iterator. Applies extra safety checks for\n     * removing items from the array.\n     */\n    _iterate(callback, lowerBound = 0, upperBound = this._timeline.length - 1) {\n        this._timeline.slice(lowerBound, upperBound + 1).forEach(callback);\n    }\n    /**\n     * Iterate over everything in the array\n     * @param  callback The callback to invoke with every item\n     */\n    forEach(callback) {\n        this._iterate(callback);\n        return this;\n    }\n    /**\n     * Iterate over everything in the array at or before the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachBefore(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        const upperBound = this._search(time);\n        if (upperBound !== -1) {\n            this._iterate(callback, 0, upperBound);\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array after the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachAfter(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        const lowerBound = this._search(time);\n        this._iterate(callback, lowerBound + 1);\n        return this;\n    }\n    /**\n     * Iterate over everything in the array between the startTime and endTime.\n     * The timerange is inclusive of the startTime, but exclusive of the endTime.\n     * range = [startTime, endTime).\n     * @param  startTime The time to check if items are before\n     * @param  endTime The end of the test interval.\n     * @param  callback The callback to invoke with every item\n     */\n    forEachBetween(startTime, endTime, callback) {\n        let lowerBound = this._search(startTime);\n        let upperBound = this._search(endTime);\n        if (lowerBound !== -1 && upperBound !== -1) {\n            if (this._timeline[lowerBound].time !== startTime) {\n                lowerBound += 1;\n            }\n            // exclusive of the end time\n            if (this._timeline[upperBound].time === endTime) {\n                upperBound -= 1;\n            }\n            this._iterate(callback, lowerBound, upperBound);\n        }\n        else if (lowerBound === -1) {\n            this._iterate(callback, 0, upperBound);\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array at or after the given time. Similar to\n     * forEachAfter, but includes the item(s) at the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachFrom(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        let lowerBound = this._search(time);\n        // work backwards until the event time is less than time\n        while (lowerBound >= 0 && this._timeline[lowerBound].time >= time) {\n            lowerBound--;\n        }\n        this._iterate(callback, lowerBound + 1);\n        return this;\n    }\n    /**\n     * Iterate over everything in the array at the given time\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachAtTime(time, callback) {\n        // iterate over the items in reverse so that removing an item doesn't break things\n        const upperBound = this._search(time);\n        if (upperBound !== -1 && EQ(this._timeline[upperBound].time, time)) {\n            let lowerBound = upperBound;\n            for (let i = upperBound; i >= 0; i--) {\n                if (EQ(this._timeline[i].time, time)) {\n                    lowerBound = i;\n                }\n                else {\n                    break;\n                }\n            }\n            this._iterate((event) => {\n                callback(event);\n            }, lowerBound, upperBound);\n        }\n        return this;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._timeline = [];\n        return this;\n    }\n}\n//# sourceMappingURL=Timeline.js.map","/**\n * Array of callbacks to invoke when a new context is created\n */\nconst notifyNewContext = [];\n/**\n * Used internally to setup a new Context\n */\nexport function onContextInit(cb) {\n    notifyNewContext.push(cb);\n}\n/**\n * Invoke any classes which need to also be initialized when a new context is created.\n */\nexport function initializeContext(ctx) {\n    // add any additional modules\n    notifyNewContext.forEach((cb) => cb(ctx));\n}\n/**\n * Array of callbacks to invoke when a new context is closed\n */\nconst notifyCloseContext = [];\n/**\n * Used internally to tear down a Context\n */\nexport function onContextClose(cb) {\n    notifyCloseContext.push(cb);\n}\nexport function closeContext(ctx) {\n    // remove any additional modules\n    notifyCloseContext.forEach((cb) => cb(ctx));\n}\n//# sourceMappingURL=ContextInitialization.js.map","import { Tone } from \"../Tone.js\";\nimport { isUndef } from \"./TypeCheck.js\";\n/**\n * Emitter gives classes which extend it\n * the ability to listen for and emit events.\n * Inspiration and reference from Jerome Etienne's [MicroEvent](https://github.com/jeromeetienne/microevent.js).\n * MIT (c) 2011 Jerome Etienne.\n * @category Core\n */\nexport class Emitter extends Tone {\n    constructor() {\n        super(...arguments);\n        this.name = \"Emitter\";\n    }\n    /**\n     * Bind a callback to a specific event.\n     * @param  event     The name of the event to listen for.\n     * @param  callback  The callback to invoke when the event is emitted\n     */\n    on(event, callback) {\n        // split the event\n        const events = event.split(/\\W+/);\n        events.forEach((eventName) => {\n            if (isUndef(this._events)) {\n                this._events = {};\n            }\n            if (!this._events.hasOwnProperty(eventName)) {\n                this._events[eventName] = [];\n            }\n            this._events[eventName].push(callback);\n        });\n        return this;\n    }\n    /**\n     * Bind a callback which is only invoked once\n     * @param  event     The name of the event to listen for.\n     * @param  callback  The callback to invoke when the event is emitted\n     */\n    once(event, callback) {\n        const boundCallback = (...args) => {\n            // invoke the callback\n            callback(...args);\n            // remove the event\n            this.off(event, boundCallback);\n        };\n        this.on(event, boundCallback);\n        return this;\n    }\n    /**\n     * Remove the event listener.\n     * @param  event     The event to stop listening to.\n     * @param  callback  The callback which was bound to the event with Emitter.on.\n     *                   If no callback is given, all callbacks events are removed.\n     */\n    off(event, callback) {\n        const events = event.split(/\\W+/);\n        events.forEach((eventName) => {\n            if (isUndef(this._events)) {\n                this._events = {};\n            }\n            if (this._events.hasOwnProperty(eventName)) {\n                if (isUndef(callback)) {\n                    this._events[eventName] = [];\n                }\n                else {\n                    const eventList = this._events[eventName];\n                    for (let i = eventList.length - 1; i >= 0; i--) {\n                        if (eventList[i] === callback) {\n                            eventList.splice(i, 1);\n                        }\n                    }\n                }\n            }\n        });\n        return this;\n    }\n    /**\n     * Invoke all of the callbacks bound to the event\n     * with any arguments passed in.\n     * @param  event  The name of the event.\n     * @param args The arguments to pass to the functions listening.\n     */\n    emit(event, ...args) {\n        if (this._events) {\n            if (this._events.hasOwnProperty(event)) {\n                const eventList = this._events[event].slice(0);\n                for (let i = 0, len = eventList.length; i < len; i++) {\n                    eventList[i].apply(this, args);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Add Emitter functions (on/off/emit) to the object\n     */\n    static mixin(constr) {\n        // instance._events = {};\n        [\"on\", \"once\", \"off\", \"emit\"].forEach((name) => {\n            const property = Object.getOwnPropertyDescriptor(Emitter.prototype, name);\n            Object.defineProperty(constr.prototype, name, property);\n        });\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this._events = undefined;\n        return this;\n    }\n}\n//# sourceMappingURL=Emitter.js.map","import { Emitter } from \"../util/Emitter.js\";\nexport class BaseContext extends Emitter {\n    constructor() {\n        super(...arguments);\n        this.isOffline = false;\n    }\n    /*\n     * This is a placeholder so that JSON.stringify does not throw an error\n     * This matches what JSON.stringify(audioContext) returns on a native\n     * audioContext instance.\n     */\n    toJSON() {\n        return {};\n    }\n}\n//# sourceMappingURL=BaseContext.js.map","import { __awaiter } from \"tslib\";\nimport { Ticker } from \"../clock/Ticker.js\";\nimport { isAudioContext } from \"../util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { createAudioContext, createAudioWorkletNode, } from \"./AudioContext.js\";\nimport { closeContext, initializeContext } from \"./ContextInitialization.js\";\nimport { BaseContext } from \"./BaseContext.js\";\nimport { assert } from \"../util/Debug.js\";\n/**\n * Wrapper around the native AudioContext.\n * @category Core\n */\nexport class Context extends BaseContext {\n    constructor() {\n        var _a, _b;\n        super();\n        this.name = \"Context\";\n        /**\n         * An object containing all of the constants AudioBufferSourceNodes\n         */\n        this._constants = new Map();\n        /**\n         * All of the setTimeout events.\n         */\n        this._timeouts = new Timeline();\n        /**\n         * The timeout id counter\n         */\n        this._timeoutIds = 0;\n        /**\n         * Private indicator if the context has been initialized\n         */\n        this._initialized = false;\n        /**\n         * Private indicator if a close() has been called on the context, since close is async\n         */\n        this._closeStarted = false;\n        /**\n         * Indicates if the context is an OfflineAudioContext or an AudioContext\n         */\n        this.isOffline = false;\n        //--------------------------------------------\n        // AUDIO WORKLET\n        //--------------------------------------------\n        /**\n         * Maps a module name to promise of the addModule method\n         */\n        this._workletPromise = null;\n        const options = optionsFromArguments(Context.getDefaults(), arguments, [\n            \"context\",\n        ]);\n        if (options.context) {\n            this._context = options.context;\n            // custom context provided, latencyHint unknown (unless explicitly provided in options)\n            this._latencyHint = ((_a = arguments[0]) === null || _a === void 0 ? void 0 : _a.latencyHint) || \"\";\n        }\n        else {\n            this._context = createAudioContext({\n                latencyHint: options.latencyHint,\n            });\n            this._latencyHint = options.latencyHint;\n        }\n        this._ticker = new Ticker(this.emit.bind(this, \"tick\"), options.clockSource, options.updateInterval, this._context.sampleRate);\n        this.on(\"tick\", this._timeoutLoop.bind(this));\n        // fwd events from the context\n        this._context.onstatechange = () => {\n            this.emit(\"statechange\", this.state);\n        };\n        // if no custom updateInterval provided, updateInterval will be derived by lookAhead setter\n        this[((_b = arguments[0]) === null || _b === void 0 ? void 0 : _b.hasOwnProperty(\"updateInterval\"))\n            ? \"_lookAhead\"\n            : \"lookAhead\"] = options.lookAhead;\n    }\n    static getDefaults() {\n        return {\n            clockSource: \"worker\",\n            latencyHint: \"interactive\",\n            lookAhead: 0.1,\n            updateInterval: 0.05,\n        };\n    }\n    /**\n     * Finish setting up the context. **You usually do not need to do this manually.**\n     */\n    initialize() {\n        if (!this._initialized) {\n            // add any additional modules\n            initializeContext(this);\n            this._initialized = true;\n        }\n        return this;\n    }\n    //---------------------------\n    // BASE AUDIO CONTEXT METHODS\n    //---------------------------\n    createAnalyser() {\n        return this._context.createAnalyser();\n    }\n    createOscillator() {\n        return this._context.createOscillator();\n    }\n    createBufferSource() {\n        return this._context.createBufferSource();\n    }\n    createBiquadFilter() {\n        return this._context.createBiquadFilter();\n    }\n    createBuffer(numberOfChannels, length, sampleRate) {\n        return this._context.createBuffer(numberOfChannels, length, sampleRate);\n    }\n    createChannelMerger(numberOfInputs) {\n        return this._context.createChannelMerger(numberOfInputs);\n    }\n    createChannelSplitter(numberOfOutputs) {\n        return this._context.createChannelSplitter(numberOfOutputs);\n    }\n    createConstantSource() {\n        return this._context.createConstantSource();\n    }\n    createConvolver() {\n        return this._context.createConvolver();\n    }\n    createDelay(maxDelayTime) {\n        return this._context.createDelay(maxDelayTime);\n    }\n    createDynamicsCompressor() {\n        return this._context.createDynamicsCompressor();\n    }\n    createGain() {\n        return this._context.createGain();\n    }\n    createIIRFilter(feedForward, feedback) {\n        // @ts-ignore\n        return this._context.createIIRFilter(feedForward, feedback);\n    }\n    createPanner() {\n        return this._context.createPanner();\n    }\n    createPeriodicWave(real, imag, constraints) {\n        return this._context.createPeriodicWave(real, imag, constraints);\n    }\n    createStereoPanner() {\n        return this._context.createStereoPanner();\n    }\n    createWaveShaper() {\n        return this._context.createWaveShaper();\n    }\n    createMediaStreamSource(stream) {\n        assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n        const context = this._context;\n        return context.createMediaStreamSource(stream);\n    }\n    createMediaElementSource(element) {\n        assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n        const context = this._context;\n        return context.createMediaElementSource(element);\n    }\n    createMediaStreamDestination() {\n        assert(isAudioContext(this._context), \"Not available if OfflineAudioContext\");\n        const context = this._context;\n        return context.createMediaStreamDestination();\n    }\n    decodeAudioData(audioData) {\n        return this._context.decodeAudioData(audioData);\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n    get currentTime() {\n        return this._context.currentTime;\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n    get state() {\n        return this._context.state;\n    }\n    /**\n     * The current time in seconds of the AudioContext.\n     */\n    get sampleRate() {\n        return this._context.sampleRate;\n    }\n    /**\n     * The listener\n     */\n    get listener() {\n        this.initialize();\n        return this._listener;\n    }\n    set listener(l) {\n        assert(!this._initialized, \"The listener cannot be set after initialization.\");\n        this._listener = l;\n    }\n    /**\n     * There is only one Transport per Context. It is created on initialization.\n     */\n    get transport() {\n        this.initialize();\n        return this._transport;\n    }\n    set transport(t) {\n        assert(!this._initialized, \"The transport cannot be set after initialization.\");\n        this._transport = t;\n    }\n    /**\n     * This is the Draw object for the context which is useful for synchronizing the draw frame with the Tone.js clock.\n     */\n    get draw() {\n        this.initialize();\n        return this._draw;\n    }\n    set draw(d) {\n        assert(!this._initialized, \"Draw cannot be set after initialization.\");\n        this._draw = d;\n    }\n    /**\n     * A reference to the Context's destination node.\n     */\n    get destination() {\n        this.initialize();\n        return this._destination;\n    }\n    set destination(d) {\n        assert(!this._initialized, \"The destination cannot be set after initialization.\");\n        this._destination = d;\n    }\n    /**\n     * Create an audio worklet node from a name and options. The module\n     * must first be loaded using {@link addAudioWorkletModule}.\n     */\n    createAudioWorkletNode(name, options) {\n        return createAudioWorkletNode(this.rawContext, name, options);\n    }\n    /**\n     * Add an AudioWorkletProcessor module\n     * @param url The url of the module\n     */\n    addAudioWorkletModule(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            assert(isDefined(this.rawContext.audioWorklet), \"AudioWorkletNode is only available in a secure context (https or localhost)\");\n            if (!this._workletPromise) {\n                this._workletPromise = this.rawContext.audioWorklet.addModule(url);\n            }\n            yield this._workletPromise;\n        });\n    }\n    /**\n     * Returns a promise which resolves when all of the worklets have been loaded on this context\n     */\n    workletsAreReady() {\n        return __awaiter(this, void 0, void 0, function* () {\n            (yield this._workletPromise) ? this._workletPromise : Promise.resolve();\n        });\n    }\n    //---------------------------\n    // TICKER\n    //---------------------------\n    /**\n     * How often the interval callback is invoked.\n     * This number corresponds to how responsive the scheduling\n     * can be. Setting to 0 will result in the lowest practial interval\n     * based on context properties. context.updateInterval + context.lookAhead\n     * gives you the total latency between scheduling an event and hearing it.\n     */\n    get updateInterval() {\n        return this._ticker.updateInterval;\n    }\n    set updateInterval(interval) {\n        this._ticker.updateInterval = interval;\n    }\n    /**\n     * What the source of the clock is, either \"worker\" (default),\n     * \"timeout\", or \"offline\" (none).\n     */\n    get clockSource() {\n        return this._ticker.type;\n    }\n    set clockSource(type) {\n        this._ticker.type = type;\n    }\n    /**\n     * The amount of time into the future events are scheduled. Giving Web Audio\n     * a short amount of time into the future to schedule events can reduce clicks and\n     * improve performance. This value can be set to 0 to get the lowest latency.\n     * Adjusting this value also affects the {@link updateInterval}.\n     */\n    get lookAhead() {\n        return this._lookAhead;\n    }\n    set lookAhead(time) {\n        this._lookAhead = time;\n        // if lookAhead is 0, default to .01 updateInterval\n        this.updateInterval = time ? time / 2 : 0.01;\n    }\n    /**\n     * The type of playback, which affects tradeoffs between audio\n     * output latency and responsiveness.\n     * In addition to setting the value in seconds, the latencyHint also\n     * accepts the strings \"interactive\" (prioritizes low latency),\n     * \"playback\" (prioritizes sustained playback), \"balanced\" (balances\n     * latency and performance).\n     * @example\n     * // prioritize sustained playback\n     * const context = new Tone.Context({ latencyHint: \"playback\" });\n     * // set this context as the global Context\n     * Tone.setContext(context);\n     * // the global context is gettable with Tone.getContext()\n     * console.log(Tone.getContext().latencyHint);\n     */\n    get latencyHint() {\n        return this._latencyHint;\n    }\n    /**\n     * The unwrapped AudioContext or OfflineAudioContext\n     */\n    get rawContext() {\n        return this._context;\n    }\n    /**\n     * The current audio context time plus a short {@link lookAhead}.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(\"now\", Tone.now());\n     * }, 100);\n     */\n    now() {\n        return this._context.currentTime + this._lookAhead;\n    }\n    /**\n     * The current audio context time without the {@link lookAhead}.\n     * In most cases it is better to use {@link now} instead of {@link immediate} since\n     * with {@link now} the {@link lookAhead} is applied equally to _all_ components including internal components,\n     * to making sure that everything is scheduled in sync. Mixing {@link now} and {@link immediate}\n     * can cause some timing issues. If no lookAhead is desired, you can set the {@link lookAhead} to `0`.\n     */\n    immediate() {\n        return this._context.currentTime;\n    }\n    /**\n     * Starts the audio context from a suspended state. This is required\n     * to initially start the AudioContext.\n     * @see {@link start}\n     */\n    resume() {\n        if (isAudioContext(this._context)) {\n            return this._context.resume();\n        }\n        else {\n            return Promise.resolve();\n        }\n    }\n    /**\n     * Close the context. Once closed, the context can no longer be used and\n     * any AudioNodes created from the context will be silent.\n     */\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (isAudioContext(this._context) &&\n                this.state !== \"closed\" &&\n                !this._closeStarted) {\n                this._closeStarted = true;\n                yield this._context.close();\n            }\n            if (this._initialized) {\n                closeContext(this);\n            }\n        });\n    }\n    /**\n     * **Internal** Generate a looped buffer at some constant value.\n     */\n    getConstant(val) {\n        if (this._constants.has(val)) {\n            return this._constants.get(val);\n        }\n        else {\n            const buffer = this._context.createBuffer(1, 128, this._context.sampleRate);\n            const arr = buffer.getChannelData(0);\n            for (let i = 0; i < arr.length; i++) {\n                arr[i] = val;\n            }\n            const constant = this._context.createBufferSource();\n            constant.channelCount = 1;\n            constant.channelCountMode = \"explicit\";\n            constant.buffer = buffer;\n            constant.loop = true;\n            constant.start(0);\n            this._constants.set(val, constant);\n            return constant;\n        }\n    }\n    /**\n     * Clean up. Also closes the audio context.\n     */\n    dispose() {\n        super.dispose();\n        this._ticker.dispose();\n        this._timeouts.dispose();\n        Object.keys(this._constants).map((val) => this._constants[val].disconnect());\n        this.close();\n        return this;\n    }\n    //---------------------------\n    // TIMEOUTS\n    //---------------------------\n    /**\n     * The private loop which keeps track of the context scheduled timeouts\n     * Is invoked from the clock source\n     */\n    _timeoutLoop() {\n        const now = this.now();\n        this._timeouts.forEachBefore(now, (event) => {\n            // invoke the callback\n            event.callback();\n            this._timeouts.remove(event);\n        });\n    }\n    /**\n     * A setTimeout which is guaranteed by the clock source.\n     * Also runs in the offline context.\n     * @param  fn       The callback to invoke\n     * @param  timeout  The timeout in seconds\n     * @returns ID to use when invoking Context.clearTimeout\n     */\n    setTimeout(fn, timeout) {\n        this._timeoutIds++;\n        const now = this.now();\n        this._timeouts.add({\n            callback: fn,\n            id: this._timeoutIds,\n            time: now + timeout,\n        });\n        return this._timeoutIds;\n    }\n    /**\n     * Clears a previously scheduled timeout with Tone.context.setTimeout\n     * @param  id  The ID returned from setTimeout\n     */\n    clearTimeout(id) {\n        this._timeouts.forEach((event) => {\n            if (event.id === id) {\n                this._timeouts.remove(event);\n            }\n        });\n        return this;\n    }\n    /**\n     * Clear the function scheduled by {@link setInterval}\n     */\n    clearInterval(id) {\n        return this.clearTimeout(id);\n    }\n    /**\n     * Adds a repeating event to the context's callback clock\n     */\n    setInterval(fn, interval) {\n        const id = ++this._timeoutIds;\n        const intervalFn = () => {\n            const now = this.now();\n            this._timeouts.add({\n                callback: () => {\n                    // invoke the callback\n                    fn();\n                    // invoke the event to repeat it\n                    intervalFn();\n                },\n                id,\n                time: now + interval,\n            });\n        };\n        // kick it off\n        intervalFn();\n        return id;\n    }\n}\n//# sourceMappingURL=Context.js.map","import { __awaiter } from \"tslib\";\nimport { BaseContext } from \"./BaseContext.js\";\nexport class DummyContext extends BaseContext {\n    constructor() {\n        super(...arguments);\n        this.lookAhead = 0;\n        this.latencyHint = 0;\n        this.isOffline = false;\n    }\n    //---------------------------\n    // BASE AUDIO CONTEXT METHODS\n    //---------------------------\n    createAnalyser() {\n        return {};\n    }\n    createOscillator() {\n        return {};\n    }\n    createBufferSource() {\n        return {};\n    }\n    createBiquadFilter() {\n        return {};\n    }\n    createBuffer(_numberOfChannels, _length, _sampleRate) {\n        return {};\n    }\n    createChannelMerger(_numberOfInputs) {\n        return {};\n    }\n    createChannelSplitter(_numberOfOutputs) {\n        return {};\n    }\n    createConstantSource() {\n        return {};\n    }\n    createConvolver() {\n        return {};\n    }\n    createDelay(_maxDelayTime) {\n        return {};\n    }\n    createDynamicsCompressor() {\n        return {};\n    }\n    createGain() {\n        return {};\n    }\n    createIIRFilter(_feedForward, _feedback) {\n        return {};\n    }\n    createPanner() {\n        return {};\n    }\n    createPeriodicWave(_real, _imag, _constraints) {\n        return {};\n    }\n    createStereoPanner() {\n        return {};\n    }\n    createWaveShaper() {\n        return {};\n    }\n    createMediaStreamSource(_stream) {\n        return {};\n    }\n    createMediaElementSource(_element) {\n        return {};\n    }\n    createMediaStreamDestination() {\n        return {};\n    }\n    decodeAudioData(_audioData) {\n        return Promise.resolve({});\n    }\n    //---------------------------\n    // TONE AUDIO CONTEXT METHODS\n    //---------------------------\n    createAudioWorkletNode(_name, _options) {\n        return {};\n    }\n    get rawContext() {\n        return {};\n    }\n    addAudioWorkletModule(_url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return Promise.resolve();\n        });\n    }\n    resume() {\n        return Promise.resolve();\n    }\n    setTimeout(_fn, _timeout) {\n        return 0;\n    }\n    clearTimeout(_id) {\n        return this;\n    }\n    setInterval(_fn, _interval) {\n        return 0;\n    }\n    clearInterval(_id) {\n        return this;\n    }\n    getConstant(_val) {\n        return {};\n    }\n    get currentTime() {\n        return 0;\n    }\n    get state() {\n        return {};\n    }\n    get sampleRate() {\n        return 0;\n    }\n    get listener() {\n        return {};\n    }\n    get transport() {\n        return {};\n    }\n    get draw() {\n        return {};\n    }\n    set draw(_d) { }\n    get destination() {\n        return {};\n    }\n    set destination(_d) { }\n    now() {\n        return 0;\n    }\n    immediate() {\n        return 0;\n    }\n}\n//# sourceMappingURL=DummyContext.js.map","import { isArray } from \"./TypeCheck.js\";\n/**\n * Make the property not writable using `defineProperty`. Internal use only.\n */\nexport function readOnly(target, property) {\n    if (isArray(property)) {\n        property.forEach((str) => readOnly(target, str));\n    }\n    else {\n        Object.defineProperty(target, property, {\n            enumerable: true,\n            writable: false,\n        });\n    }\n}\n/**\n * Make an attribute writeable. Internal use only.\n */\nexport function writable(target, property) {\n    if (isArray(property)) {\n        property.forEach((str) => writable(target, str));\n    }\n    else {\n        Object.defineProperty(target, property, {\n            writable: true,\n        });\n    }\n}\nexport const noOp = () => {\n    // no operation here!\n};\n//# sourceMappingURL=Interface.js.map","import { __awaiter } from \"tslib\";\nimport { getContext } from \"../Global.js\";\nimport { Tone } from \"../Tone.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { isArray, isNumber, isString } from \"../util/TypeCheck.js\";\nimport { assert } from \"../util/Debug.js\";\n/**\n * AudioBuffer loading and storage. ToneAudioBuffer is used internally by all\n * classes that make requests for audio files such as Tone.Player,\n * Tone.Sampler and Tone.Convolver.\n * @example\n * const buffer = new Tone.ToneAudioBuffer(\"https://tonejs.github.io/audio/casio/A1.mp3\", () => {\n * \tconsole.log(\"loaded\");\n * });\n * @category Core\n */\nexport class ToneAudioBuffer extends Tone {\n    constructor() {\n        super();\n        this.name = \"ToneAudioBuffer\";\n        /**\n         * Callback when the buffer is loaded.\n         */\n        this.onload = noOp;\n        const options = optionsFromArguments(ToneAudioBuffer.getDefaults(), arguments, [\"url\", \"onload\", \"onerror\"]);\n        this.reverse = options.reverse;\n        this.onload = options.onload;\n        if (isString(options.url)) {\n            // initiate the download\n            this.load(options.url).catch(options.onerror);\n        }\n        else if (options.url) {\n            this.set(options.url);\n        }\n    }\n    static getDefaults() {\n        return {\n            onerror: noOp,\n            onload: noOp,\n            reverse: false,\n        };\n    }\n    /**\n     * The sample rate of the AudioBuffer\n     */\n    get sampleRate() {\n        if (this._buffer) {\n            return this._buffer.sampleRate;\n        }\n        else {\n            return getContext().sampleRate;\n        }\n    }\n    /**\n     * Pass in an AudioBuffer or ToneAudioBuffer to set the value of this buffer.\n     */\n    set(buffer) {\n        if (buffer instanceof ToneAudioBuffer) {\n            // if it's loaded, set it\n            if (buffer.loaded) {\n                this._buffer = buffer.get();\n            }\n            else {\n                // otherwise when it's loaded, invoke it's callback\n                buffer.onload = () => {\n                    this.set(buffer);\n                    this.onload(this);\n                };\n            }\n        }\n        else {\n            this._buffer = buffer;\n        }\n        // reverse it initially\n        if (this._reversed) {\n            this._reverse();\n        }\n        return this;\n    }\n    /**\n     * The audio buffer stored in the object.\n     */\n    get() {\n        return this._buffer;\n    }\n    /**\n     * Makes an fetch request for the selected url then decodes the file as an audio buffer.\n     * Invokes the callback once the audio buffer loads.\n     * @param url The url of the buffer to load. filetype support depends on the browser.\n     * @returns A Promise which resolves with this ToneAudioBuffer\n     */\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const doneLoading = ToneAudioBuffer.load(url).then((audioBuffer) => {\n                this.set(audioBuffer);\n                // invoke the onload method\n                this.onload(this);\n            });\n            ToneAudioBuffer.downloads.push(doneLoading);\n            try {\n                yield doneLoading;\n            }\n            finally {\n                // remove the downloaded file\n                const index = ToneAudioBuffer.downloads.indexOf(doneLoading);\n                ToneAudioBuffer.downloads.splice(index, 1);\n            }\n            return this;\n        });\n    }\n    /**\n     * clean up\n     */\n    dispose() {\n        super.dispose();\n        this._buffer = undefined;\n        return this;\n    }\n    /**\n     * Set the audio buffer from the array.\n     * To create a multichannel AudioBuffer, pass in a multidimensional array.\n     * @param array The array to fill the audio buffer\n     */\n    fromArray(array) {\n        const isMultidimensional = isArray(array) && array[0].length > 0;\n        const channels = isMultidimensional ? array.length : 1;\n        const len = isMultidimensional\n            ? array[0].length\n            : array.length;\n        const context = getContext();\n        const buffer = context.createBuffer(channels, len, context.sampleRate);\n        const multiChannelArray = !isMultidimensional && channels === 1\n            ? [array]\n            : array;\n        for (let c = 0; c < channels; c++) {\n            buffer.copyToChannel(multiChannelArray[c], c);\n        }\n        this._buffer = buffer;\n        return this;\n    }\n    /**\n     * Sums multiple channels into 1 channel\n     * @param chanNum Optionally only copy a single channel from the array.\n     */\n    toMono(chanNum) {\n        if (isNumber(chanNum)) {\n            this.fromArray(this.toArray(chanNum));\n        }\n        else {\n            let outputArray = new Float32Array(this.length);\n            const numChannels = this.numberOfChannels;\n            for (let channel = 0; channel < numChannels; channel++) {\n                const channelArray = this.toArray(channel);\n                for (let i = 0; i < channelArray.length; i++) {\n                    outputArray[i] += channelArray[i];\n                }\n            }\n            // divide by the number of channels\n            outputArray = outputArray.map((sample) => sample / numChannels);\n            this.fromArray(outputArray);\n        }\n        return this;\n    }\n    /**\n     * Get the buffer as an array. Single channel buffers will return a 1-dimensional\n     * Float32Array, and multichannel buffers will return multidimensional arrays.\n     * @param channel Optionally only copy a single channel from the array.\n     */\n    toArray(channel) {\n        if (isNumber(channel)) {\n            return this.getChannelData(channel);\n        }\n        else if (this.numberOfChannels === 1) {\n            return this.toArray(0);\n        }\n        else {\n            const ret = [];\n            for (let c = 0; c < this.numberOfChannels; c++) {\n                ret[c] = this.getChannelData(c);\n            }\n            return ret;\n        }\n    }\n    /**\n     * Returns the Float32Array representing the PCM audio data for the specific channel.\n     * @param  channel  The channel number to return\n     * @return The audio as a TypedArray\n     */\n    getChannelData(channel) {\n        if (this._buffer) {\n            return this._buffer.getChannelData(channel);\n        }\n        else {\n            return new Float32Array(0);\n        }\n    }\n    /**\n     * Cut a subsection of the array and return a buffer of the\n     * subsection. Does not modify the original buffer\n     * @param start The time to start the slice\n     * @param end The end time to slice. If none is given will default to the end of the buffer\n     */\n    slice(start, end = this.duration) {\n        assert(this.loaded, \"Buffer is not loaded\");\n        const startSamples = Math.floor(start * this.sampleRate);\n        const endSamples = Math.floor(end * this.sampleRate);\n        assert(startSamples < endSamples, \"The start time must be less than the end time\");\n        const length = endSamples - startSamples;\n        const retBuffer = getContext().createBuffer(this.numberOfChannels, length, this.sampleRate);\n        for (let channel = 0; channel < this.numberOfChannels; channel++) {\n            retBuffer.copyToChannel(this.getChannelData(channel).subarray(startSamples, endSamples), channel);\n        }\n        return new ToneAudioBuffer(retBuffer);\n    }\n    /**\n     * Reverse the buffer.\n     */\n    _reverse() {\n        if (this.loaded) {\n            for (let i = 0; i < this.numberOfChannels; i++) {\n                this.getChannelData(i).reverse();\n            }\n        }\n        return this;\n    }\n    /**\n     * If the buffer is loaded or not\n     */\n    get loaded() {\n        return this.length > 0;\n    }\n    /**\n     * The duration of the buffer in seconds.\n     */\n    get duration() {\n        if (this._buffer) {\n            return this._buffer.duration;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * The length of the buffer in samples\n     */\n    get length() {\n        if (this._buffer) {\n            return this._buffer.length;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * The number of discrete audio channels. Returns 0 if no buffer is loaded.\n     */\n    get numberOfChannels() {\n        if (this._buffer) {\n            return this._buffer.numberOfChannels;\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * Reverse the buffer.\n     */\n    get reverse() {\n        return this._reversed;\n    }\n    set reverse(rev) {\n        if (this._reversed !== rev) {\n            this._reversed = rev;\n            this._reverse();\n        }\n    }\n    /**\n     * Create a ToneAudioBuffer from the array. To create a multichannel AudioBuffer,\n     * pass in a multidimensional array.\n     * @param array The array to fill the audio buffer\n     * @return A ToneAudioBuffer created from the array\n     */\n    static fromArray(array) {\n        return new ToneAudioBuffer().fromArray(array);\n    }\n    /**\n     * Creates a ToneAudioBuffer from a URL, returns a promise which resolves to a ToneAudioBuffer\n     * @param  url The url to load.\n     * @return A promise which resolves to a ToneAudioBuffer\n     */\n    static fromUrl(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buffer = new ToneAudioBuffer();\n            return yield buffer.load(url);\n        });\n    }\n    /**\n     * Loads a url using fetch and returns the AudioBuffer.\n     */\n    static load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // make sure there is a slash between the baseUrl and the url\n            const baseUrl = ToneAudioBuffer.baseUrl === \"\" ||\n                ToneAudioBuffer.baseUrl.endsWith(\"/\")\n                ? ToneAudioBuffer.baseUrl\n                : ToneAudioBuffer.baseUrl + \"/\";\n            const response = yield fetch(baseUrl + url);\n            if (!response.ok) {\n                throw new Error(`could not load url: ${url}`);\n            }\n            const arrayBuffer = yield response.arrayBuffer();\n            const audioBuffer = yield getContext().decodeAudioData(arrayBuffer);\n            return audioBuffer;\n        });\n    }\n    /**\n     * Checks a url's extension to see if the current browser can play that file type.\n     * @param url The url/extension to test\n     * @return If the file extension can be played\n     * @static\n     * @example\n     * Tone.ToneAudioBuffer.supportsType(\"wav\"); // returns true\n     * Tone.ToneAudioBuffer.supportsType(\"path/to/file.wav\"); // returns true\n     */\n    static supportsType(url) {\n        const extensions = url.split(\".\");\n        const extension = extensions[extensions.length - 1];\n        const response = document\n            .createElement(\"audio\")\n            .canPlayType(\"audio/\" + extension);\n        return response !== \"\";\n    }\n    /**\n     * Returns a Promise which resolves when all of the buffers have loaded\n     */\n    static loaded() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // this makes sure that the function is always async\n            yield Promise.resolve();\n            while (ToneAudioBuffer.downloads.length) {\n                yield ToneAudioBuffer.downloads[0];\n            }\n        });\n    }\n}\n//-------------------------------------\n// STATIC METHODS\n//-------------------------------------\n/**\n * A path which is prefixed before every url.\n */\nToneAudioBuffer.baseUrl = \"\";\n/**\n * All of the downloads\n */\nToneAudioBuffer.downloads = [];\n//# sourceMappingURL=ToneAudioBuffer.js.map","import { __awaiter } from \"tslib\";\nimport { createOfflineAudioContext } from \"../context/AudioContext.js\";\nimport { Context } from \"../context/Context.js\";\nimport { isOfflineAudioContext } from \"../util/AdvancedTypeCheck.js\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer.js\";\n/**\n * Wrapper around the OfflineAudioContext\n * @category Core\n * @example\n * // generate a single channel, 0.5 second buffer\n * const context = new Tone.OfflineContext(1, 0.5, 44100);\n * const osc = new Tone.Oscillator({ context });\n * context.render().then(buffer => {\n * \tconsole.log(buffer.numberOfChannels, buffer.duration);\n * });\n */\nexport class OfflineContext extends Context {\n    constructor() {\n        super({\n            clockSource: \"offline\",\n            context: isOfflineAudioContext(arguments[0])\n                ? arguments[0]\n                : createOfflineAudioContext(arguments[0], arguments[1] * arguments[2], arguments[2]),\n            lookAhead: 0,\n            updateInterval: isOfflineAudioContext(arguments[0])\n                ? 128 / arguments[0].sampleRate\n                : 128 / arguments[2],\n        });\n        this.name = \"OfflineContext\";\n        /**\n         * An artificial clock source\n         */\n        this._currentTime = 0;\n        this.isOffline = true;\n        this._duration = isOfflineAudioContext(arguments[0])\n            ? arguments[0].length / arguments[0].sampleRate\n            : arguments[1];\n    }\n    /**\n     * Override the now method to point to the internal clock time\n     */\n    now() {\n        return this._currentTime;\n    }\n    /**\n     * Same as this.now()\n     */\n    get currentTime() {\n        return this._currentTime;\n    }\n    /**\n     * Render just the clock portion of the audio context.\n     */\n    _renderClock(asynchronous) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let index = 0;\n            while (this._duration - this._currentTime >= 0) {\n                // invoke all the callbacks on that time\n                this.emit(\"tick\");\n                // increment the clock in block-sized chunks\n                this._currentTime += 128 / this.sampleRate;\n                // yield once a second of audio\n                index++;\n                const yieldEvery = Math.floor(this.sampleRate / 128);\n                if (asynchronous && index % yieldEvery === 0) {\n                    yield new Promise((done) => setTimeout(done, 1));\n                }\n            }\n        });\n    }\n    /**\n     * Render the output of the OfflineContext\n     * @param asynchronous If the clock should be rendered asynchronously, which will not block the main thread, but be slightly slower.\n     */\n    render() {\n        return __awaiter(this, arguments, void 0, function* (asynchronous = true) {\n            yield this.workletsAreReady();\n            yield this._renderClock(asynchronous);\n            const buffer = yield this._context.startRendering();\n            return new ToneAudioBuffer(buffer);\n        });\n    }\n    /**\n     * Close the context\n     */\n    close() {\n        return Promise.resolve();\n    }\n}\n//# sourceMappingURL=OfflineContext.js.map","import { version } from \"../version.js\";\nimport { hasAudioContext, theWindow, } from \"./context/AudioContext.js\";\nimport { Context } from \"./context/Context.js\";\nimport { DummyContext } from \"./context/DummyContext.js\";\nimport { OfflineContext } from \"./context/OfflineContext.js\";\nimport { isAudioContext, isOfflineAudioContext, } from \"./util/AdvancedTypeCheck.js\";\n/**\n * This dummy context is used to avoid throwing immediate errors when importing in Node.js\n */\nconst dummyContext = new DummyContext();\n/**\n * The global audio context which is getable and assignable through\n * getContext and setContext\n */\nlet globalContext = dummyContext;\n/**\n * Returns the default system-wide {@link Context}\n * @category Core\n */\nexport function getContext() {\n    if (globalContext === dummyContext && hasAudioContext) {\n        setContext(new Context());\n    }\n    return globalContext;\n}\n/**\n * Set the default audio context\n * @param context\n * @param disposeOld Pass `true` if you don't need the old context to dispose it.\n * @category Core\n */\nexport function setContext(context, disposeOld = false) {\n    if (disposeOld) {\n        globalContext.dispose();\n    }\n    if (isAudioContext(context)) {\n        globalContext = new Context(context);\n    }\n    else if (isOfflineAudioContext(context)) {\n        globalContext = new OfflineContext(context);\n    }\n    else {\n        globalContext = context;\n    }\n}\n/**\n * Most browsers will not play _any_ audio until a user\n * clicks something (like a play button). Invoke this method\n * on a click or keypress event handler to start the audio context.\n * More about the Autoplay policy\n * [here](https://developers.google.com/web/updates/2017/09/autoplay-policy-changes#webaudio)\n * @example\n * document.querySelector(\"button\").addEventListener(\"click\", async () => {\n * \tawait Tone.start();\n * \tconsole.log(\"context started\");\n * });\n * @category Core\n */\nexport function start() {\n    return globalContext.resume();\n}\n/**\n * Log Tone.js + version in the console.\n */\nif (theWindow && !theWindow.TONE_SILENCE_LOGGING) {\n    let prefix = \"v\";\n    if (version === \"dev\") {\n        prefix = \"\";\n    }\n    const printString = ` * Tone.js ${prefix}${version} * `;\n    // eslint-disable-next-line no-console\n    console.log(`%c${printString}`, \"background: #000; color: #fff\");\n}\n//# sourceMappingURL=Global.js.map","/**\n * Equal power gain scale. Good for cross-fading.\n * @param  percent (0-1)\n */\nexport function equalPowerScale(percent) {\n    const piFactor = 0.5 * Math.PI;\n    return Math.sin(percent * piFactor);\n}\n/**\n * Convert decibels into gain.\n */\nexport function dbToGain(db) {\n    return Math.pow(10, db / 20);\n}\n/**\n * Convert gain to decibels.\n */\nexport function gainToDb(gain) {\n    return 20 * (Math.log(gain) / Math.LN10);\n}\n/**\n * Convert an interval (in semitones) to a frequency ratio.\n * @param interval the number of semitones above the base note\n * @example\n * Tone.intervalToFrequencyRatio(0); // 1\n * Tone.intervalToFrequencyRatio(12); // 2\n * Tone.intervalToFrequencyRatio(-12); // 0.5\n */\nexport function intervalToFrequencyRatio(interval) {\n    return Math.pow(2, interval / 12);\n}\n/**\n * The Global [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n * to generate all the other pitch values from notes. A4's values in Hertz.\n */\nlet A4 = 440;\nexport function getA4() {\n    return A4;\n}\nexport function setA4(freq) {\n    A4 = freq;\n}\n/**\n * Convert a frequency value to a MIDI note.\n * @param frequency The value to frequency value to convert.\n * @example\n * Tone.ftom(440); // returns 69\n */\nexport function ftom(frequency) {\n    return Math.round(ftomf(frequency));\n}\n/**\n * Convert a frequency to a floating point midi value\n */\nexport function ftomf(frequency) {\n    return 69 + 12 * Math.log2(frequency / A4);\n}\n/**\n * Convert a MIDI note to frequency value.\n * @param  midi The midi number to convert.\n * @return The corresponding frequency value\n * @example\n * Tone.mtof(69); // 440\n */\nexport function mtof(midi) {\n    return A4 * Math.pow(2, (midi - 69) / 12);\n}\n//# sourceMappingURL=Conversions.js.map","import { Tone } from \"../Tone.js\";\nimport { isDefined, isObject, isString, isUndef } from \"../util/TypeCheck.js\";\n/**\n * TimeBase is a flexible encoding of time which can be evaluated to and from a string.\n */\nexport class TimeBaseClass extends Tone {\n    /**\n     * @param context The context associated with the time value. Used to compute\n     * Transport and context-relative timing.\n     * @param  value  The time value as a number, string or object\n     * @param  units  Unit values\n     */\n    constructor(context, value, units) {\n        super();\n        /**\n         * The default units\n         */\n        this.defaultUnits = \"s\";\n        this._val = value;\n        this._units = units;\n        this.context = context;\n        this._expressions = this._getExpressions();\n    }\n    /**\n     * All of the time encoding expressions\n     */\n    _getExpressions() {\n        return {\n            hz: {\n                method: (value) => {\n                    return this._frequencyToUnits(parseFloat(value));\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)hz$/i,\n            },\n            i: {\n                method: (value) => {\n                    return this._ticksToUnits(parseInt(value, 10));\n                },\n                regexp: /^(\\d+)i$/i,\n            },\n            m: {\n                method: (value) => {\n                    return this._beatsToUnits(parseInt(value, 10) * this._getTimeSignature());\n                },\n                regexp: /^(\\d+)m$/i,\n            },\n            n: {\n                method: (value, dot) => {\n                    const numericValue = parseInt(value, 10);\n                    const scalar = dot === \".\" ? 1.5 : 1;\n                    if (numericValue === 1) {\n                        return (this._beatsToUnits(this._getTimeSignature()) *\n                            scalar);\n                    }\n                    else {\n                        return (this._beatsToUnits(4 / numericValue) *\n                            scalar);\n                    }\n                },\n                regexp: /^(\\d+)n(\\.?)$/i,\n            },\n            number: {\n                method: (value) => {\n                    return this._expressions[this.defaultUnits].method.call(this, value);\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)$/,\n            },\n            s: {\n                method: (value) => {\n                    return this._secondsToUnits(parseFloat(value));\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?)s$/,\n            },\n            samples: {\n                method: (value) => {\n                    return (parseInt(value, 10) /\n                        this.context.sampleRate);\n                },\n                regexp: /^(\\d+)samples$/,\n            },\n            t: {\n                method: (value) => {\n                    const numericValue = parseInt(value, 10);\n                    return this._beatsToUnits(8 / (Math.floor(numericValue) * 3));\n                },\n                regexp: /^(\\d+)t$/i,\n            },\n            tr: {\n                method: (m, q, s) => {\n                    let total = 0;\n                    if (m && m !== \"0\") {\n                        total += this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n                    }\n                    if (q && q !== \"0\") {\n                        total += this._beatsToUnits(parseFloat(q));\n                    }\n                    if (s && s !== \"0\") {\n                        total += this._beatsToUnits(parseFloat(s) / 4);\n                    }\n                    return total;\n                },\n                regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?$/,\n            },\n        };\n    }\n    //-------------------------------------\n    // \tVALUE OF\n    //-------------------------------------\n    /**\n     * Evaluate the time value. Returns the time in seconds.\n     */\n    valueOf() {\n        if (this._val instanceof TimeBaseClass) {\n            this.fromType(this._val);\n        }\n        if (isUndef(this._val)) {\n            return this._noArg();\n        }\n        else if (isString(this._val) && isUndef(this._units)) {\n            for (const units in this._expressions) {\n                if (this._expressions[units].regexp.test(this._val.trim())) {\n                    this._units = units;\n                    break;\n                }\n            }\n        }\n        else if (isObject(this._val)) {\n            let total = 0;\n            for (const typeName in this._val) {\n                if (isDefined(this._val[typeName])) {\n                    const quantity = this._val[typeName];\n                    const time = \n                    // @ts-ignore\n                    new this.constructor(this.context, typeName).valueOf() *\n                        quantity;\n                    total += time;\n                }\n            }\n            return total;\n        }\n        if (isDefined(this._units)) {\n            const expr = this._expressions[this._units];\n            const matching = this._val.toString().trim().match(expr.regexp);\n            if (matching) {\n                return expr.method.apply(this, matching.slice(1));\n            }\n            else {\n                return expr.method.call(this, this._val);\n            }\n        }\n        else if (isString(this._val)) {\n            return parseFloat(this._val);\n        }\n        else {\n            return this._val;\n        }\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n    /**\n     * Returns the value of a frequency in the current units\n     */\n    _frequencyToUnits(freq) {\n        return (1 / freq);\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return ((60 / this._getBpm()) * beats);\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return seconds;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return ((ticks * this._beatsToUnits(1)) / this._getPPQ());\n    }\n    /**\n     * With no arguments, return 'now'\n     */\n    _noArg() {\n        return this._now();\n    }\n    //-------------------------------------\n    // \tTEMPO CONVERSIONS\n    //-------------------------------------\n    /**\n     * Return the bpm\n     */\n    _getBpm() {\n        return this.context.transport.bpm.value;\n    }\n    /**\n     * Return the timeSignature\n     */\n    _getTimeSignature() {\n        return this.context.transport.timeSignature;\n    }\n    /**\n     * Return the PPQ or 192 if Transport is not available\n     */\n    _getPPQ() {\n        return this.context.transport.PPQ;\n    }\n    //-------------------------------------\n    // \tCONVERSION INTERFACE\n    //-------------------------------------\n    /**\n     * Coerce a time type into this units type.\n     * @param type Any time type units\n     */\n    fromType(type) {\n        this._units = undefined;\n        switch (this.defaultUnits) {\n            case \"s\":\n                this._val = type.toSeconds();\n                break;\n            case \"i\":\n                this._val = type.toTicks();\n                break;\n            case \"hz\":\n                this._val = type.toFrequency();\n                break;\n            case \"midi\":\n                this._val = type.toMidi();\n                break;\n        }\n        return this;\n    }\n    /**\n     * Return the value in hertz\n     */\n    toFrequency() {\n        return 1 / this.toSeconds();\n    }\n    /**\n     * Return the time in samples\n     */\n    toSamples() {\n        return this.toSeconds() * this.context.sampleRate;\n    }\n    /**\n     * Return the time in milliseconds.\n     */\n    toMilliseconds() {\n        return this.toSeconds() * 1000;\n    }\n}\n//# sourceMappingURL=TimeBase.js.map","import { getContext } from \"../Global.js\";\nimport { ftom } from \"./Conversions.js\";\nimport { TimeBaseClass, } from \"./TimeBase.js\";\n/**\n * TimeClass is a primitive type for encoding and decoding Time values.\n * TimeClass can be passed into the parameter of any method which takes time as an argument.\n * @param  val    The time value.\n * @param  units  The units of the value.\n * @example\n * const time = Tone.Time(\"4n\"); // a quarter note\n * @category Unit\n */\nexport class TimeClass extends TimeBaseClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"TimeClass\";\n    }\n    _getExpressions() {\n        return Object.assign(super._getExpressions(), {\n            now: {\n                method: (capture) => {\n                    return (this._now() +\n                        new this.constructor(this.context, capture).valueOf());\n                },\n                regexp: /^\\+(.+)/,\n            },\n            quantize: {\n                method: (capture) => {\n                    const quantTo = new TimeClass(this.context, capture).valueOf();\n                    return this._secondsToUnits(this.context.transport.nextSubdivision(quantTo));\n                },\n                regexp: /^@(.+)/,\n            },\n        });\n    }\n    /**\n     * Quantize the time by the given subdivision. Optionally add a\n     * percentage which will move the time value towards the ideal\n     * quantized value by that percentage.\n     * @param  subdiv    The subdivision to quantize to\n     * @param  percent  Move the time value towards the quantized value by a percentage.\n     * @example\n     * Tone.Time(21).quantize(2); // returns 22\n     * Tone.Time(0.6).quantize(\"4n\", 0.5); // returns 0.55\n     */\n    quantize(subdiv, percent = 1) {\n        const subdivision = new this.constructor(this.context, subdiv).valueOf();\n        const value = this.valueOf();\n        const multiple = Math.round(value / subdivision);\n        const ideal = multiple * subdivision;\n        const diff = ideal - value;\n        return (value + diff * percent);\n    }\n    //-------------------------------------\n    // CONVERSIONS\n    //-------------------------------------\n    /**\n     * Convert a Time to Notation. The notation values are will be the\n     * closest representation between 1m to 128th note.\n     * @return {Notation}\n     * @example\n     * // if the Transport is at 120bpm:\n     * Tone.Time(2).toNotation(); // returns \"1m\"\n     */\n    toNotation() {\n        const time = this.toSeconds();\n        const testNotations = [\"1m\"];\n        for (let power = 1; power < 9; power++) {\n            const subdiv = Math.pow(2, power);\n            testNotations.push((subdiv + \"n.\"));\n            testNotations.push((subdiv + \"n\"));\n            testNotations.push((subdiv + \"t\"));\n        }\n        testNotations.push(\"0\");\n        // find the closets notation representation\n        let closest = testNotations[0];\n        let closestSeconds = new TimeClass(this.context, testNotations[0]).toSeconds();\n        testNotations.forEach((notation) => {\n            const notationSeconds = new TimeClass(this.context, notation).toSeconds();\n            if (Math.abs(notationSeconds - time) <\n                Math.abs(closestSeconds - time)) {\n                closest = notation;\n                closestSeconds = notationSeconds;\n            }\n        });\n        return closest;\n    }\n    /**\n     * Return the time encoded as Bars:Beats:Sixteenths.\n     */\n    toBarsBeatsSixteenths() {\n        const quarterTime = this._beatsToUnits(1);\n        let quarters = this.valueOf() / quarterTime;\n        quarters = parseFloat(quarters.toFixed(4));\n        const measures = Math.floor(quarters / this._getTimeSignature());\n        let sixteenths = (quarters % 1) * 4;\n        quarters = Math.floor(quarters) % this._getTimeSignature();\n        const sixteenthString = sixteenths.toString();\n        if (sixteenthString.length > 3) {\n            // the additional parseFloat removes insignificant trailing zeroes\n            sixteenths = parseFloat(parseFloat(sixteenthString).toFixed(3));\n        }\n        const progress = [measures, quarters, sixteenths];\n        return progress.join(\":\");\n    }\n    /**\n     * Return the time in ticks.\n     */\n    toTicks() {\n        const quarterTime = this._beatsToUnits(1);\n        const quarters = this.valueOf() / quarterTime;\n        return quarters * this._getPPQ();\n    }\n    /**\n     * Return the time in seconds.\n     */\n    toSeconds() {\n        return this.valueOf();\n    }\n    /**\n     * Return the value as a midi note.\n     */\n    toMidi() {\n        return ftom(this.toFrequency());\n    }\n    _now() {\n        return this.context.now();\n    }\n}\n/**\n * Create a TimeClass from a time string or number. The time is computed against the\n * global Tone.Context. To use a specific context, use {@link TimeClass}\n * @param value A value which represents time\n * @param units The value's units if they can't be inferred by the value.\n * @category Unit\n * @example\n * const time = Tone.Time(\"4n\").toSeconds();\n * console.log(time);\n * @example\n * const note = Tone.Time(1).toNotation();\n * console.log(note);\n * @example\n * const freq = Tone.Time(0.5).toFrequency();\n * console.log(freq);\n */\nexport function Time(value, units) {\n    return new TimeClass(getContext(), value, units);\n}\n//# sourceMappingURL=Time.js.map","/* eslint-disable key-spacing */\nimport { getContext } from \"../Global.js\";\nimport { intervalToFrequencyRatio, mtof } from \"./Conversions.js\";\nimport { ftom, getA4, setA4 } from \"./Conversions.js\";\nimport { TimeClass } from \"./Time.js\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\nexport class FrequencyClass extends TimeClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"Frequency\";\n        this.defaultUnits = \"hz\";\n    }\n    /**\n     * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n     * to generate all the other pitch values from notes. A4's values in Hertz.\n     */\n    static get A4() {\n        return getA4();\n    }\n    static set A4(freq) {\n        setA4(freq);\n    }\n    //-------------------------------------\n    // \tAUGMENT BASE EXPRESSIONS\n    //-------------------------------------\n    _getExpressions() {\n        return Object.assign({}, super._getExpressions(), {\n            midi: {\n                regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n                method(value) {\n                    if (this.defaultUnits === \"midi\") {\n                        return value;\n                    }\n                    else {\n                        return FrequencyClass.mtof(value);\n                    }\n                },\n            },\n            note: {\n                regexp: /^([a-g]{1}(?:b|#|##|x|bb|###|#x|x#|bbb)?)(-?[0-9]+)/i,\n                method(pitch, octave) {\n                    const index = noteToScaleIndex[pitch.toLowerCase()];\n                    const noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n                    if (this.defaultUnits === \"midi\") {\n                        return noteNumber;\n                    }\n                    else {\n                        return FrequencyClass.mtof(noteNumber);\n                    }\n                },\n            },\n            tr: {\n                regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n                method(m, q, s) {\n                    let total = 1;\n                    if (m && m !== \"0\") {\n                        total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n                    }\n                    if (q && q !== \"0\") {\n                        total *= this._beatsToUnits(parseFloat(q));\n                    }\n                    if (s && s !== \"0\") {\n                        total *= this._beatsToUnits(parseFloat(s) / 4);\n                    }\n                    return total;\n                },\n            },\n        });\n    }\n    //-------------------------------------\n    // \tEXPRESSIONS\n    //-------------------------------------\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return  A new transposed frequency\n     * @example\n     * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n     */\n    transpose(interval) {\n        return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n    }\n    /**\n     * Takes an array of semitone intervals and returns\n     * an array of frequencies transposed by those intervals.\n     * @return  Returns an array of Frequencies\n     * @example\n     * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n     */\n    harmonize(intervals) {\n        return intervals.map((interval) => {\n            return this.transpose(interval);\n        });\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Frequency(\"C4\").toMidi(); // 60\n     */\n    toMidi() {\n        return ftom(this.valueOf());\n    }\n    /**\n     * Return the value of the frequency in Scientific Pitch Notation\n     * @example\n     * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n     */\n    toNote() {\n        const freq = this.toFrequency();\n        const log = Math.log2(freq / FrequencyClass.A4);\n        let noteNumber = Math.round(12 * log) + 57;\n        const octave = Math.floor(noteNumber / 12);\n        if (octave < 0) {\n            noteNumber += -12 * octave;\n        }\n        const noteName = scaleIndexToNote[noteNumber % 12];\n        return (noteName + octave.toString());\n    }\n    /**\n     * Return the duration of one cycle in seconds.\n     */\n    toSeconds() {\n        return 1 / super.toSeconds();\n    }\n    /**\n     * Return the duration of one cycle in ticks\n     */\n    toTicks() {\n        const quarterTime = this._beatsToUnits(1);\n        const quarters = this.valueOf() / quarterTime;\n        return Math.floor(quarters * this._getPPQ());\n    }\n    //-------------------------------------\n    // \tUNIT CONVERSIONS HELPERS\n    //-------------------------------------\n    /**\n     * With no arguments, return 0\n     */\n    _noArg() {\n        return 0;\n    }\n    /**\n     * Returns the value of a frequency in the current units\n     */\n    _frequencyToUnits(freq) {\n        return freq;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return (1 / ((ticks * 60) / (this._getBpm() * this._getPPQ())));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return (1 / super._beatsToUnits(beats));\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return (1 / seconds);\n    }\n    /**\n     * Convert a MIDI note to frequency value.\n     * @param  midi The midi number to convert.\n     * @return The corresponding frequency value\n     */\n    static mtof(midi) {\n        return mtof(midi);\n    }\n    /**\n     * Convert a frequency value to a MIDI note.\n     * @param frequency The value to frequency value to convert.\n     */\n    static ftom(frequency) {\n        return ftom(frequency);\n    }\n}\n//-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n/**\n * Note to scale index.\n * @hidden\n */\nconst noteToScaleIndex = {\n    cbbb: -3,\n    cbb: -2,\n    cb: -1,\n    c: 0,\n    \"c#\": 1,\n    cx: 2,\n    \"c##\": 2,\n    \"c###\": 3,\n    \"cx#\": 3,\n    \"c#x\": 3,\n    dbbb: -1,\n    dbb: 0,\n    db: 1,\n    d: 2,\n    \"d#\": 3,\n    dx: 4,\n    \"d##\": 4,\n    \"d###\": 5,\n    \"dx#\": 5,\n    \"d#x\": 5,\n    ebbb: 1,\n    ebb: 2,\n    eb: 3,\n    e: 4,\n    \"e#\": 5,\n    ex: 6,\n    \"e##\": 6,\n    \"e###\": 7,\n    \"ex#\": 7,\n    \"e#x\": 7,\n    fbbb: 2,\n    fbb: 3,\n    fb: 4,\n    f: 5,\n    \"f#\": 6,\n    fx: 7,\n    \"f##\": 7,\n    \"f###\": 8,\n    \"fx#\": 8,\n    \"f#x\": 8,\n    gbbb: 4,\n    gbb: 5,\n    gb: 6,\n    g: 7,\n    \"g#\": 8,\n    gx: 9,\n    \"g##\": 9,\n    \"g###\": 10,\n    \"gx#\": 10,\n    \"g#x\": 10,\n    abbb: 6,\n    abb: 7,\n    ab: 8,\n    a: 9,\n    \"a#\": 10,\n    ax: 11,\n    \"a##\": 11,\n    \"a###\": 12,\n    \"ax#\": 12,\n    \"a#x\": 12,\n    bbbb: 8,\n    bbb: 9,\n    bb: 10,\n    b: 11,\n    \"b#\": 12,\n    bx: 13,\n    \"b##\": 13,\n    \"b###\": 14,\n    \"bx#\": 14,\n    \"b#x\": 14,\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\nconst scaleIndexToNote = [\n    \"C\",\n    \"C#\",\n    \"D\",\n    \"D#\",\n    \"E\",\n    \"F\",\n    \"F#\",\n    \"G\",\n    \"G#\",\n    \"A\",\n    \"A#\",\n    \"B\",\n];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\nexport function Frequency(value, units) {\n    return new FrequencyClass(getContext(), value, units);\n}\n//# sourceMappingURL=Frequency.js.map","import { getContext } from \"../Global.js\";\nimport { TimeClass } from \"./Time.js\";\n/**\n * TransportTime is a time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport class TransportTimeClass extends TimeClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"TransportTime\";\n    }\n    /**\n     * Return the current time in whichever context is relevant\n     */\n    _now() {\n        return this.context.transport.seconds;\n    }\n}\n/**\n * TransportTime is a time along the Transport's\n * timeline. It is similar to Tone.Time, but instead of evaluating\n * against the AudioContext's clock, it is evaluated against\n * the Transport's position. See [TransportTime wiki](https://github.com/Tonejs/Tone.js/wiki/TransportTime).\n * @category Unit\n */\nexport function TransportTime(value, units) {\n    return new TransportTimeClass(getContext(), value, units);\n}\n//# sourceMappingURL=TransportTime.js.map","import { getContext } from \"../Global.js\";\nimport { Tone } from \"../Tone.js\";\nimport { FrequencyClass } from \"../type/Frequency.js\";\nimport { TimeClass } from \"../type/Time.js\";\nimport { TransportTimeClass } from \"../type/TransportTime.js\";\nimport { assertUsedScheduleTime } from \"../util/Debug.js\";\nimport { getDefaultsFromInstance, optionsFromArguments, } from \"../util/Defaults.js\";\nimport { isArray, isBoolean, isDefined, isNumber, isString, isUndef, } from \"../util/TypeCheck.js\";\n/**\n * The Base class for all nodes that have an AudioContext.\n */\nexport class ToneWithContext extends Tone {\n    constructor() {\n        super();\n        const options = optionsFromArguments(ToneWithContext.getDefaults(), arguments, [\"context\"]);\n        if (this.defaultContext) {\n            this.context = this.defaultContext;\n        }\n        else {\n            this.context = options.context;\n        }\n    }\n    static getDefaults() {\n        return {\n            context: getContext(),\n        };\n    }\n    /**\n     * Return the current time of the Context clock plus the lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.now());\n     * }, 100);\n     */\n    now() {\n        return this.context.currentTime + this.context.lookAhead;\n    }\n    /**\n     * Return the current time of the Context clock without any lookAhead.\n     * @example\n     * setInterval(() => {\n     * \tconsole.log(Tone.immediate());\n     * }, 100);\n     */\n    immediate() {\n        return this.context.currentTime;\n    }\n    /**\n     * The duration in seconds of one sample.\n     */\n    get sampleTime() {\n        return 1 / this.context.sampleRate;\n    }\n    /**\n     * The number of seconds of 1 processing block (128 samples)\n     * @example\n     * console.log(Tone.Destination.blockTime);\n     */\n    get blockTime() {\n        return 128 / this.context.sampleRate;\n    }\n    /**\n     * Convert the incoming time to seconds.\n     * This is calculated against the current {@link TransportClass} bpm\n     * @example\n     * const gain = new Tone.Gain();\n     * setInterval(() => console.log(gain.toSeconds(\"4n\")), 100);\n     * // ramp the tempo to 60 bpm over 30 seconds\n     * Tone.getTransport().bpm.rampTo(60, 30);\n     */\n    toSeconds(time) {\n        assertUsedScheduleTime(time);\n        return new TimeClass(this.context, time).toSeconds();\n    }\n    /**\n     * Convert the input to a frequency number\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toFrequency(\"4n\"));\n     */\n    toFrequency(freq) {\n        return new FrequencyClass(this.context, freq).toFrequency();\n    }\n    /**\n     * Convert the input time into ticks\n     * @example\n     * const gain = new Tone.Gain();\n     * console.log(gain.toTicks(\"4n\"));\n     */\n    toTicks(time) {\n        return new TransportTimeClass(this.context, time).toTicks();\n    }\n    //-------------------------------------\n    // \tGET/SET\n    //-------------------------------------\n    /**\n     * Get a subset of the properties which are in the partial props\n     */\n    _getPartialProperties(props) {\n        const options = this.get();\n        // remove attributes from the prop that are not in the partial\n        Object.keys(options).forEach((name) => {\n            if (isUndef(props[name])) {\n                delete options[name];\n            }\n        });\n        return options;\n    }\n    /**\n     * Get the object's attributes.\n     * @example\n     * const osc = new Tone.Oscillator();\n     * console.log(osc.get());\n     */\n    get() {\n        const defaults = getDefaultsFromInstance(this);\n        Object.keys(defaults).forEach((attribute) => {\n            if (Reflect.has(this, attribute)) {\n                const member = this[attribute];\n                if (isDefined(member) &&\n                    isDefined(member.value) &&\n                    isDefined(member.setValueAtTime)) {\n                    defaults[attribute] = member.value;\n                }\n                else if (member instanceof ToneWithContext) {\n                    defaults[attribute] = member._getPartialProperties(defaults[attribute]);\n                    // otherwise make sure it's a serializable type\n                }\n                else if (isArray(member) ||\n                    isNumber(member) ||\n                    isString(member) ||\n                    isBoolean(member)) {\n                    defaults[attribute] = member;\n                }\n                else {\n                    // remove all undefined and unserializable attributes\n                    delete defaults[attribute];\n                }\n            }\n        });\n        return defaults;\n    }\n    /**\n     * Set multiple properties at once with an object.\n     * @example\n     * const filter = new Tone.Filter().toDestination();\n     * // set values using an object\n     * filter.set({\n     * \tfrequency: \"C6\",\n     * \ttype: \"highpass\"\n     * });\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/Analogsynth_octaves_highmid.mp3\").connect(filter);\n     * player.autostart = true;\n     */\n    set(props) {\n        Object.keys(props).forEach((attribute) => {\n            if (Reflect.has(this, attribute) && isDefined(this[attribute])) {\n                if (this[attribute] &&\n                    isDefined(this[attribute].value) &&\n                    isDefined(this[attribute].setValueAtTime)) {\n                    // small optimization\n                    if (this[attribute].value !== props[attribute]) {\n                        this[attribute].value = props[attribute];\n                    }\n                }\n                else if (this[attribute] instanceof ToneWithContext) {\n                    this[attribute].set(props[attribute]);\n                }\n                else {\n                    this[attribute] = props[attribute];\n                }\n            }\n        });\n        return this;\n    }\n}\n//# sourceMappingURL=ToneWithContext.js.map","import { Timeline } from \"./Timeline.js\";\nimport { assertRange } from \"./Debug.js\";\n/**\n * A Timeline State. Provides the methods: `setStateAtTime(\"state\", time)` and `getValueAtTime(time)`\n * @param initial The initial state of the StateTimeline.  Defaults to `undefined`\n * @internal\n */\nexport class StateTimeline extends Timeline {\n    constructor(initial = \"stopped\") {\n        super();\n        this.name = \"StateTimeline\";\n        this._initial = initial;\n        this.setStateAtTime(this._initial, 0);\n    }\n    /**\n     * Returns the scheduled state scheduled before or at\n     * the given time.\n     * @param  time  The time to query.\n     * @return  The name of the state input in setStateAtTime.\n     */\n    getValueAtTime(time) {\n        const event = this.get(time);\n        if (event !== null) {\n            return event.state;\n        }\n        else {\n            return this._initial;\n        }\n    }\n    /**\n     * Add a state to the timeline.\n     * @param  state The name of the state to set.\n     * @param  time  The time to query.\n     * @param options Any additional options that are needed in the timeline.\n     */\n    setStateAtTime(state, time, options) {\n        assertRange(time, 0);\n        this.add(Object.assign({}, options, {\n            state,\n            time,\n        }));\n        return this;\n    }\n    /**\n     * Return the event before the time with the given state\n     * @param  state The state to look for\n     * @param  time  When to check before\n     * @return  The event with the given state before the time\n     */\n    getLastState(state, time) {\n        // time = this.toSeconds(time);\n        const index = this._search(time);\n        for (let i = index; i >= 0; i--) {\n            const event = this._timeline[i];\n            if (event.state === state) {\n                return event;\n            }\n        }\n    }\n    /**\n     * Return the event after the time with the given state\n     * @param  state The state to look for\n     * @param  time  When to check from\n     * @return  The event with the given state after the time\n     */\n    getNextState(state, time) {\n        // time = this.toSeconds(time);\n        const index = this._search(time);\n        if (index !== -1) {\n            for (let i = index; i < this._timeline.length; i++) {\n                const event = this._timeline[i];\n                if (event.state === state) {\n                    return event;\n                }\n            }\n        }\n    }\n}\n//# sourceMappingURL=StateTimeline.js.map","import { dbToGain, gainToDb } from \"../type/Conversions.js\";\nimport { isAudioParam } from \"../util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { ToneWithContext } from \"./ToneWithContext.js\";\nimport { EQ } from \"../util/Math.js\";\nimport { assert, assertRange } from \"../util/Debug.js\";\n/**\n * Param wraps the native Web Audio's AudioParam to provide\n * additional unit conversion functionality. It also\n * serves as a base-class for classes which have a single,\n * automatable parameter.\n * @category Core\n */\nexport class Param extends ToneWithContext {\n    constructor() {\n        const options = optionsFromArguments(Param.getDefaults(), arguments, [\n            \"param\",\n            \"units\",\n            \"convert\",\n        ]);\n        super(options);\n        this.name = \"Param\";\n        this.overridden = false;\n        /**\n         * The minimum output value\n         */\n        this._minOutput = 1e-7;\n        assert(isDefined(options.param) &&\n            (isAudioParam(options.param) || options.param instanceof Param), \"param must be an AudioParam\");\n        while (!isAudioParam(options.param)) {\n            options.param = options.param._param;\n        }\n        this._swappable = isDefined(options.swappable)\n            ? options.swappable\n            : false;\n        if (this._swappable) {\n            this.input = this.context.createGain();\n            // initialize\n            this._param = options.param;\n            this.input.connect(this._param);\n        }\n        else {\n            this._param = this.input = options.param;\n        }\n        this._events = new Timeline(1000);\n        this._initialValue = this._param.defaultValue;\n        this.units = options.units;\n        this.convert = options.convert;\n        this._minValue = options.minValue;\n        this._maxValue = options.maxValue;\n        // if the value is defined, set it immediately\n        if (isDefined(options.value) &&\n            options.value !== this._toType(this._initialValue)) {\n            this.setValueAtTime(options.value, 0);\n        }\n    }\n    static getDefaults() {\n        return Object.assign(ToneWithContext.getDefaults(), {\n            convert: true,\n            units: \"number\",\n        });\n    }\n    get value() {\n        const now = this.now();\n        return this.getValueAtTime(now);\n    }\n    set value(value) {\n        this.cancelScheduledValues(this.now());\n        this.setValueAtTime(value, this.now());\n    }\n    get minValue() {\n        // if it's not the default minValue, return it\n        if (isDefined(this._minValue)) {\n            return this._minValue;\n        }\n        else if (this.units === \"time\" ||\n            this.units === \"frequency\" ||\n            this.units === \"normalRange\" ||\n            this.units === \"positive\" ||\n            this.units === \"transportTime\" ||\n            this.units === \"ticks\" ||\n            this.units === \"bpm\" ||\n            this.units === \"hertz\" ||\n            this.units === \"samples\") {\n            return 0;\n        }\n        else if (this.units === \"audioRange\") {\n            return -1;\n        }\n        else if (this.units === \"decibels\") {\n            return -Infinity;\n        }\n        else {\n            return this._param.minValue;\n        }\n    }\n    get maxValue() {\n        if (isDefined(this._maxValue)) {\n            return this._maxValue;\n        }\n        else if (this.units === \"normalRange\" ||\n            this.units === \"audioRange\") {\n            return 1;\n        }\n        else {\n            return this._param.maxValue;\n        }\n    }\n    /**\n     * Type guard based on the unit name\n     */\n    _is(arg, type) {\n        return this.units === type;\n    }\n    /**\n     * Make sure the value is always in the defined range\n     */\n    _assertRange(value) {\n        if (isDefined(this.maxValue) && isDefined(this.minValue)) {\n            assertRange(value, this._fromType(this.minValue), this._fromType(this.maxValue));\n        }\n        return value;\n    }\n    /**\n     * Convert the given value from the type specified by Param.units\n     * into the destination value (such as Gain or Frequency).\n     */\n    _fromType(val) {\n        if (this.convert && !this.overridden) {\n            if (this._is(val, \"time\")) {\n                return this.toSeconds(val);\n            }\n            else if (this._is(val, \"decibels\")) {\n                return dbToGain(val);\n            }\n            else if (this._is(val, \"frequency\")) {\n                return this.toFrequency(val);\n            }\n            else {\n                return val;\n            }\n        }\n        else if (this.overridden) {\n            // if it's overridden, should only schedule 0s\n            return 0;\n        }\n        else {\n            return val;\n        }\n    }\n    /**\n     * Convert the parameters value into the units specified by Param.units.\n     */\n    _toType(val) {\n        if (this.convert && this.units === \"decibels\") {\n            return gainToDb(val);\n        }\n        else {\n            return val;\n        }\n    }\n    //-------------------------------------\n    // ABSTRACT PARAM INTERFACE\n    // all docs are generated from ParamInterface.ts\n    //-------------------------------------\n    setValueAtTime(value, time) {\n        const computedTime = this.toSeconds(time);\n        const numericValue = this._fromType(value);\n        assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(time)}`);\n        this._assertRange(numericValue);\n        this.log(this.units, \"setValueAtTime\", value, computedTime);\n        this._events.add({\n            time: computedTime,\n            type: \"setValueAtTime\",\n            value: numericValue,\n        });\n        this._param.setValueAtTime(numericValue, computedTime);\n        return this;\n    }\n    getValueAtTime(time) {\n        const computedTime = Math.max(this.toSeconds(time), 0);\n        const after = this._events.getAfter(computedTime);\n        const before = this._events.get(computedTime);\n        let value = this._initialValue;\n        // if it was set by\n        if (before === null) {\n            value = this._initialValue;\n        }\n        else if (before.type === \"setTargetAtTime\" &&\n            (after === null || after.type === \"setValueAtTime\")) {\n            const previous = this._events.getBefore(before.time);\n            let previousVal;\n            if (previous === null) {\n                previousVal = this._initialValue;\n            }\n            else {\n                previousVal = previous.value;\n            }\n            if (before.type === \"setTargetAtTime\") {\n                value = this._exponentialApproach(before.time, previousVal, before.value, before.constant, computedTime);\n            }\n        }\n        else if (after === null) {\n            value = before.value;\n        }\n        else if (after.type === \"linearRampToValueAtTime\" ||\n            after.type === \"exponentialRampToValueAtTime\") {\n            let beforeValue = before.value;\n            if (before.type === \"setTargetAtTime\") {\n                const previous = this._events.getBefore(before.time);\n                if (previous === null) {\n                    beforeValue = this._initialValue;\n                }\n                else {\n                    beforeValue = previous.value;\n                }\n            }\n            if (after.type === \"linearRampToValueAtTime\") {\n                value = this._linearInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n            }\n            else {\n                value = this._exponentialInterpolate(before.time, beforeValue, after.time, after.value, computedTime);\n            }\n        }\n        else {\n            value = before.value;\n        }\n        return this._toType(value);\n    }\n    setRampPoint(time) {\n        time = this.toSeconds(time);\n        let currentVal = this.getValueAtTime(time);\n        this.cancelAndHoldAtTime(time);\n        if (this._fromType(currentVal) === 0) {\n            currentVal = this._toType(this._minOutput);\n        }\n        this.setValueAtTime(currentVal, time);\n        return this;\n    }\n    linearRampToValueAtTime(value, endTime) {\n        const numericValue = this._fromType(value);\n        const computedTime = this.toSeconds(endTime);\n        assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to linearRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n        this._assertRange(numericValue);\n        this._events.add({\n            time: computedTime,\n            type: \"linearRampToValueAtTime\",\n            value: numericValue,\n        });\n        this.log(this.units, \"linearRampToValueAtTime\", value, computedTime);\n        this._param.linearRampToValueAtTime(numericValue, computedTime);\n        return this;\n    }\n    exponentialRampToValueAtTime(value, endTime) {\n        let numericValue = this._fromType(value);\n        // the value can't be 0\n        numericValue = EQ(numericValue, 0) ? this._minOutput : numericValue;\n        this._assertRange(numericValue);\n        const computedTime = this.toSeconds(endTime);\n        assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to exponentialRampToValueAtTime: ${JSON.stringify(value)}, ${JSON.stringify(endTime)}`);\n        // store the event\n        this._events.add({\n            time: computedTime,\n            type: \"exponentialRampToValueAtTime\",\n            value: numericValue,\n        });\n        this.log(this.units, \"exponentialRampToValueAtTime\", value, computedTime);\n        this._param.exponentialRampToValueAtTime(numericValue, computedTime);\n        return this;\n    }\n    exponentialRampTo(value, rampTime, startTime) {\n        startTime = this.toSeconds(startTime);\n        this.setRampPoint(startTime);\n        this.exponentialRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n        return this;\n    }\n    linearRampTo(value, rampTime, startTime) {\n        startTime = this.toSeconds(startTime);\n        this.setRampPoint(startTime);\n        this.linearRampToValueAtTime(value, startTime + this.toSeconds(rampTime));\n        return this;\n    }\n    targetRampTo(value, rampTime, startTime) {\n        startTime = this.toSeconds(startTime);\n        this.setRampPoint(startTime);\n        this.exponentialApproachValueAtTime(value, startTime, rampTime);\n        return this;\n    }\n    exponentialApproachValueAtTime(value, time, rampTime) {\n        time = this.toSeconds(time);\n        rampTime = this.toSeconds(rampTime);\n        const timeConstant = Math.log(rampTime + 1) / Math.log(200);\n        this.setTargetAtTime(value, time, timeConstant);\n        // at 90% start a linear ramp to the final value\n        this.cancelAndHoldAtTime(time + rampTime * 0.9);\n        this.linearRampToValueAtTime(value, time + rampTime);\n        return this;\n    }\n    setTargetAtTime(value, startTime, timeConstant) {\n        const numericValue = this._fromType(value);\n        // The value will never be able to approach without timeConstant > 0.\n        assert(isFinite(timeConstant) && timeConstant > 0, \"timeConstant must be a number greater than 0\");\n        const computedTime = this.toSeconds(startTime);\n        this._assertRange(numericValue);\n        assert(isFinite(numericValue) && isFinite(computedTime), `Invalid argument(s) to setTargetAtTime: ${JSON.stringify(value)}, ${JSON.stringify(startTime)}`);\n        this._events.add({\n            constant: timeConstant,\n            time: computedTime,\n            type: \"setTargetAtTime\",\n            value: numericValue,\n        });\n        this.log(this.units, \"setTargetAtTime\", value, computedTime, timeConstant);\n        this._param.setTargetAtTime(numericValue, computedTime, timeConstant);\n        return this;\n    }\n    setValueCurveAtTime(values, startTime, duration, scaling = 1) {\n        duration = this.toSeconds(duration);\n        startTime = this.toSeconds(startTime);\n        const startingValue = this._fromType(values[0]) * scaling;\n        this.setValueAtTime(this._toType(startingValue), startTime);\n        const segTime = duration / (values.length - 1);\n        for (let i = 1; i < values.length; i++) {\n            const numericValue = this._fromType(values[i]) * scaling;\n            this.linearRampToValueAtTime(this._toType(numericValue), startTime + i * segTime);\n        }\n        return this;\n    }\n    cancelScheduledValues(time) {\n        const computedTime = this.toSeconds(time);\n        assert(isFinite(computedTime), `Invalid argument to cancelScheduledValues: ${JSON.stringify(time)}`);\n        this._events.cancel(computedTime);\n        this._param.cancelScheduledValues(computedTime);\n        this.log(this.units, \"cancelScheduledValues\", computedTime);\n        return this;\n    }\n    cancelAndHoldAtTime(time) {\n        const computedTime = this.toSeconds(time);\n        const valueAtTime = this._fromType(this.getValueAtTime(computedTime));\n        // remove the schedule events\n        assert(isFinite(computedTime), `Invalid argument to cancelAndHoldAtTime: ${JSON.stringify(time)}`);\n        this.log(this.units, \"cancelAndHoldAtTime\", computedTime, \"value=\" + valueAtTime);\n        // if there is an event at the given computedTime\n        // and that even is not a \"set\"\n        const before = this._events.get(computedTime);\n        const after = this._events.getAfter(computedTime);\n        if (before && EQ(before.time, computedTime)) {\n            // remove everything after\n            if (after) {\n                this._param.cancelScheduledValues(after.time);\n                this._events.cancel(after.time);\n            }\n            else {\n                this._param.cancelAndHoldAtTime(computedTime);\n                this._events.cancel(computedTime + this.sampleTime);\n            }\n        }\n        else if (after) {\n            this._param.cancelScheduledValues(after.time);\n            // cancel the next event(s)\n            this._events.cancel(after.time);\n            if (after.type === \"linearRampToValueAtTime\") {\n                this.linearRampToValueAtTime(this._toType(valueAtTime), computedTime);\n            }\n            else if (after.type === \"exponentialRampToValueAtTime\") {\n                this.exponentialRampToValueAtTime(this._toType(valueAtTime), computedTime);\n            }\n        }\n        // set the value at the given time\n        this._events.add({\n            time: computedTime,\n            type: \"setValueAtTime\",\n            value: valueAtTime,\n        });\n        this._param.setValueAtTime(valueAtTime, computedTime);\n        return this;\n    }\n    rampTo(value, rampTime = 0.1, startTime) {\n        if (this.units === \"frequency\" ||\n            this.units === \"bpm\" ||\n            this.units === \"decibels\") {\n            this.exponentialRampTo(value, rampTime, startTime);\n        }\n        else {\n            this.linearRampTo(value, rampTime, startTime);\n        }\n        return this;\n    }\n    /**\n     * Apply all of the previously scheduled events to the passed in Param or AudioParam.\n     * The applied values will start at the context's current time and schedule\n     * all of the events which are scheduled on this Param onto the passed in param.\n     */\n    apply(param) {\n        const now = this.context.currentTime;\n        // set the param's value at the current time and schedule everything else\n        param.setValueAtTime(this.getValueAtTime(now), now);\n        // if the previous event was a curve, then set the rest of it\n        const previousEvent = this._events.get(now);\n        if (previousEvent && previousEvent.type === \"setTargetAtTime\") {\n            // approx it until the next event with linear ramps\n            const nextEvent = this._events.getAfter(previousEvent.time);\n            // or for 2 seconds if there is no event\n            const endTime = nextEvent ? nextEvent.time : now + 2;\n            const subdivisions = (endTime - now) / 10;\n            for (let i = now; i < endTime; i += subdivisions) {\n                param.linearRampToValueAtTime(this.getValueAtTime(i), i);\n            }\n        }\n        this._events.forEachAfter(this.context.currentTime, (event) => {\n            if (event.type === \"cancelScheduledValues\") {\n                param.cancelScheduledValues(event.time);\n            }\n            else if (event.type === \"setTargetAtTime\") {\n                param.setTargetAtTime(event.value, event.time, event.constant);\n            }\n            else {\n                param[event.type](event.value, event.time);\n            }\n        });\n        return this;\n    }\n    /**\n     * Replace the Param's internal AudioParam. Will apply scheduled curves\n     * onto the parameter and replace the connections.\n     */\n    setParam(param) {\n        assert(this._swappable, \"The Param must be assigned as 'swappable' in the constructor\");\n        const input = this.input;\n        input.disconnect(this._param);\n        this.apply(param);\n        this._param = param;\n        input.connect(this._param);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._events.dispose();\n        return this;\n    }\n    get defaultValue() {\n        return this._toType(this._param.defaultValue);\n    }\n    //-------------------------------------\n    // \tAUTOMATION CURVE CALCULATIONS\n    // \tMIT License, copyright (c) 2014 Jordan Santell\n    //-------------------------------------\n    // Calculates the the value along the curve produced by setTargetAtTime\n    _exponentialApproach(t0, v0, v1, timeConstant, t) {\n        return v1 + (v0 - v1) * Math.exp(-(t - t0) / timeConstant);\n    }\n    // Calculates the the value along the curve produced by linearRampToValueAtTime\n    _linearInterpolate(t0, v0, t1, v1, t) {\n        return v0 + (v1 - v0) * ((t - t0) / (t1 - t0));\n    }\n    // Calculates the the value along the curve produced by exponentialRampToValueAtTime\n    _exponentialInterpolate(t0, v0, t1, v1, t) {\n        return v0 * Math.pow(v1 / v0, (t - t0) / (t1 - t0));\n    }\n}\n//# sourceMappingURL=Param.js.map","import { isAudioNode, isAudioParam } from \"../util/AdvancedTypeCheck.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { Param } from \"./Param.js\";\nimport { ToneWithContext } from \"./ToneWithContext.js\";\nimport { assert, warn } from \"../util/Debug.js\";\n/**\n * ToneAudioNode is the base class for classes which process audio.\n * @category Core\n */\nexport class ToneAudioNode extends ToneWithContext {\n    constructor() {\n        super(...arguments);\n        /**\n         * List all of the node that must be set to match the ChannelProperties\n         */\n        this._internalChannels = [];\n    }\n    /**\n     * The number of inputs feeding into the AudioNode.\n     * For source nodes, this will be 0.\n     * @example\n     * const node = new Tone.Gain();\n     * console.log(node.numberOfInputs);\n     */\n    get numberOfInputs() {\n        if (isDefined(this.input)) {\n            if (isAudioParam(this.input) || this.input instanceof Param) {\n                return 1;\n            }\n            else {\n                return this.input.numberOfInputs;\n            }\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * The number of outputs of the AudioNode.\n     * @example\n     * const node = new Tone.Gain();\n     * console.log(node.numberOfOutputs);\n     */\n    get numberOfOutputs() {\n        if (isDefined(this.output)) {\n            return this.output.numberOfOutputs;\n        }\n        else {\n            return 0;\n        }\n    }\n    //-------------------------------------\n    // AUDIO PROPERTIES\n    //-------------------------------------\n    /**\n     * Used to decide which nodes to get/set properties on\n     */\n    _isAudioNode(node) {\n        return (isDefined(node) &&\n            (node instanceof ToneAudioNode || isAudioNode(node)));\n    }\n    /**\n     * Get all of the audio nodes (either internal or input/output) which together\n     * make up how the class node responds to channel input/output\n     */\n    _getInternalNodes() {\n        const nodeList = this._internalChannels.slice(0);\n        if (this._isAudioNode(this.input)) {\n            nodeList.push(this.input);\n        }\n        if (this._isAudioNode(this.output)) {\n            if (this.input !== this.output) {\n                nodeList.push(this.output);\n            }\n        }\n        return nodeList;\n    }\n    /**\n     * Set the audio options for this node such as channelInterpretation\n     * channelCount, etc.\n     * @param options\n     */\n    _setChannelProperties(options) {\n        const nodeList = this._getInternalNodes();\n        nodeList.forEach((node) => {\n            node.channelCount = options.channelCount;\n            node.channelCountMode = options.channelCountMode;\n            node.channelInterpretation = options.channelInterpretation;\n        });\n    }\n    /**\n     * Get the current audio options for this node such as channelInterpretation\n     * channelCount, etc.\n     */\n    _getChannelProperties() {\n        const nodeList = this._getInternalNodes();\n        assert(nodeList.length > 0, \"ToneAudioNode does not have any internal nodes\");\n        // use the first node to get properties\n        // they should all be the same\n        const node = nodeList[0];\n        return {\n            channelCount: node.channelCount,\n            channelCountMode: node.channelCountMode,\n            channelInterpretation: node.channelInterpretation,\n        };\n    }\n    /**\n     * channelCount is the number of channels used when up-mixing and down-mixing\n     * connections to any inputs to the node. The default value is 2 except for\n     * specific nodes where its value is specially determined.\n     */\n    get channelCount() {\n        return this._getChannelProperties().channelCount;\n    }\n    set channelCount(channelCount) {\n        const props = this._getChannelProperties();\n        // merge it with the other properties\n        this._setChannelProperties(Object.assign(props, { channelCount }));\n    }\n    /**\n     * channelCountMode determines how channels will be counted when up-mixing and\n     * down-mixing connections to any inputs to the node.\n     * The default value is \"max\". This attribute has no effect for nodes with no inputs.\n     * * \"max\" - computedNumberOfChannels is the maximum of the number of channels of all connections to an input. In this mode channelCount is ignored.\n     * * \"clamped-max\" - computedNumberOfChannels is determined as for \"max\" and then clamped to a maximum value of the given channelCount.\n     * * \"explicit\" - computedNumberOfChannels is the exact value as specified by the channelCount.\n     */\n    get channelCountMode() {\n        return this._getChannelProperties().channelCountMode;\n    }\n    set channelCountMode(channelCountMode) {\n        const props = this._getChannelProperties();\n        // merge it with the other properties\n        this._setChannelProperties(Object.assign(props, { channelCountMode }));\n    }\n    /**\n     * channelInterpretation determines how individual channels will be treated\n     * when up-mixing and down-mixing connections to any inputs to the node.\n     * The default value is \"speakers\".\n     */\n    get channelInterpretation() {\n        return this._getChannelProperties().channelInterpretation;\n    }\n    set channelInterpretation(channelInterpretation) {\n        const props = this._getChannelProperties();\n        // merge it with the other properties\n        this._setChannelProperties(Object.assign(props, { channelInterpretation }));\n    }\n    //-------------------------------------\n    // CONNECTIONS\n    //-------------------------------------\n    /**\n     * connect the output of a ToneAudioNode to an AudioParam, AudioNode, or ToneAudioNode\n     * @param destination The output to connect to\n     * @param outputNum The output to connect from\n     * @param inputNum The input to connect to\n     */\n    connect(destination, outputNum = 0, inputNum = 0) {\n        connect(this, destination, outputNum, inputNum);\n        return this;\n    }\n    /**\n     * Connect the output to the context's destination node.\n     * @example\n     * const osc = new Tone.Oscillator(\"C2\").start();\n     * osc.toDestination();\n     */\n    toDestination() {\n        this.connect(this.context.destination);\n        return this;\n    }\n    /**\n     * Connect the output to the context's destination node.\n     * @see {@link toDestination}\n     * @deprecated\n     */\n    toMaster() {\n        warn(\"toMaster() has been renamed toDestination()\");\n        return this.toDestination();\n    }\n    /**\n     * disconnect the output\n     */\n    disconnect(destination, outputNum = 0, inputNum = 0) {\n        disconnect(this, destination, outputNum, inputNum);\n        return this;\n    }\n    /**\n     * Connect the output of this node to the rest of the nodes in series.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/handdrum-loop.mp3\");\n     * player.autostart = true;\n     * const filter = new Tone.AutoFilter(4).start();\n     * const distortion = new Tone.Distortion(0.5);\n     * // connect the player to the filter, distortion and then to the master output\n     * player.chain(filter, distortion, Tone.Destination);\n     */\n    chain(...nodes) {\n        connectSeries(this, ...nodes);\n        return this;\n    }\n    /**\n     * connect the output of this node to the rest of the nodes in parallel.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n     * player.autostart = true;\n     * const pitchShift = new Tone.PitchShift(4).toDestination();\n     * const filter = new Tone.Filter(\"G5\").toDestination();\n     * // connect a node to the pitch shift and filter in parallel\n     * player.fan(pitchShift, filter);\n     */\n    fan(...nodes) {\n        nodes.forEach((node) => this.connect(node));\n        return this;\n    }\n    /**\n     * Dispose and disconnect\n     */\n    dispose() {\n        super.dispose();\n        if (isDefined(this.input)) {\n            if (this.input instanceof ToneAudioNode) {\n                this.input.dispose();\n            }\n            else if (isAudioNode(this.input)) {\n                this.input.disconnect();\n            }\n        }\n        if (isDefined(this.output)) {\n            if (this.output instanceof ToneAudioNode) {\n                this.output.dispose();\n            }\n            else if (isAudioNode(this.output)) {\n                this.output.disconnect();\n            }\n        }\n        this._internalChannels = [];\n        return this;\n    }\n}\n//-------------------------------------\n// CONNECTIONS\n//-------------------------------------\n/**\n * connect together all of the arguments in series\n * @param nodes\n */\nexport function connectSeries(...nodes) {\n    const first = nodes.shift();\n    nodes.reduce((prev, current) => {\n        if (prev instanceof ToneAudioNode) {\n            prev.connect(current);\n        }\n        else if (isAudioNode(prev)) {\n            connect(prev, current);\n        }\n        return current;\n    }, first);\n}\n/**\n * Connect two nodes together so that signal flows from the\n * first node to the second. Optionally specify the input and output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function connect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n    assert(isDefined(srcNode), \"Cannot connect from undefined node\");\n    assert(isDefined(dstNode), \"Cannot connect to undefined node\");\n    if (dstNode instanceof ToneAudioNode || isAudioNode(dstNode)) {\n        assert(dstNode.numberOfInputs > 0, \"Cannot connect to node with no inputs\");\n    }\n    assert(srcNode.numberOfOutputs > 0, \"Cannot connect from node with no outputs\");\n    // resolve the input of the dstNode\n    while (dstNode instanceof ToneAudioNode || dstNode instanceof Param) {\n        if (isDefined(dstNode.input)) {\n            dstNode = dstNode.input;\n        }\n    }\n    while (srcNode instanceof ToneAudioNode) {\n        if (isDefined(srcNode.output)) {\n            srcNode = srcNode.output;\n        }\n    }\n    // make the connection\n    if (isAudioParam(dstNode)) {\n        srcNode.connect(dstNode, outputNumber);\n    }\n    else {\n        srcNode.connect(dstNode, outputNumber, inputNumber);\n    }\n}\n/**\n * Disconnect a node from all nodes or optionally include a destination node and input/output channels.\n * @param srcNode The source node\n * @param dstNode The destination node\n * @param outputNumber The output channel of the srcNode\n * @param inputNumber The input channel of the dstNode\n */\nexport function disconnect(srcNode, dstNode, outputNumber = 0, inputNumber = 0) {\n    // resolve the destination node\n    if (isDefined(dstNode)) {\n        while (dstNode instanceof ToneAudioNode) {\n            dstNode = dstNode.input;\n        }\n    }\n    // resolve the src node\n    while (!isAudioNode(srcNode)) {\n        if (isDefined(srcNode.output)) {\n            srcNode = srcNode.output;\n        }\n    }\n    if (isAudioParam(dstNode)) {\n        srcNode.disconnect(dstNode, outputNumber);\n    }\n    else if (isAudioNode(dstNode)) {\n        srcNode.disconnect(dstNode, outputNumber, inputNumber);\n    }\n    else {\n        srcNode.disconnect();\n    }\n}\n/**\n * Connect the output of one or more source nodes to a single destination node\n * @param nodes One or more source nodes followed by one destination node\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const player1 = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/conga-rhythm.mp3\");\n * const filter = new Tone.Filter(\"G5\").toDestination();\n * // connect nodes to a common destination\n * Tone.fanIn(player, player1, filter);\n */\nexport function fanIn(...nodes) {\n    const dstNode = nodes.pop();\n    if (isDefined(dstNode)) {\n        nodes.forEach((node) => connect(node, dstNode));\n    }\n}\n//# sourceMappingURL=ToneAudioNode.js.map","import { Param } from \"../context/Param.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { readOnly } from \"../util/Interface.js\";\nimport { ToneAudioNode } from \"./ToneAudioNode.js\";\n/**\n * A thin wrapper around the Native Web Audio GainNode.\n * The GainNode is a basic building block of the Web Audio\n * API and is useful for routing audio and adjusting gains.\n * @category Core\n * @example\n * return Tone.Offline(() => {\n * \tconst gainNode = new Tone.Gain(0).toDestination();\n * \tconst osc = new Tone.Oscillator(30).connect(gainNode).start();\n * \tgainNode.gain.rampTo(1, 0.1);\n * \tgainNode.gain.rampTo(0, 0.4, 0.2);\n * }, 0.7, 1);\n */\nexport class Gain extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Gain.getDefaults(), arguments, [\n            \"gain\",\n            \"units\",\n        ]);\n        super(options);\n        this.name = \"Gain\";\n        /**\n         * The wrapped GainNode.\n         */\n        this._gainNode = this.context.createGain();\n        // input = output\n        this.input = this._gainNode;\n        this.output = this._gainNode;\n        this.gain = new Param({\n            context: this.context,\n            convert: options.convert,\n            param: this._gainNode.gain,\n            units: options.units,\n            value: options.gain,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        readOnly(this, \"gain\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            convert: true,\n            gain: 1,\n            units: \"gain\",\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._gainNode.disconnect();\n        this.gain.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Gain.js.map","import { Gain } from \"../core/context/Gain.js\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { assert } from \"../core/util/Debug.js\";\n/**\n * Base class for fire-and-forget nodes\n */\nexport class OneShotSource extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        /**\n         * The callback to invoke after the\n         * source is done playing.\n         */\n        this.onended = noOp;\n        /**\n         * The start time\n         */\n        this._startTime = -1;\n        /**\n         * The stop time\n         */\n        this._stopTime = -1;\n        /**\n         * The id of the timeout\n         */\n        this._timeout = -1;\n        /**\n         * The public output node\n         */\n        this.output = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        /**\n         * The output gain node.\n         */\n        this._gainNode = this.output;\n        /**\n         * Get the playback state at the given time\n         */\n        this.getStateAtTime = function (time) {\n            const computedTime = this.toSeconds(time);\n            if (this._startTime !== -1 &&\n                computedTime >= this._startTime &&\n                (this._stopTime === -1 || computedTime <= this._stopTime)) {\n                return \"started\";\n            }\n            else {\n                return \"stopped\";\n            }\n        };\n        this._fadeIn = options.fadeIn;\n        this._fadeOut = options.fadeOut;\n        this._curve = options.curve;\n        this.onended = options.onended;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            curve: \"linear\",\n            fadeIn: 0,\n            fadeOut: 0,\n            onended: noOp,\n        });\n    }\n    /**\n     * Start the source at the given time\n     * @param  time When to start the source\n     */\n    _startGain(time, gain = 1) {\n        assert(this._startTime === -1, \"Source cannot be started more than once\");\n        // apply a fade in envelope\n        const fadeInTime = this.toSeconds(this._fadeIn);\n        // record the start time\n        this._startTime = time + fadeInTime;\n        this._startTime = Math.max(this._startTime, this.context.currentTime);\n        // schedule the envelope\n        if (fadeInTime > 0) {\n            this._gainNode.gain.setValueAtTime(0, time);\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampToValueAtTime(gain, time + fadeInTime);\n            }\n            else {\n                this._gainNode.gain.exponentialApproachValueAtTime(gain, time, fadeInTime);\n            }\n        }\n        else {\n            this._gainNode.gain.setValueAtTime(gain, time);\n        }\n        return this;\n    }\n    /**\n     * Stop the source node at the given time.\n     * @param time When to stop the source\n     */\n    stop(time) {\n        this.log(\"stop\", time);\n        this._stopGain(this.toSeconds(time));\n        return this;\n    }\n    /**\n     * Stop the source at the given time\n     * @param  time When to stop the source\n     */\n    _stopGain(time) {\n        assert(this._startTime !== -1, \"'start' must be called before 'stop'\");\n        // cancel the previous stop\n        this.cancelStop();\n        // the fadeOut time\n        const fadeOutTime = this.toSeconds(this._fadeOut);\n        // schedule the stop callback\n        this._stopTime = this.toSeconds(time) + fadeOutTime;\n        this._stopTime = Math.max(this._stopTime, this.now());\n        if (fadeOutTime > 0) {\n            // start the fade out curve at the given time\n            if (this._curve === \"linear\") {\n                this._gainNode.gain.linearRampTo(0, fadeOutTime, time);\n            }\n            else {\n                this._gainNode.gain.targetRampTo(0, fadeOutTime, time);\n            }\n        }\n        else {\n            // stop any ongoing ramps, and set the value to 0\n            this._gainNode.gain.cancelAndHoldAtTime(time);\n            this._gainNode.gain.setValueAtTime(0, time);\n        }\n        this.context.clearTimeout(this._timeout);\n        this._timeout = this.context.setTimeout(() => {\n            // allow additional time for the exponential curve to fully decay\n            const additionalTail = this._curve === \"exponential\" ? fadeOutTime * 2 : 0;\n            this._stopSource(this.now() + additionalTail);\n            this._onended();\n        }, this._stopTime - this.context.currentTime);\n        return this;\n    }\n    /**\n     * Invoke the onended callback\n     */\n    _onended() {\n        if (this.onended === noOp) {\n            return;\n        }\n        this.onended(this);\n        // overwrite onended to make sure it only is called once\n        this.onended = noOp;\n        // dispose when it's ended to free up for garbage collection only in the online context\n        if (!this.context.isOffline) {\n            const disposeCallback = () => this.dispose();\n            if (typeof requestIdleCallback !== \"undefined\") {\n                requestIdleCallback(disposeCallback);\n            }\n            else {\n                setTimeout(disposeCallback, 10);\n            }\n        }\n    }\n    /**\n     * Get the playback state at the current time\n     */\n    get state() {\n        return this.getStateAtTime(this.now());\n    }\n    /**\n     * Cancel a scheduled stop event\n     */\n    cancelStop() {\n        this.log(\"cancelStop\");\n        assert(this._startTime !== -1, \"Source is not started\");\n        // cancel the stop envelope\n        this._gainNode.gain.cancelScheduledValues(this._startTime + this.sampleTime);\n        this.context.clearTimeout(this._timeout);\n        this._stopTime = -1;\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._gainNode.dispose();\n        this.onended = noOp;\n        return this;\n    }\n}\n//# sourceMappingURL=OneShotSource.js.map","import { connect } from \"../core/context/ToneAudioNode.js\";\nimport { Param } from \"../core/context/Param.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { OneShotSource, } from \"../source/OneShotSource.js\";\n/**\n * Wrapper around the native fire-and-forget ConstantSource.\n * Adds the ability to reschedule the stop method.\n * @category Signal\n */\nexport class ToneConstantSource extends OneShotSource {\n    constructor() {\n        const options = optionsFromArguments(ToneConstantSource.getDefaults(), arguments, [\"offset\"]);\n        super(options);\n        this.name = \"ToneConstantSource\";\n        /**\n         * The signal generator\n         */\n        this._source = this.context.createConstantSource();\n        connect(this._source, this._gainNode);\n        this.offset = new Param({\n            context: this.context,\n            convert: options.convert,\n            param: this._source.offset,\n            units: options.units,\n            value: options.offset,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(OneShotSource.getDefaults(), {\n            convert: true,\n            offset: 1,\n            units: \"number\",\n        });\n    }\n    /**\n     * Start the source node at the given time\n     * @param  time When to start the source\n     */\n    start(time) {\n        const computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        this._startGain(computedTime);\n        this._source.start(computedTime);\n        return this;\n    }\n    _stopSource(time) {\n        this._source.stop(time);\n    }\n    dispose() {\n        super.dispose();\n        if (this.state === \"started\") {\n            this.stop();\n        }\n        this._source.disconnect();\n        this.offset.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneConstantSource.js.map","import { Param } from \"../core/context/Param.js\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode.js\";\nimport { connect } from \"../core/context/ToneAudioNode.js\";\nimport { isAudioParam } from \"../core/util/AdvancedTypeCheck.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { ToneConstantSource } from \"./ToneConstantSource.js\";\n/**\n * A signal is an audio-rate value. Tone.Signal is a core component of the library.\n * Unlike a number, Signals can be scheduled with sample-level accuracy. Tone.Signal\n * has all of the methods available to native Web Audio\n * [AudioParam](http://webaudio.github.io/web-audio-api/#the-audioparam-interface)\n * as well as additional conveniences. Read more about working with signals\n * [here](https://github.com/Tonejs/Tone.js/wiki/Signals).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // a scheduleable signal which can be connected to control an AudioParam or another Signal\n * const signal = new Tone.Signal({\n * \tvalue: \"C4\",\n * \tunits: \"frequency\"\n * }).connect(osc.frequency);\n * // the scheduled ramp controls the connected signal\n * signal.rampTo(\"C2\", 4, \"+0.5\");\n * @category Signal\n */\nexport class Signal extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Signal.getDefaults(), arguments, [\n            \"value\",\n            \"units\",\n        ]);\n        super(options);\n        this.name = \"Signal\";\n        /**\n         * Indicates if the value should be overridden on connection.\n         */\n        this.override = true;\n        this.output = this._constantSource = new ToneConstantSource({\n            context: this.context,\n            convert: options.convert,\n            offset: options.value,\n            units: options.units,\n            minValue: options.minValue,\n            maxValue: options.maxValue,\n        });\n        this._constantSource.start(0);\n        this.input = this._param = this._constantSource.offset;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            convert: true,\n            units: \"number\",\n            value: 0,\n        });\n    }\n    connect(destination, outputNum = 0, inputNum = 0) {\n        // start it only when connected to something\n        connectSignal(this, destination, outputNum, inputNum);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._param.dispose();\n        this._constantSource.dispose();\n        return this;\n    }\n    //-------------------------------------\n    // ABSTRACT PARAM INTERFACE\n    // just a proxy for the ConstantSourceNode's offset AudioParam\n    // all docs are generated from AbstractParam.ts\n    //-------------------------------------\n    setValueAtTime(value, time) {\n        this._param.setValueAtTime(value, time);\n        return this;\n    }\n    getValueAtTime(time) {\n        return this._param.getValueAtTime(time);\n    }\n    setRampPoint(time) {\n        this._param.setRampPoint(time);\n        return this;\n    }\n    linearRampToValueAtTime(value, time) {\n        this._param.linearRampToValueAtTime(value, time);\n        return this;\n    }\n    exponentialRampToValueAtTime(value, time) {\n        this._param.exponentialRampToValueAtTime(value, time);\n        return this;\n    }\n    exponentialRampTo(value, rampTime, startTime) {\n        this._param.exponentialRampTo(value, rampTime, startTime);\n        return this;\n    }\n    linearRampTo(value, rampTime, startTime) {\n        this._param.linearRampTo(value, rampTime, startTime);\n        return this;\n    }\n    targetRampTo(value, rampTime, startTime) {\n        this._param.targetRampTo(value, rampTime, startTime);\n        return this;\n    }\n    exponentialApproachValueAtTime(value, time, rampTime) {\n        this._param.exponentialApproachValueAtTime(value, time, rampTime);\n        return this;\n    }\n    setTargetAtTime(value, startTime, timeConstant) {\n        this._param.setTargetAtTime(value, startTime, timeConstant);\n        return this;\n    }\n    setValueCurveAtTime(values, startTime, duration, scaling) {\n        this._param.setValueCurveAtTime(values, startTime, duration, scaling);\n        return this;\n    }\n    cancelScheduledValues(time) {\n        this._param.cancelScheduledValues(time);\n        return this;\n    }\n    cancelAndHoldAtTime(time) {\n        this._param.cancelAndHoldAtTime(time);\n        return this;\n    }\n    rampTo(value, rampTime, startTime) {\n        this._param.rampTo(value, rampTime, startTime);\n        return this;\n    }\n    get value() {\n        return this._param.value;\n    }\n    set value(value) {\n        this._param.value = value;\n    }\n    get convert() {\n        return this._param.convert;\n    }\n    set convert(convert) {\n        this._param.convert = convert;\n    }\n    get units() {\n        return this._param.units;\n    }\n    get overridden() {\n        return this._param.overridden;\n    }\n    set overridden(overridden) {\n        this._param.overridden = overridden;\n    }\n    get maxValue() {\n        return this._param.maxValue;\n    }\n    get minValue() {\n        return this._param.minValue;\n    }\n    /**\n     * @see {@link Param.apply}.\n     */\n    apply(param) {\n        this._param.apply(param);\n        return this;\n    }\n}\n/**\n * When connecting from a signal, it's necessary to zero out the node destination\n * node if that node is also a signal. If the destination is not 0, then the values\n * will be summed. This method insures that the output of the destination signal will\n * be the same as the source signal, making the destination signal a pass through node.\n * @param signal The output signal to connect from\n * @param destination the destination to connect to\n * @param outputNum the optional output number\n * @param inputNum the input number\n */\nexport function connectSignal(signal, destination, outputNum, inputNum) {\n    if (destination instanceof Param ||\n        isAudioParam(destination) ||\n        (destination instanceof Signal && destination.override)) {\n        // cancel changes\n        destination.cancelScheduledValues(0);\n        // reset the value\n        destination.setValueAtTime(0, 0);\n        // mark the value as overridden\n        if (destination instanceof Signal) {\n            destination.overridden = true;\n        }\n    }\n    connect(signal, destination, outputNum, inputNum);\n}\n//# sourceMappingURL=Signal.js.map","import { Param } from \"../context/Param.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isUndef } from \"../util/TypeCheck.js\";\n/**\n * A Param class just for computing ticks. Similar to the {@link Param} class,\n * but offers conversion to BPM values as well as ability to compute tick\n * duration and elapsed ticks\n */\nexport class TickParam extends Param {\n    constructor() {\n        const options = optionsFromArguments(TickParam.getDefaults(), arguments, [\"value\"]);\n        super(options);\n        this.name = \"TickParam\";\n        /**\n         * The timeline which tracks all of the automations.\n         */\n        this._events = new Timeline(Infinity);\n        /**\n         * The internal holder for the multiplier value\n         */\n        this._multiplier = 1;\n        // set the multiplier\n        this._multiplier = options.multiplier;\n        // clear the ticks from the beginning\n        this._events.cancel(0);\n        // set an initial event\n        this._events.add({\n            ticks: 0,\n            time: 0,\n            type: \"setValueAtTime\",\n            value: this._fromType(options.value),\n        });\n        this.setValueAtTime(options.value, 0);\n    }\n    static getDefaults() {\n        return Object.assign(Param.getDefaults(), {\n            multiplier: 1,\n            units: \"hertz\",\n            value: 1,\n        });\n    }\n    setTargetAtTime(value, time, constant) {\n        // approximate it with multiple linear ramps\n        time = this.toSeconds(time);\n        this.setRampPoint(time);\n        const computedValue = this._fromType(value);\n        // start from previously scheduled value\n        const prevEvent = this._events.get(time);\n        const segments = Math.round(Math.max(1 / constant, 1));\n        for (let i = 0; i <= segments; i++) {\n            const segTime = constant * i + time;\n            const rampVal = this._exponentialApproach(prevEvent.time, prevEvent.value, computedValue, constant, segTime);\n            this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n        }\n        return this;\n    }\n    setValueAtTime(value, time) {\n        const computedTime = this.toSeconds(time);\n        super.setValueAtTime(value, time);\n        const event = this._events.get(computedTime);\n        const previousEvent = this._events.previousEvent(event);\n        const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n        event.ticks = Math.max(ticksUntilTime, 0);\n        return this;\n    }\n    linearRampToValueAtTime(value, time) {\n        const computedTime = this.toSeconds(time);\n        super.linearRampToValueAtTime(value, time);\n        const event = this._events.get(computedTime);\n        const previousEvent = this._events.previousEvent(event);\n        const ticksUntilTime = this._getTicksUntilEvent(previousEvent, computedTime);\n        event.ticks = Math.max(ticksUntilTime, 0);\n        return this;\n    }\n    exponentialRampToValueAtTime(value, time) {\n        // aproximate it with multiple linear ramps\n        time = this.toSeconds(time);\n        const computedVal = this._fromType(value);\n        // start from previously scheduled value\n        const prevEvent = this._events.get(time);\n        // approx 10 segments per second\n        const segments = Math.round(Math.max((time - prevEvent.time) * 10, 1));\n        const segmentDur = (time - prevEvent.time) / segments;\n        for (let i = 0; i <= segments; i++) {\n            const segTime = segmentDur * i + prevEvent.time;\n            const rampVal = this._exponentialInterpolate(prevEvent.time, prevEvent.value, time, computedVal, segTime);\n            this.linearRampToValueAtTime(this._toType(rampVal), segTime);\n        }\n        return this;\n    }\n    /**\n     * Returns the tick value at the time. Takes into account\n     * any automation curves scheduled on the signal.\n     * @param  event The time to get the tick count at\n     * @return The number of ticks which have elapsed at the time given any automations.\n     */\n    _getTicksUntilEvent(event, time) {\n        if (event === null) {\n            event = {\n                ticks: 0,\n                time: 0,\n                type: \"setValueAtTime\",\n                value: 0,\n            };\n        }\n        else if (isUndef(event.ticks)) {\n            const previousEvent = this._events.previousEvent(event);\n            event.ticks = this._getTicksUntilEvent(previousEvent, event.time);\n        }\n        const val0 = this._fromType(this.getValueAtTime(event.time));\n        let val1 = this._fromType(this.getValueAtTime(time));\n        // if it's right on the line, take the previous value\n        const onTheLineEvent = this._events.get(time);\n        if (onTheLineEvent &&\n            onTheLineEvent.time === time &&\n            onTheLineEvent.type === \"setValueAtTime\") {\n            val1 = this._fromType(this.getValueAtTime(time - this.sampleTime));\n        }\n        return 0.5 * (time - event.time) * (val0 + val1) + event.ticks;\n    }\n    /**\n     * Returns the tick value at the time. Takes into account\n     * any automation curves scheduled on the signal.\n     * @param  time The time to get the tick count at\n     * @return The number of ticks which have elapsed at the time given any automations.\n     */\n    getTicksAtTime(time) {\n        const computedTime = this.toSeconds(time);\n        const event = this._events.get(computedTime);\n        return Math.max(this._getTicksUntilEvent(event, computedTime), 0);\n    }\n    /**\n     * Return the elapsed time of the number of ticks from the given time\n     * @param ticks The number of ticks to calculate\n     * @param  time The time to get the next tick from\n     * @return The duration of the number of ticks from the given time in seconds\n     */\n    getDurationOfTicks(ticks, time) {\n        const computedTime = this.toSeconds(time);\n        const currentTick = this.getTicksAtTime(time);\n        return this.getTimeOfTick(currentTick + ticks) - computedTime;\n    }\n    /**\n     * Given a tick, returns the time that tick occurs at.\n     * @return The time that the tick occurs.\n     */\n    getTimeOfTick(tick) {\n        const before = this._events.get(tick, \"ticks\");\n        const after = this._events.getAfter(tick, \"ticks\");\n        if (before && before.ticks === tick) {\n            return before.time;\n        }\n        else if (before &&\n            after &&\n            after.type === \"linearRampToValueAtTime\" &&\n            before.value !== after.value) {\n            const val0 = this._fromType(this.getValueAtTime(before.time));\n            const val1 = this._fromType(this.getValueAtTime(after.time));\n            const delta = (val1 - val0) / (after.time - before.time);\n            const k = Math.sqrt(Math.pow(val0, 2) - 2 * delta * (before.ticks - tick));\n            const sol1 = (-val0 + k) / delta;\n            const sol2 = (-val0 - k) / delta;\n            return (sol1 > 0 ? sol1 : sol2) + before.time;\n        }\n        else if (before) {\n            if (before.value === 0) {\n                return Infinity;\n            }\n            else {\n                return before.time + (tick - before.ticks) / before.value;\n            }\n        }\n        else {\n            return tick / this._initialValue;\n        }\n    }\n    /**\n     * Convert some number of ticks their the duration in seconds accounting\n     * for any automation curves starting at the given time.\n     * @param  ticks The number of ticks to convert to seconds.\n     * @param  when  When along the automation timeline to convert the ticks.\n     * @return The duration in seconds of the ticks.\n     */\n    ticksToTime(ticks, when) {\n        return this.getDurationOfTicks(ticks, when);\n    }\n    /**\n     * The inverse of {@link ticksToTime}. Convert a duration in\n     * seconds to the corresponding number of ticks accounting for any\n     * automation curves starting at the given time.\n     * @param  duration The time interval to convert to ticks.\n     * @param  when When along the automation timeline to convert the ticks.\n     * @return The duration in ticks.\n     */\n    timeToTicks(duration, when) {\n        const computedTime = this.toSeconds(when);\n        const computedDuration = this.toSeconds(duration);\n        const startTicks = this.getTicksAtTime(computedTime);\n        const endTicks = this.getTicksAtTime(computedTime + computedDuration);\n        return endTicks - startTicks;\n    }\n    /**\n     * Convert from the type when the unit value is BPM\n     */\n    _fromType(val) {\n        if (this.units === \"bpm\" && this.multiplier) {\n            return 1 / (60 / val / this.multiplier);\n        }\n        else {\n            return super._fromType(val);\n        }\n    }\n    /**\n     * Special case of type conversion where the units === \"bpm\"\n     */\n    _toType(val) {\n        if (this.units === \"bpm\" && this.multiplier) {\n            return ((val / this.multiplier) * 60);\n        }\n        else {\n            return super._toType(val);\n        }\n    }\n    /**\n     * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n     */\n    get multiplier() {\n        return this._multiplier;\n    }\n    set multiplier(m) {\n        // get and reset the current value with the new multiplier\n        // might be necessary to clear all the previous values\n        const currentVal = this.value;\n        this._multiplier = m;\n        this.cancelScheduledValues(0);\n        this.setValueAtTime(currentVal, 0);\n    }\n}\n//# sourceMappingURL=TickParam.js.map","import { Signal } from \"../../signal/Signal.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { TickParam } from \"./TickParam.js\";\n/**\n * TickSignal extends Tone.Signal, but adds the capability\n * to calculate the number of elapsed ticks. exponential and target curves\n * are approximated with multiple linear ramps.\n *\n * Thank you Bruno Dias, H. Sofia Pinto, and David M. Matos,\n * for your [WAC paper](https://smartech.gatech.edu/bitstream/handle/1853/54588/WAC2016-49.pdf)\n * describing integrating timing functions for tempo calculations.\n */\nexport class TickSignal extends Signal {\n    constructor() {\n        const options = optionsFromArguments(TickSignal.getDefaults(), arguments, [\"value\"]);\n        super(options);\n        this.name = \"TickSignal\";\n        this.input = this._param = new TickParam({\n            context: this.context,\n            convert: options.convert,\n            multiplier: options.multiplier,\n            param: this._constantSource.offset,\n            units: options.units,\n            value: options.value,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            multiplier: 1,\n            units: \"hertz\",\n            value: 1,\n        });\n    }\n    ticksToTime(ticks, when) {\n        return this._param.ticksToTime(ticks, when);\n    }\n    timeToTicks(duration, when) {\n        return this._param.timeToTicks(duration, when);\n    }\n    getTimeOfTick(tick) {\n        return this._param.getTimeOfTick(tick);\n    }\n    getDurationOfTicks(ticks, time) {\n        return this._param.getDurationOfTicks(ticks, time);\n    }\n    getTicksAtTime(time) {\n        return this._param.getTicksAtTime(time);\n    }\n    /**\n     * A multiplier on the bpm value. Useful for setting a PPQ relative to the base frequency value.\n     */\n    get multiplier() {\n        return this._param.multiplier;\n    }\n    set multiplier(m) {\n        this._param.multiplier = m;\n    }\n    dispose() {\n        super.dispose();\n        this._param.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=TickSignal.js.map","import { ToneWithContext, } from \"../context/ToneWithContext.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { readOnly } from \"../util/Interface.js\";\nimport { StateTimeline, } from \"../util/StateTimeline.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isDefined } from \"../util/TypeCheck.js\";\nimport { TickSignal } from \"./TickSignal.js\";\nimport { EQ } from \"../util/Math.js\";\n/**\n * Uses [TickSignal](TickSignal) to track elapsed ticks with complex automation curves.\n */\nexport class TickSource extends ToneWithContext {\n    constructor() {\n        const options = optionsFromArguments(TickSource.getDefaults(), arguments, [\"frequency\"]);\n        super(options);\n        this.name = \"TickSource\";\n        /**\n         * The state timeline\n         */\n        this._state = new StateTimeline();\n        /**\n         * The offset values of the ticks\n         */\n        this._tickOffset = new Timeline();\n        /**\n         * Memoized values of getTicksAtTime at events with state other than \"started\"\n         */\n        this._ticksAtTime = new Timeline();\n        /**\n         * Memoized values of getSecondsAtTime at events with state other than \"started\"\n         */\n        this._secondsAtTime = new Timeline();\n        this.frequency = new TickSignal({\n            context: this.context,\n            units: options.units,\n            value: options.frequency,\n        });\n        readOnly(this, \"frequency\");\n        // set the initial state\n        this._state.setStateAtTime(\"stopped\", 0);\n        // add the first event\n        this.setTicksAtTime(0, 0);\n    }\n    static getDefaults() {\n        return Object.assign({\n            frequency: 1,\n            units: \"hertz\",\n        }, ToneWithContext.getDefaults());\n    }\n    /**\n     * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n     */\n    get state() {\n        return this.getStateAtTime(this.now());\n    }\n    /**\n     * Start the clock at the given time. Optionally pass in an offset\n     * of where to start the tick counter from.\n     * @param  time    The time the clock should start\n     * @param offset The number of ticks to start the source at\n     */\n    start(time, offset) {\n        const computedTime = this.toSeconds(time);\n        if (this._state.getValueAtTime(computedTime) !== \"started\") {\n            this._state.setStateAtTime(\"started\", computedTime);\n            if (isDefined(offset)) {\n                this.setTicksAtTime(offset, computedTime);\n            }\n            this._ticksAtTime.cancel(computedTime);\n            this._secondsAtTime.cancel(computedTime);\n        }\n        return this;\n    }\n    /**\n     * Stop the clock. Stopping the clock resets the tick counter to 0.\n     * @param time The time when the clock should stop.\n     */\n    stop(time) {\n        const computedTime = this.toSeconds(time);\n        // cancel the previous stop\n        if (this._state.getValueAtTime(computedTime) === \"stopped\") {\n            const event = this._state.get(computedTime);\n            if (event && event.time > 0) {\n                this._tickOffset.cancel(event.time);\n                this._state.cancel(event.time);\n            }\n        }\n        this._state.cancel(computedTime);\n        this._state.setStateAtTime(\"stopped\", computedTime);\n        this.setTicksAtTime(0, computedTime);\n        this._ticksAtTime.cancel(computedTime);\n        this._secondsAtTime.cancel(computedTime);\n        return this;\n    }\n    /**\n     * Pause the clock. Pausing does not reset the tick counter.\n     * @param time The time when the clock should stop.\n     */\n    pause(time) {\n        const computedTime = this.toSeconds(time);\n        if (this._state.getValueAtTime(computedTime) === \"started\") {\n            this._state.setStateAtTime(\"paused\", computedTime);\n            this._ticksAtTime.cancel(computedTime);\n            this._secondsAtTime.cancel(computedTime);\n        }\n        return this;\n    }\n    /**\n     * Cancel start/stop/pause and setTickAtTime events scheduled after the given time.\n     * @param time When to clear the events after\n     */\n    cancel(time) {\n        time = this.toSeconds(time);\n        this._state.cancel(time);\n        this._tickOffset.cancel(time);\n        this._ticksAtTime.cancel(time);\n        this._secondsAtTime.cancel(time);\n        return this;\n    }\n    /**\n     * Get the elapsed ticks at the given time\n     * @param  time  When to get the tick value\n     * @return The number of ticks\n     */\n    getTicksAtTime(time) {\n        const computedTime = this.toSeconds(time);\n        const stopEvent = this._state.getLastState(\"stopped\", computedTime);\n        // get previously memoized ticks if available\n        const memoizedEvent = this._ticksAtTime.get(computedTime);\n        // this event allows forEachBetween to iterate until the current time\n        const tmpEvent = {\n            state: \"paused\",\n            time: computedTime,\n        };\n        this._state.add(tmpEvent);\n        // keep track of the previous offset event\n        let lastState = memoizedEvent ? memoizedEvent : stopEvent;\n        let elapsedTicks = memoizedEvent ? memoizedEvent.ticks : 0;\n        let eventToMemoize = null;\n        // iterate through all the events since the last stop\n        this._state.forEachBetween(lastState.time, computedTime + this.sampleTime, (e) => {\n            let periodStartTime = lastState.time;\n            // if there is an offset event in this period use that\n            const offsetEvent = this._tickOffset.get(e.time);\n            if (offsetEvent && offsetEvent.time >= lastState.time) {\n                elapsedTicks = offsetEvent.ticks;\n                periodStartTime = offsetEvent.time;\n            }\n            if (lastState.state === \"started\" && e.state !== \"started\") {\n                elapsedTicks +=\n                    this.frequency.getTicksAtTime(e.time) -\n                        this.frequency.getTicksAtTime(periodStartTime);\n                // do not memoize the temporary event\n                if (e.time !== tmpEvent.time) {\n                    eventToMemoize = {\n                        state: e.state,\n                        time: e.time,\n                        ticks: elapsedTicks,\n                    };\n                }\n            }\n            lastState = e;\n        });\n        // remove the temporary event\n        this._state.remove(tmpEvent);\n        // memoize the ticks at the most recent event with state other than \"started\"\n        if (eventToMemoize) {\n            this._ticksAtTime.add(eventToMemoize);\n        }\n        // return the ticks\n        return elapsedTicks;\n    }\n    /**\n     * The number of times the callback was invoked. Starts counting at 0\n     * and increments after the callback was invoked. Returns -1 when stopped.\n     */\n    get ticks() {\n        return this.getTicksAtTime(this.now());\n    }\n    set ticks(t) {\n        this.setTicksAtTime(t, this.now());\n    }\n    /**\n     * The time since ticks=0 that the TickSource has been running. Accounts\n     * for tempo curves\n     */\n    get seconds() {\n        return this.getSecondsAtTime(this.now());\n    }\n    set seconds(s) {\n        const now = this.now();\n        const ticks = this.frequency.timeToTicks(s, now);\n        this.setTicksAtTime(ticks, now);\n    }\n    /**\n     * Return the elapsed seconds at the given time.\n     * @param  time  When to get the elapsed seconds\n     * @return  The number of elapsed seconds\n     */\n    getSecondsAtTime(time) {\n        time = this.toSeconds(time);\n        const stopEvent = this._state.getLastState(\"stopped\", time);\n        // this event allows forEachBetween to iterate until the current time\n        const tmpEvent = { state: \"paused\", time };\n        this._state.add(tmpEvent);\n        // get previously memoized seconds if available\n        const memoizedEvent = this._secondsAtTime.get(time);\n        // keep track of the previous offset event\n        let lastState = memoizedEvent ? memoizedEvent : stopEvent;\n        let elapsedSeconds = memoizedEvent ? memoizedEvent.seconds : 0;\n        let eventToMemoize = null;\n        // iterate through all the events since the last stop\n        this._state.forEachBetween(lastState.time, time + this.sampleTime, (e) => {\n            let periodStartTime = lastState.time;\n            // if there is an offset event in this period use that\n            const offsetEvent = this._tickOffset.get(e.time);\n            if (offsetEvent && offsetEvent.time >= lastState.time) {\n                elapsedSeconds = offsetEvent.seconds;\n                periodStartTime = offsetEvent.time;\n            }\n            if (lastState.state === \"started\" && e.state !== \"started\") {\n                elapsedSeconds += e.time - periodStartTime;\n                // do not memoize the temporary event\n                if (e.time !== tmpEvent.time) {\n                    eventToMemoize = {\n                        state: e.state,\n                        time: e.time,\n                        seconds: elapsedSeconds,\n                    };\n                }\n            }\n            lastState = e;\n        });\n        // remove the temporary event\n        this._state.remove(tmpEvent);\n        // memoize the seconds at the most recent event with state other than \"started\"\n        if (eventToMemoize) {\n            this._secondsAtTime.add(eventToMemoize);\n        }\n        // return the seconds\n        return elapsedSeconds;\n    }\n    /**\n     * Set the clock's ticks at the given time.\n     * @param  ticks The tick value to set\n     * @param  time  When to set the tick value\n     */\n    setTicksAtTime(ticks, time) {\n        time = this.toSeconds(time);\n        this._tickOffset.cancel(time);\n        this._tickOffset.add({\n            seconds: this.frequency.getDurationOfTicks(ticks, time),\n            ticks,\n            time,\n        });\n        this._ticksAtTime.cancel(time);\n        this._secondsAtTime.cancel(time);\n        return this;\n    }\n    /**\n     * Returns the scheduled state at the given time.\n     * @param  time  The time to query.\n     */\n    getStateAtTime(time) {\n        time = this.toSeconds(time);\n        return this._state.getValueAtTime(time);\n    }\n    /**\n     * Get the time of the given tick. The second argument\n     * is when to test before. Since ticks can be set (with setTicksAtTime)\n     * there may be multiple times for a given tick value.\n     * @param  tick The tick number.\n     * @param  before When to measure the tick value from.\n     * @return The time of the tick\n     */\n    getTimeOfTick(tick, before = this.now()) {\n        const offset = this._tickOffset.get(before);\n        const event = this._state.get(before);\n        const startTime = Math.max(offset.time, event.time);\n        const absoluteTicks = this.frequency.getTicksAtTime(startTime) + tick - offset.ticks;\n        return this.frequency.getTimeOfTick(absoluteTicks);\n    }\n    /**\n     * Invoke the callback event at all scheduled ticks between the\n     * start time and the end time\n     * @param  startTime  The beginning of the search range\n     * @param  endTime    The end of the search range\n     * @param  callback   The callback to invoke with each tick\n     */\n    forEachTickBetween(startTime, endTime, callback) {\n        // only iterate through the sections where it is \"started\"\n        let lastStateEvent = this._state.get(startTime);\n        this._state.forEachBetween(startTime, endTime, (event) => {\n            if (lastStateEvent &&\n                lastStateEvent.state === \"started\" &&\n                event.state !== \"started\") {\n                this.forEachTickBetween(Math.max(lastStateEvent.time, startTime), event.time - this.sampleTime, callback);\n            }\n            lastStateEvent = event;\n        });\n        let error = null;\n        if (lastStateEvent && lastStateEvent.state === \"started\") {\n            const maxStartTime = Math.max(lastStateEvent.time, startTime);\n            // figure out the difference between the frequency ticks and the\n            const startTicks = this.frequency.getTicksAtTime(maxStartTime);\n            const ticksAtStart = this.frequency.getTicksAtTime(lastStateEvent.time);\n            const diff = startTicks - ticksAtStart;\n            let offset = Math.ceil(diff) - diff;\n            // guard against floating point issues\n            offset = EQ(offset, 1) ? 0 : offset;\n            let nextTickTime = this.frequency.getTimeOfTick(startTicks + offset);\n            while (nextTickTime < endTime) {\n                try {\n                    callback(nextTickTime, Math.round(this.getTicksAtTime(nextTickTime)));\n                }\n                catch (e) {\n                    error = e;\n                    break;\n                }\n                nextTickTime += this.frequency.getDurationOfTicks(1, nextTickTime);\n            }\n        }\n        if (error) {\n            throw error;\n        }\n        return this;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this._state.dispose();\n        this._tickOffset.dispose();\n        this._ticksAtTime.dispose();\n        this._secondsAtTime.dispose();\n        this.frequency.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=TickSource.js.map","import { ToneWithContext, } from \"../context/ToneWithContext.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Emitter } from \"../util/Emitter.js\";\nimport { noOp, readOnly } from \"../util/Interface.js\";\nimport { StateTimeline } from \"../util/StateTimeline.js\";\nimport { TickSource } from \"./TickSource.js\";\nimport { assertContextRunning } from \"../util/Debug.js\";\n/**\n * A sample accurate clock which provides a callback at the given rate.\n * While the callback is not sample-accurate (it is still susceptible to\n * loose JS timing), the time passed in as the argument to the callback\n * is precise. For most applications, it is better to use Tone.Transport\n * instead of the Clock by itself since you can synchronize multiple callbacks.\n * @example\n * // the callback will be invoked approximately once a second\n * // and will print the time exactly once a second apart.\n * const clock = new Tone.Clock(time => {\n * \tconsole.log(time);\n * }, 1);\n * clock.start();\n * @category Core\n */\nexport class Clock extends ToneWithContext {\n    constructor() {\n        const options = optionsFromArguments(Clock.getDefaults(), arguments, [\n            \"callback\",\n            \"frequency\",\n        ]);\n        super(options);\n        this.name = \"Clock\";\n        /**\n         * The callback function to invoke at the scheduled tick.\n         */\n        this.callback = noOp;\n        /**\n         * The last time the loop callback was invoked\n         */\n        this._lastUpdate = 0;\n        /**\n         * Keep track of the playback state\n         */\n        this._state = new StateTimeline(\"stopped\");\n        /**\n         * Context bound reference to the _loop method\n         * This is necessary to remove the event in the end.\n         */\n        this._boundLoop = this._loop.bind(this);\n        this.callback = options.callback;\n        this._tickSource = new TickSource({\n            context: this.context,\n            frequency: options.frequency,\n            units: options.units,\n        });\n        this._lastUpdate = 0;\n        this.frequency = this._tickSource.frequency;\n        readOnly(this, \"frequency\");\n        // add an initial state\n        this._state.setStateAtTime(\"stopped\", 0);\n        // bind a callback to the worker thread\n        this.context.on(\"tick\", this._boundLoop);\n    }\n    static getDefaults() {\n        return Object.assign(ToneWithContext.getDefaults(), {\n            callback: noOp,\n            frequency: 1,\n            units: \"hertz\",\n        });\n    }\n    /**\n     * Returns the playback state of the source, either \"started\", \"stopped\" or \"paused\".\n     */\n    get state() {\n        return this._state.getValueAtTime(this.now());\n    }\n    /**\n     * Start the clock at the given time. Optionally pass in an offset\n     * of where to start the tick counter from.\n     * @param  time    The time the clock should start\n     * @param offset  Where the tick counter starts counting from.\n     */\n    start(time, offset) {\n        // make sure the context is running\n        assertContextRunning(this.context);\n        // start the loop\n        const computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        if (this._state.getValueAtTime(computedTime) !== \"started\") {\n            this._state.setStateAtTime(\"started\", computedTime);\n            this._tickSource.start(computedTime, offset);\n            if (computedTime < this._lastUpdate) {\n                this.emit(\"start\", computedTime, offset);\n            }\n        }\n        return this;\n    }\n    /**\n     * Stop the clock. Stopping the clock resets the tick counter to 0.\n     * @param time The time when the clock should stop.\n     * @example\n     * const clock = new Tone.Clock(time => {\n     * \tconsole.log(time);\n     * }, 1);\n     * clock.start();\n     * // stop the clock after 10 seconds\n     * clock.stop(\"+10\");\n     */\n    stop(time) {\n        const computedTime = this.toSeconds(time);\n        this.log(\"stop\", computedTime);\n        this._state.cancel(computedTime);\n        this._state.setStateAtTime(\"stopped\", computedTime);\n        this._tickSource.stop(computedTime);\n        if (computedTime < this._lastUpdate) {\n            this.emit(\"stop\", computedTime);\n        }\n        return this;\n    }\n    /**\n     * Pause the clock. Pausing does not reset the tick counter.\n     * @param time The time when the clock should stop.\n     */\n    pause(time) {\n        const computedTime = this.toSeconds(time);\n        if (this._state.getValueAtTime(computedTime) === \"started\") {\n            this._state.setStateAtTime(\"paused\", computedTime);\n            this._tickSource.pause(computedTime);\n            if (computedTime < this._lastUpdate) {\n                this.emit(\"pause\", computedTime);\n            }\n        }\n        return this;\n    }\n    /**\n     * The number of times the callback was invoked. Starts counting at 0\n     * and increments after the callback was invoked.\n     */\n    get ticks() {\n        return Math.ceil(this.getTicksAtTime(this.now()));\n    }\n    set ticks(t) {\n        this._tickSource.ticks = t;\n    }\n    /**\n     * The time since ticks=0 that the Clock has been running. Accounts for tempo curves\n     */\n    get seconds() {\n        return this._tickSource.seconds;\n    }\n    set seconds(s) {\n        this._tickSource.seconds = s;\n    }\n    /**\n     * Return the elapsed seconds at the given time.\n     * @param  time  When to get the elapsed seconds\n     * @return  The number of elapsed seconds\n     */\n    getSecondsAtTime(time) {\n        return this._tickSource.getSecondsAtTime(time);\n    }\n    /**\n     * Set the clock's ticks at the given time.\n     * @param  ticks The tick value to set\n     * @param  time  When to set the tick value\n     */\n    setTicksAtTime(ticks, time) {\n        this._tickSource.setTicksAtTime(ticks, time);\n        return this;\n    }\n    /**\n     * Get the time of the given tick. The second argument\n     * is when to test before. Since ticks can be set (with setTicksAtTime)\n     * there may be multiple times for a given tick value.\n     * @param  tick The tick number.\n     * @param  before When to measure the tick value from.\n     * @return The time of the tick\n     */\n    getTimeOfTick(tick, before = this.now()) {\n        return this._tickSource.getTimeOfTick(tick, before);\n    }\n    /**\n     * Get the clock's ticks at the given time.\n     * @param  time  When to get the tick value\n     * @return The tick value at the given time.\n     */\n    getTicksAtTime(time) {\n        return this._tickSource.getTicksAtTime(time);\n    }\n    /**\n     * Get the time of the next tick\n     * @param  offset The tick number.\n     */\n    nextTickTime(offset, when) {\n        const computedTime = this.toSeconds(when);\n        const currentTick = this.getTicksAtTime(computedTime);\n        return this._tickSource.getTimeOfTick(currentTick + offset, computedTime);\n    }\n    /**\n     * The scheduling loop.\n     */\n    _loop() {\n        const startTime = this._lastUpdate;\n        const endTime = this.now();\n        this._lastUpdate = endTime;\n        this.log(\"loop\", startTime, endTime);\n        if (startTime !== endTime) {\n            // the state change events\n            this._state.forEachBetween(startTime, endTime, (e) => {\n                switch (e.state) {\n                    case \"started\":\n                        const offset = this._tickSource.getTicksAtTime(e.time);\n                        this.emit(\"start\", e.time, offset);\n                        break;\n                    case \"stopped\":\n                        if (e.time !== 0) {\n                            this.emit(\"stop\", e.time);\n                        }\n                        break;\n                    case \"paused\":\n                        this.emit(\"pause\", e.time);\n                        break;\n                }\n            });\n            // the tick callbacks\n            this._tickSource.forEachTickBetween(startTime, endTime, (time, ticks) => {\n                this.callback(time, ticks);\n            });\n        }\n    }\n    /**\n     * Returns the scheduled state at the given time.\n     * @param  time  The time to query.\n     * @return  The name of the state input in setStateAtTime.\n     * @example\n     * const clock = new Tone.Clock();\n     * clock.start(\"+0.1\");\n     * clock.getStateAtTime(\"+0.1\"); // returns \"started\"\n     */\n    getStateAtTime(time) {\n        const computedTime = this.toSeconds(time);\n        return this._state.getValueAtTime(computedTime);\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this.context.off(\"tick\", this._boundLoop);\n        this._tickSource.dispose();\n        this._state.dispose();\n        return this;\n    }\n}\nEmitter.mixin(Clock);\n//# sourceMappingURL=Clock.js.map","import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Volume is a simple volume node, useful for creating a volume fader.\n *\n * @example\n * const vol = new Tone.Volume(-12).toDestination();\n * const osc = new Tone.Oscillator().connect(vol).start();\n * @category Component\n */\nexport class Volume extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Volume.getDefaults(), arguments, [\n            \"volume\",\n        ]);\n        super(options);\n        this.name = \"Volume\";\n        this.input = this.output = new Gain({\n            context: this.context,\n            gain: options.volume,\n            units: \"decibels\",\n        });\n        this.volume = this.output.gain;\n        readOnly(this, \"volume\");\n        this._unmutedVolume = options.volume;\n        // set the mute initially\n        this.mute = options.mute;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            volume: 0,\n        });\n    }\n    /**\n     * Mute the output.\n     * @example\n     * const vol = new Tone.Volume(-12).toDestination();\n     * const osc = new Tone.Oscillator().connect(vol).start();\n     * // mute the output\n     * vol.mute = true;\n     */\n    get mute() {\n        return this.volume.value === -Infinity;\n    }\n    set mute(mute) {\n        if (!this.mute && mute) {\n            this._unmutedVolume = this.volume.value;\n            // maybe it should ramp here?\n            this.volume.value = -Infinity;\n        }\n        else if (this.mute && !mute) {\n            this.volume.value = this._unmutedVolume;\n        }\n    }\n    /**\n     * clean up\n     */\n    dispose() {\n        super.dispose();\n        this.input.dispose();\n        this.volume.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Volume.js.map","import { Volume } from \"../../component/channel/Volume.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization.js\";\nimport { Gain } from \"./Gain.js\";\nimport { connectSeries, ToneAudioNode, } from \"./ToneAudioNode.js\";\n/**\n * A single master output which is connected to the\n * AudioDestinationNode (aka your speakers).\n * It provides useful conveniences such as the ability\n * to set the volume and mute the entire application.\n * It also gives you the ability to apply master effects to your application.\n *\n * @example\n * const oscillator = new Tone.Oscillator().start();\n * // the audio will go from the oscillator to the speakers\n * oscillator.connect(Tone.getDestination());\n * // a convenience for connecting to the master output is also provided:\n * oscillator.toDestination();\n * @category Core\n */\nexport class DestinationClass extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(DestinationClass.getDefaults(), arguments);\n        super(options);\n        this.name = \"Destination\";\n        this.input = new Volume({ context: this.context });\n        this.output = new Gain({ context: this.context });\n        /**\n         * The volume of the master output in decibels. -Infinity is silent, and 0 is no change.\n         * @example\n         * const osc = new Tone.Oscillator().toDestination();\n         * osc.start();\n         * // ramp the volume down to silent over 10 seconds\n         * Tone.getDestination().volume.rampTo(-Infinity, 10);\n         */\n        this.volume = this.input.volume;\n        connectSeries(this.input, this.output, this.context.rawContext.destination);\n        this.mute = options.mute;\n        this._internalChannels = [\n            this.input,\n            this.context.rawContext.destination,\n            this.output,\n        ];\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            volume: 0,\n        });\n    }\n    /**\n     * Mute the output.\n     * @example\n     * const oscillator = new Tone.Oscillator().start().toDestination();\n     * setTimeout(() => {\n     * \t// mute the output\n     * \tTone.Destination.mute = true;\n     * }, 1000);\n     */\n    get mute() {\n        return this.input.mute;\n    }\n    set mute(mute) {\n        this.input.mute = mute;\n    }\n    /**\n     * Add a master effects chain. NOTE: this will disconnect any nodes which were previously\n     * chained in the master effects chain.\n     * @param args All arguments will be connected in a row and the Master will be routed through it.\n     * @example\n     * // route all audio through a filter and compressor\n     * const lowpass = new Tone.Filter(800, \"lowpass\");\n     * const compressor = new Tone.Compressor(-18);\n     * Tone.Destination.chain(lowpass, compressor);\n     */\n    chain(...args) {\n        this.input.disconnect();\n        args.unshift(this.input);\n        args.push(this.output);\n        connectSeries(...args);\n        return this;\n    }\n    /**\n     * The maximum number of channels the system can output\n     * @example\n     * console.log(Tone.Destination.maxChannelCount);\n     */\n    get maxChannelCount() {\n        return this.context.rawContext.destination.maxChannelCount;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this.volume.dispose();\n        return this;\n    }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit((context) => {\n    context.destination = new DestinationClass({ context });\n});\nonContextClose((context) => {\n    context.destination.dispose();\n});\n//# sourceMappingURL=Destination.js.map","import { ToneAudioNode } from \"./ToneAudioNode.js\";\nimport { Param } from \"./Param.js\";\nimport { onContextClose, onContextInit } from \"./ContextInitialization.js\";\n/**\n * Tone.Listener is a thin wrapper around the AudioListener. Listener combined\n * with {@link Panner3D} makes up the Web Audio API's 3D panning system. Panner3D allows you\n * to place sounds in 3D and Listener allows you to navigate the 3D sound environment from\n * a first-person perspective. There is only one listener per audio context.\n */\nexport class ListenerClass extends ToneAudioNode {\n    constructor() {\n        super(...arguments);\n        this.name = \"Listener\";\n        this.positionX = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.positionX,\n        });\n        this.positionY = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.positionY,\n        });\n        this.positionZ = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.positionZ,\n        });\n        this.forwardX = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.forwardX,\n        });\n        this.forwardY = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.forwardY,\n        });\n        this.forwardZ = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.forwardZ,\n        });\n        this.upX = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.upX,\n        });\n        this.upY = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.upY,\n        });\n        this.upZ = new Param({\n            context: this.context,\n            param: this.context.rawContext.listener.upZ,\n        });\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            positionX: 0,\n            positionY: 0,\n            positionZ: 0,\n            forwardX: 0,\n            forwardY: 0,\n            forwardZ: -1,\n            upX: 0,\n            upY: 1,\n            upZ: 0,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.positionX.dispose();\n        this.positionY.dispose();\n        this.positionZ.dispose();\n        this.forwardX.dispose();\n        this.forwardY.dispose();\n        this.forwardZ.dispose();\n        this.upX.dispose();\n        this.upY.dispose();\n        this.upZ.dispose();\n        return this;\n    }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit((context) => {\n    context.listener = new ListenerClass({ context });\n});\nonContextClose((context) => {\n    context.listener.dispose();\n});\n//# sourceMappingURL=Listener.js.map","import { Tone } from \"../Tone.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { noOp } from \"../util/Interface.js\";\nimport { isString } from \"../util/TypeCheck.js\";\nimport { ToneAudioBuffer } from \"./ToneAudioBuffer.js\";\nimport { assert } from \"../util/Debug.js\";\n/**\n * A data structure for holding multiple buffers in a Map-like datastructure.\n *\n * @example\n * const pianoSamples = new Tone.ToneAudioBuffers({\n * \tA1: \"https://tonejs.github.io/audio/casio/A1.mp3\",\n * \tA2: \"https://tonejs.github.io/audio/casio/A2.mp3\",\n * }, () => {\n * \tconst player = new Tone.Player().toDestination();\n * \t// play one of the samples when they all load\n * \tplayer.buffer = pianoSamples.get(\"A2\");\n * \tplayer.start();\n * });\n * @example\n * // To pass in additional parameters in the second parameter\n * const buffers = new Tone.ToneAudioBuffers({\n * \t urls: {\n * \t\t A1: \"A1.mp3\",\n * \t\t A2: \"A2.mp3\",\n * \t },\n * \t onload: () => console.log(\"loaded\"),\n * \t baseUrl: \"https://tonejs.github.io/audio/casio/\"\n * });\n * @category Core\n */\nexport class ToneAudioBuffers extends Tone {\n    constructor() {\n        super();\n        this.name = \"ToneAudioBuffers\";\n        /**\n         * All of the buffers\n         */\n        this._buffers = new Map();\n        /**\n         * Keep track of the number of loaded buffers\n         */\n        this._loadingCount = 0;\n        const options = optionsFromArguments(ToneAudioBuffers.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n        this.baseUrl = options.baseUrl;\n        // add each one\n        Object.keys(options.urls).forEach((name) => {\n            this._loadingCount++;\n            const url = options.urls[name];\n            this.add(name, url, this._bufferLoaded.bind(this, options.onload), options.onerror);\n        });\n    }\n    static getDefaults() {\n        return {\n            baseUrl: \"\",\n            onerror: noOp,\n            onload: noOp,\n            urls: {},\n        };\n    }\n    /**\n     * True if the buffers object has a buffer by that name.\n     * @param  name  The key or index of the buffer.\n     */\n    has(name) {\n        return this._buffers.has(name.toString());\n    }\n    /**\n     * Get a buffer by name. If an array was loaded,\n     * then use the array index.\n     * @param  name  The key or index of the buffer.\n     */\n    get(name) {\n        assert(this.has(name), `ToneAudioBuffers has no buffer named: ${name}`);\n        return this._buffers.get(name.toString());\n    }\n    /**\n     * A buffer was loaded. decrement the counter.\n     */\n    _bufferLoaded(callback) {\n        this._loadingCount--;\n        if (this._loadingCount === 0 && callback) {\n            callback();\n        }\n    }\n    /**\n     * If the buffers are loaded or not\n     */\n    get loaded() {\n        return Array.from(this._buffers).every(([_, buffer]) => buffer.loaded);\n    }\n    /**\n     * Add a buffer by name and url to the Buffers\n     * @param  name      A unique name to give the buffer\n     * @param  url  Either the url of the bufer, or a buffer which will be added with the given name.\n     * @param  callback  The callback to invoke when the url is loaded.\n     * @param  onerror  Invoked if the buffer can't be loaded\n     */\n    add(name, url, callback = noOp, onerror = noOp) {\n        if (isString(url)) {\n            // don't include the baseUrl if the url is a base64 encoded sound\n            if (this.baseUrl &&\n                url.trim().substring(0, 11).toLowerCase() === \"data:audio/\") {\n                this.baseUrl = \"\";\n            }\n            this._buffers.set(name.toString(), new ToneAudioBuffer(this.baseUrl + url, callback, onerror));\n        }\n        else {\n            this._buffers.set(name.toString(), new ToneAudioBuffer(url, callback, onerror));\n        }\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._buffers.forEach((buffer) => buffer.dispose());\n        this._buffers.clear();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneAudioBuffers.js.map","import { getContext } from \"../Global.js\";\nimport { TransportTimeClass } from \"./TransportTime.js\";\n/**\n * Ticks is a primitive type for encoding Time values.\n * Ticks can be constructed with or without the `new` keyword. Ticks can be passed\n * into the parameter of any method which takes time as an argument.\n * @example\n * const t = Tone.Ticks(\"4n\"); // a quarter note as ticks\n * @category Unit\n */\nexport class TicksClass extends TransportTimeClass {\n    constructor() {\n        super(...arguments);\n        this.name = \"Ticks\";\n        this.defaultUnits = \"i\";\n    }\n    /**\n     * Get the current time in the given units\n     */\n    _now() {\n        return this.context.transport.ticks;\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n    _beatsToUnits(beats) {\n        return this._getPPQ() * beats;\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n    _secondsToUnits(seconds) {\n        return Math.floor((seconds / (60 / this._getBpm())) * this._getPPQ());\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n    _ticksToUnits(ticks) {\n        return ticks;\n    }\n    /**\n     * Return the time in ticks\n     */\n    toTicks() {\n        return this.valueOf();\n    }\n    /**\n     * Return the time in seconds\n     */\n    toSeconds() {\n        return (this.valueOf() / this._getPPQ()) * (60 / this._getBpm());\n    }\n}\n/**\n * Convert a time representation to ticks\n * @category Unit\n */\nexport function Ticks(value, units) {\n    return new TicksClass(getContext(), value, units);\n}\n//# sourceMappingURL=Ticks.js.map","import { ToneWithContext, } from \"../context/ToneWithContext.js\";\nimport { Timeline } from \"./Timeline.js\";\nimport { onContextClose, onContextInit, } from \"../context/ContextInitialization.js\";\n/**\n * Draw is useful for synchronizing visuals and audio events.\n * Callbacks from Tone.Transport or any of the Tone.Event classes\n * always happen _before_ the scheduled time and are not synchronized\n * to the animation frame so they are not good for triggering tightly\n * synchronized visuals and sound. Draw makes it easy to schedule\n * callbacks using the AudioContext time and uses requestAnimationFrame.\n * @example\n * Tone.Transport.schedule((time) => {\n * \t// use the time argument to schedule a callback with Draw\n * \tTone.Draw.schedule(() => {\n * \t\t// do drawing or DOM manipulation here\n * \t\tconsole.log(time);\n * \t}, time);\n * }, \"+0.5\");\n * Tone.Transport.start();\n * @category Core\n */\nexport class DrawClass extends ToneWithContext {\n    constructor() {\n        super(...arguments);\n        this.name = \"Draw\";\n        /**\n         * The duration after which events are not invoked.\n         */\n        this.expiration = 0.25;\n        /**\n         * The amount of time before the scheduled time\n         * that the callback can be invoked. Default is\n         * half the time of an animation frame (0.008 seconds).\n         */\n        this.anticipation = 0.008;\n        /**\n         * All of the events.\n         */\n        this._events = new Timeline();\n        /**\n         * The draw loop\n         */\n        this._boundDrawLoop = this._drawLoop.bind(this);\n        /**\n         * The animation frame id\n         */\n        this._animationFrame = -1;\n    }\n    /**\n     * Schedule a function at the given time to be invoked\n     * on the nearest animation frame.\n     * @param  callback  Callback is invoked at the given time.\n     * @param  time      The time relative to the AudioContext time to invoke the callback.\n     * @example\n     * Tone.Transport.scheduleRepeat(time => {\n     * \tTone.Draw.schedule(() => console.log(time), time);\n     * }, 1);\n     * Tone.Transport.start();\n     */\n    schedule(callback, time) {\n        this._events.add({\n            callback,\n            time: this.toSeconds(time),\n        });\n        // start the draw loop on the first event\n        if (this._events.length === 1) {\n            this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n        }\n        return this;\n    }\n    /**\n     * Cancel events scheduled after the given time\n     * @param  after  Time after which scheduled events will be removed from the scheduling timeline.\n     */\n    cancel(after) {\n        this._events.cancel(this.toSeconds(after));\n        return this;\n    }\n    /**\n     * The draw loop\n     */\n    _drawLoop() {\n        const now = this.context.currentTime;\n        this._events.forEachBefore(now + this.anticipation, (event) => {\n            if (now - event.time <= this.expiration) {\n                event.callback();\n            }\n            this._events.remove(event);\n        });\n        if (this._events.length > 0) {\n            this._animationFrame = requestAnimationFrame(this._boundDrawLoop);\n        }\n    }\n    dispose() {\n        super.dispose();\n        this._events.dispose();\n        cancelAnimationFrame(this._animationFrame);\n        return this;\n    }\n}\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit((context) => {\n    context.draw = new DrawClass({ context });\n});\nonContextClose((context) => {\n    context.draw.dispose();\n});\n//# sourceMappingURL=Draw.js.map","import { Tone } from \"../Tone.js\";\nimport { isDefined } from \"./TypeCheck.js\";\nimport { assert } from \"./Debug.js\";\n/**\n * Similar to Tone.Timeline, but all events represent\n * intervals with both \"time\" and \"duration\" times. The\n * events are placed in a tree structure optimized\n * for querying an intersection point with the timeline\n * events. Internally uses an [Interval Tree](https://en.wikipedia.org/wiki/Interval_tree)\n * to represent the data.\n * @internal\n */\nexport class IntervalTimeline extends Tone {\n    constructor() {\n        super(...arguments);\n        this.name = \"IntervalTimeline\";\n        /**\n         * The root node of the inteval tree\n         */\n        this._root = null;\n        /**\n         * Keep track of the length of the timeline.\n         */\n        this._length = 0;\n    }\n    /**\n     * The event to add to the timeline. All events must\n     * have a time and duration value\n     * @param  event  The event to add to the timeline\n     */\n    add(event) {\n        assert(isDefined(event.time), \"Events must have a time property\");\n        assert(isDefined(event.duration), \"Events must have a duration parameter\");\n        event.time = event.time.valueOf();\n        let node = new IntervalNode(event.time, event.time + event.duration, event);\n        if (this._root === null) {\n            this._root = node;\n        }\n        else {\n            this._root.insert(node);\n        }\n        this._length++;\n        // Restructure tree to be balanced\n        while (node !== null) {\n            node.updateHeight();\n            node.updateMax();\n            this._rebalance(node);\n            node = node.parent;\n        }\n        return this;\n    }\n    /**\n     * Remove an event from the timeline.\n     * @param  event  The event to remove from the timeline\n     */\n    remove(event) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.search(event.time, results);\n            for (const node of results) {\n                if (node.event === event) {\n                    this._removeNode(node);\n                    this._length--;\n                    break;\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * The number of items in the timeline.\n     * @readOnly\n     */\n    get length() {\n        return this._length;\n    }\n    /**\n     * Remove events whose time time is after the given time\n     * @param  after  The time to query.\n     */\n    cancel(after) {\n        this.forEachFrom(after, (event) => this.remove(event));\n        return this;\n    }\n    /**\n     * Set the root node as the given node\n     */\n    _setRoot(node) {\n        this._root = node;\n        if (this._root !== null) {\n            this._root.parent = null;\n        }\n    }\n    /**\n     * Replace the references to the node in the node's parent\n     * with the replacement node.\n     */\n    _replaceNodeInParent(node, replacement) {\n        if (node.parent !== null) {\n            if (node.isLeftChild()) {\n                node.parent.left = replacement;\n            }\n            else {\n                node.parent.right = replacement;\n            }\n            this._rebalance(node.parent);\n        }\n        else {\n            this._setRoot(replacement);\n        }\n    }\n    /**\n     * Remove the node from the tree and replace it with\n     * a successor which follows the schema.\n     */\n    _removeNode(node) {\n        if (node.left === null && node.right === null) {\n            this._replaceNodeInParent(node, null);\n        }\n        else if (node.right === null) {\n            this._replaceNodeInParent(node, node.left);\n        }\n        else if (node.left === null) {\n            this._replaceNodeInParent(node, node.right);\n        }\n        else {\n            const balance = node.getBalance();\n            let replacement;\n            let temp = null;\n            if (balance > 0) {\n                if (node.left.right === null) {\n                    replacement = node.left;\n                    replacement.right = node.right;\n                    temp = replacement;\n                }\n                else {\n                    replacement = node.left.right;\n                    while (replacement.right !== null) {\n                        replacement = replacement.right;\n                    }\n                    if (replacement.parent) {\n                        replacement.parent.right = replacement.left;\n                        temp = replacement.parent;\n                        replacement.left = node.left;\n                        replacement.right = node.right;\n                    }\n                }\n            }\n            else if (node.right.left === null) {\n                replacement = node.right;\n                replacement.left = node.left;\n                temp = replacement;\n            }\n            else {\n                replacement = node.right.left;\n                while (replacement.left !== null) {\n                    replacement = replacement.left;\n                }\n                if (replacement.parent) {\n                    replacement.parent.left = replacement.right;\n                    temp = replacement.parent;\n                    replacement.left = node.left;\n                    replacement.right = node.right;\n                }\n            }\n            if (node.parent !== null) {\n                if (node.isLeftChild()) {\n                    node.parent.left = replacement;\n                }\n                else {\n                    node.parent.right = replacement;\n                }\n            }\n            else {\n                this._setRoot(replacement);\n            }\n            if (temp) {\n                this._rebalance(temp);\n            }\n        }\n        node.dispose();\n    }\n    /**\n     * Rotate the tree to the left\n     */\n    _rotateLeft(node) {\n        const parent = node.parent;\n        const isLeftChild = node.isLeftChild();\n        // Make node.right the new root of this sub tree (instead of node)\n        const pivotNode = node.right;\n        if (pivotNode) {\n            node.right = pivotNode.left;\n            pivotNode.left = node;\n        }\n        if (parent !== null) {\n            if (isLeftChild) {\n                parent.left = pivotNode;\n            }\n            else {\n                parent.right = pivotNode;\n            }\n        }\n        else {\n            this._setRoot(pivotNode);\n        }\n    }\n    /**\n     * Rotate the tree to the right\n     */\n    _rotateRight(node) {\n        const parent = node.parent;\n        const isLeftChild = node.isLeftChild();\n        // Make node.left the new root of this sub tree (instead of node)\n        const pivotNode = node.left;\n        if (pivotNode) {\n            node.left = pivotNode.right;\n            pivotNode.right = node;\n        }\n        if (parent !== null) {\n            if (isLeftChild) {\n                parent.left = pivotNode;\n            }\n            else {\n                parent.right = pivotNode;\n            }\n        }\n        else {\n            this._setRoot(pivotNode);\n        }\n    }\n    /**\n     * Balance the BST\n     */\n    _rebalance(node) {\n        const balance = node.getBalance();\n        if (balance > 1 && node.left) {\n            if (node.left.getBalance() < 0) {\n                this._rotateLeft(node.left);\n            }\n            else {\n                this._rotateRight(node);\n            }\n        }\n        else if (balance < -1 && node.right) {\n            if (node.right.getBalance() > 0) {\n                this._rotateRight(node.right);\n            }\n            else {\n                this._rotateLeft(node);\n            }\n        }\n    }\n    /**\n     * Get an event whose time and duration span the give time. Will\n     * return the match whose \"time\" value is closest to the given time.\n     * @return  The event which spans the desired time\n     */\n    get(time) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.search(time, results);\n            if (results.length > 0) {\n                let max = results[0];\n                for (let i = 1; i < results.length; i++) {\n                    if (results[i].low > max.low) {\n                        max = results[i];\n                    }\n                }\n                return max.event;\n            }\n        }\n        return null;\n    }\n    /**\n     * Iterate over everything in the timeline.\n     * @param  callback The callback to invoke with every item\n     */\n    forEach(callback) {\n        if (this._root !== null) {\n            const allNodes = [];\n            this._root.traverse((node) => allNodes.push(node));\n            allNodes.forEach((node) => {\n                if (node.event) {\n                    callback(node.event);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array in which the given time\n     * overlaps with the time and duration time of the event.\n     * @param  time The time to check if items are overlapping\n     * @param  callback The callback to invoke with every item\n     */\n    forEachAtTime(time, callback) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.search(time, results);\n            results.forEach((node) => {\n                if (node.event) {\n                    callback(node.event);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * Iterate over everything in the array in which the time is greater\n     * than or equal to the given time.\n     * @param  time The time to check if items are before\n     * @param  callback The callback to invoke with every item\n     */\n    forEachFrom(time, callback) {\n        if (this._root !== null) {\n            const results = [];\n            this._root.searchAfter(time, results);\n            results.forEach((node) => {\n                if (node.event) {\n                    callback(node.event);\n                }\n            });\n        }\n        return this;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        if (this._root !== null) {\n            this._root.traverse((node) => node.dispose());\n        }\n        this._root = null;\n        return this;\n    }\n}\n//-------------------------------------\n// \tINTERVAL NODE HELPER\n//-------------------------------------\n/**\n * Represents a node in the binary search tree, with the addition\n * of a \"high\" value which keeps track of the highest value of\n * its children.\n * References:\n * https://brooknovak.wordpress.com/2013/12/07/augmented-interval-tree-in-c/\n * http://www.mif.vu.lt/~valdas/ALGORITMAI/LITERATURA/Cormen/Cormen.pdf\n * @param low\n * @param high\n */\nclass IntervalNode {\n    constructor(low, high, event) {\n        // the nodes to the left\n        this._left = null;\n        // the nodes to the right\n        this._right = null;\n        // the parent node\n        this.parent = null;\n        // the number of child nodes\n        this.height = 0;\n        this.event = event;\n        // the low value\n        this.low = low;\n        // the high value\n        this.high = high;\n        // the high value for this and all child nodes\n        this.max = this.high;\n    }\n    /**\n     * Insert a node into the correct spot in the tree\n     */\n    insert(node) {\n        if (node.low <= this.low) {\n            if (this.left === null) {\n                this.left = node;\n            }\n            else {\n                this.left.insert(node);\n            }\n        }\n        else if (this.right === null) {\n            this.right = node;\n        }\n        else {\n            this.right.insert(node);\n        }\n    }\n    /**\n     * Search the tree for nodes which overlap\n     * with the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n    search(point, results) {\n        // If p is to the right of the rightmost point of any interval\n        // in this node and all children, there won't be any matches.\n        if (point > this.max) {\n            return;\n        }\n        // Search left children\n        if (this.left !== null) {\n            this.left.search(point, results);\n        }\n        // Check this node\n        if (this.low <= point && this.high > point) {\n            results.push(this);\n        }\n        // If p is to the left of the time of this interval,\n        // then it can't be in any child to the right.\n        if (this.low > point) {\n            return;\n        }\n        // Search right children\n        if (this.right !== null) {\n            this.right.search(point, results);\n        }\n    }\n    /**\n     * Search the tree for nodes which are less\n     * than the given point\n     * @param  point  The point to query\n     * @param  results  The array to put the results\n     */\n    searchAfter(point, results) {\n        // Check this node\n        if (this.low >= point) {\n            results.push(this);\n            if (this.left !== null) {\n                this.left.searchAfter(point, results);\n            }\n        }\n        // search the right side\n        if (this.right !== null) {\n            this.right.searchAfter(point, results);\n        }\n    }\n    /**\n     * Invoke the callback on this element and both it's branches\n     * @param  {Function}  callback\n     */\n    traverse(callback) {\n        callback(this);\n        if (this.left !== null) {\n            this.left.traverse(callback);\n        }\n        if (this.right !== null) {\n            this.right.traverse(callback);\n        }\n    }\n    /**\n     * Update the height of the node\n     */\n    updateHeight() {\n        if (this.left !== null && this.right !== null) {\n            this.height = Math.max(this.left.height, this.right.height) + 1;\n        }\n        else if (this.right !== null) {\n            this.height = this.right.height + 1;\n        }\n        else if (this.left !== null) {\n            this.height = this.left.height + 1;\n        }\n        else {\n            this.height = 0;\n        }\n    }\n    /**\n     * Update the height of the node\n     */\n    updateMax() {\n        this.max = this.high;\n        if (this.left !== null) {\n            this.max = Math.max(this.max, this.left.max);\n        }\n        if (this.right !== null) {\n            this.max = Math.max(this.max, this.right.max);\n        }\n    }\n    /**\n     * The balance is how the leafs are distributed on the node\n     * @return  Negative numbers are balanced to the right\n     */\n    getBalance() {\n        let balance = 0;\n        if (this.left !== null && this.right !== null) {\n            balance = this.left.height - this.right.height;\n        }\n        else if (this.left !== null) {\n            balance = this.left.height + 1;\n        }\n        else if (this.right !== null) {\n            balance = -(this.right.height + 1);\n        }\n        return balance;\n    }\n    /**\n     * @returns true if this node is the left child of its parent\n     */\n    isLeftChild() {\n        return this.parent !== null && this.parent.left === this;\n    }\n    /**\n     * get/set the left node\n     */\n    get left() {\n        return this._left;\n    }\n    set left(node) {\n        this._left = node;\n        if (node !== null) {\n            node.parent = this;\n        }\n        this.updateHeight();\n        this.updateMax();\n    }\n    /**\n     * get/set the right node\n     */\n    get right() {\n        return this._right;\n    }\n    set right(node) {\n        this._right = node;\n        if (node !== null) {\n            node.parent = this;\n        }\n        this.updateHeight();\n        this.updateMax();\n    }\n    /**\n     * null out references.\n     */\n    dispose() {\n        this.parent = null;\n        this._left = null;\n        this._right = null;\n        this.event = null;\n    }\n}\n//# sourceMappingURL=IntervalTimeline.js.map","import { Timeline } from \"./Timeline.js\";\nimport { Tone } from \"../Tone.js\";\n/**\n * Represents a single value which is gettable and settable in a timed way\n */\nexport class TimelineValue extends Tone {\n    /**\n     * @param initialValue The value to return if there is no scheduled values\n     */\n    constructor(initialValue) {\n        super();\n        this.name = \"TimelineValue\";\n        /**\n         * The timeline which stores the values\n         */\n        this._timeline = new Timeline({\n            memory: 10,\n        });\n        this._initialValue = initialValue;\n    }\n    /**\n     * Set the value at the given time\n     */\n    set(value, time) {\n        this._timeline.add({\n            value,\n            time,\n        });\n        return this;\n    }\n    /**\n     * Get the value at the given time\n     */\n    get(time) {\n        const event = this._timeline.get(time);\n        if (event) {\n            return event.value;\n        }\n        else {\n            return this._initialValue;\n        }\n    }\n}\n//# sourceMappingURL=TimelineValue.js.map","import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode.js\";\nimport { connectSignal } from \"./Signal.js\";\n/**\n * A signal operator has an input and output and modifies the signal.\n */\nexport class SignalOperator extends ToneAudioNode {\n    constructor() {\n        super(optionsFromArguments(SignalOperator.getDefaults(), arguments, [\n            \"context\",\n        ]));\n    }\n    connect(destination, outputNum = 0, inputNum = 0) {\n        connectSignal(this, destination, outputNum, inputNum);\n        return this;\n    }\n}\n//# sourceMappingURL=SignalOperator.js.map","import { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { isArray, isFunction } from \"../core/util/TypeCheck.js\";\nimport { assert } from \"../core/util/Debug.js\";\nimport { Signal } from \"./Signal.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Wraps the native Web Audio API\n * [WaveShaperNode](http://webaudio.github.io/web-audio-api/#the-waveshapernode-interface).\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination().start();\n * // multiply the output of the signal by 2 using the waveshaper's function\n * const timesTwo = new Tone.WaveShaper((val) => val * 2, 2048).connect(osc.frequency);\n * const signal = new Tone.Signal(440).connect(timesTwo);\n * @category Signal\n */\nexport class WaveShaper extends SignalOperator {\n    constructor() {\n        const options = optionsFromArguments(WaveShaper.getDefaults(), arguments, [\"mapping\", \"length\"]);\n        super(options);\n        this.name = \"WaveShaper\";\n        /**\n         * the waveshaper node\n         */\n        this._shaper = this.context.createWaveShaper();\n        /**\n         * The input to the waveshaper node.\n         */\n        this.input = this._shaper;\n        /**\n         * The output from the waveshaper node\n         */\n        this.output = this._shaper;\n        if (isArray(options.mapping) ||\n            options.mapping instanceof Float32Array) {\n            this.curve = Float32Array.from(options.mapping);\n        }\n        else if (isFunction(options.mapping)) {\n            this.setMap(options.mapping, options.length);\n        }\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            length: 1024,\n        });\n    }\n    /**\n     * Uses a mapping function to set the value of the curve.\n     * @param mapping The function used to define the values.\n     *                The mapping function take two arguments:\n     *                the first is the value at the current position\n     *                which goes from -1 to 1 over the number of elements\n     *                in the curve array. The second argument is the array position.\n     * @example\n     * const shaper = new Tone.WaveShaper();\n     * // map the input signal from [-1, 1] to [0, 10]\n     * shaper.setMap((val, index) => (val + 1) * 5);\n     */\n    setMap(mapping, length = 1024) {\n        const array = new Float32Array(length);\n        for (let i = 0, len = length; i < len; i++) {\n            const normalized = (i / (len - 1)) * 2 - 1;\n            array[i] = mapping(normalized, i);\n        }\n        this.curve = array;\n        return this;\n    }\n    /**\n     * The array to set as the waveshaper curve. For linear curves\n     * array length does not make much difference, but for complex curves\n     * longer arrays will provide smoother interpolation.\n     */\n    get curve() {\n        return this._shaper.curve;\n    }\n    set curve(mapping) {\n        this._shaper.curve = mapping;\n    }\n    /**\n     * Specifies what type of oversampling (if any) should be used when\n     * applying the shaping curve. Can either be \"none\", \"2x\" or \"4x\".\n     */\n    get oversample() {\n        return this._shaper.oversample;\n    }\n    set oversample(oversampling) {\n        const isOverSampleType = [\"none\", \"2x\", \"4x\"].some((str) => str.includes(oversampling));\n        assert(isOverSampleType, \"oversampling must be either 'none', '2x', or '4x'\");\n        this._shaper.oversample = oversampling;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._shaper.disconnect();\n        return this;\n    }\n}\n//# sourceMappingURL=WaveShaper.js.map","import { WaveShaper } from \"./WaveShaper.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { SignalOperator } from \"./SignalOperator.js\";\n/**\n * Pow applies an exponent to the incoming signal. The incoming signal must be AudioRange [-1, 1]\n *\n * @example\n * const pow = new Tone.Pow(2);\n * const sig = new Tone.Signal(0.5).connect(pow);\n * // output of pow is 0.25.\n * @category Signal\n */\nexport class Pow extends SignalOperator {\n    constructor() {\n        const options = optionsFromArguments(Pow.getDefaults(), arguments, [\n            \"value\",\n        ]);\n        super(options);\n        this.name = \"Pow\";\n        this._exponentScaler =\n            this.input =\n                this.output =\n                    new WaveShaper({\n                        context: this.context,\n                        mapping: this._expFunc(options.value),\n                        length: 8192,\n                    });\n        this._exponent = options.value;\n    }\n    static getDefaults() {\n        return Object.assign(SignalOperator.getDefaults(), {\n            value: 1,\n        });\n    }\n    /**\n     * the function which maps the waveshaper\n     * @param exponent exponent value\n     */\n    _expFunc(exponent) {\n        return (val) => {\n            return Math.pow(Math.abs(val), exponent);\n        };\n    }\n    /**\n     * The value of the exponent.\n     */\n    get value() {\n        return this._exponent;\n    }\n    set value(exponent) {\n        this._exponent = exponent;\n        this._exponentScaler.setMap(this._expFunc(this._exponent));\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._exponentScaler.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Pow.js.map","import { noOp } from \"../util/Interface.js\";\n/**\n * TransportEvent is an internal class used by {@link TransportClass}\n * to schedule events. Do no invoke this class directly, it is\n * handled from within Tone.Transport.\n */\nexport class TransportEvent {\n    /**\n     * @param transport The transport object which the event belongs to\n     */\n    constructor(transport, opts) {\n        /**\n         * The unique id of the event\n         */\n        this.id = TransportEvent._eventId++;\n        /**\n         * The remaining value between the passed in time, and Math.floor(time).\n         * This value is later added back when scheduling to get sub-tick precision.\n         */\n        this._remainderTime = 0;\n        const options = Object.assign(TransportEvent.getDefaults(), opts);\n        this.transport = transport;\n        this.callback = options.callback;\n        this._once = options.once;\n        this.time = Math.floor(options.time);\n        this._remainderTime = options.time - this.time;\n    }\n    static getDefaults() {\n        return {\n            callback: noOp,\n            once: false,\n            time: 0,\n        };\n    }\n    /**\n     * Get the time and remainder time.\n     */\n    get floatTime() {\n        return this.time + this._remainderTime;\n    }\n    /**\n     * Invoke the event callback.\n     * @param  time  The AudioContext time in seconds of the event\n     */\n    invoke(time) {\n        if (this.callback) {\n            const tickDuration = this.transport.bpm.getDurationOfTicks(1, time);\n            this.callback(time + this._remainderTime * tickDuration);\n            if (this._once) {\n                this.transport.clear(this.id);\n            }\n        }\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        this.callback = undefined;\n        return this;\n    }\n}\n/**\n * Current ID counter\n */\nTransportEvent._eventId = 0;\n//# sourceMappingURL=TransportEvent.js.map","import { TicksClass } from \"../type/Ticks.js\";\nimport { TransportEvent } from \"./TransportEvent.js\";\nimport { GT, LT } from \"../util/Math.js\";\n/**\n * TransportRepeatEvent is an internal class used by Tone.Transport\n * to schedule repeat events. This class should not be instantiated directly.\n */\nexport class TransportRepeatEvent extends TransportEvent {\n    /**\n     * @param transport The transport object which the event belongs to\n     */\n    constructor(transport, opts) {\n        super(transport, opts);\n        /**\n         * The ID of the current timeline event\n         */\n        this._currentId = -1;\n        /**\n         * The ID of the next timeline event\n         */\n        this._nextId = -1;\n        /**\n         * The time of the next event\n         */\n        this._nextTick = this.time;\n        /**\n         * a reference to the bound start method\n         */\n        this._boundRestart = this._restart.bind(this);\n        const options = Object.assign(TransportRepeatEvent.getDefaults(), opts);\n        this.duration = options.duration;\n        this._interval = options.interval;\n        this._nextTick = options.time;\n        this.transport.on(\"start\", this._boundRestart);\n        this.transport.on(\"loopStart\", this._boundRestart);\n        this.transport.on(\"ticks\", this._boundRestart);\n        this.context = this.transport.context;\n        this._restart();\n    }\n    static getDefaults() {\n        return Object.assign({}, TransportEvent.getDefaults(), {\n            duration: Infinity,\n            interval: 1,\n            once: false,\n        });\n    }\n    /**\n     * Invoke the callback. Returns the tick time which\n     * the next event should be scheduled at.\n     * @param  time  The AudioContext time in seconds of the event\n     */\n    invoke(time) {\n        // create more events if necessary\n        this._createEvents(time);\n        // call the super class\n        super.invoke(time);\n    }\n    /**\n     * Create an event on the transport on the nextTick\n     */\n    _createEvent() {\n        if (LT(this._nextTick, this.floatTime + this.duration)) {\n            return this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n        }\n        return -1;\n    }\n    /**\n     * Push more events onto the timeline to keep up with the position of the timeline\n     */\n    _createEvents(time) {\n        // schedule the next event\n        // const ticks = this.transport.getTicksAtTime(time);\n        // if the next tick is within the bounds set by \"duration\"\n        if (LT(this._nextTick + this._interval, this.floatTime + this.duration)) {\n            this._nextTick += this._interval;\n            this._currentId = this._nextId;\n            this._nextId = this.transport.scheduleOnce(this.invoke.bind(this), new TicksClass(this.context, this._nextTick).toSeconds());\n        }\n    }\n    /**\n     * Re-compute the events when the transport time has changed from a start/ticks/loopStart event\n     */\n    _restart(time) {\n        this.transport.clear(this._currentId);\n        this.transport.clear(this._nextId);\n        // start at the first event\n        this._nextTick = this.floatTime;\n        const ticks = this.transport.getTicksAtTime(time);\n        if (GT(ticks, this.time)) {\n            // the event is not being scheduled from the beginning and should be offset\n            this._nextTick =\n                this.floatTime +\n                    Math.ceil((ticks - this.floatTime) / this._interval) *\n                        this._interval;\n        }\n        this._currentId = this._createEvent();\n        this._nextTick += this._interval;\n        this._nextId = this._createEvent();\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this.transport.clear(this._currentId);\n        this.transport.clear(this._nextId);\n        this.transport.off(\"start\", this._boundRestart);\n        this.transport.off(\"loopStart\", this._boundRestart);\n        this.transport.off(\"ticks\", this._boundRestart);\n        return this;\n    }\n}\n//# sourceMappingURL=TransportRepeatEvent.js.map","import { TimeClass } from \"../../core/type/Time.js\";\nimport { TimelineValue } from \"../../core/util/TimelineValue.js\";\nimport { Pow } from \"../../signal/Pow.js\";\nimport { onContextClose, onContextInit, } from \"../context/ContextInitialization.js\";\nimport { Gain } from \"../context/Gain.js\";\nimport { ToneWithContext, } from \"../context/ToneWithContext.js\";\nimport { TicksClass } from \"../type/Ticks.js\";\nimport { TransportTimeClass } from \"../type/TransportTime.js\";\nimport { enterScheduledCallback } from \"../util/Debug.js\";\nimport { optionsFromArguments } from \"../util/Defaults.js\";\nimport { Emitter } from \"../util/Emitter.js\";\nimport { readOnly, writable } from \"../util/Interface.js\";\nimport { IntervalTimeline } from \"../util/IntervalTimeline.js\";\nimport { Timeline } from \"../util/Timeline.js\";\nimport { isArray, isDefined } from \"../util/TypeCheck.js\";\nimport { Clock } from \"./Clock.js\";\nimport { TransportEvent } from \"./TransportEvent.js\";\nimport { TransportRepeatEvent } from \"./TransportRepeatEvent.js\";\n/**\n * Transport for timing musical events.\n * Supports tempo curves and time changes. Unlike browser-based timing (setInterval, requestAnimationFrame)\n * Transport timing events pass in the exact time of the scheduled event\n * in the argument of the callback function. Pass that time value to the object\n * you're scheduling. <br><br>\n * A single transport is created for you when the library is initialized.\n * <br><br>\n * The transport emits the events: \"start\", \"stop\", \"pause\", and \"loop\" which are\n * called with the time of that event as the argument.\n *\n * @example\n * const osc = new Tone.Oscillator().toDestination();\n * // repeated event every 8th note\n * Tone.getTransport().scheduleRepeat((time) => {\n * \t// use the callback time to schedule events\n * \tosc.start(time).stop(time + 0.1);\n * }, \"8n\");\n * // transport must be started before it starts invoking events\n * Tone.getTransport().start();\n * @category Core\n */\nexport class TransportClass extends ToneWithContext {\n    constructor() {\n        const options = optionsFromArguments(TransportClass.getDefaults(), arguments);\n        super(options);\n        this.name = \"Transport\";\n        //-------------------------------------\n        // \tLOOPING\n        //-------------------------------------\n        /**\n         * If the transport loops or not.\n         */\n        this._loop = new TimelineValue(false);\n        /**\n         * The loop start position in ticks\n         */\n        this._loopStart = 0;\n        /**\n         * The loop end position in ticks\n         */\n        this._loopEnd = 0;\n        //-------------------------------------\n        // \tTIMELINE EVENTS\n        //-------------------------------------\n        /**\n         * All the events in an object to keep track by ID\n         */\n        this._scheduledEvents = {};\n        /**\n         * The scheduled events.\n         */\n        this._timeline = new Timeline();\n        /**\n         * Repeated events\n         */\n        this._repeatedEvents = new IntervalTimeline();\n        /**\n         * All of the synced Signals\n         */\n        this._syncedSignals = [];\n        /**\n         * The swing amount\n         */\n        this._swingAmount = 0;\n        // CLOCK/TEMPO\n        this._ppq = options.ppq;\n        this._clock = new Clock({\n            callback: this._processTick.bind(this),\n            context: this.context,\n            frequency: 0,\n            units: \"bpm\",\n        });\n        this._bindClockEvents();\n        this.bpm = this._clock.frequency;\n        this._clock.frequency.multiplier = options.ppq;\n        this.bpm.setValueAtTime(options.bpm, 0);\n        readOnly(this, \"bpm\");\n        this._timeSignature = options.timeSignature;\n        // SWING\n        this._swingTicks = options.ppq / 2; // 8n\n    }\n    static getDefaults() {\n        return Object.assign(ToneWithContext.getDefaults(), {\n            bpm: 120,\n            loopEnd: \"4m\",\n            loopStart: 0,\n            ppq: 192,\n            swing: 0,\n            swingSubdivision: \"8n\",\n            timeSignature: 4,\n        });\n    }\n    //-------------------------------------\n    // \tTICKS\n    //-------------------------------------\n    /**\n     * called on every tick\n     * @param  tickTime clock relative tick time\n     */\n    _processTick(tickTime, ticks) {\n        // do the loop test\n        if (this._loop.get(tickTime)) {\n            if (ticks >= this._loopEnd) {\n                this.emit(\"loopEnd\", tickTime);\n                this._clock.setTicksAtTime(this._loopStart, tickTime);\n                ticks = this._loopStart;\n                this.emit(\"loopStart\", tickTime, this._clock.getSecondsAtTime(tickTime));\n                this.emit(\"loop\", tickTime);\n            }\n        }\n        // handle swing\n        if (this._swingAmount > 0 &&\n            ticks % this._ppq !== 0 && // not on a downbeat\n            ticks % (this._swingTicks * 2) !== 0) {\n            // add some swing\n            const progress = (ticks % (this._swingTicks * 2)) / (this._swingTicks * 2);\n            const amount = Math.sin(progress * Math.PI) * this._swingAmount;\n            tickTime +=\n                new TicksClass(this.context, (this._swingTicks * 2) / 3).toSeconds() * amount;\n        }\n        // invoke the timeline events scheduled on this tick\n        enterScheduledCallback(true);\n        this._timeline.forEachAtTime(ticks, (event) => event.invoke(tickTime));\n        enterScheduledCallback(false);\n    }\n    //-------------------------------------\n    // \tSCHEDULABLE EVENTS\n    //-------------------------------------\n    /**\n     * Schedule an event along the timeline.\n     * @param callback The callback to be invoked at the time.\n     * @param time The time to invoke the callback at.\n     * @return The id of the event which can be used for canceling the event.\n     * @example\n     * // schedule an event on the 16th measure\n     * Tone.getTransport().schedule((time) => {\n     * \t// invoked on measure 16\n     * \tconsole.log(\"measure 16!\");\n     * }, \"16:0:0\");\n     */\n    schedule(callback, time) {\n        const event = new TransportEvent(this, {\n            callback,\n            time: new TransportTimeClass(this.context, time).toTicks(),\n        });\n        return this._addEvent(event, this._timeline);\n    }\n    /**\n     * Schedule a repeated event along the timeline. The event will fire\n     * at the `interval` starting at the `startTime` and for the specified\n     * `duration`.\n     * @param  callback   The callback to invoke.\n     * @param  interval   The duration between successive callbacks. Must be a positive number.\n     * @param  startTime  When along the timeline the events should start being invoked.\n     * @param  duration How long the event should repeat.\n     * @return  The ID of the scheduled event. Use this to cancel the event.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination().start();\n     * // a callback invoked every eighth note after the first measure\n     * Tone.getTransport().scheduleRepeat((time) => {\n     * \tosc.start(time).stop(time + 0.1);\n     * }, \"8n\", \"1m\");\n     */\n    scheduleRepeat(callback, interval, startTime, duration = Infinity) {\n        const event = new TransportRepeatEvent(this, {\n            callback,\n            duration: new TimeClass(this.context, duration).toTicks(),\n            interval: new TimeClass(this.context, interval).toTicks(),\n            time: new TransportTimeClass(this.context, startTime).toTicks(),\n        });\n        // kick it off if the Transport is started\n        // @ts-ignore\n        return this._addEvent(event, this._repeatedEvents);\n    }\n    /**\n     * Schedule an event that will be removed after it is invoked.\n     * @param callback The callback to invoke once.\n     * @param time The time the callback should be invoked.\n     * @returns The ID of the scheduled event.\n     */\n    scheduleOnce(callback, time) {\n        const event = new TransportEvent(this, {\n            callback,\n            once: true,\n            time: new TransportTimeClass(this.context, time).toTicks(),\n        });\n        return this._addEvent(event, this._timeline);\n    }\n    /**\n     * Clear the passed in event id from the timeline\n     * @param eventId The id of the event.\n     */\n    clear(eventId) {\n        if (this._scheduledEvents.hasOwnProperty(eventId)) {\n            const item = this._scheduledEvents[eventId.toString()];\n            item.timeline.remove(item.event);\n            item.event.dispose();\n            delete this._scheduledEvents[eventId.toString()];\n        }\n        return this;\n    }\n    /**\n     * Add an event to the correct timeline. Keep track of the\n     * timeline it was added to.\n     * @returns the event id which was just added\n     */\n    _addEvent(event, timeline) {\n        this._scheduledEvents[event.id.toString()] = {\n            event,\n            timeline,\n        };\n        timeline.add(event);\n        return event.id;\n    }\n    /**\n     * Remove scheduled events from the timeline after\n     * the given time. Repeated events will be removed\n     * if their startTime is after the given time\n     * @param after Clear all events after this time.\n     */\n    cancel(after = 0) {\n        const computedAfter = this.toTicks(after);\n        this._timeline.forEachFrom(computedAfter, (event) => this.clear(event.id));\n        this._repeatedEvents.forEachFrom(computedAfter, (event) => this.clear(event.id));\n        return this;\n    }\n    //-------------------------------------\n    // \tSTART/STOP/PAUSE\n    //-------------------------------------\n    /**\n     * Bind start/stop/pause events from the clock and emit them.\n     */\n    _bindClockEvents() {\n        this._clock.on(\"start\", (time, offset) => {\n            offset = new TicksClass(this.context, offset).toSeconds();\n            this.emit(\"start\", time, offset);\n        });\n        this._clock.on(\"stop\", (time) => {\n            this.emit(\"stop\", time);\n        });\n        this._clock.on(\"pause\", (time) => {\n            this.emit(\"pause\", time);\n        });\n    }\n    /**\n     * Returns the playback state of the source, either \"started\", \"stopped\", or \"paused\"\n     */\n    get state() {\n        return this._clock.getStateAtTime(this.now());\n    }\n    /**\n     * Start the transport and all sources synced to the transport.\n     * @param  time The time when the transport should start.\n     * @param  offset The timeline offset to start the transport.\n     * @example\n     * // start the transport in one second starting at beginning of the 5th measure.\n     * Tone.getTransport().start(\"+1\", \"4:0:0\");\n     */\n    start(time, offset) {\n        // start the context\n        this.context.resume();\n        let offsetTicks;\n        if (isDefined(offset)) {\n            offsetTicks = this.toTicks(offset);\n        }\n        // start the clock\n        this._clock.start(time, offsetTicks);\n        return this;\n    }\n    /**\n     * Stop the transport and all sources synced to the transport.\n     * @param time The time when the transport should stop.\n     * @example\n     * Tone.getTransport().stop();\n     */\n    stop(time) {\n        this._clock.stop(time);\n        return this;\n    }\n    /**\n     * Pause the transport and all sources synced to the transport.\n     */\n    pause(time) {\n        this._clock.pause(time);\n        return this;\n    }\n    /**\n     * Toggle the current state of the transport. If it is\n     * started, it will stop it, otherwise it will start the Transport.\n     * @param  time The time of the event\n     */\n    toggle(time) {\n        time = this.toSeconds(time);\n        if (this._clock.getStateAtTime(time) !== \"started\") {\n            this.start(time);\n        }\n        else {\n            this.stop(time);\n        }\n        return this;\n    }\n    //-------------------------------------\n    // \tSETTERS/GETTERS\n    //-------------------------------------\n    /**\n     * The time signature as just the numerator over 4.\n     * For example 4/4 would be just 4 and 6/8 would be 3.\n     * @example\n     * // common time\n     * Tone.getTransport().timeSignature = 4;\n     * // 7/8\n     * Tone.getTransport().timeSignature = [7, 8];\n     * // this will be reduced to a single number\n     * Tone.getTransport().timeSignature; // returns 3.5\n     */\n    get timeSignature() {\n        return this._timeSignature;\n    }\n    set timeSignature(timeSig) {\n        if (isArray(timeSig)) {\n            timeSig = (timeSig[0] / timeSig[1]) * 4;\n        }\n        this._timeSignature = timeSig;\n    }\n    /**\n     * When the Transport.loop = true, this is the starting position of the loop.\n     */\n    get loopStart() {\n        return new TimeClass(this.context, this._loopStart, \"i\").toSeconds();\n    }\n    set loopStart(startPosition) {\n        this._loopStart = this.toTicks(startPosition);\n    }\n    /**\n     * When the Transport.loop = true, this is the ending position of the loop.\n     */\n    get loopEnd() {\n        return new TimeClass(this.context, this._loopEnd, \"i\").toSeconds();\n    }\n    set loopEnd(endPosition) {\n        this._loopEnd = this.toTicks(endPosition);\n    }\n    /**\n     * If the transport loops or not.\n     */\n    get loop() {\n        return this._loop.get(this.now());\n    }\n    set loop(loop) {\n        this._loop.set(loop, this.now());\n    }\n    /**\n     * Set the loop start and stop at the same time.\n     * @example\n     * // loop over the first measure\n     * Tone.getTransport().setLoopPoints(0, \"1m\");\n     * Tone.getTransport().loop = true;\n     */\n    setLoopPoints(startPosition, endPosition) {\n        this.loopStart = startPosition;\n        this.loopEnd = endPosition;\n        return this;\n    }\n    /**\n     * The swing value. Between 0-1 where 1 equal to the note + half the subdivision.\n     */\n    get swing() {\n        return this._swingAmount;\n    }\n    set swing(amount) {\n        // scale the values to a normal range\n        this._swingAmount = amount;\n    }\n    /**\n     * Set the subdivision which the swing will be applied to.\n     * The default value is an 8th note. Value must be less\n     * than a quarter note.\n     */\n    get swingSubdivision() {\n        return new TicksClass(this.context, this._swingTicks).toNotation();\n    }\n    set swingSubdivision(subdivision) {\n        this._swingTicks = this.toTicks(subdivision);\n    }\n    /**\n     * The Transport's position in Bars:Beats:Sixteenths.\n     * Setting the value will jump to that position right away.\n     */\n    get position() {\n        const now = this.now();\n        const ticks = this._clock.getTicksAtTime(now);\n        return new TicksClass(this.context, ticks).toBarsBeatsSixteenths();\n    }\n    set position(progress) {\n        const ticks = this.toTicks(progress);\n        this.ticks = ticks;\n    }\n    /**\n     * The Transport's position in seconds.\n     * Setting the value will jump to that position right away.\n     */\n    get seconds() {\n        return this._clock.seconds;\n    }\n    set seconds(s) {\n        const now = this.now();\n        const ticks = this._clock.frequency.timeToTicks(s, now);\n        this.ticks = ticks;\n    }\n    /**\n     * The Transport's loop position as a normalized value. Always\n     * returns 0 if the Transport.loop = false.\n     */\n    get progress() {\n        if (this.loop) {\n            const now = this.now();\n            const ticks = this._clock.getTicksAtTime(now);\n            return ((ticks - this._loopStart) / (this._loopEnd - this._loopStart));\n        }\n        else {\n            return 0;\n        }\n    }\n    /**\n     * The Transport's current tick position.\n     */\n    get ticks() {\n        return this._clock.ticks;\n    }\n    set ticks(t) {\n        if (this._clock.ticks !== t) {\n            const now = this.now();\n            // stop everything synced to the transport\n            if (this.state === \"started\") {\n                const ticks = this._clock.getTicksAtTime(now);\n                // schedule to start on the next tick, #573\n                const remainingTick = this._clock.frequency.getDurationOfTicks(Math.ceil(ticks) - ticks, now);\n                const time = now + remainingTick;\n                this.emit(\"stop\", time);\n                this._clock.setTicksAtTime(t, time);\n                // restart it with the new time\n                this.emit(\"start\", time, this._clock.getSecondsAtTime(time));\n            }\n            else {\n                this.emit(\"ticks\", now);\n                this._clock.setTicksAtTime(t, now);\n            }\n        }\n    }\n    /**\n     * Get the clock's ticks at the given time.\n     * @param  time  When to get the tick value\n     * @return The tick value at the given time.\n     */\n    getTicksAtTime(time) {\n        return this._clock.getTicksAtTime(time);\n    }\n    /**\n     * Return the elapsed seconds at the given time.\n     * @param  time  When to get the elapsed seconds\n     * @return  The number of elapsed seconds\n     */\n    getSecondsAtTime(time) {\n        return this._clock.getSecondsAtTime(time);\n    }\n    /**\n     * Pulses Per Quarter note. This is the smallest resolution\n     * the Transport timing supports. This should be set once\n     * on initialization and not set again. Changing this value\n     * after other objects have been created can cause problems.\n     */\n    get PPQ() {\n        return this._clock.frequency.multiplier;\n    }\n    set PPQ(ppq) {\n        this._clock.frequency.multiplier = ppq;\n    }\n    //-------------------------------------\n    // \tSYNCING\n    //-------------------------------------\n    /**\n     * Returns the time aligned to the next subdivision\n     * of the Transport. If the Transport is not started,\n     * it will return 0.\n     * Note: this will not work precisely during tempo ramps.\n     * @param  subdivision  The subdivision to quantize to\n     * @return  The context time of the next subdivision.\n     * @example\n     * // the transport must be started, otherwise returns 0\n     * Tone.getTransport().start();\n     * Tone.getTransport().nextSubdivision(\"4n\");\n     */\n    nextSubdivision(subdivision) {\n        subdivision = this.toTicks(subdivision);\n        if (this.state !== \"started\") {\n            // if the transport's not started, return 0\n            return 0;\n        }\n        else {\n            const now = this.now();\n            // the remainder of the current ticks and the subdivision\n            const transportPos = this.getTicksAtTime(now);\n            const remainingTicks = subdivision - (transportPos % subdivision);\n            return this._clock.nextTickTime(remainingTicks, now);\n        }\n    }\n    /**\n     * Attaches the signal to the tempo control signal so that\n     * any changes in the tempo will change the signal in the same\n     * ratio.\n     *\n     * @param signal\n     * @param ratio Optionally pass in the ratio between the two signals.\n     * \t\t\tOtherwise it will be computed based on their current values.\n     */\n    syncSignal(signal, ratio) {\n        const now = this.now();\n        let source = this.bpm;\n        let sourceValue = 1 / (60 / source.getValueAtTime(now) / this.PPQ);\n        let nodes = [];\n        // If the signal is in the time domain, sync it to the reciprocal of\n        // the tempo instead of the tempo.\n        if (signal.units === \"time\") {\n            // The input to Pow should be in the range [1 / 4096, 1], where\n            // where 4096 is half of the buffer size of Pow's waveshaper.\n            // Pick a scaling factor based on the initial tempo that ensures\n            // that the initial input is in this range, while leaving room for\n            // tempo changes.\n            const scaleFactor = 1 / 64 / sourceValue;\n            const scaleBefore = new Gain(scaleFactor);\n            const reciprocal = new Pow(-1);\n            const scaleAfter = new Gain(scaleFactor);\n            // @ts-ignore\n            source.chain(scaleBefore, reciprocal, scaleAfter);\n            source = scaleAfter;\n            sourceValue = 1 / sourceValue;\n            nodes = [scaleBefore, reciprocal, scaleAfter];\n        }\n        if (!ratio) {\n            // get the sync ratio\n            if (signal.getValueAtTime(now) !== 0) {\n                ratio = signal.getValueAtTime(now) / sourceValue;\n            }\n            else {\n                ratio = 0;\n            }\n        }\n        const ratioSignal = new Gain(ratio);\n        // @ts-ignore\n        source.connect(ratioSignal);\n        // @ts-ignore\n        ratioSignal.connect(signal._param);\n        nodes.push(ratioSignal);\n        this._syncedSignals.push({\n            initial: signal.value,\n            nodes: nodes,\n            signal,\n        });\n        signal.value = 0;\n        return this;\n    }\n    /**\n     * Unsyncs a previously synced signal from the transport's control.\n     * @see {@link syncSignal}.\n     */\n    unsyncSignal(signal) {\n        for (let i = this._syncedSignals.length - 1; i >= 0; i--) {\n            const syncedSignal = this._syncedSignals[i];\n            if (syncedSignal.signal === signal) {\n                syncedSignal.nodes.forEach((node) => node.dispose());\n                syncedSignal.signal.value = syncedSignal.initial;\n                this._syncedSignals.splice(i, 1);\n            }\n        }\n        return this;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._clock.dispose();\n        writable(this, \"bpm\");\n        this._timeline.dispose();\n        this._repeatedEvents.dispose();\n        return this;\n    }\n}\nEmitter.mixin(TransportClass);\n//-------------------------------------\n// \tINITIALIZATION\n//-------------------------------------\nonContextInit((context) => {\n    context.transport = new TransportClass({ context });\n});\nonContextClose((context) => {\n    context.transport.dispose();\n});\n//# sourceMappingURL=Transport.js.map","import { Volume } from \"../component/channel/Volume.js\";\nimport \"../core/context/Destination.js\";\nimport \"../core/clock/Transport.js\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode.js\";\nimport { defaultArg } from \"../core/util/Defaults.js\";\nimport { noOp, readOnly } from \"../core/util/Interface.js\";\nimport { StateTimeline, } from \"../core/util/StateTimeline.js\";\nimport { isDefined, isUndef } from \"../core/util/TypeCheck.js\";\nimport { assert, assertContextRunning } from \"../core/util/Debug.js\";\nimport { GT } from \"../core/util/Math.js\";\n/**\n * Base class for sources.\n * start/stop of this.context.transport.\n *\n * ```\n * // Multiple state change events can be chained together,\n * // but must be set in the correct order and with ascending times\n * // OK\n * state.start().stop(\"+0.2\");\n * // OK\n * state.start().stop(\"+0.2\").start(\"+0.4\").stop(\"+0.7\")\n * // BAD\n * state.stop(\"+0.2\").start();\n * // BAD\n * state.start(\"+0.3\").stop(\"+0.2\");\n * ```\n */\nexport class Source extends ToneAudioNode {\n    constructor(options) {\n        super(options);\n        /**\n         * Sources have no inputs\n         */\n        this.input = undefined;\n        /**\n         * Keep track of the scheduled state.\n         */\n        this._state = new StateTimeline(\"stopped\");\n        /**\n         * The synced `start` callback function from the transport\n         */\n        this._synced = false;\n        /**\n         * Keep track of all of the scheduled event ids\n         */\n        this._scheduled = [];\n        /**\n         * Placeholder functions for syncing/unsyncing to transport\n         */\n        this._syncedStart = noOp;\n        this._syncedStop = noOp;\n        this._state.memory = 100;\n        this._state.increasing = true;\n        this._volume = this.output = new Volume({\n            context: this.context,\n            mute: options.mute,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        readOnly(this, \"volume\");\n        this.onstop = options.onstop;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            onstop: noOp,\n            volume: 0,\n        });\n    }\n    /**\n     * Returns the playback state of the source, either \"started\" or \"stopped\".\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/ahntone_c3.mp3\", () => {\n     * \tplayer.start();\n     * \tconsole.log(player.state);\n     * }).toDestination();\n     */\n    get state() {\n        if (this._synced) {\n            if (this.context.transport.state === \"started\") {\n                return this._state.getValueAtTime(this.context.transport.seconds);\n            }\n            else {\n                return \"stopped\";\n            }\n        }\n        else {\n            return this._state.getValueAtTime(this.now());\n        }\n    }\n    /**\n     * Mute the output.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination().start();\n     * // mute the output\n     * osc.mute = true;\n     */\n    get mute() {\n        return this._volume.mute;\n    }\n    set mute(mute) {\n        this._volume.mute = mute;\n    }\n    /**\n     * Ensure that the scheduled time is not before the current time.\n     * Should only be used when scheduled unsynced.\n     */\n    _clampToCurrentTime(time) {\n        if (this._synced) {\n            return time;\n        }\n        else {\n            return Math.max(time, this.context.currentTime);\n        }\n    }\n    /**\n     * Start the source at the specified time. If no time is given,\n     * start the source now.\n     * @param  time When the source should be started.\n     * @example\n     * const source = new Tone.Oscillator().toDestination();\n     * source.start(\"+0.5\"); // starts the source 0.5 seconds from now\n     */\n    start(time, offset, duration) {\n        let computedTime = isUndef(time) && this._synced\n            ? this.context.transport.seconds\n            : this.toSeconds(time);\n        computedTime = this._clampToCurrentTime(computedTime);\n        // if it's started, stop it and restart it\n        if (!this._synced &&\n            this._state.getValueAtTime(computedTime) === \"started\") {\n            // time should be strictly greater than the previous start time\n            assert(GT(computedTime, this._state.get(computedTime).time), \"Start time must be strictly greater than previous start time\");\n            this._state.cancel(computedTime);\n            this._state.setStateAtTime(\"started\", computedTime);\n            this.log(\"restart\", computedTime);\n            this.restart(computedTime, offset, duration);\n        }\n        else {\n            this.log(\"start\", computedTime);\n            this._state.setStateAtTime(\"started\", computedTime);\n            if (this._synced) {\n                // add the offset time to the event\n                const event = this._state.get(computedTime);\n                if (event) {\n                    event.offset = this.toSeconds(defaultArg(offset, 0));\n                    event.duration = duration\n                        ? this.toSeconds(duration)\n                        : undefined;\n                }\n                const sched = this.context.transport.schedule((t) => {\n                    this._start(t, offset, duration);\n                }, computedTime);\n                this._scheduled.push(sched);\n                // if the transport is already started\n                // and the time is greater than where the transport is\n                if (this.context.transport.state === \"started\" &&\n                    this.context.transport.getSecondsAtTime(this.immediate()) >\n                        computedTime) {\n                    this._syncedStart(this.now(), this.context.transport.seconds);\n                }\n            }\n            else {\n                assertContextRunning(this.context);\n                this._start(computedTime, offset, duration);\n            }\n        }\n        return this;\n    }\n    /**\n     * Stop the source at the specified time. If no time is given,\n     * stop the source now.\n     * @param  time When the source should be stopped.\n     * @example\n     * const source = new Tone.Oscillator().toDestination();\n     * source.start();\n     * source.stop(\"+0.5\"); // stops the source 0.5 seconds from now\n     */\n    stop(time) {\n        let computedTime = isUndef(time) && this._synced\n            ? this.context.transport.seconds\n            : this.toSeconds(time);\n        computedTime = this._clampToCurrentTime(computedTime);\n        if (this._state.getValueAtTime(computedTime) === \"started\" ||\n            isDefined(this._state.getNextState(\"started\", computedTime))) {\n            this.log(\"stop\", computedTime);\n            if (!this._synced) {\n                this._stop(computedTime);\n            }\n            else {\n                const sched = this.context.transport.schedule(this._stop.bind(this), computedTime);\n                this._scheduled.push(sched);\n            }\n            this._state.cancel(computedTime);\n            this._state.setStateAtTime(\"stopped\", computedTime);\n        }\n        return this;\n    }\n    /**\n     * Restart the source.\n     */\n    restart(time, offset, duration) {\n        time = this.toSeconds(time);\n        if (this._state.getValueAtTime(time) === \"started\") {\n            this._state.cancel(time);\n            this._restart(time, offset, duration);\n        }\n        return this;\n    }\n    /**\n     * Sync the source to the Transport so that all subsequent\n     * calls to `start` and `stop` are synced to the TransportTime\n     * instead of the AudioContext time.\n     *\n     * @example\n     * const osc = new Tone.Oscillator().toDestination();\n     * // sync the source so that it plays between 0 and 0.3 on the Transport's timeline\n     * osc.sync().start(0).stop(0.3);\n     * // start the transport.\n     * Tone.Transport.start();\n     * // set it to loop once a second\n     * Tone.Transport.loop = true;\n     * Tone.Transport.loopEnd = 1;\n     */\n    sync() {\n        if (!this._synced) {\n            this._synced = true;\n            this._syncedStart = (time, offset) => {\n                if (GT(offset, 0)) {\n                    // get the playback state at that time\n                    const stateEvent = this._state.get(offset);\n                    // listen for start events which may occur in the middle of the sync'ed time\n                    if (stateEvent &&\n                        stateEvent.state === \"started\" &&\n                        stateEvent.time !== offset) {\n                        // get the offset\n                        const startOffset = offset - this.toSeconds(stateEvent.time);\n                        let duration;\n                        if (stateEvent.duration) {\n                            duration =\n                                this.toSeconds(stateEvent.duration) -\n                                    startOffset;\n                        }\n                        this._start(time, this.toSeconds(stateEvent.offset) + startOffset, duration);\n                    }\n                }\n            };\n            this._syncedStop = (time) => {\n                const seconds = this.context.transport.getSecondsAtTime(Math.max(time - this.sampleTime, 0));\n                if (this._state.getValueAtTime(seconds) === \"started\") {\n                    this._stop(time);\n                }\n            };\n            this.context.transport.on(\"start\", this._syncedStart);\n            this.context.transport.on(\"loopStart\", this._syncedStart);\n            this.context.transport.on(\"stop\", this._syncedStop);\n            this.context.transport.on(\"pause\", this._syncedStop);\n            this.context.transport.on(\"loopEnd\", this._syncedStop);\n        }\n        return this;\n    }\n    /**\n     * Unsync the source to the Transport.\n     * @see {@link sync}\n     */\n    unsync() {\n        if (this._synced) {\n            this.context.transport.off(\"stop\", this._syncedStop);\n            this.context.transport.off(\"pause\", this._syncedStop);\n            this.context.transport.off(\"loopEnd\", this._syncedStop);\n            this.context.transport.off(\"start\", this._syncedStart);\n            this.context.transport.off(\"loopStart\", this._syncedStart);\n        }\n        this._synced = false;\n        // clear all of the scheduled ids\n        this._scheduled.forEach((id) => this.context.transport.clear(id));\n        this._scheduled = [];\n        this._state.cancel(0);\n        // stop it also\n        this._stop(0);\n        return this;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this.onstop = noOp;\n        this.unsync();\n        this._volume.dispose();\n        this._state.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Source.js.map","import { connect } from \"../../core/context/ToneAudioNode.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\nimport { isDefined } from \"../../core/util/TypeCheck.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { OneShotSource, } from \"../OneShotSource.js\";\nimport { EQ, GTE, LT } from \"../../core/util/Math.js\";\n/**\n * Wrapper around the native BufferSourceNode.\n * @category Source\n */\nexport class ToneBufferSource extends OneShotSource {\n    constructor() {\n        const options = optionsFromArguments(ToneBufferSource.getDefaults(), arguments, [\"url\", \"onload\"]);\n        super(options);\n        this.name = \"ToneBufferSource\";\n        /**\n         * The oscillator\n         */\n        this._source = this.context.createBufferSource();\n        this._internalChannels = [this._source];\n        /**\n         * indicators if the source has started/stopped\n         */\n        this._sourceStarted = false;\n        this._sourceStopped = false;\n        connect(this._source, this._gainNode);\n        this._source.onended = () => this._stopSource();\n        /**\n         * The playbackRate of the buffer\n         */\n        this.playbackRate = new Param({\n            context: this.context,\n            param: this._source.playbackRate,\n            units: \"positive\",\n            value: options.playbackRate,\n        });\n        // set some values initially\n        this.loop = options.loop;\n        this.loopStart = options.loopStart;\n        this.loopEnd = options.loopEnd;\n        this._buffer = new ToneAudioBuffer(options.url, options.onload, options.onerror);\n        this._internalChannels.push(this._source);\n    }\n    static getDefaults() {\n        return Object.assign(OneShotSource.getDefaults(), {\n            url: new ToneAudioBuffer(),\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            onload: noOp,\n            onerror: noOp,\n            playbackRate: 1,\n        });\n    }\n    /**\n     * The fadeIn time of the amplitude envelope.\n     */\n    get fadeIn() {\n        return this._fadeIn;\n    }\n    set fadeIn(t) {\n        this._fadeIn = t;\n    }\n    /**\n     * The fadeOut time of the amplitude envelope.\n     */\n    get fadeOut() {\n        return this._fadeOut;\n    }\n    set fadeOut(t) {\n        this._fadeOut = t;\n    }\n    /**\n     * The curve applied to the fades, either \"linear\" or \"exponential\"\n     */\n    get curve() {\n        return this._curve;\n    }\n    set curve(t) {\n        this._curve = t;\n    }\n    /**\n     * Start the buffer\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     * @param  gain  The gain to play the buffer back at.\n     */\n    start(time, offset, duration, gain = 1) {\n        assert(this.buffer.loaded, \"buffer is either not set or not loaded\");\n        const computedTime = this.toSeconds(time);\n        // apply the gain envelope\n        this._startGain(computedTime, gain);\n        // if it's a loop the default offset is the loopstart point\n        if (this.loop) {\n            offset = defaultArg(offset, this.loopStart);\n        }\n        else {\n            // otherwise the default offset is 0\n            offset = defaultArg(offset, 0);\n        }\n        // make sure the offset is not less than 0\n        let computedOffset = Math.max(this.toSeconds(offset), 0);\n        // start the buffer source\n        if (this.loop) {\n            // modify the offset if it's greater than the loop time\n            const loopEnd = this.toSeconds(this.loopEnd) || this.buffer.duration;\n            const loopStart = this.toSeconds(this.loopStart);\n            const loopDuration = loopEnd - loopStart;\n            // move the offset back\n            if (GTE(computedOffset, loopEnd)) {\n                computedOffset =\n                    ((computedOffset - loopStart) % loopDuration) + loopStart;\n            }\n            // when the offset is very close to the duration, set it to 0\n            if (EQ(computedOffset, this.buffer.duration)) {\n                computedOffset = 0;\n            }\n        }\n        // this.buffer.loaded would have return false if the AudioBuffer was undefined\n        this._source.buffer = this.buffer.get();\n        this._source.loopEnd =\n            this.toSeconds(this.loopEnd) || this.buffer.duration;\n        if (LT(computedOffset, this.buffer.duration)) {\n            this._sourceStarted = true;\n            this._source.start(computedTime, computedOffset);\n        }\n        // if a duration is given, schedule a stop\n        if (isDefined(duration)) {\n            let computedDur = this.toSeconds(duration);\n            // make sure it's never negative\n            computedDur = Math.max(computedDur, 0);\n            this.stop(computedTime + computedDur);\n        }\n        return this;\n    }\n    _stopSource(time) {\n        if (!this._sourceStopped && this._sourceStarted) {\n            this._sourceStopped = true;\n            this._source.stop(this.toSeconds(time));\n            this._onended();\n        }\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n    get loopStart() {\n        return this._source.loopStart;\n    }\n    set loopStart(loopStart) {\n        this._source.loopStart = this.toSeconds(loopStart);\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n    get loopEnd() {\n        return this._source.loopEnd;\n    }\n    set loopEnd(loopEnd) {\n        this._source.loopEnd = this.toSeconds(loopEnd);\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n    get buffer() {\n        return this._buffer;\n    }\n    set buffer(buffer) {\n        this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     */\n    get loop() {\n        return this._source.loop;\n    }\n    set loop(loop) {\n        this._source.loop = loop;\n        if (this._sourceStarted) {\n            this.cancelStop();\n        }\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._source.onended = null;\n        this._source.disconnect();\n        this._buffer.dispose();\n        this.playbackRate.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneBufferSource.js.map","import { __awaiter } from \"tslib\";\nimport { OfflineContext } from \"../../core/context/OfflineContext.js\";\n/**\n * Render a segment of the oscillator to an offline context and return the results as an array\n */\nexport function generateWaveform(instance, length) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const duration = length / instance.context.sampleRate;\n        const context = new OfflineContext(1, duration, instance.context.sampleRate);\n        const clone = new instance.constructor(Object.assign(instance.get(), {\n            // should do 2 iterations\n            frequency: 2 / duration,\n            // zero out the detune\n            detune: 0,\n            context,\n        })).toDestination();\n        clone.start(0);\n        const buffer = yield context.render();\n        return buffer.getChannelData(0);\n    });\n}\n//# sourceMappingURL=OscillatorInterface.js.map","import { connect } from \"../../core/context/ToneAudioNode.js\";\nimport { Param } from \"../../core/context/Param.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { OneShotSource } from \"../OneShotSource.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Wrapper around the native fire-and-forget OscillatorNode.\n * Adds the ability to reschedule the stop method.\n * ***{@link Oscillator} is better for most use-cases***\n * @category Source\n */\nexport class ToneOscillatorNode extends OneShotSource {\n    constructor() {\n        const options = optionsFromArguments(ToneOscillatorNode.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        super(options);\n        this.name = \"ToneOscillatorNode\";\n        /**\n         * The oscillator\n         */\n        this._oscillator = this.context.createOscillator();\n        this._internalChannels = [this._oscillator];\n        connect(this._oscillator, this._gainNode);\n        this.type = options.type;\n        this.frequency = new Param({\n            context: this.context,\n            param: this._oscillator.frequency,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Param({\n            context: this.context,\n            param: this._oscillator.detune,\n            units: \"cents\",\n            value: options.detune,\n        });\n        readOnly(this, [\"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(OneShotSource.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            type: \"sine\",\n        });\n    }\n    /**\n     * Start the oscillator node at the given time\n     * @param  time When to start the oscillator\n     */\n    start(time) {\n        const computedTime = this.toSeconds(time);\n        this.log(\"start\", computedTime);\n        this._startGain(computedTime);\n        this._oscillator.start(computedTime);\n        return this;\n    }\n    _stopSource(time) {\n        this._oscillator.stop(time);\n    }\n    /**\n     * Sets an arbitrary custom periodic waveform given a PeriodicWave.\n     * @param  periodicWave PeriodicWave should be created with context.createPeriodicWave\n     */\n    setPeriodicWave(periodicWave) {\n        this._oscillator.setPeriodicWave(periodicWave);\n        return this;\n    }\n    /**\n     * The oscillator type. Either 'sine', 'sawtooth', 'square', or 'triangle'\n     */\n    get type() {\n        return this._oscillator.type;\n    }\n    set type(type) {\n        this._oscillator.type = type;\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        if (this.state === \"started\") {\n            this.stop();\n        }\n        this._oscillator.disconnect();\n        this.frequency.dispose();\n        this.detune.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=ToneOscillatorNode.js.map","import { __awaiter } from \"tslib\";\nimport { deepEquals, optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { isDefined } from \"../../core/util/TypeCheck.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { generateWaveform, } from \"./OscillatorInterface.js\";\nimport { ToneOscillatorNode } from \"./ToneOscillatorNode.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\nimport { clamp } from \"../../core/util/Math.js\";\n/**\n * Oscillator supports a number of features including\n * phase rotation, multiple oscillator types (see Oscillator.type),\n * and Transport syncing (see Oscillator.syncFrequency).\n *\n * @example\n * // make and start a 440hz sine tone\n * const osc = new Tone.Oscillator(440, \"sine\").toDestination().start();\n * @category Source\n */\nexport class Oscillator extends Source {\n    constructor() {\n        const options = optionsFromArguments(Oscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        super(options);\n        this.name = \"Oscillator\";\n        /**\n         * the main oscillator\n         */\n        this._oscillator = null;\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        readOnly(this, \"frequency\");\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        readOnly(this, \"detune\");\n        this._partials = options.partials;\n        this._partialCount = options.partialCount;\n        this._type = options.type;\n        if (options.partialCount && options.type !== \"custom\") {\n            this._type = (this.baseType +\n                options.partialCount.toString());\n        }\n        this.phase = options.phase;\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            partialCount: 0,\n            partials: [],\n            phase: 0,\n            type: \"sine\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        const computedTime = this.toSeconds(time);\n        // new oscillator with previous values\n        const oscillator = new ToneOscillatorNode({\n            context: this.context,\n            onended: () => this.onstop(this),\n        });\n        this._oscillator = oscillator;\n        if (this._wave) {\n            this._oscillator.setPeriodicWave(this._wave);\n        }\n        else {\n            this._oscillator.type = this._type;\n        }\n        // connect the control signal to the oscillator frequency & detune\n        this._oscillator.connect(this.output);\n        this.frequency.connect(this._oscillator.frequency);\n        this.detune.connect(this._oscillator.detune);\n        // start the oscillator\n        this._oscillator.start(computedTime);\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        const computedTime = this.toSeconds(time);\n        if (this._oscillator) {\n            this._oscillator.stop(computedTime);\n        }\n    }\n    /**\n     * Restart the oscillator. Does not stop the oscillator, but instead\n     * just cancels any scheduled 'stop' from being invoked.\n     */\n    _restart(time) {\n        const computedTime = this.toSeconds(time);\n        this.log(\"restart\", computedTime);\n        if (this._oscillator) {\n            this._oscillator.cancelStop();\n        }\n        this._state.cancel(computedTime);\n        return this;\n    }\n    /**\n     * Sync the signal to the Transport's bpm. Any changes to the transports bpm,\n     * will also affect the oscillators frequency.\n     * @example\n     * const osc = new Tone.Oscillator().toDestination().start();\n     * osc.frequency.value = 440;\n     * // the ratio between the bpm and the frequency will be maintained\n     * osc.syncFrequency();\n     * // double the tempo\n     * Tone.Transport.bpm.value *= 2;\n     * // the frequency of the oscillator is doubled to 880\n     */\n    syncFrequency() {\n        this.context.transport.syncSignal(this.frequency);\n        return this;\n    }\n    /**\n     * Unsync the oscillator's frequency from the Transport.\n     * @see {@link syncFrequency}\n     */\n    unsyncFrequency() {\n        this.context.transport.unsyncSignal(this.frequency);\n        return this;\n    }\n    /**\n     * Get a cached periodic wave. Avoids having to recompute\n     * the oscillator values when they have already been computed\n     * with the same values.\n     */\n    _getCachedPeriodicWave() {\n        if (this._type === \"custom\") {\n            const oscProps = Oscillator._periodicWaveCache.find((description) => {\n                return (description.phase === this._phase &&\n                    deepEquals(description.partials, this._partials));\n            });\n            return oscProps;\n        }\n        else {\n            const oscProps = Oscillator._periodicWaveCache.find((description) => {\n                return (description.type === this._type &&\n                    description.phase === this._phase);\n            });\n            this._partialCount = oscProps\n                ? oscProps.partialCount\n                : this._partialCount;\n            return oscProps;\n        }\n    }\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        this._type = type;\n        const isBasicType = [\"sine\", \"square\", \"sawtooth\", \"triangle\"].indexOf(type) !== -1;\n        if (this._phase === 0 && isBasicType) {\n            this._wave = undefined;\n            this._partialCount = 0;\n            // just go with the basic approach\n            if (this._oscillator !== null) {\n                // already tested that it's a basic type\n                this._oscillator.type = type;\n            }\n        }\n        else {\n            // first check if the value is cached\n            const cache = this._getCachedPeriodicWave();\n            if (isDefined(cache)) {\n                const { partials, wave } = cache;\n                this._wave = wave;\n                this._partials = partials;\n                if (this._oscillator !== null) {\n                    this._oscillator.setPeriodicWave(this._wave);\n                }\n            }\n            else {\n                const [real, imag] = this._getRealImaginary(type, this._phase);\n                const periodicWave = this.context.createPeriodicWave(real, imag);\n                this._wave = periodicWave;\n                if (this._oscillator !== null) {\n                    this._oscillator.setPeriodicWave(this._wave);\n                }\n                // set the cache\n                Oscillator._periodicWaveCache.push({\n                    imag,\n                    partialCount: this._partialCount,\n                    partials: this._partials,\n                    phase: this._phase,\n                    real,\n                    type: this._type,\n                    wave: this._wave,\n                });\n                if (Oscillator._periodicWaveCache.length > 100) {\n                    Oscillator._periodicWaveCache.shift();\n                }\n            }\n        }\n    }\n    get baseType() {\n        return this._type.replace(this.partialCount.toString(), \"\");\n    }\n    set baseType(baseType) {\n        if (this.partialCount &&\n            this._type !== \"custom\" &&\n            baseType !== \"custom\") {\n            this.type = (baseType + this.partialCount);\n        }\n        else {\n            this.type = baseType;\n        }\n    }\n    get partialCount() {\n        return this._partialCount;\n    }\n    set partialCount(p) {\n        assertRange(p, 0);\n        let type = this._type;\n        const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(this._type);\n        if (partial) {\n            type = partial[1];\n        }\n        if (this._type !== \"custom\") {\n            if (p === 0) {\n                this.type = type;\n            }\n            else {\n                this.type = (type + p.toString());\n            }\n        }\n        else {\n            // extend or shorten the partials array\n            const fullPartials = new Float32Array(p);\n            // copy over the partials array\n            this._partials.forEach((v, i) => (fullPartials[i] = v));\n            this._partials = Array.from(fullPartials);\n            this.type = this._type;\n        }\n    }\n    /**\n     * Returns the real and imaginary components based\n     * on the oscillator type.\n     * @returns [real: Float32Array, imaginary: Float32Array]\n     */\n    _getRealImaginary(type, phase) {\n        const fftSize = 4096;\n        let periodicWaveSize = fftSize / 2;\n        const real = new Float32Array(periodicWaveSize);\n        const imag = new Float32Array(periodicWaveSize);\n        let partialCount = 1;\n        if (type === \"custom\") {\n            partialCount = this._partials.length + 1;\n            this._partialCount = this._partials.length;\n            periodicWaveSize = partialCount;\n            // if the partial count is 0, don't bother doing any computation\n            if (this._partials.length === 0) {\n                return [real, imag];\n            }\n        }\n        else {\n            const partial = /^(sine|triangle|square|sawtooth)(\\d+)$/.exec(type);\n            if (partial) {\n                partialCount = parseInt(partial[2], 10) + 1;\n                this._partialCount = parseInt(partial[2], 10);\n                type = partial[1];\n                partialCount = Math.max(partialCount, 2);\n                periodicWaveSize = partialCount;\n            }\n            else {\n                this._partialCount = 0;\n            }\n            this._partials = [];\n        }\n        for (let n = 1; n < periodicWaveSize; ++n) {\n            const piFactor = 2 / (n * Math.PI);\n            let b;\n            switch (type) {\n                case \"sine\":\n                    b = n <= partialCount ? 1 : 0;\n                    this._partials[n - 1] = b;\n                    break;\n                case \"square\":\n                    b = n & 1 ? 2 * piFactor : 0;\n                    this._partials[n - 1] = b;\n                    break;\n                case \"sawtooth\":\n                    b = piFactor * (n & 1 ? 1 : -1);\n                    this._partials[n - 1] = b;\n                    break;\n                case \"triangle\":\n                    if (n & 1) {\n                        b =\n                            2 *\n                                (piFactor * piFactor) *\n                                (((n - 1) >> 1) & 1 ? -1 : 1);\n                    }\n                    else {\n                        b = 0;\n                    }\n                    this._partials[n - 1] = b;\n                    break;\n                case \"custom\":\n                    b = this._partials[n - 1];\n                    break;\n                default:\n                    throw new TypeError(\"Oscillator: invalid type: \" + type);\n            }\n            if (b !== 0) {\n                real[n] = -b * Math.sin(phase * n);\n                imag[n] = b * Math.cos(phase * n);\n            }\n            else {\n                real[n] = 0;\n                imag[n] = 0;\n            }\n        }\n        return [real, imag];\n    }\n    /**\n     * Compute the inverse FFT for a given phase.\n     */\n    _inverseFFT(real, imag, phase) {\n        let sum = 0;\n        const len = real.length;\n        for (let i = 0; i < len; i++) {\n            sum +=\n                real[i] * Math.cos(i * phase) + imag[i] * Math.sin(i * phase);\n        }\n        return sum;\n    }\n    /**\n     * Returns the initial value of the oscillator when stopped.\n     * E.g. a \"sine\" oscillator with phase = 90 would return an initial value of -1.\n     */\n    getInitialValue() {\n        const [real, imag] = this._getRealImaginary(this._type, 0);\n        let maxValue = 0;\n        const twoPi = Math.PI * 2;\n        const testPositions = 32;\n        // check for peaks in 16 places\n        for (let i = 0; i < testPositions; i++) {\n            maxValue = Math.max(this._inverseFFT(real, imag, (i / testPositions) * twoPi), maxValue);\n        }\n        return clamp(-this._inverseFFT(real, imag, this._phase) / maxValue, -1, 1);\n    }\n    get partials() {\n        return this._partials.slice(0, this.partialCount);\n    }\n    set partials(partials) {\n        this._partials = partials;\n        this._partialCount = this._partials.length;\n        if (partials.length) {\n            this.type = \"custom\";\n        }\n    }\n    get phase() {\n        return this._phase * (180 / Math.PI);\n    }\n    set phase(phase) {\n        this._phase = (phase * Math.PI) / 180;\n        // reset the type\n        this.type = this._type;\n    }\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            return generateWaveform(this, length);\n        });\n    }\n    dispose() {\n        super.dispose();\n        if (this._oscillator !== null) {\n            this._oscillator.dispose();\n        }\n        this._wave = undefined;\n        this.frequency.dispose();\n        this.detune.dispose();\n        return this;\n    }\n}\n/**\n * Cache the periodic waves to avoid having to redo computations\n */\nOscillator._periodicWaveCache = [];\n//# sourceMappingURL=Oscillator.js.map","import { SignalOperator } from \"./SignalOperator.js\";\nimport { WaveShaper } from \"./WaveShaper.js\";\n/**\n * AudioToGain converts an input in AudioRange [-1,1] to NormalRange [0,1].\n * @see {@link GainToAudio}.\n * @category Signal\n */\nexport class AudioToGain extends SignalOperator {\n    constructor() {\n        super(...arguments);\n        this.name = \"AudioToGain\";\n        /**\n         * The node which converts the audio ranges\n         */\n        this._norm = new WaveShaper({\n            context: this.context,\n            mapping: (x) => (x + 1) / 2,\n        });\n        /**\n         * The AudioRange input [-1, 1]\n         */\n        this.input = this._norm;\n        /**\n         * The GainRange output [0, 1]\n         */\n        this.output = this._norm;\n    }\n    /**\n     * clean up\n     */\n    dispose() {\n        super.dispose();\n        this._norm.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AudioToGain.js.map","import { Gain } from \"../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { Signal } from \"./Signal.js\";\n/**\n * Multiply two incoming signals. Or, if a number is given in the constructor,\n * multiplies the incoming signal by that value.\n *\n * @example\n * // multiply two signals\n * const mult = new Tone.Multiply();\n * const sigA = new Tone.Signal(3);\n * const sigB = new Tone.Signal(4);\n * sigA.connect(mult);\n * sigB.connect(mult.factor);\n * // output of mult is 12.\n * @example\n * // multiply a signal and a number\n * const mult = new Tone.Multiply(10);\n * const sig = new Tone.Signal(2).connect(mult);\n * // the output of mult is 20.\n * @category Signal\n */\nexport class Multiply extends Signal {\n    constructor() {\n        const options = optionsFromArguments(Multiply.getDefaults(), arguments, [\"value\"]);\n        super(options);\n        this.name = \"Multiply\";\n        /**\n         * Indicates if the value should be overridden on connection\n         */\n        this.override = false;\n        this._mult =\n            this.input =\n                this.output =\n                    new Gain({\n                        context: this.context,\n                        minValue: options.minValue,\n                        maxValue: options.maxValue,\n                    });\n        this.factor = this._param = this._mult\n            .gain;\n        this.factor.setValueAtTime(options.value, 0);\n    }\n    static getDefaults() {\n        return Object.assign(Signal.getDefaults(), {\n            value: 0,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._mult.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Multiply.js.map","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { AudioToGain } from \"../../signal/AudioToGain.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform, } from \"./OscillatorInterface.js\";\n/**\n * An amplitude modulated oscillator node. It is implemented with\n * two oscillators, one which modulators the other's amplitude\n * through a gain node.\n * ```\n *    +-------------+       +----------+\n *    | Carrier Osc +>------> GainNode |\n *    +-------------+       |          +--->Output\n *                      +---> gain     |\n * +---------------+    |   +----------+\n * | Modulator Osc +>---+\n * +---------------+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst amOsc = new Tone.AMOscillator(30, \"sine\", \"square\").toDestination().start();\n * }, 0.2, 1);\n * @category Source\n */\nexport class AMOscillator extends Source {\n    constructor() {\n        const options = optionsFromArguments(AMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n        super(options);\n        this.name = \"AMOscillator\";\n        /**\n         * convert the -1,1 output to 0,1\n         */\n        this._modulationScale = new AudioToGain({ context: this.context });\n        /**\n         * the node where the modulation happens\n         */\n        this._modulationNode = new Gain({\n            context: this.context,\n        });\n        this._carrier = new Oscillator({\n            context: this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: () => this.onstop(this),\n            phase: options.phase,\n            type: options.type,\n        });\n        (this.frequency = this._carrier.frequency),\n            (this.detune = this._carrier.detune);\n        this._modulator = new Oscillator({\n            context: this.context,\n            phase: options.phase,\n            type: options.modulationType,\n        });\n        this.harmonicity = new Multiply({\n            context: this.context,\n            units: \"positive\",\n            value: options.harmonicity,\n        });\n        // connections\n        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n        this._modulator.chain(this._modulationScale, this._modulationNode.gain);\n        this._carrier.chain(this._modulationNode, this.output);\n        readOnly(this, [\"frequency\", \"detune\", \"harmonicity\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), {\n            harmonicity: 1,\n            modulationType: \"square\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        this._modulator.start(time);\n        this._carrier.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        this._modulator.stop(time);\n        this._carrier.stop(time);\n    }\n    _restart(time) {\n        this._modulator.restart(time);\n        this._carrier.restart(time);\n    }\n    /**\n     * The type of the carrier oscillator\n     */\n    get type() {\n        return this._carrier.type;\n    }\n    set type(type) {\n        this._carrier.type = type;\n    }\n    get baseType() {\n        return this._carrier.baseType;\n    }\n    set baseType(baseType) {\n        this._carrier.baseType = baseType;\n    }\n    get partialCount() {\n        return this._carrier.partialCount;\n    }\n    set partialCount(partialCount) {\n        this._carrier.partialCount = partialCount;\n    }\n    /**\n     * The type of the modulator oscillator\n     */\n    get modulationType() {\n        return this._modulator.type;\n    }\n    set modulationType(type) {\n        this._modulator.type = type;\n    }\n    get phase() {\n        return this._carrier.phase;\n    }\n    set phase(phase) {\n        this._carrier.phase = phase;\n        this._modulator.phase = phase;\n    }\n    get partials() {\n        return this._carrier.partials;\n    }\n    set partials(partials) {\n        this._carrier.partials = partials;\n    }\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this.harmonicity.dispose();\n        this._carrier.dispose();\n        this._modulator.dispose();\n        this._modulationNode.dispose();\n        this._modulationScale.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AMOscillator.js.map","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform, } from \"./OscillatorInterface.js\";\n/**\n * FMOscillator implements a frequency modulation synthesis\n * ```\n *                                              +-------------+\n * +---------------+        +-------------+     | Carrier Osc |\n * | Modulator Osc +>-------> GainNode    |     |             +--->Output\n * +---------------+        |             +>----> frequency   |\n *                       +--> gain        |     +-------------+\n *                       |  +-------------+\n * +-----------------+   |\n * | modulationIndex +>--+\n * +-----------------+\n * ```\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst fmOsc = new Tone.FMOscillator({\n * \t\tfrequency: 200,\n * \t\ttype: \"square\",\n * \t\tmodulationType: \"triangle\",\n * \t\tharmonicity: 0.2,\n * \t\tmodulationIndex: 3\n * \t}).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class FMOscillator extends Source {\n    constructor() {\n        const options = optionsFromArguments(FMOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"modulationType\"]);\n        super(options);\n        this.name = \"FMOscillator\";\n        /**\n         * the node where the modulation happens\n         */\n        this._modulationNode = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        this._carrier = new Oscillator({\n            context: this.context,\n            detune: options.detune,\n            frequency: 0,\n            onstop: () => this.onstop(this),\n            phase: options.phase,\n            type: options.type,\n        });\n        this.detune = this._carrier.detune;\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this._modulator = new Oscillator({\n            context: this.context,\n            phase: options.phase,\n            type: options.modulationType,\n        });\n        this.harmonicity = new Multiply({\n            context: this.context,\n            units: \"positive\",\n            value: options.harmonicity,\n        });\n        this.modulationIndex = new Multiply({\n            context: this.context,\n            units: \"positive\",\n            value: options.modulationIndex,\n        });\n        // connections\n        this.frequency.connect(this._carrier.frequency);\n        this.frequency.chain(this.harmonicity, this._modulator.frequency);\n        this.frequency.chain(this.modulationIndex, this._modulationNode);\n        this._modulator.connect(this._modulationNode.gain);\n        this._modulationNode.connect(this._carrier.frequency);\n        this._carrier.connect(this.output);\n        this.detune.connect(this._modulator.detune);\n        readOnly(this, [\n            \"modulationIndex\",\n            \"frequency\",\n            \"detune\",\n            \"harmonicity\",\n        ]);\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), {\n            harmonicity: 1,\n            modulationIndex: 2,\n            modulationType: \"square\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        this._modulator.start(time);\n        this._carrier.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        this._modulator.stop(time);\n        this._carrier.stop(time);\n    }\n    _restart(time) {\n        this._modulator.restart(time);\n        this._carrier.restart(time);\n        return this;\n    }\n    get type() {\n        return this._carrier.type;\n    }\n    set type(type) {\n        this._carrier.type = type;\n    }\n    get baseType() {\n        return this._carrier.baseType;\n    }\n    set baseType(baseType) {\n        this._carrier.baseType = baseType;\n    }\n    get partialCount() {\n        return this._carrier.partialCount;\n    }\n    set partialCount(partialCount) {\n        this._carrier.partialCount = partialCount;\n    }\n    /**\n     * The type of the modulator oscillator\n     */\n    get modulationType() {\n        return this._modulator.type;\n    }\n    set modulationType(type) {\n        this._modulator.type = type;\n    }\n    get phase() {\n        return this._carrier.phase;\n    }\n    set phase(phase) {\n        this._carrier.phase = phase;\n        this._modulator.phase = phase;\n    }\n    get partials() {\n        return this._carrier.partials;\n    }\n    set partials(partials) {\n        this._carrier.partials = partials;\n    }\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this.frequency.dispose();\n        this.harmonicity.dispose();\n        this._carrier.dispose();\n        this._modulator.dispose();\n        this._modulationNode.dispose();\n        this.modulationIndex.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=FMOscillator.js.map","import { __awaiter } from \"tslib\";\nimport { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { WaveShaper } from \"../../signal/WaveShaper.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform, } from \"./OscillatorInterface.js\";\n/**\n * PulseOscillator is an oscillator with control over pulse width,\n * also known as the duty cycle. At 50% duty cycle (width = 0) the wave is\n * a square wave.\n * [Read more](https://wigglewave.wordpress.com/2014/08/16/pulse-waveforms-and-harmonics/).\n * ```\n *    width = -0.25        width = 0.0          width = 0.25\n *\n *   +-----+            +-------+       +    +-------+     +-+\n *   |     |            |       |       |            |     |\n *   |     |            |       |       |            |     |\n * +-+     +-------+    +       +-------+            +-----+\n *\n *\n *    width = -0.5                              width = 0.5\n *\n *     +---+                                 +-------+   +---+\n *     |   |                                         |   |\n *     |   |                                         |   |\n * +---+   +-------+                                 +---+\n *\n *\n *    width = -0.75                             width = 0.75\n *\n *       +-+                                 +-------+ +-----+\n *       | |                                         | |\n *       | |                                         | |\n * +-----+ +-------+                                 +-+\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst pulse = new Tone.PulseOscillator(50, 0.4).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PulseOscillator extends Source {\n    constructor() {\n        const options = optionsFromArguments(PulseOscillator.getDefaults(), arguments, [\"frequency\", \"width\"]);\n        super(options);\n        this.name = \"PulseOscillator\";\n        /**\n         * gate the width amount\n         */\n        this._widthGate = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        /**\n         * Threshold the signal to turn it into a square\n         */\n        this._thresh = new WaveShaper({\n            context: this.context,\n            mapping: (val) => (val <= 0 ? -1 : 1),\n        });\n        this.width = new Signal({\n            context: this.context,\n            units: \"audioRange\",\n            value: options.width,\n        });\n        this._triangle = new Oscillator({\n            context: this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: () => this.onstop(this),\n            phase: options.phase,\n            type: \"triangle\",\n        });\n        this.frequency = this._triangle.frequency;\n        this.detune = this._triangle.detune;\n        // connections\n        this._triangle.chain(this._thresh, this.output);\n        this.width.chain(this._widthGate, this._thresh);\n        readOnly(this, [\"width\", \"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            phase: 0,\n            type: \"pulse\",\n            width: 0.2,\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        time = this.toSeconds(time);\n        this._triangle.start(time);\n        this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        time = this.toSeconds(time);\n        this._triangle.stop(time);\n        // the width is still connected to the output.\n        // that needs to be stopped also\n        this._widthGate.gain.cancelScheduledValues(time);\n        this._widthGate.gain.setValueAtTime(0, time);\n    }\n    _restart(time) {\n        this._triangle.restart(time);\n        this._widthGate.gain.cancelScheduledValues(time);\n        this._widthGate.gain.setValueAtTime(1, time);\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n    get phase() {\n        return this._triangle.phase;\n    }\n    set phase(phase) {\n        this._triangle.phase = phase;\n    }\n    /**\n     * The type of the oscillator. Always returns \"pulse\".\n     */\n    get type() {\n        return \"pulse\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pulse\".\n     */\n    get baseType() {\n        return \"pulse\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n    get partials() {\n        return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n    get partialCount() {\n        return 0;\n    }\n    /**\n     * *Internal use* The carrier oscillator type is fed through the\n     * waveshaper node to create the pulse. Using different carrier oscillators\n     * changes oscillator's behavior.\n     */\n    set carrierType(type) {\n        this._triangle.type = type;\n    }\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up method.\n     */\n    dispose() {\n        super.dispose();\n        this._triangle.dispose();\n        this.width.dispose();\n        this._widthGate.dispose();\n        this._thresh.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PulseOscillator.js.map","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { noOp, readOnly } from \"../../core/util/Interface.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform, } from \"./OscillatorInterface.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\n/**\n * FatOscillator is an array of oscillators with detune spread between the oscillators\n * @example\n * const fatOsc = new Tone.FatOscillator(\"Ab3\", \"sawtooth\", 40).toDestination().start();\n * @category Source\n */\nexport class FatOscillator extends Source {\n    constructor() {\n        const options = optionsFromArguments(FatOscillator.getDefaults(), arguments, [\"frequency\", \"type\", \"spread\"]);\n        super(options);\n        this.name = \"FatOscillator\";\n        /**\n         * The array of oscillators\n         */\n        this._oscillators = [];\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        this._spread = options.spread;\n        this._type = options.type;\n        this._phase = options.phase;\n        this._partials = options.partials;\n        this._partialCount = options.partialCount;\n        // set the count initially\n        this.count = options.count;\n        readOnly(this, [\"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), {\n            count: 3,\n            spread: 20,\n            type: \"sawtooth\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        time = this.toSeconds(time);\n        this._forEach((osc) => osc.start(time));\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        time = this.toSeconds(time);\n        this._forEach((osc) => osc.stop(time));\n    }\n    _restart(time) {\n        this._forEach((osc) => osc.restart(time));\n    }\n    /**\n     * Iterate over all of the oscillators\n     */\n    _forEach(iterator) {\n        for (let i = 0; i < this._oscillators.length; i++) {\n            iterator(this._oscillators[i], i);\n        }\n    }\n    /**\n     * The type of the oscillator\n     */\n    get type() {\n        return this._type;\n    }\n    set type(type) {\n        this._type = type;\n        this._forEach((osc) => (osc.type = type));\n    }\n    /**\n     * The detune spread between the oscillators. If \"count\" is\n     * set to 3 oscillators and the \"spread\" is set to 40,\n     * the three oscillators would be detuned like this: [-20, 0, 20]\n     * for a total detune spread of 40 cents.\n     * @example\n     * const fatOsc = new Tone.FatOscillator().toDestination().start();\n     * fatOsc.spread = 70;\n     */\n    get spread() {\n        return this._spread;\n    }\n    set spread(spread) {\n        this._spread = spread;\n        if (this._oscillators.length > 1) {\n            const start = -spread / 2;\n            const step = spread / (this._oscillators.length - 1);\n            this._forEach((osc, i) => (osc.detune.value = start + step * i));\n        }\n    }\n    /**\n     * The number of detuned oscillators. Must be an integer greater than 1.\n     * @example\n     * const fatOsc = new Tone.FatOscillator(\"C#3\", \"sawtooth\").toDestination().start();\n     * // use 4 sawtooth oscillators\n     * fatOsc.count = 4;\n     */\n    get count() {\n        return this._oscillators.length;\n    }\n    set count(count) {\n        assertRange(count, 1);\n        if (this._oscillators.length !== count) {\n            // dispose the previous oscillators\n            this._forEach((osc) => osc.dispose());\n            this._oscillators = [];\n            for (let i = 0; i < count; i++) {\n                const osc = new Oscillator({\n                    context: this.context,\n                    volume: -6 - count * 1.1,\n                    type: this._type,\n                    phase: this._phase + (i / count) * 360,\n                    partialCount: this._partialCount,\n                    onstop: i === 0 ? () => this.onstop(this) : noOp,\n                });\n                if (this.type === \"custom\") {\n                    osc.partials = this._partials;\n                }\n                this.frequency.connect(osc.frequency);\n                this.detune.connect(osc.detune);\n                osc.detune.overridden = false;\n                osc.connect(this.output);\n                this._oscillators[i] = osc;\n            }\n            // set the spread\n            this.spread = this._spread;\n            if (this.state === \"started\") {\n                this._forEach((osc) => osc.start());\n            }\n        }\n    }\n    get phase() {\n        return this._phase;\n    }\n    set phase(phase) {\n        this._phase = phase;\n        this._forEach((osc, i) => (osc.phase = this._phase + (i / this.count) * 360));\n    }\n    get baseType() {\n        return this._oscillators[0].baseType;\n    }\n    set baseType(baseType) {\n        this._forEach((osc) => (osc.baseType = baseType));\n        this._type = this._oscillators[0].type;\n    }\n    get partials() {\n        return this._oscillators[0].partials;\n    }\n    set partials(partials) {\n        this._partials = partials;\n        this._partialCount = this._partials.length;\n        if (partials.length) {\n            this._type = \"custom\";\n            this._forEach((osc) => (osc.partials = partials));\n        }\n    }\n    get partialCount() {\n        return this._oscillators[0].partialCount;\n    }\n    set partialCount(partialCount) {\n        this._partialCount = partialCount;\n        this._forEach((osc) => (osc.partialCount = partialCount));\n        this._type = this._oscillators[0].type;\n    }\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this.frequency.dispose();\n        this.detune.dispose();\n        this._forEach((osc) => osc.dispose());\n        return this;\n    }\n}\n//# sourceMappingURL=FatOscillator.js.map","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Multiply } from \"../../signal/Multiply.js\";\nimport { Source } from \"../Source.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform, } from \"./OscillatorInterface.js\";\nimport { PulseOscillator } from \"./PulseOscillator.js\";\n/**\n * PWMOscillator modulates the width of a Tone.PulseOscillator\n * at the modulationFrequency. This has the effect of continuously\n * changing the timbre of the oscillator by altering the harmonics\n * generated.\n * @example\n * return Tone.Offline(() => {\n * \tconst pwm = new Tone.PWMOscillator(60, 0.3).toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class PWMOscillator extends Source {\n    constructor() {\n        const options = optionsFromArguments(PWMOscillator.getDefaults(), arguments, [\"frequency\", \"modulationFrequency\"]);\n        super(options);\n        this.name = \"PWMOscillator\";\n        this.sourceType = \"pwm\";\n        /**\n         * Scale the oscillator so it doesn't go silent\n         * at the extreme values.\n         */\n        this._scale = new Multiply({\n            context: this.context,\n            value: 2,\n        });\n        this._pulse = new PulseOscillator({\n            context: this.context,\n            frequency: options.modulationFrequency,\n        });\n        // change the pulse oscillator type\n        this._pulse.carrierType = \"sine\";\n        this.modulationFrequency = this._pulse.frequency;\n        this._modulator = new Oscillator({\n            context: this.context,\n            detune: options.detune,\n            frequency: options.frequency,\n            onstop: () => this.onstop(this),\n            phase: options.phase,\n        });\n        this.frequency = this._modulator.frequency;\n        this.detune = this._modulator.detune;\n        // connections\n        this._modulator.chain(this._scale, this._pulse.width);\n        this._pulse.connect(this.output);\n        readOnly(this, [\"modulationFrequency\", \"frequency\", \"detune\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            detune: 0,\n            frequency: 440,\n            modulationFrequency: 0.4,\n            phase: 0,\n            type: \"pwm\",\n        });\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        time = this.toSeconds(time);\n        this._modulator.start(time);\n        this._pulse.start(time);\n    }\n    /**\n     * stop the oscillator\n     */\n    _stop(time) {\n        time = this.toSeconds(time);\n        this._modulator.stop(time);\n        this._pulse.stop(time);\n    }\n    /**\n     * restart the oscillator\n     */\n    _restart(time) {\n        this._modulator.restart(time);\n        this._pulse.restart(time);\n    }\n    /**\n     * The type of the oscillator. Always returns \"pwm\".\n     */\n    get type() {\n        return \"pwm\";\n    }\n    /**\n     * The baseType of the oscillator. Always returns \"pwm\".\n     */\n    get baseType() {\n        return \"pwm\";\n    }\n    /**\n     * The partials of the waveform. Cannot set partials for this waveform type\n     */\n    get partials() {\n        return [];\n    }\n    /**\n     * No partials for this waveform type.\n     */\n    get partialCount() {\n        return 0;\n    }\n    /**\n     * The phase of the oscillator in degrees.\n     */\n    get phase() {\n        return this._modulator.phase;\n    }\n    set phase(phase) {\n        this._modulator.phase = phase;\n    }\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            return generateWaveform(this, length);\n        });\n    }\n    /**\n     * Clean up.\n     */\n    dispose() {\n        super.dispose();\n        this._pulse.dispose();\n        this._scale.dispose();\n        this._modulator.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PWMOscillator.js.map","import { __awaiter } from \"tslib\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { isNumber, isString } from \"../../core/util/TypeCheck.js\";\nimport { Signal } from \"../../signal/Signal.js\";\nimport { Source } from \"../Source.js\";\nimport { AMOscillator } from \"./AMOscillator.js\";\nimport { FatOscillator } from \"./FatOscillator.js\";\nimport { FMOscillator } from \"./FMOscillator.js\";\nimport { Oscillator } from \"./Oscillator.js\";\nimport { generateWaveform, } from \"./OscillatorInterface.js\";\nimport { PulseOscillator } from \"./PulseOscillator.js\";\nimport { PWMOscillator } from \"./PWMOscillator.js\";\nconst OmniOscillatorSourceMap = {\n    am: AMOscillator,\n    fat: FatOscillator,\n    fm: FMOscillator,\n    oscillator: Oscillator,\n    pulse: PulseOscillator,\n    pwm: PWMOscillator,\n};\n/**\n * OmniOscillator aggregates all of the oscillator types into one.\n * @example\n * return Tone.Offline(() => {\n * \tconst omniOsc = new Tone.OmniOscillator(\"C#4\", \"pwm\").toDestination().start();\n * }, 0.1, 1);\n * @category Source\n */\nexport class OmniOscillator extends Source {\n    constructor() {\n        const options = optionsFromArguments(OmniOscillator.getDefaults(), arguments, [\"frequency\", \"type\"]);\n        super(options);\n        this.name = \"OmniOscillator\";\n        this.frequency = new Signal({\n            context: this.context,\n            units: \"frequency\",\n            value: options.frequency,\n        });\n        this.detune = new Signal({\n            context: this.context,\n            units: \"cents\",\n            value: options.detune,\n        });\n        readOnly(this, [\"frequency\", \"detune\"]);\n        // set the options\n        this.set(options);\n    }\n    static getDefaults() {\n        return Object.assign(Oscillator.getDefaults(), FMOscillator.getDefaults(), AMOscillator.getDefaults(), FatOscillator.getDefaults(), PulseOscillator.getDefaults(), PWMOscillator.getDefaults());\n    }\n    /**\n     * start the oscillator\n     */\n    _start(time) {\n        this._oscillator.start(time);\n    }\n    /**\n     * start the oscillator\n     */\n    _stop(time) {\n        this._oscillator.stop(time);\n    }\n    _restart(time) {\n        this._oscillator.restart(time);\n        return this;\n    }\n    /**\n     * The type of the oscillator. Can be any of the basic types: sine, square, triangle, sawtooth. Or\n     * prefix the basic types with \"fm\", \"am\", or \"fat\" to use the FMOscillator, AMOscillator or FatOscillator\n     * types. The oscillator could also be set to \"pwm\" or \"pulse\". All of the parameters of the\n     * oscillator's class are accessible when the oscillator is set to that type, but throws an error\n     * when it's not.\n     * @example\n     * const omniOsc = new Tone.OmniOscillator().toDestination().start();\n     * omniOsc.type = \"pwm\";\n     * // modulationFrequency is parameter which is available\n     * // only when the type is \"pwm\".\n     * omniOsc.modulationFrequency.value = 0.5;\n     */\n    get type() {\n        let prefix = \"\";\n        if ([\"am\", \"fm\", \"fat\"].some((p) => this._sourceType === p)) {\n            prefix = this._sourceType;\n        }\n        return (prefix + this._oscillator.type);\n    }\n    set type(type) {\n        if (type.substr(0, 2) === \"fm\") {\n            this._createNewOscillator(\"fm\");\n            this._oscillator = this._oscillator;\n            this._oscillator.type = type.substr(2);\n        }\n        else if (type.substr(0, 2) === \"am\") {\n            this._createNewOscillator(\"am\");\n            this._oscillator = this._oscillator;\n            this._oscillator.type = type.substr(2);\n        }\n        else if (type.substr(0, 3) === \"fat\") {\n            this._createNewOscillator(\"fat\");\n            this._oscillator = this._oscillator;\n            this._oscillator.type = type.substr(3);\n        }\n        else if (type === \"pwm\") {\n            this._createNewOscillator(\"pwm\");\n            this._oscillator = this._oscillator;\n        }\n        else if (type === \"pulse\") {\n            this._createNewOscillator(\"pulse\");\n        }\n        else {\n            this._createNewOscillator(\"oscillator\");\n            this._oscillator = this._oscillator;\n            this._oscillator.type = type;\n        }\n    }\n    /**\n     * The value is an empty array when the type is not \"custom\".\n     * This is not available on \"pwm\" and \"pulse\" oscillator types.\n     * @see {@link Oscillator.partials}\n     */\n    get partials() {\n        return this._oscillator.partials;\n    }\n    set partials(partials) {\n        if (!this._getOscType(this._oscillator, \"pulse\") &&\n            !this._getOscType(this._oscillator, \"pwm\")) {\n            this._oscillator.partials = partials;\n        }\n    }\n    get partialCount() {\n        return this._oscillator.partialCount;\n    }\n    set partialCount(partialCount) {\n        if (!this._getOscType(this._oscillator, \"pulse\") &&\n            !this._getOscType(this._oscillator, \"pwm\")) {\n            this._oscillator.partialCount = partialCount;\n        }\n    }\n    set(props) {\n        // make sure the type is set first\n        if (Reflect.has(props, \"type\") && props.type) {\n            this.type = props.type;\n        }\n        // then set the rest\n        super.set(props);\n        return this;\n    }\n    /**\n     * connect the oscillator to the frequency and detune signals\n     */\n    _createNewOscillator(oscType) {\n        if (oscType !== this._sourceType) {\n            this._sourceType = oscType;\n            const OscConstructor = OmniOscillatorSourceMap[oscType];\n            // short delay to avoid clicks on the change\n            const now = this.now();\n            if (this._oscillator) {\n                const oldOsc = this._oscillator;\n                oldOsc.stop(now);\n                // dispose the old one\n                this.context.setTimeout(() => oldOsc.dispose(), this.blockTime);\n            }\n            this._oscillator = new OscConstructor({\n                context: this.context,\n            });\n            this.frequency.connect(this._oscillator.frequency);\n            this.detune.connect(this._oscillator.detune);\n            this._oscillator.connect(this.output);\n            this._oscillator.onstop = () => this.onstop(this);\n            if (this.state === \"started\") {\n                this._oscillator.start(now);\n            }\n        }\n    }\n    get phase() {\n        return this._oscillator.phase;\n    }\n    set phase(phase) {\n        this._oscillator.phase = phase;\n    }\n    /**\n     * The source type of the oscillator.\n     * @example\n     * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare\");\n     * console.log(omniOsc.sourceType); // 'fm'\n     */\n    get sourceType() {\n        return this._sourceType;\n    }\n    set sourceType(sType) {\n        // the basetype defaults to sine\n        let baseType = \"sine\";\n        if (this._oscillator.type !== \"pwm\" &&\n            this._oscillator.type !== \"pulse\") {\n            baseType = this._oscillator.type;\n        }\n        // set the type\n        if (sType === \"fm\") {\n            this.type = (\"fm\" + baseType);\n        }\n        else if (sType === \"am\") {\n            this.type = (\"am\" + baseType);\n        }\n        else if (sType === \"fat\") {\n            this.type = (\"fat\" + baseType);\n        }\n        else if (sType === \"oscillator\") {\n            this.type = baseType;\n        }\n        else if (sType === \"pulse\") {\n            this.type = \"pulse\";\n        }\n        else if (sType === \"pwm\") {\n            this.type = \"pwm\";\n        }\n    }\n    _getOscType(osc, sourceType) {\n        return osc instanceof OmniOscillatorSourceMap[sourceType];\n    }\n    /**\n     * The base type of the oscillator.\n     * @see {@link Oscillator.baseType}\n     * @example\n     * const omniOsc = new Tone.OmniOscillator(440, \"fmsquare4\");\n     * console.log(omniOsc.sourceType, omniOsc.baseType, omniOsc.partialCount);\n     */\n    get baseType() {\n        return this._oscillator.baseType;\n    }\n    set baseType(baseType) {\n        if (!this._getOscType(this._oscillator, \"pulse\") &&\n            !this._getOscType(this._oscillator, \"pwm\") &&\n            baseType !== \"pulse\" &&\n            baseType !== \"pwm\") {\n            this._oscillator.baseType = baseType;\n        }\n    }\n    /**\n     * The width of the oscillator when sourceType === \"pulse\".\n     * @see {@link PWMOscillator}\n     */\n    get width() {\n        if (this._getOscType(this._oscillator, \"pulse\")) {\n            return this._oscillator.width;\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * The number of detuned oscillators when sourceType === \"fat\".\n     * @see {@link FatOscillator.count}\n     */\n    get count() {\n        if (this._getOscType(this._oscillator, \"fat\")) {\n            return this._oscillator.count;\n        }\n        else {\n            return undefined;\n        }\n    }\n    set count(count) {\n        if (this._getOscType(this._oscillator, \"fat\") && isNumber(count)) {\n            this._oscillator.count = count;\n        }\n    }\n    /**\n     * The detune spread between the oscillators when sourceType === \"fat\".\n     * @see {@link FatOscillator.count}\n     */\n    get spread() {\n        if (this._getOscType(this._oscillator, \"fat\")) {\n            return this._oscillator.spread;\n        }\n        else {\n            return undefined;\n        }\n    }\n    set spread(spread) {\n        if (this._getOscType(this._oscillator, \"fat\") && isNumber(spread)) {\n            this._oscillator.spread = spread;\n        }\n    }\n    /**\n     * The type of the modulator oscillator. Only if the oscillator is set to \"am\" or \"fm\" types.\n     * @see {@link AMOscillator} or {@link FMOscillator}\n     */\n    get modulationType() {\n        if (this._getOscType(this._oscillator, \"fm\") ||\n            this._getOscType(this._oscillator, \"am\")) {\n            return this._oscillator.modulationType;\n        }\n        else {\n            return undefined;\n        }\n    }\n    set modulationType(mType) {\n        if ((this._getOscType(this._oscillator, \"fm\") ||\n            this._getOscType(this._oscillator, \"am\")) &&\n            isString(mType)) {\n            this._oscillator.modulationType = mType;\n        }\n    }\n    /**\n     * The modulation index when the sourceType === \"fm\"\n     * @see {@link FMOscillator}.\n     */\n    get modulationIndex() {\n        if (this._getOscType(this._oscillator, \"fm\")) {\n            return this._oscillator.modulationIndex;\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * Harmonicity is the frequency ratio between the carrier and the modulator oscillators.\n     * @see {@link AMOscillator} or {@link FMOscillator}\n     */\n    get harmonicity() {\n        if (this._getOscType(this._oscillator, \"fm\") ||\n            this._getOscType(this._oscillator, \"am\")) {\n            return this._oscillator.harmonicity;\n        }\n        else {\n            return undefined;\n        }\n    }\n    /**\n     * The modulationFrequency Signal of the oscillator when sourceType === \"pwm\"\n     * see {@link PWMOscillator}\n     * @min 0.1\n     * @max 5\n     */\n    get modulationFrequency() {\n        if (this._getOscType(this._oscillator, \"pwm\")) {\n            return this._oscillator.modulationFrequency;\n        }\n        else {\n            return undefined;\n        }\n    }\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            return generateWaveform(this, length);\n        });\n    }\n    dispose() {\n        super.dispose();\n        this.detune.dispose();\n        this.frequency.dispose();\n        this._oscillator.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=OmniOscillator.js.map","import { assertRange } from \"./Debug.js\";\n/**\n * Assert that the number is in the given range.\n */\nexport function range(min, max = Infinity) {\n    const valueMap = new WeakMap();\n    return function (target, propertyKey) {\n        Reflect.defineProperty(target, propertyKey, {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n                return valueMap.get(this);\n            },\n            set: function (newValue) {\n                assertRange(newValue, min, max);\n                valueMap.set(this, newValue);\n            },\n        });\n    };\n}\n/**\n * Convert the time to seconds and assert that the time is in between the two\n * values when being set.\n */\nexport function timeRange(min, max = Infinity) {\n    const valueMap = new WeakMap();\n    return function (target, propertyKey) {\n        Reflect.defineProperty(target, propertyKey, {\n            configurable: true,\n            enumerable: true,\n            get: function () {\n                return valueMap.get(this);\n            },\n            set: function (newValue) {\n                assertRange(this.toSeconds(newValue), min, max);\n                valueMap.set(this, newValue);\n            },\n        });\n    };\n}\n//# sourceMappingURL=Decorator.js.map","import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer.js\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { noOp } from \"../../core/util/Interface.js\";\nimport { isUndef } from \"../../core/util/TypeCheck.js\";\nimport { Source } from \"../Source.js\";\nimport { ToneBufferSource } from \"./ToneBufferSource.js\";\nimport { assertRange } from \"../../core/util/Debug.js\";\nimport { timeRange } from \"../../core/util/Decorator.js\";\n/**\n * Player is an audio file player with start, loop, and stop functions.\n * @example\n * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gong_1.mp3\").toDestination();\n * // play as soon as the buffer is loaded\n * player.autostart = true;\n * @category Source\n */\nexport class Player extends Source {\n    constructor() {\n        const options = optionsFromArguments(Player.getDefaults(), arguments, [\n            \"url\",\n            \"onload\",\n        ]);\n        super(options);\n        this.name = \"Player\";\n        /**\n         * All of the active buffer source nodes\n         */\n        this._activeSources = new Set();\n        this._buffer = new ToneAudioBuffer({\n            onload: this._onload.bind(this, options.onload),\n            onerror: options.onerror,\n            reverse: options.reverse,\n            url: options.url,\n        });\n        this.autostart = options.autostart;\n        this._loop = options.loop;\n        this._loopStart = options.loopStart;\n        this._loopEnd = options.loopEnd;\n        this._playbackRate = options.playbackRate;\n        this.fadeIn = options.fadeIn;\n        this.fadeOut = options.fadeOut;\n    }\n    static getDefaults() {\n        return Object.assign(Source.getDefaults(), {\n            autostart: false,\n            fadeIn: 0,\n            fadeOut: 0,\n            loop: false,\n            loopEnd: 0,\n            loopStart: 0,\n            onload: noOp,\n            onerror: noOp,\n            playbackRate: 1,\n            reverse: false,\n        });\n    }\n    /**\n     * Load the audio file as an audio buffer.\n     * Decodes the audio asynchronously and invokes\n     * the callback once the audio buffer loads.\n     * Note: this does not need to be called if a url\n     * was passed in to the constructor. Only use this\n     * if you want to manually load a new url.\n     * @param url The url of the buffer to load. Filetype support depends on the browser.\n     */\n    load(url) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this._buffer.load(url);\n            this._onload();\n            return this;\n        });\n    }\n    /**\n     * Internal callback when the buffer is loaded.\n     */\n    _onload(callback = noOp) {\n        callback();\n        if (this.autostart) {\n            this.start();\n        }\n    }\n    /**\n     * Internal callback when the buffer is done playing.\n     */\n    _onSourceEnd(source) {\n        // invoke the onstop function\n        this.onstop(this);\n        // delete the source from the active sources\n        this._activeSources.delete(source);\n        if (this._activeSources.size === 0 &&\n            !this._synced &&\n            this._state.getValueAtTime(this.now()) === \"started\") {\n            // remove the 'implicitEnd' event and replace with an explicit end\n            this._state.cancel(this.now());\n            this._state.setStateAtTime(\"stopped\", this.now());\n        }\n    }\n    /**\n     * Play the buffer at the given startTime. Optionally add an offset\n     * and/or duration which will play the buffer from a position\n     * within the buffer for the given duration.\n     *\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given, it will default to the full length of the sample (minus any offset)\n     */\n    start(time, offset, duration) {\n        super.start(time, offset, duration);\n        return this;\n    }\n    /**\n     * Internal start method\n     */\n    _start(startTime, offset, duration) {\n        // if it's a loop the default offset is the loopStart point\n        if (this._loop) {\n            offset = defaultArg(offset, this._loopStart);\n        }\n        else {\n            // otherwise the default offset is 0\n            offset = defaultArg(offset, 0);\n        }\n        // compute the values in seconds\n        const computedOffset = this.toSeconds(offset);\n        // compute the duration which is either the passed in duration of the buffer.duration - offset\n        const origDuration = duration;\n        duration = defaultArg(duration, Math.max(this._buffer.duration - computedOffset, 0));\n        let computedDuration = this.toSeconds(duration);\n        // scale it by the playback rate\n        computedDuration = computedDuration / this._playbackRate;\n        // get the start time\n        startTime = this.toSeconds(startTime);\n        // make the source\n        const source = new ToneBufferSource({\n            url: this._buffer,\n            context: this.context,\n            fadeIn: this.fadeIn,\n            fadeOut: this.fadeOut,\n            loop: this._loop,\n            loopEnd: this._loopEnd,\n            loopStart: this._loopStart,\n            onended: this._onSourceEnd.bind(this),\n            playbackRate: this._playbackRate,\n        }).connect(this.output);\n        // set the looping properties\n        if (!this._loop && !this._synced) {\n            // cancel the previous stop\n            this._state.cancel(startTime + computedDuration);\n            // if it's not looping, set the state change at the end of the sample\n            this._state.setStateAtTime(\"stopped\", startTime + computedDuration, {\n                implicitEnd: true,\n            });\n        }\n        // add it to the array of active sources\n        this._activeSources.add(source);\n        // start it\n        if (this._loop && isUndef(origDuration)) {\n            source.start(startTime, computedOffset);\n        }\n        else {\n            // subtract the fade out time\n            source.start(startTime, computedOffset, computedDuration - this.toSeconds(this.fadeOut));\n        }\n    }\n    /**\n     * Stop playback.\n     */\n    _stop(time) {\n        const computedTime = this.toSeconds(time);\n        this._activeSources.forEach((source) => source.stop(computedTime));\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n    restart(time, offset, duration) {\n        super.restart(time, offset, duration);\n        return this;\n    }\n    _restart(time, offset, duration) {\n        var _a;\n        (_a = [...this._activeSources].pop()) === null || _a === void 0 ? void 0 : _a.stop(time); // explicitly stop only the most recently created source, to avoid edge case when > 1 source exists and _stop() erroneously sets all stop times past original end offset\n        this._start(time, offset, duration);\n    }\n    /**\n     * Seek to a specific time in the player's buffer. If the\n     * source is no longer playing at that time, it will stop.\n     * @param offset The time to seek to.\n     * @param when The time for the seek event to occur.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/gurgling_theremin_1.mp3\", () => {\n     * \tplayer.start();\n     * \t// seek to the offset in 1 second from now\n     * \tplayer.seek(0.4, \"+1\");\n     * }).toDestination();\n     */\n    seek(offset, when) {\n        const computedTime = this.toSeconds(when);\n        if (this._state.getValueAtTime(computedTime) === \"started\") {\n            const computedOffset = this.toSeconds(offset);\n            // if it's currently playing, stop it\n            this._stop(computedTime);\n            // restart it at the given time\n            this._start(computedTime, computedOffset);\n        }\n        return this;\n    }\n    /**\n     * Set the loop start and end. Will only loop if loop is set to true.\n     * @param loopStart The loop start time\n     * @param loopEnd The loop end time\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/malevoices_aa2_F3.mp3\").toDestination();\n     * // loop between the given points\n     * player.setLoopPoints(0.2, 0.3);\n     * player.loop = true;\n     * player.autostart = true;\n     */\n    setLoopPoints(loopStart, loopEnd) {\n        this.loopStart = loopStart;\n        this.loopEnd = loopEnd;\n        return this;\n    }\n    /**\n     * If loop is true, the loop will start at this position.\n     */\n    get loopStart() {\n        return this._loopStart;\n    }\n    set loopStart(loopStart) {\n        this._loopStart = loopStart;\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(loopStart), 0, this.buffer.duration);\n        }\n        // get the current source\n        this._activeSources.forEach((source) => {\n            source.loopStart = loopStart;\n        });\n    }\n    /**\n     * If loop is true, the loop will end at this position.\n     */\n    get loopEnd() {\n        return this._loopEnd;\n    }\n    set loopEnd(loopEnd) {\n        this._loopEnd = loopEnd;\n        if (this.buffer.loaded) {\n            assertRange(this.toSeconds(loopEnd), 0, this.buffer.duration);\n        }\n        // get the current source\n        this._activeSources.forEach((source) => {\n            source.loopEnd = loopEnd;\n        });\n    }\n    /**\n     * The audio buffer belonging to the player.\n     */\n    get buffer() {\n        return this._buffer;\n    }\n    set buffer(buffer) {\n        this._buffer.set(buffer);\n    }\n    /**\n     * If the buffer should loop once it's over.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/drum-samples/breakbeat.mp3\").toDestination();\n     * player.loop = true;\n     * player.autostart = true;\n     */\n    get loop() {\n        return this._loop;\n    }\n    set loop(loop) {\n        // if no change, do nothing\n        if (this._loop === loop) {\n            return;\n        }\n        this._loop = loop;\n        // set the loop of all of the sources\n        this._activeSources.forEach((source) => {\n            source.loop = loop;\n        });\n        if (loop) {\n            // remove the next stopEvent\n            const stopEvent = this._state.getNextState(\"stopped\", this.now());\n            if (stopEvent) {\n                this._state.cancel(stopEvent.time);\n            }\n        }\n    }\n    /**\n     * Normal speed is 1. The pitch will change with the playback rate.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/femalevoices_aa2_A5.mp3\").toDestination();\n     * // play at 1/4 speed\n     * player.playbackRate = 0.25;\n     * // play as soon as the buffer is loaded\n     * player.autostart = true;\n     */\n    get playbackRate() {\n        return this._playbackRate;\n    }\n    set playbackRate(rate) {\n        this._playbackRate = rate;\n        const now = this.now();\n        // cancel the stop event since it's at a different time now\n        const stopEvent = this._state.getNextState(\"stopped\", now);\n        if (stopEvent && stopEvent.implicitEnd) {\n            this._state.cancel(stopEvent.time);\n            this._activeSources.forEach((source) => source.cancelStop());\n        }\n        // set all the sources\n        this._activeSources.forEach((source) => {\n            source.playbackRate.setValueAtTime(rate, now);\n        });\n    }\n    /**\n     * If the buffer should be reversed. Note that this sets the underlying {@link ToneAudioBuffer.reverse}, so\n     * if multiple players are pointing at the same ToneAudioBuffer, they will all be reversed.\n     * @example\n     * const player = new Tone.Player(\"https://tonejs.github.io/audio/berklee/chime_1.mp3\").toDestination();\n     * player.autostart = true;\n     * player.reverse = true;\n     */\n    get reverse() {\n        return this._buffer.reverse;\n    }\n    set reverse(rev) {\n        this._buffer.reverse = rev;\n    }\n    /**\n     * If the buffer is loaded\n     */\n    get loaded() {\n        return this._buffer.loaded;\n    }\n    dispose() {\n        super.dispose();\n        // disconnect all of the players\n        this._activeSources.forEach((source) => source.dispose());\n        this._activeSources.clear();\n        this._buffer.dispose();\n        return this;\n    }\n}\n__decorate([\n    timeRange(0)\n], Player.prototype, \"fadeIn\", void 0);\n__decorate([\n    timeRange(0)\n], Player.prototype, \"fadeOut\", void 0);\n//# sourceMappingURL=Player.js.map","import { __awaiter, __decorate } from \"tslib\";\nimport { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { isArray, isObject, isString } from \"../../core/util/TypeCheck.js\";\nimport { connectSignal, Signal } from \"../../signal/Signal.js\";\nimport { OfflineContext } from \"../../core/context/OfflineContext.js\";\nimport { assert } from \"../../core/util/Debug.js\";\nimport { range, timeRange } from \"../../core/util/Decorator.js\";\n/**\n * Envelope is an [ADSR](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope)\n * envelope generator. Envelope outputs a signal which\n * can be connected to an AudioParam or Tone.Signal.\n * ```\n *           /\\\n *          /  \\\n *         /    \\\n *        /      \\\n *       /        \\___________\n *      /                     \\\n *     /                       \\\n *    /                         \\\n *   /                           \\\n * ```\n * @example\n * return Tone.Offline(() => {\n * \tconst env = new Tone.Envelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 0.5,\n * \t\trelease: 0.8,\n * \t}).toDestination();\n * \tenv.triggerAttackRelease(0.5);\n * }, 1.5, 1);\n * @category Component\n */\nexport class Envelope extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Envelope.getDefaults(), arguments, [\"attack\", \"decay\", \"sustain\", \"release\"]);\n        super(options);\n        this.name = \"Envelope\";\n        /**\n         * the signal which is output.\n         */\n        this._sig = new Signal({\n            context: this.context,\n            value: 0,\n        });\n        /**\n         * The output signal of the envelope\n         */\n        this.output = this._sig;\n        /**\n         * Envelope has no input\n         */\n        this.input = undefined;\n        this.attack = options.attack;\n        this.decay = options.decay;\n        this.sustain = options.sustain;\n        this.release = options.release;\n        this.attackCurve = options.attackCurve;\n        this.releaseCurve = options.releaseCurve;\n        this.decayCurve = options.decayCurve;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            attack: 0.01,\n            attackCurve: \"linear\",\n            decay: 0.1,\n            decayCurve: \"exponential\",\n            release: 1,\n            releaseCurve: \"exponential\",\n            sustain: 0.5,\n        });\n    }\n    /**\n     * Read the current value of the envelope. Useful for\n     * synchronizing visual output to the envelope.\n     */\n    get value() {\n        return this.getValueAtTime(this.now());\n    }\n    /**\n     * Get the curve\n     * @param  curve\n     * @param  direction  In/Out\n     * @return The curve name\n     */\n    _getCurve(curve, direction) {\n        if (isString(curve)) {\n            return curve;\n        }\n        else {\n            // look up the name in the curves array\n            let curveName;\n            for (curveName in EnvelopeCurves) {\n                if (EnvelopeCurves[curveName][direction] === curve) {\n                    return curveName;\n                }\n            }\n            // return the custom curve\n            return curve;\n        }\n    }\n    /**\n     * Assign a the curve to the given name using the direction\n     * @param  name\n     * @param  direction In/Out\n     * @param  curve\n     */\n    _setCurve(name, direction, curve) {\n        // check if it's a valid type\n        if (isString(curve) && Reflect.has(EnvelopeCurves, curve)) {\n            const curveDef = EnvelopeCurves[curve];\n            if (isObject(curveDef)) {\n                if (name !== \"_decayCurve\") {\n                    this[name] = curveDef[direction];\n                }\n            }\n            else {\n                this[name] = curveDef;\n            }\n        }\n        else if (isArray(curve) && name !== \"_decayCurve\") {\n            this[name] = curve;\n        }\n        else {\n            throw new Error(\"Envelope: invalid curve: \" + curve);\n        }\n    }\n    /**\n     * The shape of the attack.\n     * Can be any of these strings:\n     * * \"linear\"\n     * * \"exponential\"\n     * * \"sine\"\n     * * \"cosine\"\n     * * \"bounce\"\n     * * \"ripple\"\n     * * \"step\"\n     *\n     * Can also be an array which describes the curve. Values\n     * in the array are evenly subdivided and linearly\n     * interpolated over the duration of the attack.\n     * @example\n     * return Tone.Offline(() => {\n     * \tconst env = new Tone.Envelope(0.4).toDestination();\n     * \tenv.attackCurve = \"linear\";\n     * \tenv.triggerAttack();\n     * }, 1, 1);\n     */\n    get attackCurve() {\n        return this._getCurve(this._attackCurve, \"In\");\n    }\n    set attackCurve(curve) {\n        this._setCurve(\"_attackCurve\", \"In\", curve);\n    }\n    /**\n     * The shape of the release. See the attack curve types.\n     * @example\n     * return Tone.Offline(() => {\n     * \tconst env = new Tone.Envelope({\n     * \t\trelease: 0.8\n     * \t}).toDestination();\n     * \tenv.triggerAttack();\n     * \t// release curve could also be defined by an array\n     * \tenv.releaseCurve = [1, 0.3, 0.4, 0.2, 0.7, 0];\n     * \tenv.triggerRelease(0.2);\n     * }, 1, 1);\n     */\n    get releaseCurve() {\n        return this._getCurve(this._releaseCurve, \"Out\");\n    }\n    set releaseCurve(curve) {\n        this._setCurve(\"_releaseCurve\", \"Out\", curve);\n    }\n    /**\n     * The shape of the decay either \"linear\" or \"exponential\"\n     * @example\n     * return Tone.Offline(() => {\n     * \tconst env = new Tone.Envelope({\n     * \t\tsustain: 0.1,\n     * \t\tdecay: 0.5\n     * \t}).toDestination();\n     * \tenv.decayCurve = \"linear\";\n     * \tenv.triggerAttack();\n     * }, 1, 1);\n     */\n    get decayCurve() {\n        return this._getCurve(this._decayCurve, \"Out\");\n    }\n    set decayCurve(curve) {\n        this._setCurve(\"_decayCurve\", \"Out\", curve);\n    }\n    /**\n     * Trigger the attack/decay portion of the ADSR envelope.\n     * @param  time When the attack should start.\n     * @param velocity The velocity of the envelope scales the vales.\n     *                             number between 0-1\n     * @example\n     * const env = new Tone.AmplitudeEnvelope().toDestination();\n     * const osc = new Tone.Oscillator().connect(env).start();\n     * // trigger the attack 0.5 seconds from now with a velocity of 0.2\n     * env.triggerAttack(\"+0.5\", 0.2);\n     */\n    triggerAttack(time, velocity = 1) {\n        this.log(\"triggerAttack\", time, velocity);\n        time = this.toSeconds(time);\n        const originalAttack = this.toSeconds(this.attack);\n        let attack = originalAttack;\n        const decay = this.toSeconds(this.decay);\n        // check if it's not a complete attack\n        const currentValue = this.getValueAtTime(time);\n        if (currentValue > 0) {\n            // subtract the current value from the attack time\n            const attackRate = 1 / attack;\n            const remainingDistance = 1 - currentValue;\n            // the attack is now the remaining time\n            attack = remainingDistance / attackRate;\n        }\n        // attack\n        if (attack < this.sampleTime) {\n            this._sig.cancelScheduledValues(time);\n            // case where the attack time is 0 should set instantly\n            this._sig.setValueAtTime(velocity, time);\n        }\n        else if (this._attackCurve === \"linear\") {\n            this._sig.linearRampTo(velocity, attack, time);\n        }\n        else if (this._attackCurve === \"exponential\") {\n            this._sig.targetRampTo(velocity, attack, time);\n        }\n        else {\n            this._sig.cancelAndHoldAtTime(time);\n            let curve = this._attackCurve;\n            // find the starting position in the curve\n            for (let i = 1; i < curve.length; i++) {\n                // the starting index is between the two values\n                if (curve[i - 1] <= currentValue && currentValue <= curve[i]) {\n                    curve = this._attackCurve.slice(i);\n                    // the first index is the current value\n                    curve[0] = currentValue;\n                    break;\n                }\n            }\n            this._sig.setValueCurveAtTime(curve, time, attack, velocity);\n        }\n        // decay\n        if (decay && this.sustain < 1) {\n            const decayValue = velocity * this.sustain;\n            const decayStart = time + attack;\n            this.log(\"decay\", decayStart);\n            if (this._decayCurve === \"linear\") {\n                this._sig.linearRampToValueAtTime(decayValue, decay + decayStart);\n            }\n            else {\n                this._sig.exponentialApproachValueAtTime(decayValue, decayStart, decay);\n            }\n        }\n        return this;\n    }\n    /**\n     * Triggers the release of the envelope.\n     * @param  time When the release portion of the envelope should start.\n     * @example\n     * const env = new Tone.AmplitudeEnvelope().toDestination();\n     * const osc = new Tone.Oscillator({\n     * \ttype: \"sawtooth\"\n     * }).connect(env).start();\n     * env.triggerAttack();\n     * // trigger the release half a second after the attack\n     * env.triggerRelease(\"+0.5\");\n     */\n    triggerRelease(time) {\n        this.log(\"triggerRelease\", time);\n        time = this.toSeconds(time);\n        const currentValue = this.getValueAtTime(time);\n        if (currentValue > 0) {\n            const release = this.toSeconds(this.release);\n            if (release < this.sampleTime) {\n                this._sig.setValueAtTime(0, time);\n            }\n            else if (this._releaseCurve === \"linear\") {\n                this._sig.linearRampTo(0, release, time);\n            }\n            else if (this._releaseCurve === \"exponential\") {\n                this._sig.targetRampTo(0, release, time);\n            }\n            else {\n                assert(isArray(this._releaseCurve), \"releaseCurve must be either 'linear', 'exponential' or an array\");\n                this._sig.cancelAndHoldAtTime(time);\n                this._sig.setValueCurveAtTime(this._releaseCurve, time, release, currentValue);\n            }\n        }\n        return this;\n    }\n    /**\n     * Get the scheduled value at the given time. This will\n     * return the unconverted (raw) value.\n     * @example\n     * const env = new Tone.Envelope(0.5, 1, 0.4, 2);\n     * env.triggerAttackRelease(2);\n     * setInterval(() => console.log(env.getValueAtTime(Tone.now())), 100);\n     */\n    getValueAtTime(time) {\n        return this._sig.getValueAtTime(time);\n    }\n    /**\n     * triggerAttackRelease is shorthand for triggerAttack, then waiting\n     * some duration, then triggerRelease.\n     * @param duration The duration of the sustain.\n     * @param time When the attack should be triggered.\n     * @param velocity The velocity of the envelope.\n     * @example\n     * const env = new Tone.AmplitudeEnvelope().toDestination();\n     * const osc = new Tone.Oscillator().connect(env).start();\n     * // trigger the release 0.5 seconds after the attack\n     * env.triggerAttackRelease(0.5);\n     */\n    triggerAttackRelease(duration, time, velocity = 1) {\n        time = this.toSeconds(time);\n        this.triggerAttack(time, velocity);\n        this.triggerRelease(time + this.toSeconds(duration));\n        return this;\n    }\n    /**\n     * Cancels all scheduled envelope changes after the given time.\n     */\n    cancel(after) {\n        this._sig.cancelScheduledValues(this.toSeconds(after));\n        return this;\n    }\n    /**\n     * Connect the envelope to a destination node.\n     */\n    connect(destination, outputNumber = 0, inputNumber = 0) {\n        connectSignal(this, destination, outputNumber, inputNumber);\n        return this;\n    }\n    /**\n     * Render the envelope curve to an array of the given length.\n     * Good for visualizing the envelope curve. Rescales the duration of the\n     * envelope to fit the length.\n     */\n    asArray() {\n        return __awaiter(this, arguments, void 0, function* (length = 1024) {\n            const duration = length / this.context.sampleRate;\n            const context = new OfflineContext(1, duration, this.context.sampleRate);\n            // normalize the ADSR for the given duration with 20% sustain time\n            const attackPortion = this.toSeconds(this.attack) + this.toSeconds(this.decay);\n            const envelopeDuration = attackPortion + this.toSeconds(this.release);\n            const sustainTime = envelopeDuration * 0.1;\n            const totalDuration = envelopeDuration + sustainTime;\n            // @ts-ignore\n            const clone = new this.constructor(Object.assign(this.get(), {\n                attack: (duration * this.toSeconds(this.attack)) / totalDuration,\n                decay: (duration * this.toSeconds(this.decay)) / totalDuration,\n                release: (duration * this.toSeconds(this.release)) / totalDuration,\n                context,\n            }));\n            clone._sig.toDestination();\n            clone.triggerAttackRelease((duration * (attackPortion + sustainTime)) / totalDuration, 0);\n            const buffer = yield context.render();\n            return buffer.getChannelData(0);\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._sig.dispose();\n        return this;\n    }\n}\n__decorate([\n    timeRange(0)\n], Envelope.prototype, \"attack\", void 0);\n__decorate([\n    timeRange(0)\n], Envelope.prototype, \"decay\", void 0);\n__decorate([\n    range(0, 1)\n], Envelope.prototype, \"sustain\", void 0);\n__decorate([\n    timeRange(0)\n], Envelope.prototype, \"release\", void 0);\n/**\n * Generate some complex envelope curves.\n */\nconst EnvelopeCurves = (() => {\n    const curveLen = 128;\n    let i;\n    let k;\n    // cosine curve\n    const cosineCurve = [];\n    for (i = 0; i < curveLen; i++) {\n        cosineCurve[i] = Math.sin((i / (curveLen - 1)) * (Math.PI / 2));\n    }\n    // ripple curve\n    const rippleCurve = [];\n    const rippleCurveFreq = 6.4;\n    for (i = 0; i < curveLen - 1; i++) {\n        k = i / (curveLen - 1);\n        const sineWave = Math.sin(k * (Math.PI * 2) * rippleCurveFreq - Math.PI / 2) + 1;\n        rippleCurve[i] = sineWave / 10 + k * 0.83;\n    }\n    rippleCurve[curveLen - 1] = 1;\n    // stairs curve\n    const stairsCurve = [];\n    const steps = 5;\n    for (i = 0; i < curveLen; i++) {\n        stairsCurve[i] = Math.ceil((i / (curveLen - 1)) * steps) / steps;\n    }\n    // in-out easing curve\n    const sineCurve = [];\n    for (i = 0; i < curveLen; i++) {\n        k = i / (curveLen - 1);\n        sineCurve[i] = 0.5 * (1 - Math.cos(Math.PI * k));\n    }\n    // a bounce curve\n    const bounceCurve = [];\n    for (i = 0; i < curveLen; i++) {\n        k = i / (curveLen - 1);\n        const freq = Math.pow(k, 3) * 4 + 0.2;\n        const val = Math.cos(freq * Math.PI * 2 * k);\n        bounceCurve[i] = Math.abs(val * (1 - k));\n    }\n    /**\n     * Invert a value curve to make it work for the release\n     */\n    function invertCurve(curve) {\n        const out = new Array(curve.length);\n        for (let j = 0; j < curve.length; j++) {\n            out[j] = 1 - curve[j];\n        }\n        return out;\n    }\n    /**\n     * reverse the curve\n     */\n    function reverseCurve(curve) {\n        return curve.slice(0).reverse();\n    }\n    /**\n     * attack and release curve arrays\n     */\n    return {\n        bounce: {\n            In: invertCurve(bounceCurve),\n            Out: bounceCurve,\n        },\n        cosine: {\n            In: cosineCurve,\n            Out: reverseCurve(cosineCurve),\n        },\n        exponential: \"exponential\",\n        linear: \"linear\",\n        ripple: {\n            In: rippleCurve,\n            Out: invertCurve(rippleCurve),\n        },\n        sine: {\n            In: sineCurve,\n            Out: invertCurve(sineCurve),\n        },\n        step: {\n            In: stairsCurve,\n            Out: invertCurve(stairsCurve),\n        },\n    };\n})();\n//# sourceMappingURL=Envelope.js.map","import { Volume } from \"../component/channel/Volume.js\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\n/**\n * Base-class for all instruments\n */\nexport class Instrument extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Instrument.getDefaults(), arguments);\n        super(options);\n        /**\n         * Keep track of all events scheduled to the transport\n         * when the instrument is 'synced'\n         */\n        this._scheduledEvents = [];\n        /**\n         * If the instrument is currently synced\n         */\n        this._synced = false;\n        this._original_triggerAttack = this.triggerAttack;\n        this._original_triggerRelease = this.triggerRelease;\n        /**\n         * The release which is scheduled to the timeline.\n         */\n        this._syncedRelease = (time) => this._original_triggerRelease(time);\n        this._volume = this.output = new Volume({\n            context: this.context,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        readOnly(this, \"volume\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            volume: 0,\n        });\n    }\n    /**\n     * Sync the instrument to the Transport. All subsequent calls of\n     * {@link triggerAttack} and {@link triggerRelease} will be scheduled along the transport.\n     * @example\n     * const fmSynth = new Tone.FMSynth().toDestination();\n     * fmSynth.volume.value = -6;\n     * fmSynth.sync();\n     * // schedule 3 notes when the transport first starts\n     * fmSynth.triggerAttackRelease(\"C4\", \"8n\", 0);\n     * fmSynth.triggerAttackRelease(\"E4\", \"8n\", \"8n\");\n     * fmSynth.triggerAttackRelease(\"G4\", \"8n\", \"4n\");\n     * // start the transport to hear the notes\n     * Tone.Transport.start();\n     */\n    sync() {\n        if (this._syncState()) {\n            this._syncMethod(\"triggerAttack\", 1);\n            this._syncMethod(\"triggerRelease\", 0);\n            this.context.transport.on(\"stop\", this._syncedRelease);\n            this.context.transport.on(\"pause\", this._syncedRelease);\n            this.context.transport.on(\"loopEnd\", this._syncedRelease);\n        }\n        return this;\n    }\n    /**\n     * set _sync\n     */\n    _syncState() {\n        let changed = false;\n        if (!this._synced) {\n            this._synced = true;\n            changed = true;\n        }\n        return changed;\n    }\n    /**\n     * Wrap the given method so that it can be synchronized\n     * @param method Which method to wrap and sync\n     * @param  timePosition What position the time argument appears in\n     */\n    _syncMethod(method, timePosition) {\n        const originalMethod = (this[\"_original_\" + method] = this[method]);\n        this[method] = (...args) => {\n            const time = args[timePosition];\n            const id = this.context.transport.schedule((t) => {\n                args[timePosition] = t;\n                originalMethod.apply(this, args);\n            }, time);\n            this._scheduledEvents.push(id);\n        };\n    }\n    /**\n     * Unsync the instrument from the Transport\n     */\n    unsync() {\n        this._scheduledEvents.forEach((id) => this.context.transport.clear(id));\n        this._scheduledEvents = [];\n        if (this._synced) {\n            this._synced = false;\n            this.triggerAttack = this._original_triggerAttack;\n            this.triggerRelease = this._original_triggerRelease;\n            this.context.transport.off(\"stop\", this._syncedRelease);\n            this.context.transport.off(\"pause\", this._syncedRelease);\n            this.context.transport.off(\"loopEnd\", this._syncedRelease);\n        }\n        return this;\n    }\n    /**\n     * Trigger the attack and then the release after the duration.\n     * @param  note     The note to trigger.\n     * @param  duration How long the note should be held for before\n     *                         triggering the release. This value must be greater than 0.\n     * @param time  When the note should be triggered.\n     * @param  velocity The velocity the note should be triggered at.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger \"C4\" for the duration of an 8th note\n     * synth.triggerAttackRelease(\"C4\", \"8n\");\n     */\n    triggerAttackRelease(note, duration, time, velocity) {\n        const computedTime = this.toSeconds(time);\n        const computedDuration = this.toSeconds(duration);\n        this.triggerAttack(note, computedTime, velocity);\n        this.triggerRelease(computedTime + computedDuration);\n        return this;\n    }\n    /**\n     * clean up\n     * @returns {Instrument} this\n     */\n    dispose() {\n        super.dispose();\n        this._volume.dispose();\n        this.unsync();\n        this._scheduledEvents = [];\n        return this;\n    }\n}\n//# sourceMappingURL=Instrument.js.map","import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { Instrument } from \"../instrument/Instrument.js\";\nimport { timeRange } from \"../core/util/Decorator.js\";\n/**\n * Abstract base class for other monophonic instruments to extend.\n */\nexport class Monophonic extends Instrument {\n    constructor() {\n        const options = optionsFromArguments(Monophonic.getDefaults(), arguments);\n        super(options);\n        this.portamento = options.portamento;\n        this.onsilence = options.onsilence;\n    }\n    static getDefaults() {\n        return Object.assign(Instrument.getDefaults(), {\n            detune: 0,\n            onsilence: noOp,\n            portamento: 0,\n        });\n    }\n    /**\n     * Trigger the attack of the note optionally with a given velocity.\n     * @param  note The note to trigger.\n     * @param  time When the note should start.\n     * @param  velocity The velocity determines how \"loud\" the note will be.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * // trigger the note a half second from now at half velocity\n     * synth.triggerAttack(\"C4\", \"+0.5\", 0.5);\n     */\n    triggerAttack(note, time, velocity = 1) {\n        this.log(\"triggerAttack\", note, time, velocity);\n        const seconds = this.toSeconds(time);\n        this._triggerEnvelopeAttack(seconds, velocity);\n        this.setNote(note, seconds);\n        return this;\n    }\n    /**\n     * Trigger the release portion of the envelope.\n     * @param  time If no time is given, the release happens immediately.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * synth.triggerAttack(\"C4\");\n     * // trigger the release a second from now\n     * synth.triggerRelease(\"+1\");\n     */\n    triggerRelease(time) {\n        this.log(\"triggerRelease\", time);\n        const seconds = this.toSeconds(time);\n        this._triggerEnvelopeRelease(seconds);\n        return this;\n    }\n    /**\n     * Set the note at the given time. If no time is given, the note\n     * will set immediately.\n     * @param note The note to change to.\n     * @param  time The time when the note should be set.\n     * @example\n     * const synth = new Tone.Synth().toDestination();\n     * synth.triggerAttack(\"C4\");\n     * // change to F#6 in one quarter note from now.\n     * synth.setNote(\"F#6\", \"+4n\");\n     */\n    setNote(note, time) {\n        const computedTime = this.toSeconds(time);\n        const computedFrequency = note instanceof FrequencyClass ? note.toFrequency() : note;\n        if (this.portamento > 0 && this.getLevelAtTime(computedTime) > 0.05) {\n            const portTime = this.toSeconds(this.portamento);\n            this.frequency.exponentialRampTo(computedFrequency, portTime, computedTime);\n        }\n        else {\n            this.frequency.setValueAtTime(computedFrequency, computedTime);\n        }\n        return this;\n    }\n}\n__decorate([\n    timeRange(0)\n], Monophonic.prototype, \"portamento\", void 0);\n//# sourceMappingURL=Monophonic.js.map","import { Gain } from \"../../core/context/Gain.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Envelope } from \"./Envelope.js\";\n/**\n * AmplitudeEnvelope is a Tone.Envelope connected to a gain node.\n * Unlike Tone.Envelope, which outputs the envelope's value, AmplitudeEnvelope accepts\n * an audio signal as the input and will apply the envelope to the amplitude\n * of the signal.\n * Read more about ADSR Envelopes on [Wikipedia](https://en.wikipedia.org/wiki/Synthesizer#ADSR_envelope).\n *\n * @example\n * return Tone.Offline(() => {\n * \tconst ampEnv = new Tone.AmplitudeEnvelope({\n * \t\tattack: 0.1,\n * \t\tdecay: 0.2,\n * \t\tsustain: 1.0,\n * \t\trelease: 0.8\n * \t}).toDestination();\n * \t// create an oscillator and connect it\n * \tconst osc = new Tone.Oscillator().connect(ampEnv).start();\n * \t// trigger the envelopes attack and release \"8t\" apart\n * \tampEnv.triggerAttackRelease(\"8t\");\n * }, 1.5, 1);\n * @category Component\n */\nexport class AmplitudeEnvelope extends Envelope {\n    constructor() {\n        super(optionsFromArguments(AmplitudeEnvelope.getDefaults(), arguments, [\n            \"attack\",\n            \"decay\",\n            \"sustain\",\n            \"release\",\n        ]));\n        this.name = \"AmplitudeEnvelope\";\n        this._gainNode = new Gain({\n            context: this.context,\n            gain: 0,\n        });\n        this.output = this._gainNode;\n        this.input = this._gainNode;\n        this._sig.connect(this._gainNode.gain);\n        this.output = this._gainNode;\n        this.input = this._gainNode;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this._gainNode.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=AmplitudeEnvelope.js.map","import { AmplitudeEnvelope } from \"../component/envelope/AmplitudeEnvelope.js\";\nimport { Envelope } from \"../component/envelope/Envelope.js\";\nimport { ToneAudioNode, } from \"../core/context/ToneAudioNode.js\";\nimport { omitFromObject, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { OmniOscillator } from \"../source/oscillator/OmniOscillator.js\";\nimport { Source } from \"../source/Source.js\";\nimport { Monophonic } from \"./Monophonic.js\";\n/**\n * Synth is composed simply of a {@link OmniOscillator} routed through an {@link AmplitudeEnvelope}.\n * ```\n * +----------------+   +-------------------+\n * | OmniOscillator +>--> AmplitudeEnvelope +>--> Output\n * +----------------+   +-------------------+\n * ```\n * @example\n * const synth = new Tone.Synth().toDestination();\n * synth.triggerAttackRelease(\"C4\", \"8n\");\n * @category Instrument\n */\nexport class Synth extends Monophonic {\n    constructor() {\n        const options = optionsFromArguments(Synth.getDefaults(), arguments);\n        super(options);\n        this.name = \"Synth\";\n        this.oscillator = new OmniOscillator(Object.assign({\n            context: this.context,\n            detune: options.detune,\n            onstop: () => this.onsilence(this),\n        }, options.oscillator));\n        this.frequency = this.oscillator.frequency;\n        this.detune = this.oscillator.detune;\n        this.envelope = new AmplitudeEnvelope(Object.assign({\n            context: this.context,\n        }, options.envelope));\n        // connect the oscillators to the output\n        this.oscillator.chain(this.envelope, this.output);\n        readOnly(this, [\"oscillator\", \"frequency\", \"detune\", \"envelope\"]);\n    }\n    static getDefaults() {\n        return Object.assign(Monophonic.getDefaults(), {\n            envelope: Object.assign(omitFromObject(Envelope.getDefaults(), Object.keys(ToneAudioNode.getDefaults())), {\n                attack: 0.005,\n                decay: 0.1,\n                release: 1,\n                sustain: 0.3,\n            }),\n            oscillator: Object.assign(omitFromObject(OmniOscillator.getDefaults(), [\n                ...Object.keys(Source.getDefaults()),\n                \"frequency\",\n                \"detune\",\n            ]), {\n                type: \"triangle\",\n            }),\n        });\n    }\n    /**\n     * start the attack portion of the envelope\n     * @param time the time the attack should start\n     * @param velocity the velocity of the note (0-1)\n     */\n    _triggerEnvelopeAttack(time, velocity) {\n        // the envelopes\n        this.envelope.triggerAttack(time, velocity);\n        this.oscillator.start(time);\n        // if there is no release portion, stop the oscillator\n        if (this.envelope.sustain === 0) {\n            const computedAttack = this.toSeconds(this.envelope.attack);\n            const computedDecay = this.toSeconds(this.envelope.decay);\n            this.oscillator.stop(time + computedAttack + computedDecay);\n        }\n    }\n    /**\n     * start the release portion of the envelope\n     * @param time the time the release should start\n     */\n    _triggerEnvelopeRelease(time) {\n        this.envelope.triggerRelease(time);\n        this.oscillator.stop(time + this.toSeconds(this.envelope.release));\n    }\n    getLevelAtTime(time) {\n        time = this.toSeconds(time);\n        return this.envelope.getValueAtTime(time);\n    }\n    /**\n     * clean up\n     */\n    dispose() {\n        super.dispose();\n        this.oscillator.dispose();\n        this.envelope.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Synth.js.map","import { __decorate } from \"tslib\";\nimport { FrequencyClass } from \"../core/type/Frequency.js\";\nimport { deepMerge, optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { readOnly } from \"../core/util/Interface.js\";\nimport { Monophonic } from \"./Monophonic.js\";\nimport { Synth } from \"./Synth.js\";\nimport { range, timeRange } from \"../core/util/Decorator.js\";\n/**\n * MembraneSynth makes kick and tom sounds using a single oscillator\n * with an amplitude envelope and frequency ramp. A Tone.OmniOscillator\n * is routed through a Tone.AmplitudeEnvelope to the output. The drum\n * quality of the sound comes from the frequency envelope applied\n * during MembraneSynth.triggerAttack(note). The frequency envelope\n * starts at <code>note * .octaves</code> and ramps to <code>note</code>\n * over the duration of <code>.pitchDecay</code>.\n * @example\n * const synth = new Tone.MembraneSynth().toDestination();\n * synth.triggerAttackRelease(\"C2\", \"8n\");\n * @category Instrument\n */\nexport class MembraneSynth extends Synth {\n    constructor() {\n        const options = optionsFromArguments(MembraneSynth.getDefaults(), arguments);\n        super(options);\n        this.name = \"MembraneSynth\";\n        /**\n         * Portamento is ignored in this synth. use pitch decay instead.\n         */\n        this.portamento = 0;\n        this.pitchDecay = options.pitchDecay;\n        this.octaves = options.octaves;\n        readOnly(this, [\"oscillator\", \"envelope\"]);\n    }\n    static getDefaults() {\n        return deepMerge(Monophonic.getDefaults(), Synth.getDefaults(), {\n            envelope: {\n                attack: 0.001,\n                attackCurve: \"exponential\",\n                decay: 0.4,\n                release: 1.4,\n                sustain: 0.01,\n            },\n            octaves: 10,\n            oscillator: {\n                type: \"sine\",\n            },\n            pitchDecay: 0.05,\n        });\n    }\n    setNote(note, time) {\n        const seconds = this.toSeconds(time);\n        const hertz = this.toFrequency(note instanceof FrequencyClass ? note.toFrequency() : note);\n        const maxNote = hertz * this.octaves;\n        this.oscillator.frequency.setValueAtTime(maxNote, seconds);\n        this.oscillator.frequency.exponentialRampToValueAtTime(hertz, seconds + this.toSeconds(this.pitchDecay));\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        return this;\n    }\n}\n__decorate([\n    range(0)\n], MembraneSynth.prototype, \"octaves\", void 0);\n__decorate([\n    timeRange(0)\n], MembraneSynth.prototype, \"pitchDecay\", void 0);\n//# sourceMappingURL=MembraneSynth.js.map","/**\n * All of the classes or functions which are loaded into the AudioWorkletGlobalScope\n */\nconst workletContext = new Set();\n/**\n * Add a class to the AudioWorkletGlobalScope\n */\nexport function addToWorklet(classOrFunction) {\n    workletContext.add(classOrFunction);\n}\n/**\n * Register a processor in the AudioWorkletGlobalScope with the given name\n */\nexport function registerProcessor(name, classDesc) {\n    const processor = /* javascript */ `registerProcessor(\"${name}\", ${classDesc})`;\n    workletContext.add(processor);\n}\n/**\n * Get all of the modules which have been registered to the AudioWorkletGlobalScope\n */\nexport function getWorkletGlobalScope() {\n    return Array.from(workletContext).join(\"\\n\");\n}\n//# sourceMappingURL=WorkletGlobalScope.js.map","import { addToWorklet } from \"./WorkletGlobalScope.js\";\nconst toneAudioWorkletProcessor = /* javascript */ `\n\t/**\n\t * The base AudioWorkletProcessor for use in Tone.js. Works with the {@link ToneAudioWorklet}. \n\t */\n\tclass ToneAudioWorkletProcessor extends AudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\t\n\t\t\tsuper(options);\n\t\t\t/**\n\t\t\t * If the processor was disposed or not. Keep alive until it's disposed.\n\t\t\t */\n\t\t\tthis.disposed = false;\n\t\t   \t/** \n\t\t\t * The number of samples in the processing block\n\t\t\t */\n\t\t\tthis.blockSize = 128;\n\t\t\t/**\n\t\t\t * the sample rate\n\t\t\t */\n\t\t\tthis.sampleRate = sampleRate;\n\n\t\t\tthis.port.onmessage = (event) => {\n\t\t\t\t// when it receives a dispose \n\t\t\t\tif (event.data === \"dispose\") {\n\t\t\t\t\tthis.disposed = true;\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t}\n`;\naddToWorklet(toneAudioWorkletProcessor);\n//# sourceMappingURL=ToneAudioWorkletProcessor.worklet.js.map","import \"./ToneAudioWorkletProcessor.worklet.js\";\nimport { addToWorklet } from \"./WorkletGlobalScope.js\";\nexport const singleIOProcess = /* javascript */ `\n\t/**\n\t * Abstract class for a single input/output processor. \n\t * has a 'generate' function which processes one sample at a time\n\t */\n\tclass SingleIOProcessor extends ToneAudioWorkletProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(Object.assign(options, {\n\t\t\t\tnumberOfInputs: 1,\n\t\t\t\tnumberOfOutputs: 1\n\t\t\t}));\n\t\t\t/**\n\t\t\t * Holds the name of the parameter and a single value of that\n\t\t\t * parameter at the current sample\n\t\t\t * @type { [name: string]: number }\n\t\t\t */\n\t\t\tthis.params = {}\n\t\t}\n\n\t\t/**\n\t\t * Generate an output sample from the input sample and parameters\n\t\t * @abstract\n\t\t * @param input number\n\t\t * @param channel number\n\t\t * @param parameters { [name: string]: number }\n\t\t * @returns number\n\t\t */\n\t\tgenerate(){}\n\n\t\t/**\n\t\t * Update the private params object with the \n\t\t * values of the parameters at the given index\n\t\t * @param parameters { [name: string]: Float32Array },\n\t\t * @param index number\n\t\t */\n\t\tupdateParams(parameters, index) {\n\t\t\tfor (const paramName in parameters) {\n\t\t\t\tconst param = parameters[paramName];\n\t\t\t\tif (param.length > 1) {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][index];\n\t\t\t\t} else {\n\t\t\t\t\tthis.params[paramName] = parameters[paramName][0];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Process a single frame of the audio\n\t\t * @param inputs Float32Array[][]\n\t\t * @param outputs Float32Array[][]\n\t\t */\n\t\tprocess(inputs, outputs, parameters) {\n\t\t\tconst input = inputs[0];\n\t\t\tconst output = outputs[0];\n\t\t\t// get the parameter values\n\t\t\tconst channelCount = Math.max(input && input.length || 0, output.length);\n\t\t\tfor (let sample = 0; sample < this.blockSize; sample++) {\n\t\t\t\tthis.updateParams(parameters, sample);\n\t\t\t\tfor (let channel = 0; channel < channelCount; channel++) {\n\t\t\t\t\tconst inputSample = input && input.length ? input[channel][sample] : 0;\n\t\t\t\t\toutput[channel][sample] = this.generate(inputSample, channel, this.params);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn !this.disposed;\n\t\t}\n\t};\n`;\naddToWorklet(singleIOProcess);\n//# sourceMappingURL=SingleIOProcessor.worklet.js.map","import { addToWorklet } from \"./WorkletGlobalScope.js\";\nconst delayLine = /* javascript */ `\n\t/**\n\t * A multichannel buffer for use within an AudioWorkletProcessor as a delay line\n\t */\n\tclass DelayLine {\n\t\t\n\t\tconstructor(size, channels) {\n\t\t\tthis.buffer = [];\n\t\t\tthis.writeHead = []\n\t\t\tthis.size = size;\n\n\t\t\t// create the empty channels\n\t\t\tfor (let i = 0; i < channels; i++) {\n\t\t\t\tthis.buffer[i] = new Float32Array(this.size);\n\t\t\t\tthis.writeHead[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Push a value onto the end\n\t\t * @param channel number\n\t\t * @param value number\n\t\t */\n\t\tpush(channel, value) {\n\t\t\tthis.writeHead[channel] += 1;\n\t\t\tif (this.writeHead[channel] > this.size) {\n\t\t\t\tthis.writeHead[channel] = 0;\n\t\t\t}\n\t\t\tthis.buffer[channel][this.writeHead[channel]] = value;\n\t\t}\n\n\t\t/**\n\t\t * Get the recorded value of the channel given the delay\n\t\t * @param channel number\n\t\t * @param delay number delay samples\n\t\t */\n\t\tget(channel, delay) {\n\t\t\tlet readHead = this.writeHead[channel] - Math.floor(delay);\n\t\t\tif (readHead < 0) {\n\t\t\t\treadHead += this.size;\n\t\t\t}\n\t\t\treturn this.buffer[channel][readHead];\n\t\t}\n\t}\n`;\naddToWorklet(delayLine);\n//# sourceMappingURL=DelayLine.worklet.js.map","import \"../../core/worklet/SingleIOProcessor.worklet.js\";\nimport \"../../core/worklet/DelayLine.worklet.js\";\nimport { registerProcessor } from \"../../core/worklet/WorkletGlobalScope.js\";\nexport const workletName = \"feedback-comb-filter\";\nconst feedbackCombFilter = /* javascript */ `\n\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\n\n\t\tconstructor(options) {\n\t\t\tsuper(options);\n\t\t\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\n\t\t}\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"delayTime\",\n\t\t\t\tdefaultValue: 0.1,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 1,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}, {\n\t\t\t\tname: \"feedback\",\n\t\t\t\tdefaultValue: 0.5,\n\t\t\t\tminValue: 0,\n\t\t\t\tmaxValue: 0.9999,\n\t\t\t\tautomationRate: \"k-rate\"\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, channel, parameters) {\n\t\t\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\n\t\t\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\n\t\t\treturn delayedSample;\n\t\t}\n\t}\n`;\nregisterProcessor(workletName, feedbackCombFilter);\n//# sourceMappingURL=FeedbackCombFilter.worklet.js.map","import { __decorate } from \"tslib\";\nimport { ToneAudioBuffers } from \"../core/context/ToneAudioBuffers.js\";\nimport { ftomf, intervalToFrequencyRatio } from \"../core/type/Conversions.js\";\nimport { FrequencyClass } from \"../core/type/Frequency.js\";\nimport { optionsFromArguments } from \"../core/util/Defaults.js\";\nimport { noOp } from \"../core/util/Interface.js\";\nimport { isArray, isNote, isNumber } from \"../core/util/TypeCheck.js\";\nimport { Instrument } from \"../instrument/Instrument.js\";\nimport { ToneBufferSource, } from \"../source/buffer/ToneBufferSource.js\";\nimport { timeRange } from \"../core/util/Decorator.js\";\nimport { assert } from \"../core/util/Debug.js\";\n/**\n * Pass in an object which maps the note's pitch or midi value to the url,\n * then you can trigger the attack and release of that note like other instruments.\n * By automatically repitching the samples, it is possible to play pitches which\n * were not explicitly included which can save loading time.\n *\n * For sample or buffer playback where repitching is not necessary,\n * use {@link Player}.\n * @example\n * const sampler = new Tone.Sampler({\n * \turls: {\n * \t\tA1: \"A1.mp3\",\n * \t\tA2: \"A2.mp3\",\n * \t},\n * \tbaseUrl: \"https://tonejs.github.io/audio/casio/\",\n * \tonload: () => {\n * \t\tsampler.triggerAttackRelease([\"C1\", \"E1\", \"G1\", \"B1\"], 0.5);\n * \t}\n * }).toDestination();\n * @category Instrument\n */\nexport class Sampler extends Instrument {\n    constructor() {\n        const options = optionsFromArguments(Sampler.getDefaults(), arguments, [\"urls\", \"onload\", \"baseUrl\"], \"urls\");\n        super(options);\n        this.name = \"Sampler\";\n        /**\n         * The object of all currently playing BufferSources\n         */\n        this._activeSources = new Map();\n        const urlMap = {};\n        Object.keys(options.urls).forEach((note) => {\n            const noteNumber = parseInt(note, 10);\n            assert(isNote(note) || (isNumber(noteNumber) && isFinite(noteNumber)), `url key is neither a note or midi pitch: ${note}`);\n            if (isNote(note)) {\n                // convert the note name to MIDI\n                const mid = new FrequencyClass(this.context, note).toMidi();\n                urlMap[mid] = options.urls[note];\n            }\n            else if (isNumber(noteNumber) && isFinite(noteNumber)) {\n                // otherwise if it's numbers assume it's midi\n                urlMap[noteNumber] = options.urls[noteNumber];\n            }\n        });\n        this._buffers = new ToneAudioBuffers({\n            urls: urlMap,\n            onload: options.onload,\n            baseUrl: options.baseUrl,\n            onerror: options.onerror,\n        });\n        this.attack = options.attack;\n        this.release = options.release;\n        this.curve = options.curve;\n        // invoke the callback if it's already loaded\n        if (this._buffers.loaded) {\n            // invoke onload deferred\n            Promise.resolve().then(options.onload);\n        }\n    }\n    static getDefaults() {\n        return Object.assign(Instrument.getDefaults(), {\n            attack: 0,\n            baseUrl: \"\",\n            curve: \"exponential\",\n            onload: noOp,\n            onerror: noOp,\n            release: 0.1,\n            urls: {},\n        });\n    }\n    /**\n     * Returns the difference in steps between the given midi note at the closets sample.\n     */\n    _findClosest(midi) {\n        // searches within 8 octaves of the given midi note\n        const MAX_INTERVAL = 96;\n        let interval = 0;\n        while (interval < MAX_INTERVAL) {\n            // check above and below\n            if (this._buffers.has(midi + interval)) {\n                return -interval;\n            }\n            else if (this._buffers.has(midi - interval)) {\n                return interval;\n            }\n            interval++;\n        }\n        throw new Error(`No available buffers for note: ${midi}`);\n    }\n    /**\n     * @param  notes\tThe note to play, or an array of notes.\n     * @param  time     When to play the note\n     * @param  velocity The velocity to play the sample back.\n     */\n    triggerAttack(notes, time, velocity = 1) {\n        this.log(\"triggerAttack\", notes, time, velocity);\n        if (!Array.isArray(notes)) {\n            notes = [notes];\n        }\n        notes.forEach((note) => {\n            const midiFloat = ftomf(new FrequencyClass(this.context, note).toFrequency());\n            const midi = Math.round(midiFloat);\n            const remainder = midiFloat - midi;\n            // find the closest note pitch\n            const difference = this._findClosest(midi);\n            const closestNote = midi - difference;\n            const buffer = this._buffers.get(closestNote);\n            const playbackRate = intervalToFrequencyRatio(difference + remainder);\n            // play that note\n            const source = new ToneBufferSource({\n                url: buffer,\n                context: this.context,\n                curve: this.curve,\n                fadeIn: this.attack,\n                fadeOut: this.release,\n                playbackRate,\n            }).connect(this.output);\n            source.start(time, 0, buffer.duration / playbackRate, velocity);\n            // add it to the active sources\n            if (!isArray(this._activeSources.get(midi))) {\n                this._activeSources.set(midi, []);\n            }\n            this._activeSources.get(midi).push(source);\n            // remove it when it's done\n            source.onended = () => {\n                if (this._activeSources && this._activeSources.has(midi)) {\n                    const sources = this._activeSources.get(midi);\n                    const index = sources.indexOf(source);\n                    if (index !== -1) {\n                        sources.splice(index, 1);\n                    }\n                }\n            };\n        });\n        return this;\n    }\n    /**\n     * @param  notes\tThe note to release, or an array of notes.\n     * @param  time     \tWhen to release the note.\n     */\n    triggerRelease(notes, time) {\n        this.log(\"triggerRelease\", notes, time);\n        if (!Array.isArray(notes)) {\n            notes = [notes];\n        }\n        notes.forEach((note) => {\n            const midi = new FrequencyClass(this.context, note).toMidi();\n            // find the note\n            if (this._activeSources.has(midi) &&\n                this._activeSources.get(midi).length) {\n                const sources = this._activeSources.get(midi);\n                time = this.toSeconds(time);\n                sources.forEach((source) => {\n                    source.stop(time);\n                });\n                this._activeSources.set(midi, []);\n            }\n        });\n        return this;\n    }\n    /**\n     * Release all currently active notes.\n     * @param  time     \tWhen to release the notes.\n     */\n    releaseAll(time) {\n        const computedTime = this.toSeconds(time);\n        this._activeSources.forEach((sources) => {\n            while (sources.length) {\n                const source = sources.shift();\n                source.stop(computedTime);\n            }\n        });\n        return this;\n    }\n    sync() {\n        if (this._syncState()) {\n            this._syncMethod(\"triggerAttack\", 1);\n            this._syncMethod(\"triggerRelease\", 1);\n        }\n        return this;\n    }\n    /**\n     * Invoke the attack phase, then after the duration, invoke the release.\n     * @param  notes\tThe note to play and release, or an array of notes.\n     * @param  duration The time the note should be held\n     * @param  time     When to start the attack\n     * @param  velocity The velocity of the attack\n     */\n    triggerAttackRelease(notes, duration, time, velocity = 1) {\n        const computedTime = this.toSeconds(time);\n        this.triggerAttack(notes, computedTime, velocity);\n        if (isArray(duration)) {\n            assert(isArray(notes), \"notes must be an array when duration is array\");\n            notes.forEach((note, index) => {\n                const d = duration[Math.min(index, duration.length - 1)];\n                this.triggerRelease(note, computedTime + this.toSeconds(d));\n            });\n        }\n        else {\n            this.triggerRelease(notes, computedTime + this.toSeconds(duration));\n        }\n        return this;\n    }\n    /**\n     * Add a note to the sampler.\n     * @param  note      The buffer's pitch.\n     * @param  url  Either the url of the buffer, or a buffer which will be added with the given name.\n     * @param  callback  The callback to invoke when the url is loaded.\n     */\n    add(note, url, callback) {\n        assert(isNote(note) || isFinite(note), `note must be a pitch or midi: ${note}`);\n        if (isNote(note)) {\n            // convert the note name to MIDI\n            const mid = new FrequencyClass(this.context, note).toMidi();\n            this._buffers.add(mid, url, callback);\n        }\n        else {\n            // otherwise if it's numbers assume it's midi\n            this._buffers.add(note, url, callback);\n        }\n        return this;\n    }\n    /**\n     * If the buffers are loaded or not\n     */\n    get loaded() {\n        return this._buffers.loaded;\n    }\n    /**\n     * Clean up\n     */\n    dispose() {\n        super.dispose();\n        this._buffers.dispose();\n        this._activeSources.forEach((sources) => {\n            sources.forEach((source) => source.dispose());\n        });\n        this._activeSources.clear();\n        return this;\n    }\n}\n__decorate([\n    timeRange(0)\n], Sampler.prototype, \"attack\", void 0);\n__decorate([\n    timeRange(0)\n], Sampler.prototype, \"release\", void 0);\n//# sourceMappingURL=Sampler.js.map","import { Param } from \"../../core/context/Param.js\";\nimport { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\n/**\n * Panner is an equal power Left/Right Panner. It is a wrapper around the StereoPannerNode.\n * @example\n * return Tone.Offline(() => {\n * // move the input signal from right to left\n * \tconst panner = new Tone.Panner(1).toDestination();\n * \tpanner.pan.rampTo(-1, 0.5);\n * \tconst osc = new Tone.Oscillator(100).connect(panner).start();\n * }, 0.5, 2);\n * @category Component\n */\nexport class Panner extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Panner.getDefaults(), arguments, [\n            \"pan\",\n        ]);\n        super(options);\n        this.name = \"Panner\";\n        /**\n         * the panner node\n         */\n        this._panner = this.context.createStereoPanner();\n        this.input = this._panner;\n        this.output = this._panner;\n        this.pan = new Param({\n            context: this.context,\n            param: this._panner.pan,\n            value: options.pan,\n            minValue: -1,\n            maxValue: 1,\n        });\n        // this is necessary for standardized-audio-context\n        // doesn't make any difference for the native AudioContext\n        // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n        this._panner.channelCount = options.channelCount;\n        this._panner.channelCountMode = \"explicit\";\n        // initial value\n        readOnly(this, \"pan\");\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            pan: 0,\n            channelCount: 1,\n        });\n    }\n    dispose() {\n        super.dispose();\n        this._panner.disconnect();\n        this.pan.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=Panner.js.map","import \"../core/worklet/SingleIOProcessor.worklet.js\";\nimport { registerProcessor } from \"../core/worklet/WorkletGlobalScope.js\";\nexport const workletName = \"bit-crusher\";\nexport const bitCrusherWorklet = /* javascript */ `\n\tclass BitCrusherWorklet extends SingleIOProcessor {\n\n\t\tstatic get parameterDescriptors() {\n\t\t\treturn [{\n\t\t\t\tname: \"bits\",\n\t\t\t\tdefaultValue: 12,\n\t\t\t\tminValue: 1,\n\t\t\t\tmaxValue: 16,\n\t\t\t\tautomationRate: 'k-rate'\n\t\t\t}];\n\t\t}\n\n\t\tgenerate(input, _channel, parameters) {\n\t\t\tconst step = Math.pow(0.5, parameters.bits - 1);\n\t\t\tconst val = step * Math.floor(input / step + 0.5);\n\t\t\treturn val;\n\t\t}\n\t}\n`;\nregisterProcessor(workletName, bitCrusherWorklet);\n//# sourceMappingURL=BitCrusher.worklet.js.map","import { Gain } from \"../../core/context/Gain.js\";\nimport { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\n/**\n * Solo lets you isolate a specific audio stream. When an instance is set to `solo=true`,\n * it will mute all other instances of Solo.\n * @example\n * const soloA = new Tone.Solo().toDestination();\n * const oscA = new Tone.Oscillator(\"C4\", \"sawtooth\").connect(soloA);\n * const soloB = new Tone.Solo().toDestination();\n * const oscB = new Tone.Oscillator(\"E4\", \"square\").connect(soloB);\n * soloA.solo = true;\n * // no audio will pass through soloB\n * @category Component\n */\nexport class Solo extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Solo.getDefaults(), arguments, [\n            \"solo\",\n        ]);\n        super(options);\n        this.name = \"Solo\";\n        this.input = this.output = new Gain({\n            context: this.context,\n        });\n        if (!Solo._allSolos.has(this.context)) {\n            Solo._allSolos.set(this.context, new Set());\n        }\n        Solo._allSolos.get(this.context).add(this);\n        // set initially\n        this.solo = options.solo;\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            solo: false,\n        });\n    }\n    /**\n     * Isolates this instance and mutes all other instances of Solo.\n     * Only one instance can be soloed at a time. A soloed\n     * instance will report `solo=false` when another instance is soloed.\n     */\n    get solo() {\n        return this._isSoloed();\n    }\n    set solo(solo) {\n        if (solo) {\n            this._addSolo();\n        }\n        else {\n            this._removeSolo();\n        }\n        Solo._allSolos.get(this.context).forEach((instance) => instance._updateSolo());\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed\n     */\n    get muted() {\n        return this.input.gain.value === 0;\n    }\n    /**\n     * Add this to the soloed array\n     */\n    _addSolo() {\n        if (!Solo._soloed.has(this.context)) {\n            Solo._soloed.set(this.context, new Set());\n        }\n        Solo._soloed.get(this.context).add(this);\n    }\n    /**\n     * Remove this from the soloed array\n     */\n    _removeSolo() {\n        if (Solo._soloed.has(this.context)) {\n            Solo._soloed.get(this.context).delete(this);\n        }\n    }\n    /**\n     * Is this on the soloed array\n     */\n    _isSoloed() {\n        return (Solo._soloed.has(this.context) &&\n            Solo._soloed.get(this.context).has(this));\n    }\n    /**\n     * Returns true if no one is soloed\n     */\n    _noSolos() {\n        // either does not have any soloed added\n        return (!Solo._soloed.has(this.context) ||\n            // or has a solo set but doesn't include any items\n            (Solo._soloed.has(this.context) &&\n                Solo._soloed.get(this.context).size === 0));\n    }\n    /**\n     * Solo the current instance and unsolo all other instances.\n     */\n    _updateSolo() {\n        if (this._isSoloed()) {\n            this.input.gain.value = 1;\n        }\n        else if (this._noSolos()) {\n            // no one is soloed\n            this.input.gain.value = 1;\n        }\n        else {\n            this.input.gain.value = 0;\n        }\n    }\n    dispose() {\n        super.dispose();\n        Solo._allSolos.get(this.context).delete(this);\n        this._removeSolo();\n        return this;\n    }\n}\n/**\n * Hold all of the solo'ed tracks belonging to a specific context\n */\nSolo._allSolos = new Map();\n/**\n * Hold the currently solo'ed instance(s)\n */\nSolo._soloed = new Map();\n//# sourceMappingURL=Solo.js.map","import { readOnly } from \"../../core/util/Interface.js\";\nimport { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Panner } from \"./Panner.js\";\nimport { Volume } from \"./Volume.js\";\n/**\n * PanVol is a Tone.Panner and Tone.Volume in one.\n * @example\n * // pan the incoming signal left and drop the volume\n * const panVol = new Tone.PanVol(-0.25, -12).toDestination();\n * const osc = new Tone.Oscillator().connect(panVol).start();\n * @category Component\n */\nexport class PanVol extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(PanVol.getDefaults(), arguments, [\n            \"pan\",\n            \"volume\",\n        ]);\n        super(options);\n        this.name = \"PanVol\";\n        this._panner = this.input = new Panner({\n            context: this.context,\n            pan: options.pan,\n            channelCount: options.channelCount,\n        });\n        this.pan = this._panner.pan;\n        this._volume = this.output = new Volume({\n            context: this.context,\n            volume: options.volume,\n        });\n        this.volume = this._volume.volume;\n        // connections\n        this._panner.connect(this._volume);\n        this.mute = options.mute;\n        readOnly(this, [\"pan\", \"volume\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            mute: false,\n            pan: 0,\n            volume: 0,\n            channelCount: 1,\n        });\n    }\n    /**\n     * Mute/unmute the volume\n     */\n    get mute() {\n        return this._volume.mute;\n    }\n    set mute(mute) {\n        this._volume.mute = mute;\n    }\n    dispose() {\n        super.dispose();\n        this._panner.dispose();\n        this.pan.dispose();\n        this._volume.dispose();\n        this.volume.dispose();\n        return this;\n    }\n}\n//# sourceMappingURL=PanVol.js.map","import { ToneAudioNode, } from \"../../core/context/ToneAudioNode.js\";\nimport { optionsFromArguments } from \"../../core/util/Defaults.js\";\nimport { Solo } from \"./Solo.js\";\nimport { PanVol } from \"./PanVol.js\";\nimport { readOnly } from \"../../core/util/Interface.js\";\nimport { Gain } from \"../../core/context/Gain.js\";\n/**\n * Channel provides a channel strip interface with volume, pan, solo and mute controls.\n * @see {@link PanVol} and {@link Solo}\n * @example\n * // pan the incoming signal left and drop the volume 12db\n * const channel = new Tone.Channel(-0.25, -12);\n * @category Component\n */\nexport class Channel extends ToneAudioNode {\n    constructor() {\n        const options = optionsFromArguments(Channel.getDefaults(), arguments, [\n            \"volume\",\n            \"pan\",\n        ]);\n        super(options);\n        this.name = \"Channel\";\n        this._solo = this.input = new Solo({\n            solo: options.solo,\n            context: this.context,\n        });\n        this._panVol = this.output = new PanVol({\n            context: this.context,\n            pan: options.pan,\n            volume: options.volume,\n            mute: options.mute,\n            channelCount: options.channelCount,\n        });\n        this.pan = this._panVol.pan;\n        this.volume = this._panVol.volume;\n        this._solo.connect(this._panVol);\n        readOnly(this, [\"pan\", \"volume\"]);\n    }\n    static getDefaults() {\n        return Object.assign(ToneAudioNode.getDefaults(), {\n            pan: 0,\n            volume: 0,\n            mute: false,\n            solo: false,\n            channelCount: 1,\n        });\n    }\n    /**\n     * Solo/unsolo the channel. Soloing is only relative to other {@link Channel}s and {@link Solo} instances\n     */\n    get solo() {\n        return this._solo.solo;\n    }\n    set solo(solo) {\n        this._solo.solo = solo;\n    }\n    /**\n     * If the current instance is muted, i.e. another instance is soloed,\n     * or the channel is muted\n     */\n    get muted() {\n        return this._solo.muted || this.mute;\n    }\n    /**\n     * Mute/unmute the volume\n     */\n    get mute() {\n        return this._panVol.mute;\n    }\n    set mute(mute) {\n        this._panVol.mute = mute;\n    }\n    /**\n     * Get the gain node belonging to the bus name. Create it if\n     * it doesn't exist\n     * @param name The bus name\n     */\n    _getBus(name) {\n        if (!Channel.buses.has(name)) {\n            Channel.buses.set(name, new Gain({ context: this.context }));\n        }\n        return Channel.buses.get(name);\n    }\n    /**\n     * Send audio to another channel using a string. `send` is a lot like\n     * {@link connect}, except it uses a string instead of an object. This can\n     * be useful in large applications to decouple sections since {@link send}\n     * and {@link receive} can be invoked separately in order to connect an object\n     * @param name The channel name to send the audio\n     * @param volume The amount of the signal to send.\n     * \tDefaults to 0db, i.e. send the entire signal\n     * @returns Returns the gain node of this connection.\n     */\n    send(name, volume = 0) {\n        const bus = this._getBus(name);\n        const sendKnob = new Gain({\n            context: this.context,\n            units: \"decibels\",\n            gain: volume,\n        });\n        this.connect(sendKnob);\n        sendKnob.connect(bus);\n        return sendKnob;\n    }\n    /**\n     * Receive audio from a channel which was connected with {@link send}.\n     * @param name The channel name to receive audio from.\n     */\n    receive(name) {\n        const bus = this._getBus(name);\n        bus.connect(this);\n        return this;\n    }\n    dispose() {\n        super.dispose();\n        this._panVol.dispose();\n        this.pan.dispose();\n        this.volume.dispose();\n        this._solo.dispose();\n        return this;\n    }\n}\n/**\n * Store the send/receive channels by name.\n */\nChannel.buses = new Map();\n//# sourceMappingURL=Channel.js.map","export { getContext, setContext } from \"./core/Global.js\";\nexport * from \"./classes.js\";\nexport * from \"./version.js\";\nimport { getContext } from \"./core/Global.js\";\nimport { ToneAudioBuffer } from \"./core/context/ToneAudioBuffer.js\";\nexport { start } from \"./core/Global.js\";\nexport { supported } from \"./core/context/AudioContext.js\";\n/**\n * The current audio context time of the global {@link BaseContext}.\n * @see {@link Context.now}\n * @category Core\n */\nexport function now() {\n    return getContext().now();\n}\n/**\n * The current audio context time of the global {@link Context} without the {@link Context.lookAhead}\n * @see {@link Context.immediate}\n * @category Core\n */\nexport function immediate() {\n    return getContext().immediate();\n}\n/**\n * The Transport object belonging to the global Tone.js Context.\n * @see {@link TransportClass}\n * @category Core\n * @deprecated Use {@link getTransport} instead\n */\nexport const Transport = getContext().transport;\n/**\n * The Transport object belonging to the global Tone.js Context.\n * @see {@link TransportClass}\n * @category Core\n */\nexport function getTransport() {\n    return getContext().transport;\n}\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * @see {@link DestinationClass}\n * @category Core\n * @deprecated Use {@link getDestination} instead\n */\nexport const Destination = getContext().destination;\n/**\n * @deprecated Use {@link getDestination} instead\n */\nexport const Master = getContext().destination;\n/**\n * The Destination (output) belonging to the global Tone.js Context.\n * @see {@link DestinationClass}\n * @category Core\n */\nexport function getDestination() {\n    return getContext().destination;\n}\n/**\n * The {@link ListenerClass} belonging to the global Tone.js Context.\n * @category Core\n * @deprecated Use {@link getListener} instead\n */\nexport const Listener = getContext().listener;\n/**\n * The {@link ListenerClass} belonging to the global Tone.js Context.\n * @category Core\n */\nexport function getListener() {\n    return getContext().listener;\n}\n/**\n * Draw is used to synchronize the draw frame with the Transport's callbacks.\n * @see {@link DrawClass}\n * @category Core\n * @deprecated Use {@link getDraw} instead\n */\nexport const Draw = getContext().draw;\n/**\n * Get the singleton attached to the global context.\n * Draw is used to synchronize the draw frame with the Transport's callbacks.\n * @see {@link DrawClass}\n * @category Core\n */\nexport function getDraw() {\n    return getContext().draw;\n}\n/**\n * A reference to the global context\n * @see {@link Context}\n * @deprecated Use {@link getContext} instead\n */\nexport const context = getContext();\n/**\n * Promise which resolves when all of the loading promises are resolved.\n * Alias for static {@link ToneAudioBuffer.loaded} method.\n * @category Core\n */\nexport function loaded() {\n    return ToneAudioBuffer.loaded();\n}\n// this fills in name changes from 13.x to 14.x\nimport { ToneAudioBuffers } from \"./core/context/ToneAudioBuffers.js\";\nimport { ToneBufferSource } from \"./source/buffer/ToneBufferSource.js\";\n/** @deprecated Use {@link ToneAudioBuffer} */\nexport const Buffer = ToneAudioBuffer;\n/** @deprecated Use {@link ToneAudioBuffers} */\nexport const Buffers = ToneAudioBuffers;\n/** @deprecated Use {@link ToneBufferSource} */\nexport const BufferSource = ToneBufferSource;\n//# sourceMappingURL=index.js.map","/**\n * PitchShifter - Piano-based pitch shifting system\n *\n * Uses Tone.js Sampler to play reference tones at different pitches\n * Integrated from pitch_app project's Salamander Piano implementation\n */\n\nimport * as Tone from 'tone';\n\nexport interface PitchShifterConfig {\n  /** Base URL for audio samples (default: local public folder) */\n  baseUrl?: string;\n  /** Release time in seconds */\n  release?: number;\n  /** Volume in dB */\n  volume?: number;\n  /** Available note range */\n  noteRange?: string[];\n}\n\nexport interface NoteInfo {\n  /** Note name (e.g., \"C4\", \"D4\") */\n  note: string;\n  /** Frequency in Hz */\n  frequency: number;\n  /** Japanese note name */\n  japaneseName: string;\n}\n\n/**\n * PitchShifter - ピッチシフトシステム\n *\n * C4.mp3音源を使用してTone.js Samplerで自動ピッチシフトを実現\n */\nexport class PitchShifter {\n  private sampler: Tone.Sampler | null = null;\n  private config: Required<PitchShifterConfig>;\n  private isInitialized: boolean = false;\n  private isPlaying: boolean = false;\n\n  /** 利用可能な音符リスト */\n  public static readonly AVAILABLE_NOTES: NoteInfo[] = [\n    { note: 'C4', frequency: 261.63, japaneseName: 'ド（低）' },\n    { note: 'C#4', frequency: 277.18, japaneseName: 'ド♯（低）' },\n    { note: 'D4', frequency: 293.66, japaneseName: 'レ（低）' },\n    { note: 'D#4', frequency: 311.13, japaneseName: 'レ♯（低）' },\n    { note: 'E4', frequency: 329.63, japaneseName: 'ミ（低）' },\n    { note: 'F4', frequency: 349.23, japaneseName: 'ファ（低）' },\n    { note: 'F#4', frequency: 369.99, japaneseName: 'ファ♯（低）' },\n    { note: 'G4', frequency: 392.00, japaneseName: 'ソ（低）' },\n    { note: 'G#4', frequency: 415.30, japaneseName: 'ソ♯（低）' },\n    { note: 'A4', frequency: 440.00, japaneseName: 'ラ（中）' },\n    { note: 'A#4', frequency: 466.16, japaneseName: 'ラ♯（中）' },\n    { note: 'B4', frequency: 493.88, japaneseName: 'シ（中）' },\n    { note: 'C5', frequency: 523.25, japaneseName: 'ド（高）' },\n    { note: 'D5', frequency: 587.33, japaneseName: 'レ（高）' },\n    { note: 'E5', frequency: 659.25, japaneseName: 'ミ（高）' }\n  ];\n\n  constructor(config: PitchShifterConfig = {}) {\n    this.config = {\n      baseUrl: config.baseUrl || '/audio/piano/',\n      release: config.release ?? 1.5,\n      volume: config.volume ?? -6,\n      noteRange: config.noteRange || PitchShifter.AVAILABLE_NOTES.map(n => n.note)\n    };\n  }\n\n  /**\n   * Initialize the PitchShifter system\n   */\n  async initialize(): Promise<void> {\n    if (this.isInitialized) {\n      console.warn('⚠️ [PitchShifter] Already initialized');\n      return;\n    }\n\n    try {\n      console.log('🎹 [PitchShifter] Initializing...');\n\n      // Start AudioContext (required for iOS/Safari)\n      if (Tone.getContext().state !== 'running') {\n        await Tone.start();\n        console.log('🔊 [PitchShifter] AudioContext started');\n      }\n\n      // Create Sampler with C4.mp3 source\n      this.sampler = new Tone.Sampler({\n        urls: {\n          'C4': 'C4.mp3'\n        },\n        baseUrl: this.config.baseUrl,\n        release: this.config.release\n      }).toDestination();\n\n      // Set volume\n      this.sampler.volume.value = this.config.volume;\n\n      // Wait for sample to load\n      console.log('📥 [PitchShifter] Loading audio sample...');\n      await Tone.loaded();\n\n      this.isInitialized = true;\n      console.log('✅ [PitchShifter] Initialization complete');\n\n    } catch (error) {\n      console.error('❌ [PitchShifter] Initialization failed:', error);\n      throw new Error(`PitchShifter initialization failed: ${error}`);\n    }\n  }\n\n  /**\n   * Play a note with the specified pitch\n   *\n   * @param note - Note name (e.g., \"C4\", \"D4\")\n   * @param duration - Duration in seconds (default: 2)\n   * @param velocity - Velocity 0-1 (default: 0.8)\n   */\n  async playNote(note: string, duration: number = 2, velocity: number = 0.8): Promise<void> {\n    if (!this.isInitialized || !this.sampler) {\n      throw new Error('PitchShifter not initialized. Call initialize() first.');\n    }\n\n    if (this.isPlaying) {\n      console.warn('⚠️ [PitchShifter] Already playing, skipping');\n      return;\n    }\n\n    try {\n      this.isPlaying = true;\n\n      // Validate note\n      const noteInfo = PitchShifter.AVAILABLE_NOTES.find(n => n.note === note);\n      if (!noteInfo) {\n        throw new Error(`Invalid note: ${note}`);\n      }\n\n      console.log(`🎵 [PitchShifter] Playing ${note} (${noteInfo.frequency.toFixed(2)}Hz) for ${duration}s`);\n\n      // Trigger attack\n      this.sampler.triggerAttack(note, undefined, velocity);\n\n      // Schedule release\n      setTimeout(() => {\n        if (this.sampler) {\n          this.sampler.triggerRelease(note);\n          console.log(`🔇 [PitchShifter] Released ${note}`);\n        }\n        this.isPlaying = false;\n      }, duration * 1000);\n\n    } catch (error) {\n      this.isPlaying = false;\n      console.error('❌ [PitchShifter] Play note failed:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * Play a random note from available range\n   *\n   * @param duration - Duration in seconds (default: 2)\n   * @returns The note info that was played\n   */\n  async playRandomNote(duration: number = 2): Promise<NoteInfo> {\n    const randomNote = PitchShifter.AVAILABLE_NOTES[\n      Math.floor(Math.random() * PitchShifter.AVAILABLE_NOTES.length)\n    ];\n\n    console.log(`🎲 [PitchShifter] Random note selected: ${randomNote.note} (${randomNote.japaneseName})`);\n\n    await this.playNote(randomNote.note, duration);\n\n    return randomNote;\n  }\n\n  /**\n   * Stop currently playing note immediately\n   */\n  stopNote(note: string): void {\n    if (!this.sampler) {\n      console.warn('⚠️ [PitchShifter] Not initialized');\n      return;\n    }\n\n    this.sampler.triggerRelease(note);\n    this.isPlaying = false;\n    console.log(`🛑 [PitchShifter] Stopped ${note}`);\n  }\n\n  /**\n   * Stop all currently playing notes\n   */\n  stopAll(): void {\n    if (!this.sampler) {\n      console.warn('⚠️ [PitchShifter] Not initialized');\n      return;\n    }\n\n    this.sampler.releaseAll();\n    this.isPlaying = false;\n    console.log('🛑 [PitchShifter] Stopped all notes');\n  }\n\n  /**\n   * Set volume in dB\n   */\n  setVolume(volumeDb: number): void {\n    if (!this.sampler) {\n      console.warn('⚠️ [PitchShifter] Not initialized');\n      return;\n    }\n\n    this.sampler.volume.value = volumeDb;\n    console.log(`🔊 [PitchShifter] Volume set to ${volumeDb}dB`);\n  }\n\n  /**\n   * Get note info by note name\n   */\n  static getNoteInfo(note: string): NoteInfo | undefined {\n    return PitchShifter.AVAILABLE_NOTES.find(n => n.note === note);\n  }\n\n  /**\n   * Get note info by frequency (finds closest match)\n   */\n  static getNoteByFrequency(frequency: number): NoteInfo {\n    let closestNote = PitchShifter.AVAILABLE_NOTES[0];\n    let minDiff = Math.abs(frequency - closestNote.frequency);\n\n    for (const noteInfo of PitchShifter.AVAILABLE_NOTES) {\n      const diff = Math.abs(frequency - noteInfo.frequency);\n      if (diff < minDiff) {\n        minDiff = diff;\n        closestNote = noteInfo;\n      }\n    }\n\n    return closestNote;\n  }\n\n  /**\n   * Check if currently playing\n   */\n  isCurrentlyPlaying(): boolean {\n    return this.isPlaying;\n  }\n\n  /**\n   * Dispose of resources\n   */\n  dispose(): void {\n    if (this.sampler) {\n      this.sampler.dispose();\n      this.sampler = null;\n    }\n\n    this.isInitialized = false;\n    this.isPlaying = false;\n    console.log('🗑️ [PitchShifter] Disposed');\n  }\n}\n","/**\n * MusicTheory - Musical theory utilities and calculations\n * \n * Provides utilities for scales, chords, intervals, and musical analysis\n * Supports various temperaments and tuning systems\n */\n\nimport type { MusicalNote, MusicalInterval } from '../types';\nimport { FrequencyUtils } from './FrequencyUtils';\n\nexport class MusicTheory {\n  // Scale patterns (in semitones from root)\n  static readonly SCALE_PATTERNS = {\n    major: [0, 2, 4, 5, 7, 9, 11],\n    naturalMinor: [0, 2, 3, 5, 7, 8, 10],\n    harmonicMinor: [0, 2, 3, 5, 7, 8, 11],\n    melodicMinor: [0, 2, 3, 5, 7, 9, 11],\n    dorian: [0, 2, 3, 5, 7, 9, 10],\n    phrygian: [0, 1, 3, 5, 7, 8, 10],\n    lydian: [0, 2, 4, 6, 7, 9, 11],\n    mixolydian: [0, 2, 4, 5, 7, 9, 10],\n    locrian: [0, 1, 3, 5, 6, 8, 10],\n    pentatonicMajor: [0, 2, 4, 7, 9],\n    pentatonicMinor: [0, 3, 5, 7, 10],\n    blues: [0, 3, 5, 6, 7, 10],\n    chromatic: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  };\n\n  // Chord patterns (in semitones from root)\n  static readonly CHORD_PATTERNS = {\n    major: [0, 4, 7],\n    minor: [0, 3, 7],\n    diminished: [0, 3, 6],\n    augmented: [0, 4, 8],\n    sus2: [0, 2, 7],\n    sus4: [0, 5, 7],\n    major7: [0, 4, 7, 11],\n    minor7: [0, 3, 7, 10],\n    dominant7: [0, 4, 7, 10],\n    majorMaj7: [0, 4, 7, 11],\n    halfDiminished7: [0, 3, 6, 10],\n    diminished7: [0, 3, 6, 9],\n    add9: [0, 4, 7, 14], // 14 = 2 + 12 (octave)\n    major9: [0, 4, 7, 11, 14],\n    minor9: [0, 3, 7, 10, 14]\n  };\n\n  // Circle of fifths\n  static readonly CIRCLE_OF_FIFTHS = [\n    'C', 'G', 'D', 'A', 'E', 'B', 'F#', 'C#', 'Ab', 'Eb', 'Bb', 'F'\n  ];\n\n  // Interval names\n  static readonly INTERVAL_NAMES = {\n    0: 'Perfect Unison',\n    1: 'Minor Second',\n    2: 'Major Second',\n    3: 'Minor Third',\n    4: 'Major Third',\n    5: 'Perfect Fourth',\n    6: 'Tritone',\n    7: 'Perfect Fifth',\n    8: 'Minor Sixth',\n    9: 'Major Sixth',\n    10: 'Minor Seventh',\n    11: 'Major Seventh',\n    12: 'Perfect Octave'\n  };\n\n  /**\n   * Generate scale from root note\n   */\n  static generateScale(\n    rootFrequency: number, \n    scaleType: keyof typeof MusicTheory.SCALE_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.SCALE_PATTERNS[scaleType];\n    if (!pattern) {\n      throw new Error(`Unknown scale type: ${scaleType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Generate chord from root note\n   */\n  static generateChord(\n    rootFrequency: number,\n    chordType: keyof typeof MusicTheory.CHORD_PATTERNS = 'major'\n  ): MusicalNote[] {\n    const pattern = MusicTheory.CHORD_PATTERNS[chordType];\n    if (!pattern) {\n      throw new Error(`Unknown chord type: ${chordType}`);\n    }\n\n    return pattern.map(semitones => {\n      const frequency = rootFrequency * Math.pow(2, semitones / 12);\n      return FrequencyUtils.frequencyToNote(frequency);\n    });\n  }\n\n  /**\n   * Identify scale from a set of frequencies\n   */\n  static identifyScale(frequencies: number[]): Array<{\n    scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n  }> {\n    if (frequencies.length < 3) {\n      return [];\n    }\n\n    // Convert frequencies to note numbers relative to the lowest note\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const baseFreq = sortedFreqs[0];\n    const intervals = sortedFreqs.map(freq => \n      Math.round(12 * Math.log2(freq / baseFreq))\n    );\n\n    const results: Array<{\n      scale: keyof typeof MusicTheory.SCALE_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n    }> = [];\n\n    // Test each scale pattern\n    Object.entries(MusicTheory.SCALE_PATTERNS).forEach(([scaleName, pattern]) => {\n      // Test each possible root\n      for (let rootOffset = 0; rootOffset < 12; rootOffset++) {\n        const adjustedPattern = pattern.map(interval => (interval + rootOffset) % 12).sort((a, b) => a - b);\n        const normalizedIntervals = intervals.map(interval => interval % 12).sort((a, b) => a - b);\n        \n        // Calculate confidence based on pattern matching\n        let matches = 0;\n        normalizedIntervals.forEach(interval => {\n          if (adjustedPattern.includes(interval)) {\n            matches++;\n          }\n        });\n\n        const confidence = matches / Math.max(normalizedIntervals.length, adjustedPattern.length);\n        \n        if (confidence > 0.5) { // Only include reasonable matches\n          const rootFreq = baseFreq * Math.pow(2, -rootOffset / 12);\n          results.push({\n            scale: scaleName as keyof typeof MusicTheory.SCALE_PATTERNS,\n            confidence,\n            root: FrequencyUtils.frequencyToNote(rootFreq)\n          });\n        }\n      }\n    });\n\n    // Sort by confidence and return top matches\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 5);\n  }\n\n  /**\n   * Identify chord from frequencies\n   */\n  static identifyChord(frequencies: number[]): Array<{\n    chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n    confidence: number;\n    root: MusicalNote;\n    inversion?: number;\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const sortedFreqs = frequencies.sort((a, b) => a - b);\n    const results: Array<{\n      chord: keyof typeof MusicTheory.CHORD_PATTERNS;\n      confidence: number;\n      root: MusicalNote;\n      inversion?: number;\n    }> = [];\n\n    // Test each chord pattern\n    Object.entries(MusicTheory.CHORD_PATTERNS).forEach(([chordName, pattern]) => {\n      // Test different inversions\n      for (let inversion = 0; inversion < pattern.length; inversion++) {\n        // Create inverted pattern\n        const invertedPattern = [\n          ...pattern.slice(inversion),\n          ...pattern.slice(0, inversion).map(interval => interval + 12)\n        ];\n\n        // Test each possible bass note as root\n        sortedFreqs.forEach((bassFreq, _bassIndex) => {\n          const intervals = sortedFreqs.map(freq => \n            Math.round(12 * Math.log2(freq / bassFreq))\n          );\n\n          // Calculate confidence\n          let matches = 0;\n          const patternSet = new Set(invertedPattern);\n          intervals.forEach(interval => {\n            const normalizedInterval = interval % 12;\n            if (patternSet.has(normalizedInterval) || patternSet.has(normalizedInterval + 12)) {\n              matches++;\n            }\n          });\n\n          const confidence = matches / Math.max(intervals.length, pattern.length);\n          \n          if (confidence > 0.6) {\n            const rootFreq = inversion === 0 ? bassFreq : \n              bassFreq * Math.pow(2, -pattern[inversion] / 12);\n            \n            results.push({\n              chord: chordName as keyof typeof MusicTheory.CHORD_PATTERNS,\n              confidence,\n              root: FrequencyUtils.frequencyToNote(rootFreq),\n              inversion: inversion > 0 ? inversion : undefined\n            });\n          }\n        });\n      }\n    });\n\n    return results\n      .sort((a, b) => b.confidence - a.confidence)\n      .slice(0, 3);\n  }\n\n  /**\n   * Get the key signature for a given key\n   */\n  static getKeySignature(key: string, mode: 'major' | 'minor' = 'major'): {\n    sharps: string[];\n    flats: string[];\n    accidentalCount: number;\n  } {\n    // Order of sharps: F# C# G# D# A# E# B#\n    const sharpOrder = ['F', 'C', 'G', 'D', 'A', 'E', 'B'];\n    // Order of flats: Bb Eb Ab Db Gb Cb Fb\n    const flatOrder = ['B', 'E', 'A', 'D', 'G', 'C', 'F'];\n    \n    // Major key signatures\n    const majorKeys = {\n      'C': { sharps: 0, flats: 0 },\n      'G': { sharps: 1, flats: 0 },\n      'D': { sharps: 2, flats: 0 },\n      'A': { sharps: 3, flats: 0 },\n      'E': { sharps: 4, flats: 0 },\n      'B': { sharps: 5, flats: 0 },\n      'F#': { sharps: 6, flats: 0 },\n      'C#': { sharps: 7, flats: 0 },\n      'F': { sharps: 0, flats: 1 },\n      'Bb': { sharps: 0, flats: 2 },\n      'Eb': { sharps: 0, flats: 3 },\n      'Ab': { sharps: 0, flats: 4 },\n      'Db': { sharps: 0, flats: 5 },\n      'Gb': { sharps: 0, flats: 6 },\n      'Cb': { sharps: 0, flats: 7 }\n    };\n\n    // Adjust for minor keys (relative minor is 3 semitones below major)\n    let keySignature = majorKeys[key as keyof typeof majorKeys];\n    \n    if (!keySignature && mode === 'minor') {\n      // Find relative major\n      const minorToMajor = {\n        'A': 'C', 'E': 'G', 'B': 'D', 'F#': 'A', 'C#': 'E', 'G#': 'B', 'D#': 'F#', 'A#': 'C#',\n        'D': 'F', 'G': 'Bb', 'C': 'Eb', 'F': 'Ab', 'Bb': 'Db', 'Eb': 'Gb', 'Ab': 'Cb'\n      };\n      \n      const relativeMajor = minorToMajor[key as keyof typeof minorToMajor];\n      if (relativeMajor) {\n        keySignature = majorKeys[relativeMajor as keyof typeof majorKeys];\n      }\n    }\n\n    if (!keySignature) {\n      return { sharps: [], flats: [], accidentalCount: 0 };\n    }\n\n    const sharps = sharpOrder.slice(0, keySignature.sharps).map(note => note + '#');\n    const flats = flatOrder.slice(0, keySignature.flats).map(note => note + 'b');\n    \n    return {\n      sharps,\n      flats,\n      accidentalCount: keySignature.sharps || keySignature.flats\n    };\n  }\n\n  /**\n   * Calculate the harmonic series for a fundamental frequency\n   */\n  static getHarmonicSeries(fundamental: number, harmonicCount: number = 16): MusicalNote[] {\n    const harmonics: MusicalNote[] = [];\n    \n    for (let i = 1; i <= harmonicCount; i++) {\n      const frequency = fundamental * i;\n      harmonics.push(FrequencyUtils.frequencyToNote(frequency));\n    }\n    \n    return harmonics;\n  }\n\n  /**\n   * Calculate just intonation ratios for common intervals\n   */\n  static getJustIntonationRatios(): { [key: string]: { ratio: number; cents: number } } {\n    return {\n      'unison': { ratio: 1/1, cents: 0 },\n      'minorSecond': { ratio: 16/15, cents: 112 },\n      'majorSecond': { ratio: 9/8, cents: 204 },\n      'minorThird': { ratio: 6/5, cents: 316 },\n      'majorThird': { ratio: 5/4, cents: 386 },\n      'perfectFourth': { ratio: 4/3, cents: 498 },\n      'tritone': { ratio: 45/32, cents: 590 },\n      'perfectFifth': { ratio: 3/2, cents: 702 },\n      'minorSixth': { ratio: 8/5, cents: 814 },\n      'majorSixth': { ratio: 5/3, cents: 884 },\n      'minorSeventh': { ratio: 16/9, cents: 996 },\n      'majorSeventh': { ratio: 15/8, cents: 1088 },\n      'octave': { ratio: 2/1, cents: 1200 }\n    };\n  }\n\n  /**\n   * Convert equal temperament interval to just intonation\n   */\n  static equalTemperamentToJustIntonation(semitones: number): {\n    ratio: number;\n    cents: number;\n    closestJustInterval?: string;\n    centsDeviation?: number;\n  } {\n    const equalTempCents = semitones * 100;\n    const justRatios = MusicTheory.getJustIntonationRatios();\n    \n    // Find closest just intonation interval\n    let closestInterval: string | undefined;\n    let smallestDeviation = Infinity;\n    \n    Object.entries(justRatios).forEach(([intervalName, { cents }]) => {\n      const deviation = Math.abs(equalTempCents - cents);\n      if (deviation < smallestDeviation) {\n        smallestDeviation = deviation;\n        closestInterval = intervalName;\n      }\n    });\n    \n    const ratio = Math.pow(2, semitones / 12);\n    \n    return {\n      ratio,\n      cents: equalTempCents,\n      closestJustInterval: closestInterval,\n      centsDeviation: closestInterval ? smallestDeviation : undefined\n    };\n  }\n\n  /**\n   * Analyze melodic intervals in a sequence of notes\n   */\n  static analyzeMelody(frequencies: number[]): Array<{\n    fromNote: MusicalNote;\n    toNote: MusicalNote;\n    interval: MusicalInterval;\n    direction: 'up' | 'down' | 'same';\n  }> {\n    if (frequencies.length < 2) {\n      return [];\n    }\n\n    const analysis: Array<{\n      fromNote: MusicalNote;\n      toNote: MusicalNote;\n      interval: MusicalInterval;\n      direction: 'up' | 'down' | 'same';\n    }> = [];\n\n    for (let i = 1; i < frequencies.length; i++) {\n      const fromFreq = frequencies[i - 1];\n      const toFreq = frequencies[i];\n      \n      const fromNote = FrequencyUtils.frequencyToNote(fromFreq);\n      const toNote = FrequencyUtils.frequencyToNote(toFreq);\n      \n      const semitones = FrequencyUtils.getSignedInterval(fromFreq, toFreq);\n      const interval = FrequencyUtils.getIntervalInfo(Math.abs(semitones));\n      \n      const direction = semitones > 0 ? 'up' : semitones < 0 ? 'down' : 'same';\n      \n      analysis.push({\n        fromNote,\n        toNote,\n        interval,\n        direction\n      });\n    }\n\n    return analysis;\n  }\n\n  /**\n   * Generate chord progressions in a given key\n   */\n  static generateChordProgression(\n    key: string, \n    mode: 'major' | 'minor' = 'major',\n    progression: number[] = [1, 4, 5, 1] // Roman numerals as scale degrees\n  ): MusicalNote[][] {\n    const rootFreq = FrequencyUtils.scientificPitchToFrequency(key + '4');\n    if (rootFreq === 0) {\n      throw new Error(`Invalid key: ${key}`);\n    }\n\n    const scale = MusicTheory.generateScale(rootFreq, mode === 'minor' ? 'naturalMinor' : 'major');\n    const chords: MusicalNote[][] = [];\n\n    progression.forEach(degree => {\n      const chordRoot = scale[(degree - 1) % scale.length];\n      const chordType = mode === 'major' \n        ? MusicTheory.getMajorScaleChordType(degree)\n        : MusicTheory.getMinorScaleChordType(degree);\n      \n      const chord = MusicTheory.generateChord(chordRoot.frequency, chordType);\n      chords.push(chord);\n    });\n\n    return chords;\n  }\n\n  /**\n   * Get chord type for scale degree in major scale\n   */\n  private static getMajorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['major', 'minor', 'minor', 'major', 'major', 'minor', 'diminished'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n\n  /**\n   * Get chord type for scale degree in minor scale\n   */\n  private static getMinorScaleChordType(degree: number): keyof typeof MusicTheory.CHORD_PATTERNS {\n    const chordTypes = ['minor', 'diminished', 'major', 'minor', 'minor', 'major', 'major'];\n    return chordTypes[(degree - 1) % 7] as keyof typeof MusicTheory.CHORD_PATTERNS;\n  }\n}","/**\n * PitchPro Audio Processing Library\n * High-precision pitch detection and audio processing for web applications\n * \n * @version 1.3.0 (自動同期)\n * @author PitchPro Team\n * @license MIT\n */\n\n// Version information\nexport { VERSION, VERSION_STRING, BUILD_TIMESTAMP } from './utils/version';\n\n// Core exports\nexport { AudioManager } from './core/AudioManager';\nexport { PitchDetector } from './core/PitchDetector';\nexport { NoiseFilter } from './core/NoiseFilter';\nexport { MicrophoneLifecycleManager } from './core/MicrophoneLifecycleManager';\nexport type { LifecycleManagerConfig } from './core/MicrophoneLifecycleManager';\nexport { MicrophoneController } from './core/MicrophoneController';\nexport type { MicrophoneControllerConfig } from './core/MicrophoneController';\nexport { ErrorNotificationSystem } from './core/ErrorNotificationSystem';\n\n// Component exports\nexport { AudioDetectionComponent } from './components/AudioDetectionComponent';\nexport type { AudioDetectionConfig, AudioDetectionCallbacks } from './components/AudioDetectionComponent';\n\n// Advanced exports\nexport { HarmonicCorrection } from './advanced/HarmonicCorrection';\nexport { VoiceAnalyzer } from './advanced/VoiceAnalyzer';\nexport { CalibrationSystem } from './advanced/CalibrationSystem';\nexport { PitchShifter } from './advanced/PitchShifter';\nexport type { PitchShifterConfig, NoteInfo } from './advanced/PitchShifter';\n\n// Utils exports\nexport { FrequencyUtils } from './utils/FrequencyUtils';\nexport { MusicTheory } from './utils/MusicTheory';\nexport { DeviceDetection } from './utils/DeviceDetection';\nexport { Logger, LogLevel, defaultLogger, debug, info, warn, error } from './utils/Logger';\nexport type { LogContext, LogEntry } from './utils/Logger';\nexport { MicrophoneHealthError } from './utils/errors';\n\n// Type exports\nexport type {\n  AudioManagerConfig,\n  PitchDetectorConfig,\n  PitchDetectionResult,\n  NoiseFilterConfig,\n  HarmonicCorrectionResult,\n  NotificationConfig,\n  MusicalNote,\n  MusicalInterval,\n  VoiceAnalysis,\n  DeviceSpecs\n} from './types';\n\n// Constants (自動注入 - package.jsonと同期)\nexport const BUILD_DATE = new Date().toISOString();\n\n// Default configurations\nexport const DEFAULT_CONFIG = {\n  pitchDetector: {\n    fftSize: 4096,\n    smoothing: 0.1,\n    clarityThreshold: 0.4,    // 現実的な値に修正\n    minVolumeAbsolute: 0.020  // 🔧 環境適応ノイズゲート: 10%閾値でマイクノイズを確実にブロック\n  },\n  audioManager: {\n    sampleRate: 44100,\n    channelCount: 1,\n    echoCancellation: false,\n    noiseSuppression: false, // 独自フィルター優先（PitchPro 3段階フィルタリング使用）\n    autoGainControl: false\n  },\n  noiseFilter: {\n    highpassFreq: 50,  // 深い男性の声に対応（G1 49Hzまで）\n    lowpassFreq: 800,\n    notchFreq: 50,     // 🔧 日本の電源周波数50Hzに合わせて電源ハムノイズを除去\n    highpassQ: 0.7,    // 個別に設定\n    lowpassQ: 0.7,     // 個別に設定\n    notchQ: 10.0       // ノッチフィルターは通常、より高いQ値を持つ\n  }\n} as const;;"],"names":["VERSION","VERSION_STRING","BUILD_TIMESTAMP","_DeviceDetection","userAgent","deviceSpecs","isIPhone","isIPad","isIPadOS","hasIOSNavigator","hasIOSPlatform","isIOS","deviceType","optimizations","screenWidth","screenHeight","maxDimension","minDimension","_isIOS","specs","baseConstraints","DeviceDetection","ErrorCode","PitchProError","message","code","context","AudioContextError","MicrophoneAccessError","MicrophoneHealthError","healthStatus","recoveryAttempts","_a","PitchDetectionError","isRecoverableError","error","ErrorMessageBuilder","friendlyMessage","technicalDetails","base","immediate","fallback","preventive","AudioManager","config","healthCheck","_b","_c","t","resolve","result","audioConstraints","audioTrack","actualConstraints","actualSettings","tracks","structuredError","id","options","fftSize","smoothingTimeConstant","minDecibels","maxDecibels","useFilters","analyser","finalNode","filterChain","highpass","lowpass","notch","expectedGain","timeout","interval","startTime","sensitivity","clampedSensitivity","actualGain","track","analyserIds","index","trackError","contextError","operation","_d","trackStates","_e","_f","_g","_h","FFT","size","table","i","angle","power","j","shift","revShift","fft","complex","storage","res","input","spectrum","half","out","data","width","step","len","outOff","bitrev","off","inv","quarterLen","limit","k","A","B","C","D","Ar","Ai","Br","Bi","Cr","Ci","Dr","Di","MAr","MAi","tableBr","tableBi","MBr","MBi","tableCr","tableCi","MCr","MCi","tableDr","tableDi","MDr","MDi","T0r","T0i","T1r","T1i","T2r","T2i","T3r","T3i","FAr","FAi","FCr","FCi","FBr","FBi","FDr","FDi","evenR","evenI","oddR","oddI","leftR","leftI","rightR","rightI","step2","step3","halfLen","hquarterLen","ST0r","ST0i","ST1r","ST1i","ST2r","ST2i","ST3r","ST3i","SFAr","SFAi","SFBr","SFBi","SA","SB","Autocorrelator","inputLength","bufferSupplier","__publicField","ceilPow2","length","output","tb","getKeyMaximumIndices","keyIndices","lookingForMaximum","max","maxIndex","refineResultIndex","x0","x1","x2","y0","y1","y2","a","b","c","xMax","yMax","PitchDetector$1","PitchDetector","threshold","volume","db","amplitude","sampleRate","keyMaximumIndices","nMax","resultIndex","refinedResultIndex","clarity","squareSum","m","v","AdaptiveFrameRateLimiter","initialFPS","now","audioManager","callbacks","filteredAnalyserId","rawAnalyserId","PitchyDetector","pitchError","frameStartTime","bufferLength","buffer","rawBuffer","sum","volumePercent","pitch","pitchResult","isValidVocalRange","finalFreq","normalizedVolume","noteInfo","frameProcessTime","frequency","h","avgFrequency","octaveUp","octaveDown","diffCurrent","diffUp","diffDown","correctedFrequency","noteNames","semitonesFromA4","noteIndex","octave","nearestSemitone","centsDeviation","currentVolume","volumeThreshold","duration","selector","element","enabled","silenceDuration","_result","NoiseFilter","audioContext","inputNode","outputNode","connectionError","params","currentTime","updateError","savedOutputNode","frequencyArray","magnitudeArray","phaseArray","highpassMagnitude","lowpassMagnitude","notchMagnitude","responseError","preset","LogLevel","Logger","level","prefix","defaultContext","listener","additionalContext","childPrefix","childContext","child","entry","errorContext","timestamp","levelStr","baseMessage","consoleMethod","defaultLogger","debug","info","warn","err","MicrophoneLifecycleManager","userConfig","target","eventName","key","resources","visibilityChangeHandler","activityHandler","unloadHandler","focusHandler","blurHandler","healthError","timeSinceActivity","detail","event","newConfig","previousAttempts","ErrorNotificationSystem","existingContainer","css","style","notification","oldestId","title","details","list","item","solution","closeButton","resource","styleElement","MicrophoneController","_i","_j","_k","state","oldSensitivity","newSensitivity","component","detector","durationMs","maxVolume","detectedFrequency","endTime","checkAudio","dataArray","maxValue","value","success","frequencyDisplay","testError","newState","oldState","type","_FrequencyUtils","midiNumber","useFlats","nearestMidi","cents","ratio","frequency1","frequency2","midi1","midi2","fromFrequency","toFrequency","semitones","intervalNames","normalizedSemitones","octaves","baseName","instrument","baseFrequency","frequencies","fundamental","maxHarmonic","harmonics","tolerance","nearestInteger","harmonicFrequency","harmonicNumber","scientificPitch","match","noteName","octaveStr","semitoneOffset","baseNote","accidental","decimalPlaces","FrequencyUtils","_AudioDetectionComponent","ms","hasUISelectors","fallbackSpecs","pitchDetectorConfig","pitchDetectorStatus","currentElement","selectors","wasUIUpdating","additionalSelectors","text","currentText","currentHTML","rawResult","processedResult","resetResult","volumeAsPercent","noiseGateThresholdPercent","volumeMultiplier","finalVolume","args","AudioDetectionComponent","HarmonicCorrection","analysis","recentFrequencies","fundamentalCandidates","bestCandidate","candidate","confidence","candidates","harmonicNum","exactHarmonic","centDeviation","likelihood","_harmonicNumber","totalConfidence","validMeasurements","freq","closestHarmonicNum","expectedFreq","avgConfidence","stabilityBonus","volumeConfidence","stabilityConfidence","lastFreq","freqRatio","cutoffTime","confidences","conf","minFreq","maxFreq","mean","variance","coefficientOfVariation","stabilityScore","VoiceQuality","VoiceAnalyzer","spectralData","stability","vibrato","breathiness","consistency","quality","recommendations","validFrequencies","deviationCents","f","smoothed","extrema","timeSpan","rate","depths","freq1","freq2","averageDepth","depth","periods","period","regularity","periodMean","p","periodVariance","fundamentalBin","noiseBins","fundamentalEnergy","val","noiseEnergy","noiseRatio","volumes","clarities","volumeConsistency","clarityConsistency","values","weights","score","windowSize","count","start","end","prev","curr","next","vol","CalibrationSystem","mediaStream","noiseProfile","volumeCalibration","frequencyResponse","optimalSettings","source","measurements","measureNoise","avgNoise","bin","measurement","volumeMeasurements","measureVolume","min","offset","rms","responseMap","measureResponse","avgResponse","freqStr","avg","baseSettings","sensitivityAdjustment","adjustedSensitivity","vocalRangeNoise","noiseGateAdjustment","adjustedNoiseGate","responseLevels","lowFreqResponse","midFreqResponse","highFreqResponse","lowAvg","midAvg","highAvg","audioProcessor","settings","calibrationKey","dataToSave","savedData","parsedData","maxAge","version","createExtendedExponentialRampToValueAutomationEvent","insertTime","createExtendedLinearRampToValueAutomationEvent","createSetValueAutomationEvent","createSetValueCurveAutomationEvent","getTargetValueAtTime","time","valueAtStartTime","timeConstant","isExponentialRampToValueAutomationEvent","automationEvent","isLinearRampToValueAutomationEvent","isAnyRampToValueAutomationEvent","isSetValueAutomationEvent","isSetValueCurveAutomationEvent","getValueOfAutomationEventAtIndexAtTime","automationEvents","defaultValue","getEndTimeAndValueOfPreviousAutomationEvent","currentAutomationEvent","nextAutomationEvent","isCancelAndHoldAutomationEvent","isCancelScheduledValuesAutomationEvent","getEventTime","getExponentialRampValueAtTime","getLinearRampValueAtTime","interpolateValue","theoreticIndex","lowerIndex","upperIndex","getValueCurveValueAtTime","isSetTargetAutomationEvent","AutomationEventList","eventTime","removedAutomationEvent","lastAutomationEvent","startValue","truncatedAutomationEvent","fraction","factor","previousAutomationEvent","persistentAutomationEvent","remainingAutomationEvents","firstRemainingAutomationEvent","indexOfNextEvent","indexOfCurrentEvent","createCancelAndHoldAutomationEvent","cancelTime","createCancelScheduledValuesAutomationEvent","createExponentialRampToValueAutomationEvent","createLinearRampToValueAutomationEvent","createSetTargetAutomationEvent","createAbortError","createAddActiveInputConnectionToAudioNode","insertElementInSet","activeInputs","eventListener","ignoreDuplicates","activeInputConnection","createAddAudioNodeConnections","audioNodeConnectionsStore","audioNode","audioNodeRenderer","nativeAudioNode","createAddAudioParamConnections","audioParamConnectionsStore","audioParam","audioParamRenderer","ACTIVE_AUDIO_NODE_STORE","AUDIO_NODE_CONNECTIONS_STORE","AUDIO_NODE_STORE","AUDIO_PARAM_CONNECTIONS_STORE","AUDIO_PARAM_STORE","CONTEXT_STORE","EVENT_LISTENERS","CYCLE_COUNTERS","NODE_NAME_TO_PROCESSOR_CONSTRUCTOR_MAPS","NODE_TO_PROCESSOR_MAPS","handler","isConstructible","constructible","proxy","IMPORT_STATEMENT_REGEX","splitImportStatements","url","importStatements","sourceWithoutImportStatements","unresolvedUrl","importStatementWithResolvedUrl","verifyParameterDescriptors","parameterDescriptors","verifyProcessorCtor","processorCtor","createAddAudioWorkletModule","cacheTestResult","createNotSupportedError","evaluateSource","exposeCurrentFrameAndCurrentTime","fetchSource","getNativeContext","getOrCreateBackupOfflineAudioContext","isNativeOfflineAudioContext","nativeAudioWorkletNodeConstructor","ongoingRequests","resolvedRequests","testAudioWorkletProcessorPostMessageSupport","window","moduleURL","resolvedRequestsOfContext","ongoingRequestsOfContext","promiseOfOngoingRequest","nativeContext","promise","absoluteUrl","wrappedSource","evaluateAudioWorkletGlobalScope","name","nodeNameToProcessorConstructorMap","isSupportingPostMessage","currentIndex","blob","backupOfflineAudioContext","nativeContextOrBackupOfflineAudioContext","updatedResolvedRequestsOfContext","updatedOngoingRequestsOfContext","getValueForKey","map","pickElementFromSet","set","predicate","matchingElements","matchingElement","deletePassiveInputConnectionToAudioNode","passiveInputs","passiveInputConnections","matchingConnection","passiveInputConnection","getEventListenersOfAudioNode","setInternalStateToActive","isAudioWorkletNode","setInternalStateToPassive","setInternalStateToPassiveWhenNecessary","connections","createAddConnectionToAudioNode","addActiveInputConnectionToAudioNode","addPassiveInputConnectionToAudioNode","connectNativeAudioNodeToNativeAudioNode","deleteActiveInputConnectionToAudioNode","disconnectNativeAudioNodeFromNativeAudioNode","getAudioNodeConnections","getAudioNodeTailTime","getNativeAudioNode","isActiveAudioNode","isPartOfACycle","isPassiveAudioNode","tailTimeTimeoutIds","destination","isOffline","outputs","eventListeners","isActive","nativeDestinationAudioNode","nativeSourceAudioNode","partialConnection","tailTime","tailTimeTimeoutId","outputConnection","createAddPassiveInputConnectionToAudioNode","createAddSilentConnection","createNativeGainNode","nativeAudioScheduledSourceNode","nativeGainNode","disconnect","createAddUnrenderedAudioWorkletNode","getUnrenderedAudioWorkletNodes","audioWorkletNode","DEFAULT_OPTIONS","createAnalyserNodeConstructor","audionNodeConstructor","createAnalyserNodeRenderer","createIndexSizeError","createNativeAnalyserNode","mergedOptions","nativeAnalyserNode","analyserNodeRenderer","array","isOwnedByContext","createAnalyserNodeRendererFactory","renderInputsOfAudioNode","renderedNativeAnalyserNodes","createAnalyserNode","nativeOfflineAudioContext","renderedNativeAnalyserNode","testAudioBufferCopyChannelMethodsOutOfBoundsSupport","nativeAudioBuffer","wrapAudioBufferGetChannelDataMethod","audioBuffer","getChannelData","channel","createAudioBufferConstructor","audioBufferStore","nativeAudioBufferConstructor","nativeOfflineAudioContextConstructor","testNativeAudioBufferConstructorSupport","wrapAudioBufferCopyChannelMethods","wrapAudioBufferCopyChannelMethodsOutOfBounds","AudioBuffer","numberOfChannels","instance","MOST_NEGATIVE_SINGLE_FLOAT","MOST_POSITIVE_SINGLE_FLOAT","createAudioBufferSourceNodeConstructor","audioNodeConstructor","createAudioBufferSourceNodeRenderer","createAudioParam","createInvalidStateError","createNativeAudioBufferSourceNode","wrapEventListener","nativeAudioBufferSourceNode","audioBufferSourceNodeRenderer","wrappedListener","nativeOnEnded","when","resetInternalStateToPassive","createAudioBufferSourceNodeRendererFactory","connectAudioParam","renderAutomation","renderedNativeAudioBufferSourceNodes","stop","createAudioBufferSourceNode","nativeAudioBufferSourceNodeIsOwnedByContext","renderedNativeAudioBufferSourceNode","isAudioBufferSourceNode","isBiquadFilterNode","isConstantSourceNode","isGainNode","isOscillatorNode","isStereoPannerNode","getAudioParamConnections","deactivateActiveAudioNodeInputConnections","trace","audioParams","audioParamConnections","deactivateAudioGraph","isValidLatencyHint","latencyHint","createAudioContextConstructor","baseAudioContextConstructor","createUnknownError","mediaElementAudioSourceNodeConstructor","mediaStreamAudioDestinationNodeConstructor","mediaStreamAudioSourceNodeConstructor","mediaStreamTrackAudioSourceNodeConstructor","nativeAudioContextConstructor","nativeAudioContext","revokeState","mediaElement","mediaStreamTrack","reject","resolvePromise","createAudioDestinationNodeConstructor","createAudioDestinationNodeRenderer","createNativeAudioDestinationNode","channelCount","nativeAudioDestinationNode","audioDestinationNodeRenderer","renderedNativeAudioDestinationNodes","createAudioDestinationNode","renderedNativeAudioDestinationNode","createAudioListenerFactory","createNativeChannelMergerNode","createNativeConstantSourceNode","createNativeScriptProcessorNode","getFirstSample","overwriteAccessors","nativeListener","createFakeAudioParams","channelMergerNode","isScriptProcessorNodeCreated","lastOrientation","lastPosition","createScriptProcessorNode","scriptProcessorNode","inputBuffer","orientation","positon","createSetOrientation","createSetPosition","createFakeAudioParam","initialValue","setValue","constantSourceNode","get","cancelAndHoldAtTime","cancelScheduledValues","exponentialRampToValueAtTime","linearRampToValueAtTime","setTargetAtTime","setValueAtTime","setValueCurveAtTime","forwardX","forwardY","forwardZ","positionX","positionY","positionZ","upX","upY","upZ","isAudioNode","audioNodeOrAudioParam","isAudioNodeOutputConnection","lmnt","addActiveInputConnectionToAudioParam","addPassiveInputConnectionToAudioParam","isNativeAudioNodeFaker","nativeAudioNodeOrNativeAudioNodeFaker","fakeNativeDestinationAudioNode","deleteActiveInputConnection","activeInputConnections","deleteActiveInputConnectionToAudioParam","deleteEventListenerOfAudioNode","deletePassiveInputConnectionToAudioParam","getNativeAudioParam","testAudioNodeDisconnectMethodSupport","analyzer","dummy","ones","channelData","chnnlDt","sample","visitEachAudioNodeOnce","cycles","visitor","counts","cycle","isNativeAudioNode","nativeAudioNodeOrAudioParam","wrapAudioNodeDisconnectMethod","connect","returnValue","connectionsToDestination","connection","destinationOrOutput","filteredConnections","addConnectionToAudioParamOfAudioContext","nativeAudioParam","deleteInputConnectionOfAudioNode","deleteInputConnectionOfAudioParam","deleteInputsOfAudioNode","deleteInputsOfAudioParam","deleteAnyConnection","audioNodeConnectionsOfSource","destinations","deleteConnectionAtOutput","deleteConnectionToDestination","createAudioNodeConstructor","addAudioNodeConnections","addConnectionToAudioNode","createIncrementCycleCounter","createInvalidAccessError","decrementCycleCounter","detectCycles","eventTargetConstructor","isNativeAudioContext","isNativeAudioParam","isPassive","createAudioParamFactory","addAudioParamConnections","audioParamAudioNodeStore","audioParamStore","createAudioParamRenderer","setValueAtTimeUntilPossible","isAudioParamOfOfflineAudioContext","minValue","automationEventList","previousLastEvent","currentLastEvent","convertedValues","firstSample","lastSample","numberOfInterpolatedValues","interpolatedValues","timeOfLastSample","ReadOnlyMap","parameters","callback","thisArg","createAudioWorkletNodeConstructor","addUnrenderedAudioWorkletNode","createAudioWorkletNodeRenderer","createNativeAudioWorkletNode","getBackupOfflineAudioContext","sanitizeAudioWorkletNodeOptions","setActiveAudioWorkletNodeInputs","testAudioWorkletNodeOptionsClonability","processorConstructor","nativeAudioWorkletNode","audioWorkletNodeRenderer","nm","nativeOnProcessorError","copyFromChannel","parent","channelNumber","bufferOffset","slicedInput","copyToChannel","createNestedArrays","x","y","arrays","getAudioWorkletProcessor","nodeToProcessorMap","processBuffer","renderedBuffer","outputChannelCount","numberOfInputChannels","numberOfOutputChannels","processedBuffer","audioNodeConnections","audioWorkletProcessor","inputs","prmtrs","potentiallyEmptyInputs","activeSourceFlag","outputChannelSplitterNodeOutput","createAudioWorkletNodeRendererFactory","connectMultipleOutputs","createNativeChannelSplitterNode","deleteUnrenderedAudioWorkletNode","disconnectMultipleOutputs","renderNativeOfflineAudioContext","renderedNativeAudioNodes","processedBufferPromise","createAudioNode","nativeOutputNodes","nativeAudioWorkletNodeIsOwnedByContext","outputChannelSplitterNode","outputChannelMergerNodes","outputGainNode","numberOfParameters","partialOfflineAudioContext","gainNodes","inputChannelSplitterNodes","constantSourceNodes","inputChannelMergerNode","gainNode","audioBufferSourceNode","outputChannelMergerNode","renderedNativeAudioWorkletNodeOrGainNode","createBaseAudioContextConstructor","addAudioWorkletModule","analyserNodeConstructor","audioBufferConstructor","audioBufferSourceNodeConstructor","biquadFilterNodeConstructor","channelMergerNodeConstructor","channelSplitterNodeConstructor","constantSourceNodeConstructor","convolverNodeConstructor","decodeAudioData","delayNodeConstructor","dynamicsCompressorNodeConstructor","gainNodeConstructor","iIRFilterNodeConstructor","minimalBaseAudioContextConstructor","oscillatorNodeConstructor","pannerNodeConstructor","periodicWaveConstructor","stereoPannerNodeConstructor","waveShaperNodeConstructor","_nativeContext","numberOfInputs","numberOfOutputs","maxDelayTime","feedforward","feedback","real","imag","constraints","audioData","successCallback","errorCallback","createBiquadFilterNodeConstructor","createBiquadFilterNodeRenderer","createNativeBiquadFilterNode","setAudioNodeTailTime","nativeBiquadFilterNode","biquadFilterNodeRenderer","frequencyHz","magResponse","phaseResponse","createBiquadFilterNodeRendererFactory","renderedNativeBiquadFilterNodes","createBiquadFilterNode","nativeBiquadFilterNodeIsOwnedByContext","renderedNativeBiquadFilterNode","createCacheTestResult","ongoingTests","testResults","tester","test","cachedTestResult","ongoingTest","synchronousTestResult","finalTestResult","createChannelMergerNodeConstructor","createChannelMergerNodeRenderer","nativeChannelMergerNode","channelMergerNodeRenderer","createChannelMergerNodeRendererFactory","renderedNativeAudioNode","createChannelSplitterNodeConstructor","createChannelSplitterNodeRenderer","sanitizeChannelSplitterOptions","nativeChannelSplitterNode","channelSplitterNodeRenderer","createChannelSplitterNodeRendererFactory","createConnectAudioParam","renderInputsOfAudioParam","createConnectMultipleOutputs","outputAudioNodes","outputAudioNode","createConnectedNativeAudioBufferSourceNodeFactory","createConstantSourceNodeConstructor","createConstantSourceNodeRendererFactory","nativeConstantSourceNode","constantSourceNodeRenderer","renderedNativeConstantSourceNodes","createConstantSourceNode","nativeConstantSourceNodeIsOwnedByContext","renderedNativeConstantSourceNode","createConvertNumberToUnsignedLong","unit32Array","createConvolverNodeConstructor","createConvolverNodeRenderer","createNativeConvolverNode","nativeConvolverNode","convolverNodeRenderer","createConvolverNodeRendererFactory","renderedNativeConvolverNodes","createConvolverNode","renderedNativeConvolverNode","createCreateNativeOfflineAudioContext","createDataCloneError","detachArrayBuffer","arrayBuffer","port1","port2","closeAndResolve","createDecodeAudioData","createEncodingError","detachedArrayBuffers","isNativeContext","testPromiseSupport","anyContext","complete","fail","createDecrementCycleCounter","cycleCounters","cycleCounter","nativeDestinationAudioParam","createDelayNodeConstructor","createDelayNodeRenderer","createNativeDelayNode","nativeDelayNode","delayNodeRenderer","createDelayNodeRendererFactory","renderedNativeDelayNodes","createDelayNode","nativeDelayNodeIsOwnedByContext","renderedNativeDelayNode","createDeleteActiveInputConnectionToAudioNode","createDeleteUnrenderedAudioWorkletNode","isDelayNode","createDetectCycles","chain","nextLink","mergedCycles","nestedCycles","getOutputAudioNodeAtIndex","createDisconnectMultipleOutputs","createDynamicsCompressorNodeConstructor","createDynamicsCompressorNodeRenderer","createNativeDynamicsCompressorNode","nativeDynamicsCompressorNode","dynamicsCompressorNodeRenderer","previousChannelCount","createDynamicsCompressorNodeRendererFactory","renderedNativeDynamicsCompressorNodes","createDynamicsCompressorNode","nativeDynamicsCompressorNodeIsOwnedByContext","renderedNativeDynamicsCompressorNode","createEvaluateSource","head","script","originalOnErrorHandler","removeErrorEventListenerAndRevokeUrl","src","lineno","colno","createEventTargetConstructor","_nativeEventTarget","wrappedEventListener","createExposeCurrentFrameAndCurrentTime","fn","createFetchSource","response","createGainNodeConstructor","createGainNodeRenderer","gainNodeRenderer","createGainNodeRendererFactory","renderedNativeGainNodes","createGainNode","nativeGainNodeIsOwnedByContext","renderedNativeGainNode","createGetActiveAudioWorkletNodeInputs","activeAudioWorkletNodeInputsStore","createGetAudioNodeRenderer","createGetAudioNodeTailTime","audioNodeTailTimeStore","createGetAudioParamRenderer","createGetBackupOfflineAudioContext","backupOfflineAudioContextStore","createGetNativeContext","contextStore","createGetOrCreateBackupOfflineAudioContext","createGetUnrenderedAudioWorkletNodes","unrenderedAudioWorkletNodeStore","unrenderedAudioWorkletNodes","wrapIIRFilterNodeGetFrequencyResponseMethod","nativeIIRFilterNode","getFrequencyResponse","createIIRFilterNodeConstructor","createNativeIIRFilterNode","createIIRFilterNodeRenderer","iirFilterNodeRenderer","filterBuffer","feedbackLength","feedforwardLength","minLength","xBuffer","yBuffer","bufferIndex","filterFullBuffer","convertedFeedback","convertedFeedforward","filteredBuffer","createIIRFilterNodeRendererFactory","filteredBufferPromise","nativeIIRFilterNodeIsOwnedByContext","createIncrementCycleCounterFactory","createIsAnyAudioContext","anything","createIsAnyAudioNode","audioNodeStore","createIsAnyAudioParam","createIsAnyOfflineAudioContext","createIsNativeAudioContext","createIsNativeAudioNode","createIsNativeAudioParam","createIsNativeContext","createIsNativeOfflineAudioContext","createIsSecureContext","createMediaElementAudioSourceNodeConstructor","createNativeMediaElementAudioSourceNode","nativeMediaElementAudioSourceNode","createMediaStreamAudioDestinationNodeConstructor","createNativeMediaStreamAudioDestinationNode","nativeMediaStreamAudioDestinationNode","createMediaStreamAudioSourceNodeConstructor","createNativeMediaStreamAudioSourceNode","nativeMediaStreamAudioSourceNode","createMediaStreamTrackAudioSourceNodeConstructor","createNativeMediaStreamTrackAudioSourceNode","nativeMediaStreamTrackAudioSourceNode","createMinimalBaseAudioContextConstructor","audioDestinationNodeConstructor","createAudioListener","nativeOnStateChange","uint32Array","createMonitorConnections","whenConnected","whenDisconnected","wasDisconnected","wasConnected","isDisconnected","assignNativeAudioNodeOption","option","assignNativeAudioNodeOptions","testAnalyserNodeGetFloatTimeDomainDataMethodSupport","wrapAnalyserNodeGetFloatTimeDomainDataMethod","byteTimeDomainData","createNativeAnalyserNodeFactory","createNativeAudioBufferConstructor","assignNativeAudioNodeAudioParamValue","wrapAudioBufferSourceNodeStartMethodConsecutiveCalls","isScheduled","wrapAudioScheduledSourceNodeStartMethodNegativeParameters","wrapAudioScheduledSourceNodeStopMethodNegativeParameters","createNativeAudioBufferSourceNodeFactory","addSilentConnection","testAudioBufferSourceNodeStartMethodConsecutiveCallsSupport","testAudioBufferSourceNodeStartMethodOffsetClampingSupport","testAudioBufferSourceNodeStopMethodNullifiedBufferSupport","testAudioScheduledSourceNodeStartMethodNegativeParametersSupport","testAudioScheduledSourceNodeStopMethodConsecutiveCallsSupport","testAudioScheduledSourceNodeStopMethodNegativeParametersSupport","wrapAudioBufferSourceNodeStartMethodOffsetClampling","wrapAudioBufferSourceNodeStopMethodNullifiedBuffer","wrapAudioScheduledSourceNodeStopMethodConsecutiveCalls","createNativeAudioContextConstructor","createNativeAudioDestinationNodeFactory","isNodeOfNativeOfflineAudioContext","createNativeAudioWorkletNodeConstructor","testClonabilityOfAudioWorkletNodeOptions","audioWorkletNodeOptions","createNativeAudioWorkletNodeFactory","createNativeAudioWorkletNodeFaker","monitorConnections","baseLatency","patchedEventListeners","onprocessorerror","addEventListener","unpatchedEventListener","patchedEventListener","removeEventListener","computeBufferSize","cloneAudioWorkletNodeOptions","createAudioWorkletProcessorPromise","clonedAudioWorkletNodeOptions","createAudioWorkletProcessor","audioWorkletProcessorPromise","createNativeAudioWorkletNodeFakerFactory","getActiveAudioWorkletNodeInputs","messageChannel","bufferSize","parameterMap","channelInterpretation","nativeAudioWorkletNodeFaker","_","onmessage","dWrkltPrcssr","disconnectOutputsGraph","activeInputIndexes","outputBuffer","isConnected","disconnectFakeGraph","connectFakeGraph","createNativeChannelMergerNodeFactory","wrapChannelMergerNode","wrapChannelSplitterNode","channelSplitterNode","createNativeConstantSourceNodeFactory","createNativeConstantSourceNodeFaker","interceptConnections","original","interceptor","createNativeConstantSourceNodeFakerFactory","audioNodeOptions","nativeConstantSourceNodeFaker","createNativeConvolverNodeFactory","createNativeDynamicsCompressorNodeFactory","createNativeIIRFilterNodeFactory","createNativeIIRFilterNodeFaker","divide","denominator","multiply","evaluatePolynomial","coefficient","z","createNativeIIRFilterNodeFakerFactory","channelCountMode","bufferIndexes","xBuffers","yBuffers","nyquist","omega","numerator","audioStreamTracks","filteredAudioStreamTracks","createNativeMediaStreamTrackAudioSourceNodeFactory","createNativeOfflineAudioContextConstructor","createNativeOscillatorNodeFactory","nativeOscillatorNode","createNativePannerNodeFactory","createNativePannerNodeFaker","nativePannerNode","createNativePannerNodeFakerFactory","createNativeWaveShaperNode","coneInnerAngle","coneOuterAngle","coneOuterGain","distanceModel","maxDistance","orientationX","orientationY","orientationZ","panningModel","refDistance","rolloffFactor","pannerNode","SINGLE_CHANNEL_OPTIONS","inputGainNode","orientationXGainNode","orientationYGainNode","orientationZGainNode","positionXGainNode","positionYGainNode","positionZGainNode","waveShaperNode","nativePannerNodeFaker","createNativePeriodicWaveFactory","disableNormalization","convertedImag","convertedReal","nativePeriodicWave","createNativeStereoPannerNodeFactory","createNativeStereoPannerNodeFaker","nativeStereoPannerNode","createNativeStereoPannerNodeFakerFactory","DC_CURVE","HALF_PI","SINGLE_CHANNEL_WAVE_SHAPER_OPTIONS","buildInternalGraphForMono","panGainNode","leftWaveShaperCurve","rightWaveShaperCurve","leftGainNode","leftWaveShaperNode","panWaveShaperNode","rightGainNode","rightWaveShaperNode","buildInternalGraphForStereo","leftInputForLeftOutputWaveShaperCurve","leftInputForRightOutputWaveShaperCurve","rightInputForLeftOutputWaveShaperCurve","rightInputForRightOutputWaveShaperCurve","centerIndex","leftInputForLeftOutputGainNode","leftInputForLeftOutputWaveShaperNode","leftInputForRightOutputGainNode","leftInputForRightOutputWaveShaperNode","rightInputForLeftOutputGainNode","rightInputForLeftOutputWaveShaperNode","rightInputForRightOutputGainNode","rightInputForRightOutputWaveShaperNode","buildInternalGraph","pan","connectGraph","disconnectGraph","nativeStereoPannerNodeFakerFactory","createNativeWaveShaperNodeFactory","createConnectedNativeAudioBufferSourceNode","createNativeWaveShaperNodeFaker","isDCCurve","nativeWaveShaperNode","curve","disconnectNativeAudioBufferSourceNode","createNativeWaveShaperNodeFakerFactory","oversample","negativeWaveShaperNode","positiveWaveShaperNode","invertGainNode","revertGainNode","unmodifiedCurve","nativeWaveShaperNodeFaker","curveLength","negativeCurve","positiveCurve","createOfflineAudioContextConstructor","createNativeOfflineAudioContext","startRendering","delayStateChangeEvent","createOscillatorNodeConstructor","createNativeOscillatorNode","createOscillatorNodeRenderer","oscillatorNodeRenderer","periodicWave","createOscillatorNodeRendererFactory","renderedNativeOscillatorNodes","createOscillatorNode","nativeOscillatorNodeIsOwnedByContext","renderedNativeOscillatorNode","createPannerNodeConstructor","createNativePannerNode","createPannerNodeRenderer","pannerNodeRenderer","createPannerNodeRendererFactory","renderedBufferPromise","commonAudioNodeOptions","commonNativePannerNodeOptions","nativePannerNodeIsOwnedByContext","nativeConstantSourceNodes","channelDatas","gateGainNode","partialPannerNode","renderedNativeGainNodeOrNativePannerNode","createPeriodicWaveConstructor","createNativePeriodicWave","periodicWaveStore","sanitizePeriodicWaveOptions","PeriodicWave","createRenderAutomation","getAudioParamRenderer","createRenderInputsOfAudioNode","getAudioNodeRenderer","allRenderingPromises","renderingPromises","createRenderInputsOfAudioParam","createRenderNativeOfflineAudioContext","testOfflineAudioContextCurrentTimeSupport","isOfflineAudioContextCurrentTimeSupported","createSetActiveAudioWorkletNodeInputs","createSetAudioNodeTailTime","createStartRendering","createStereoPannerNodeConstructor","createNativeStereoPannerNode","createStereoPannerNodeRenderer","stereoPannerNodeRenderer","createStereoPannerNodeRendererFactory","renderedNativeStereoPannerNodes","createStereoPannerNode","nativeStereoPannerNodeIsOwnedByContext","renderedNativeStereoPannerNode","createTestAudioBufferConstructorSupport","createTestAudioWorkletProcessorPostMessageSupport","offlineAudioContext","isEmittingMessageEvents","isEmittingProcessorErrorEvents","oscillator","createTestOfflineAudioContextCurrentTimeSupport","createWaveShaperNodeConstructor","createWaveShaperNodeRenderer","waveShaperNodeRenderer","createWaveShaperNodeRendererFactory","renderedNativeWaveShaperNodes","createWaveShaperNode","renderedNativeWaveShaperNode","createWindow","createWrapAudioBufferCopyChannelMethods","convertNumberToUnsignedLong","channelNumberAsNumber","bufferOffsetAsNumber","audioBufferLength","destinationLength","sourceLength","createWrapAudioBufferCopyChannelMethodsOutOfBounds","createWrapAudioBufferSourceNodeStopMethodNullifiedBuffer","nullifiedBuffer","createWrapChannelMergerNode","object","property","createGetter","createSetter","prototype","wrapAudioBufferSourceNodeStartMethodOffsetClamping","clampedOffset","disconnectGainNode","isStopped","descriptor","createConstantSourceNodeRenderer","isSecureContext","audioContextConstructor","audioWorkletNodeConstructor","offlineAudioContextConstructor","isAnyAudioContext","isAnyAudioNode","isAnyAudioParam","isAnyOfflineAudioContext","isUndef","arg","isDefined","isFunction","isNumber","isObject","isBoolean","isArray","isString","isNote","assert","statement","assertRange","gte","lte","assertContextRunning","isInsideScheduledCallback","printedScheduledWarning","enterScheduledCallback","insideCallback","assertUsedScheduleTime","log","createAudioContext","stdAudioContext","createOfflineAudioContext","channels","stdOfflineAudioContext","theWindow","hasAudioContext","createAudioWorkletNode","stdAudioWorkletNode","__decorate","decorators","desc","d","__awaiter","_arguments","P","generator","adopt","fulfilled","e","rejected","Ticker","updateInterval","contextSampleRate","blobUrl","worker","isAudioParam","isOfflineAudioContext","isAudioContext","isAudioBuffer","noCopy","deepMerge","sources","deepEquals","arrayA","arrayB","optionsFromArguments","defaults","argsArray","keys","objKey","opts","getDefaultsFromInstance","defaultArg","given","omitFromObject","obj","omit","prop","Tone","EPSILON","GT","GTE","EQ","LT","clamp","Timeline","lastValue","diff","param","after","beginning","midPoint","nextEvent","testEvent","lowerBound","upperBound","notifyNewContext","onContextInit","cb","initializeContext","ctx","notifyCloseContext","onContextClose","closeContext","Emitter","boundCallback","eventList","constr","BaseContext","Context","feedForward","stream","l","arr","constant","intervalFn","DummyContext","_numberOfChannels","_length","_sampleRate","_numberOfInputs","_numberOfOutputs","_maxDelayTime","_feedForward","_feedback","_real","_imag","_constraints","_stream","_element","_audioData","_name","_options","_url","_fn","_timeout","_id","_interval","_val","readOnly","str","writable","noOp","ToneAudioBuffer","getContext","doneLoading","isMultidimensional","multiChannelArray","chanNum","outputArray","numChannels","channelArray","ret","startSamples","endSamples","retBuffer","rev","baseUrl","extensions","extension","OfflineContext","asynchronous","yieldEvery","done","dummyContext","globalContext","setContext","disposeOld","printString","dbToGain","gainToDb","gain","intervalToFrequencyRatio","A4","getA4","setA4","ftom","ftomf","mtof","midi","TimeBaseClass","units","dot","numericValue","scalar","q","s","total","typeName","quantity","expr","matching","beats","seconds","ticks","TimeClass","capture","quantTo","subdiv","percent","subdivision","testNotations","closest","closestSeconds","notation","notationSeconds","quarterTime","quarters","measures","sixteenths","sixteenthString","FrequencyClass","noteNumber","noteToScaleIndex","intervals","scaleIndexToNote","TransportTimeClass","ToneWithContext","props","attribute","member","StateTimeline","initial","Param","computedTime","before","previous","previousVal","beforeValue","currentVal","rampTime","scaling","startingValue","segTime","valueAtTime","previousEvent","subdivisions","t0","v0","v1","t1","ToneAudioNode","node","nodeList","outputNum","inputNum","nodes","connectSeries","first","current","srcNode","dstNode","outputNumber","inputNumber","Gain","OneShotSource","fadeInTime","fadeOutTime","additionalTail","disposeCallback","ToneConstantSource","Signal","connectSignal","convert","overridden","signal","TickParam","computedValue","prevEvent","segments","rampVal","ticksUntilTime","computedVal","segmentDur","val0","val1","onTheLineEvent","currentTick","tick","delta","sol1","sol2","computedDuration","startTicks","TickSignal","TickSource","stopEvent","memoizedEvent","tmpEvent","lastState","elapsedTicks","eventToMemoize","periodStartTime","offsetEvent","elapsedSeconds","absoluteTicks","lastStateEvent","maxStartTime","ticksAtStart","nextTickTime","Clock","Volume","mute","DestinationClass","ListenerClass","ToneAudioBuffers","onerror","TicksClass","DrawClass","IntervalTimeline","IntervalNode","results","replacement","balance","temp","isLeftChild","pivotNode","allNodes","low","high","point","TimelineValue","SignalOperator","WaveShaper","mapping","normalized","oversampling","isOverSampleType","Pow","exponent","TransportEvent","transport","tickDuration","TransportRepeatEvent","TransportClass","tickTime","progress","amount","eventId","timeline","computedAfter","offsetTicks","timeSig","startPosition","endPosition","loop","remainingTick","ppq","transportPos","remainingTicks","sourceValue","scaleFactor","scaleBefore","reciprocal","scaleAfter","ratioSignal","syncedSignal","Source","sched","stateEvent","startOffset","ToneBufferSource","computedOffset","loopEnd","loopStart","loopDuration","computedDur","generateWaveform","ToneOscillatorNode","Oscillator","description","oscProps","isBasicType","cache","partials","wave","baseType","partial","fullPartials","phase","periodicWaveSize","partialCount","n","piFactor","twoPi","testPositions","AudioToGain","Multiply","AMOscillator","FMOscillator","PulseOscillator","FatOscillator","osc","iterator","spread","PWMOscillator","OmniOscillatorSourceMap","OmniOscillator","oscType","OscConstructor","oldOsc","sType","sourceType","mType","range","valueMap","propertyKey","newValue","timeRange","Player","origDuration","Envelope","direction","curveName","EnvelopeCurves","curveDef","velocity","attack","decay","currentValue","attackRate","decayValue","decayStart","release","attackPortion","envelopeDuration","sustainTime","totalDuration","clone","cosineCurve","rippleCurve","rippleCurveFreq","sineWave","stairsCurve","steps","sineCurve","bounceCurve","invertCurve","reverseCurve","Instrument","changed","method","timePosition","originalMethod","note","Monophonic","computedFrequency","portTime","AmplitudeEnvelope","Synth","computedAttack","computedDecay","MembraneSynth","hertz","maxNote","workletContext","addToWorklet","classOrFunction","registerProcessor","classDesc","processor","Sampler","urlMap","mid","notes","midiFloat","remainder","difference","closestNote","playbackRate","Panner","Solo","solo","PanVol","Channel","bus","sendKnob","loaded","_PitchShifter","Tone.getContext","Tone.start","Tone.Sampler","Tone.loaded","randomNote","volumeDb","minDiff","PitchShifter","_MusicTheory","rootFrequency","scaleType","pattern","chordType","sortedFreqs","baseFreq","scaleName","rootOffset","adjustedPattern","normalizedIntervals","matches","rootFreq","chordName","inversion","invertedPattern","bassFreq","_bassIndex","patternSet","normalizedInterval","mode","sharpOrder","flatOrder","majorKeys","keySignature","relativeMajor","sharps","flats","harmonicCount","equalTempCents","justRatios","closestInterval","smallestDeviation","intervalName","deviation","fromFreq","toFreq","fromNote","toNote","progression","scale","chords","degree","chordRoot","chord","MusicTheory","BUILD_DATE","DEFAULT_CONFIG"],"mappings":"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","x_google_ignoreList":[4,5,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366]}